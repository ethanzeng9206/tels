// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: huawei-devm.proto

package huawei

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Devm_PhysicalEntitys_PhysicalEntity_Class int32

const (
	Devm_PhysicalEntitys_PhysicalEntity_Class_OTHER       Devm_PhysicalEntitys_PhysicalEntity_Class = 0
	Devm_PhysicalEntitys_PhysicalEntity_Class_CHASSIS     Devm_PhysicalEntitys_PhysicalEntity_Class = 1
	Devm_PhysicalEntitys_PhysicalEntity_Class_MPUMODULE   Devm_PhysicalEntitys_PhysicalEntity_Class = 4
	Devm_PhysicalEntitys_PhysicalEntity_Class_LPUMODULE   Devm_PhysicalEntitys_PhysicalEntity_Class = 5
	Devm_PhysicalEntitys_PhysicalEntity_Class_SFUMODULE   Devm_PhysicalEntitys_PhysicalEntity_Class = 6
	Devm_PhysicalEntitys_PhysicalEntity_Class_CLOCKMODULE Devm_PhysicalEntitys_PhysicalEntity_Class = 7
	Devm_PhysicalEntitys_PhysicalEntity_Class_CARDMODULE  Devm_PhysicalEntitys_PhysicalEntity_Class = 9
	Devm_PhysicalEntitys_PhysicalEntity_Class_PORT        Devm_PhysicalEntitys_PhysicalEntity_Class = 10
	Devm_PhysicalEntitys_PhysicalEntity_Class_FAN         Devm_PhysicalEntitys_PhysicalEntity_Class = 16
	Devm_PhysicalEntitys_PhysicalEntity_Class_POWERSUPPLY Devm_PhysicalEntitys_PhysicalEntity_Class = 17
	Devm_PhysicalEntitys_PhysicalEntity_Class_CONTAINER   Devm_PhysicalEntitys_PhysicalEntity_Class = 18
	Devm_PhysicalEntitys_PhysicalEntity_Class_PPMODULE    Devm_PhysicalEntitys_PhysicalEntity_Class = 4108
	Devm_PhysicalEntitys_PhysicalEntity_Class_SWFMODULE   Devm_PhysicalEntitys_PhysicalEntity_Class = 4109
	Devm_PhysicalEntitys_PhysicalEntity_Class_ECUMODULE   Devm_PhysicalEntitys_PhysicalEntity_Class = 4110
	Devm_PhysicalEntitys_PhysicalEntity_Class_ICUMODULE   Devm_PhysicalEntitys_PhysicalEntity_Class = 4111
	Devm_PhysicalEntitys_PhysicalEntity_Class_LFE         Devm_PhysicalEntitys_PhysicalEntity_Class = 4162
	Devm_PhysicalEntitys_PhysicalEntity_Class_CFMODULE    Devm_PhysicalEntitys_PhysicalEntity_Class = 4170
	Devm_PhysicalEntitys_PhysicalEntity_Class_LCD         Devm_PhysicalEntitys_PhysicalEntity_Class = 4181
	Devm_PhysicalEntitys_PhysicalEntity_Class_PEM         Devm_PhysicalEntitys_PhysicalEntity_Class = 5006
	Devm_PhysicalEntitys_PhysicalEntity_Class_CMUMODULE   Devm_PhysicalEntitys_PhysicalEntity_Class = 5010
	Devm_PhysicalEntitys_PhysicalEntity_Class_PIC         Devm_PhysicalEntitys_PhysicalEntity_Class = 5011
	Devm_PhysicalEntitys_PhysicalEntity_Class_TSU         Devm_PhysicalEntitys_PhysicalEntity_Class = 5012
	Devm_PhysicalEntitys_PhysicalEntity_Class_PMU         Devm_PhysicalEntitys_PhysicalEntity_Class = 5031
	Devm_PhysicalEntitys_PhysicalEntity_Class_PM          Devm_PhysicalEntitys_PhysicalEntity_Class = 5032
)

// Enum value maps for Devm_PhysicalEntitys_PhysicalEntity_Class.
var (
	Devm_PhysicalEntitys_PhysicalEntity_Class_name = map[int32]string{
		0:    "Class_OTHER",
		1:    "Class_CHASSIS",
		4:    "Class_MPUMODULE",
		5:    "Class_LPUMODULE",
		6:    "Class_SFUMODULE",
		7:    "Class_CLOCKMODULE",
		9:    "Class_CARDMODULE",
		10:   "Class_PORT",
		16:   "Class_FAN",
		17:   "Class_POWERSUPPLY",
		18:   "Class_CONTAINER",
		4108: "Class_PPMODULE",
		4109: "Class_SWFMODULE",
		4110: "Class_ECUMODULE",
		4111: "Class_ICUMODULE",
		4162: "Class_LFE",
		4170: "Class_CFMODULE",
		4181: "Class_LCD",
		5006: "Class_PEM",
		5010: "Class_CMUMODULE",
		5011: "Class_PIC",
		5012: "Class_TSU",
		5031: "Class_PMU",
		5032: "Class_PM",
	}
	Devm_PhysicalEntitys_PhysicalEntity_Class_value = map[string]int32{
		"Class_OTHER":       0,
		"Class_CHASSIS":     1,
		"Class_MPUMODULE":   4,
		"Class_LPUMODULE":   5,
		"Class_SFUMODULE":   6,
		"Class_CLOCKMODULE": 7,
		"Class_CARDMODULE":  9,
		"Class_PORT":        10,
		"Class_FAN":         16,
		"Class_POWERSUPPLY": 17,
		"Class_CONTAINER":   18,
		"Class_PPMODULE":    4108,
		"Class_SWFMODULE":   4109,
		"Class_ECUMODULE":   4110,
		"Class_ICUMODULE":   4111,
		"Class_LFE":         4162,
		"Class_CFMODULE":    4170,
		"Class_LCD":         4181,
		"Class_PEM":         5006,
		"Class_CMUMODULE":   5010,
		"Class_PIC":         5011,
		"Class_TSU":         5012,
		"Class_PMU":         5031,
		"Class_PM":          5032,
	}
)

func (x Devm_PhysicalEntitys_PhysicalEntity_Class) Enum() *Devm_PhysicalEntitys_PhysicalEntity_Class {
	p := new(Devm_PhysicalEntitys_PhysicalEntity_Class)
	*p = x
	return p
}

func (x Devm_PhysicalEntitys_PhysicalEntity_Class) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_PhysicalEntitys_PhysicalEntity_Class) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[0].Descriptor()
}

func (Devm_PhysicalEntitys_PhysicalEntity_Class) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[0]
}

func (x Devm_PhysicalEntitys_PhysicalEntity_Class) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_PhysicalEntitys_PhysicalEntity_Class.Descriptor instead.
func (Devm_PhysicalEntitys_PhysicalEntity_Class) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

type Devm_PhysicalEntitys_PhysicalEntity_AdminState int32

const (
	Devm_PhysicalEntitys_PhysicalEntity_AdminState_INACTIVE     Devm_PhysicalEntitys_PhysicalEntity_AdminState = 0
	Devm_PhysicalEntitys_PhysicalEntity_AdminState_ACTIVE       Devm_PhysicalEntitys_PhysicalEntity_AdminState = 1
	Devm_PhysicalEntitys_PhysicalEntity_AdminState_NOTSUPPORTED Devm_PhysicalEntitys_PhysicalEntity_AdminState = 2
)

// Enum value maps for Devm_PhysicalEntitys_PhysicalEntity_AdminState.
var (
	Devm_PhysicalEntitys_PhysicalEntity_AdminState_name = map[int32]string{
		0: "AdminState_INACTIVE",
		1: "AdminState_ACTIVE",
		2: "AdminState_NOTSUPPORTED",
	}
	Devm_PhysicalEntitys_PhysicalEntity_AdminState_value = map[string]int32{
		"AdminState_INACTIVE":     0,
		"AdminState_ACTIVE":       1,
		"AdminState_NOTSUPPORTED": 2,
	}
)

func (x Devm_PhysicalEntitys_PhysicalEntity_AdminState) Enum() *Devm_PhysicalEntitys_PhysicalEntity_AdminState {
	p := new(Devm_PhysicalEntitys_PhysicalEntity_AdminState)
	*p = x
	return p
}

func (x Devm_PhysicalEntitys_PhysicalEntity_AdminState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_PhysicalEntitys_PhysicalEntity_AdminState) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[1].Descriptor()
}

func (Devm_PhysicalEntitys_PhysicalEntity_AdminState) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[1]
}

func (x Devm_PhysicalEntitys_PhysicalEntity_AdminState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_PhysicalEntitys_PhysicalEntity_AdminState.Descriptor instead.
func (Devm_PhysicalEntitys_PhysicalEntity_AdminState) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 0, 0, 1}
}

type Devm_PhysicalEntitys_PhysicalEntity_RunningState int32

const (
	Devm_PhysicalEntitys_PhysicalEntity_RunningState_UNKNOWN              Devm_PhysicalEntitys_PhysicalEntity_RunningState = 0
	Devm_PhysicalEntitys_PhysicalEntity_RunningState_NORMAL               Devm_PhysicalEntitys_PhysicalEntity_RunningState = 1
	Devm_PhysicalEntitys_PhysicalEntity_RunningState_FAULT                Devm_PhysicalEntitys_PhysicalEntity_RunningState = 2
	Devm_PhysicalEntitys_PhysicalEntity_RunningState_OFFLINE              Devm_PhysicalEntitys_PhysicalEntity_RunningState = 3
	Devm_PhysicalEntitys_PhysicalEntity_RunningState_NOTSUPPORTED         Devm_PhysicalEntitys_PhysicalEntity_RunningState = 4
	Devm_PhysicalEntitys_PhysicalEntity_RunningState_OPTICALNOTEQUIPPED   Devm_PhysicalEntitys_PhysicalEntity_RunningState = 5
	Devm_PhysicalEntitys_PhysicalEntity_RunningState_NOTINSTALL           Devm_PhysicalEntitys_PhysicalEntity_RunningState = 6
	Devm_PhysicalEntitys_PhysicalEntity_RunningState_WRONGTYPE            Devm_PhysicalEntitys_PhysicalEntity_RunningState = 7
	Devm_PhysicalEntitys_PhysicalEntity_RunningState_REGISTERED           Devm_PhysicalEntitys_PhysicalEntity_RunningState = 8
	Devm_PhysicalEntitys_PhysicalEntity_RunningState_UNREGISTERED         Devm_PhysicalEntitys_PhysicalEntity_RunningState = 9
	Devm_PhysicalEntitys_PhysicalEntity_RunningState_POWEROFF             Devm_PhysicalEntitys_PhysicalEntity_RunningState = 10
	Devm_PhysicalEntitys_PhysicalEntity_RunningState_PORTX_PHYSICALX_DOWN Devm_PhysicalEntitys_PhysicalEntity_RunningState = 11
	Devm_PhysicalEntitys_PhysicalEntity_RunningState_ONLINE               Devm_PhysicalEntitys_PhysicalEntity_RunningState = 12
)

// Enum value maps for Devm_PhysicalEntitys_PhysicalEntity_RunningState.
var (
	Devm_PhysicalEntitys_PhysicalEntity_RunningState_name = map[int32]string{
		0:  "RunningState_UNKNOWN",
		1:  "RunningState_NORMAL",
		2:  "RunningState_FAULT",
		3:  "RunningState_OFFLINE",
		4:  "RunningState_NOTSUPPORTED",
		5:  "RunningState_OPTICALNOTEQUIPPED",
		6:  "RunningState_NOTINSTALL",
		7:  "RunningState_WRONGTYPE",
		8:  "RunningState_REGISTERED",
		9:  "RunningState_UNREGISTERED",
		10: "RunningState_POWEROFF",
		11: "RunningState_PORTX_PHYSICALX_DOWN",
		12: "RunningState_ONLINE",
	}
	Devm_PhysicalEntitys_PhysicalEntity_RunningState_value = map[string]int32{
		"RunningState_UNKNOWN":              0,
		"RunningState_NORMAL":               1,
		"RunningState_FAULT":                2,
		"RunningState_OFFLINE":              3,
		"RunningState_NOTSUPPORTED":         4,
		"RunningState_OPTICALNOTEQUIPPED":   5,
		"RunningState_NOTINSTALL":           6,
		"RunningState_WRONGTYPE":            7,
		"RunningState_REGISTERED":           8,
		"RunningState_UNREGISTERED":         9,
		"RunningState_POWEROFF":             10,
		"RunningState_PORTX_PHYSICALX_DOWN": 11,
		"RunningState_ONLINE":               12,
	}
)

func (x Devm_PhysicalEntitys_PhysicalEntity_RunningState) Enum() *Devm_PhysicalEntitys_PhysicalEntity_RunningState {
	p := new(Devm_PhysicalEntitys_PhysicalEntity_RunningState)
	*p = x
	return p
}

func (x Devm_PhysicalEntitys_PhysicalEntity_RunningState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_PhysicalEntitys_PhysicalEntity_RunningState) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[2].Descriptor()
}

func (Devm_PhysicalEntitys_PhysicalEntity_RunningState) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[2]
}

func (x Devm_PhysicalEntitys_PhysicalEntity_RunningState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_PhysicalEntitys_PhysicalEntity_RunningState.Descriptor instead.
func (Devm_PhysicalEntitys_PhysicalEntity_RunningState) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 0, 0, 2}
}

type Devm_PhysicalEntitys_PhysicalEntity_StandbyState int32

const (
	Devm_PhysicalEntitys_PhysicalEntity_StandbyState_MASTER       Devm_PhysicalEntitys_PhysicalEntity_StandbyState = 0
	Devm_PhysicalEntitys_PhysicalEntity_StandbyState_SLAVE        Devm_PhysicalEntitys_PhysicalEntity_StandbyState = 1
	Devm_PhysicalEntitys_PhysicalEntity_StandbyState_NOTSUPPORTED Devm_PhysicalEntitys_PhysicalEntity_StandbyState = 2
	Devm_PhysicalEntitys_PhysicalEntity_StandbyState_SYSTEMMASTER Devm_PhysicalEntitys_PhysicalEntity_StandbyState = 3
	Devm_PhysicalEntitys_PhysicalEntity_StandbyState_SYSTEMSLAVE  Devm_PhysicalEntitys_PhysicalEntity_StandbyState = 4
)

// Enum value maps for Devm_PhysicalEntitys_PhysicalEntity_StandbyState.
var (
	Devm_PhysicalEntitys_PhysicalEntity_StandbyState_name = map[int32]string{
		0: "StandbyState_MASTER",
		1: "StandbyState_SLAVE",
		2: "StandbyState_NOTSUPPORTED",
		3: "StandbyState_SYSTEMMASTER",
		4: "StandbyState_SYSTEMSLAVE",
	}
	Devm_PhysicalEntitys_PhysicalEntity_StandbyState_value = map[string]int32{
		"StandbyState_MASTER":       0,
		"StandbyState_SLAVE":        1,
		"StandbyState_NOTSUPPORTED": 2,
		"StandbyState_SYSTEMMASTER": 3,
		"StandbyState_SYSTEMSLAVE":  4,
	}
)

func (x Devm_PhysicalEntitys_PhysicalEntity_StandbyState) Enum() *Devm_PhysicalEntitys_PhysicalEntity_StandbyState {
	p := new(Devm_PhysicalEntitys_PhysicalEntity_StandbyState)
	*p = x
	return p
}

func (x Devm_PhysicalEntitys_PhysicalEntity_StandbyState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_PhysicalEntitys_PhysicalEntity_StandbyState) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[3].Descriptor()
}

func (Devm_PhysicalEntitys_PhysicalEntity_StandbyState) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[3]
}

func (x Devm_PhysicalEntitys_PhysicalEntity_StandbyState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_PhysicalEntitys_PhysicalEntity_StandbyState.Descriptor instead.
func (Devm_PhysicalEntitys_PhysicalEntity_StandbyState) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 0, 0, 3}
}

type Devm_LogicEntitys_LogicEntity_Class int32

const (
	Devm_LogicEntitys_LogicEntity_Class_OTHER       Devm_LogicEntitys_LogicEntity_Class = 0
	Devm_LogicEntitys_LogicEntity_Class_CHASSIS     Devm_LogicEntitys_LogicEntity_Class = 1
	Devm_LogicEntitys_LogicEntity_Class_MPUMODULE   Devm_LogicEntitys_LogicEntity_Class = 4
	Devm_LogicEntitys_LogicEntity_Class_LPUMODULE   Devm_LogicEntitys_LogicEntity_Class = 5
	Devm_LogicEntitys_LogicEntity_Class_SFUMODULE   Devm_LogicEntitys_LogicEntity_Class = 6
	Devm_LogicEntitys_LogicEntity_Class_CLOCKMODULE Devm_LogicEntitys_LogicEntity_Class = 7
	Devm_LogicEntitys_LogicEntity_Class_CARDMODULE  Devm_LogicEntitys_LogicEntity_Class = 9
	Devm_LogicEntitys_LogicEntity_Class_PORT        Devm_LogicEntitys_LogicEntity_Class = 10
	Devm_LogicEntitys_LogicEntity_Class_FAN         Devm_LogicEntitys_LogicEntity_Class = 16
	Devm_LogicEntitys_LogicEntity_Class_POWERSUPPLY Devm_LogicEntitys_LogicEntity_Class = 17
	Devm_LogicEntitys_LogicEntity_Class_CONTAINER   Devm_LogicEntitys_LogicEntity_Class = 18
	Devm_LogicEntitys_LogicEntity_Class_PPMODULE    Devm_LogicEntitys_LogicEntity_Class = 4108
	Devm_LogicEntitys_LogicEntity_Class_SWFMODULE   Devm_LogicEntitys_LogicEntity_Class = 4109
	Devm_LogicEntitys_LogicEntity_Class_ECUMODULE   Devm_LogicEntitys_LogicEntity_Class = 4110
	Devm_LogicEntitys_LogicEntity_Class_ICUMODULE   Devm_LogicEntitys_LogicEntity_Class = 4111
	Devm_LogicEntitys_LogicEntity_Class_LFE         Devm_LogicEntitys_LogicEntity_Class = 4162
	Devm_LogicEntitys_LogicEntity_Class_CFMODULE    Devm_LogicEntitys_LogicEntity_Class = 4170
	Devm_LogicEntitys_LogicEntity_Class_LCD         Devm_LogicEntitys_LogicEntity_Class = 4181
	Devm_LogicEntitys_LogicEntity_Class_PEM         Devm_LogicEntitys_LogicEntity_Class = 5006
	Devm_LogicEntitys_LogicEntity_Class_CMUMODULE   Devm_LogicEntitys_LogicEntity_Class = 5010
	Devm_LogicEntitys_LogicEntity_Class_PIC         Devm_LogicEntitys_LogicEntity_Class = 5011
	Devm_LogicEntitys_LogicEntity_Class_TSU         Devm_LogicEntitys_LogicEntity_Class = 5012
	Devm_LogicEntitys_LogicEntity_Class_PMU         Devm_LogicEntitys_LogicEntity_Class = 5031
	Devm_LogicEntitys_LogicEntity_Class_PM          Devm_LogicEntitys_LogicEntity_Class = 5032
)

// Enum value maps for Devm_LogicEntitys_LogicEntity_Class.
var (
	Devm_LogicEntitys_LogicEntity_Class_name = map[int32]string{
		0:    "Class_OTHER",
		1:    "Class_CHASSIS",
		4:    "Class_MPUMODULE",
		5:    "Class_LPUMODULE",
		6:    "Class_SFUMODULE",
		7:    "Class_CLOCKMODULE",
		9:    "Class_CARDMODULE",
		10:   "Class_PORT",
		16:   "Class_FAN",
		17:   "Class_POWERSUPPLY",
		18:   "Class_CONTAINER",
		4108: "Class_PPMODULE",
		4109: "Class_SWFMODULE",
		4110: "Class_ECUMODULE",
		4111: "Class_ICUMODULE",
		4162: "Class_LFE",
		4170: "Class_CFMODULE",
		4181: "Class_LCD",
		5006: "Class_PEM",
		5010: "Class_CMUMODULE",
		5011: "Class_PIC",
		5012: "Class_TSU",
		5031: "Class_PMU",
		5032: "Class_PM",
	}
	Devm_LogicEntitys_LogicEntity_Class_value = map[string]int32{
		"Class_OTHER":       0,
		"Class_CHASSIS":     1,
		"Class_MPUMODULE":   4,
		"Class_LPUMODULE":   5,
		"Class_SFUMODULE":   6,
		"Class_CLOCKMODULE": 7,
		"Class_CARDMODULE":  9,
		"Class_PORT":        10,
		"Class_FAN":         16,
		"Class_POWERSUPPLY": 17,
		"Class_CONTAINER":   18,
		"Class_PPMODULE":    4108,
		"Class_SWFMODULE":   4109,
		"Class_ECUMODULE":   4110,
		"Class_ICUMODULE":   4111,
		"Class_LFE":         4162,
		"Class_CFMODULE":    4170,
		"Class_LCD":         4181,
		"Class_PEM":         5006,
		"Class_CMUMODULE":   5010,
		"Class_PIC":         5011,
		"Class_TSU":         5012,
		"Class_PMU":         5031,
		"Class_PM":          5032,
	}
)

func (x Devm_LogicEntitys_LogicEntity_Class) Enum() *Devm_LogicEntitys_LogicEntity_Class {
	p := new(Devm_LogicEntitys_LogicEntity_Class)
	*p = x
	return p
}

func (x Devm_LogicEntitys_LogicEntity_Class) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_LogicEntitys_LogicEntity_Class) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[4].Descriptor()
}

func (Devm_LogicEntitys_LogicEntity_Class) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[4]
}

func (x Devm_LogicEntitys_LogicEntity_Class) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_LogicEntitys_LogicEntity_Class.Descriptor instead.
func (Devm_LogicEntitys_LogicEntity_Class) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 1, 0, 0}
}

type Devm_LogicEntitys_LogicEntity_OperState int32

const (
	Devm_LogicEntitys_LogicEntity_OperState_UNKNOWN              Devm_LogicEntitys_LogicEntity_OperState = 0
	Devm_LogicEntitys_LogicEntity_OperState_NORMAL               Devm_LogicEntitys_LogicEntity_OperState = 1
	Devm_LogicEntitys_LogicEntity_OperState_FAULT                Devm_LogicEntitys_LogicEntity_OperState = 2
	Devm_LogicEntitys_LogicEntity_OperState_OFFLINE              Devm_LogicEntitys_LogicEntity_OperState = 3
	Devm_LogicEntitys_LogicEntity_OperState_NOTSUPPORTED         Devm_LogicEntitys_LogicEntity_OperState = 4
	Devm_LogicEntitys_LogicEntity_OperState_OPTICALNOTEQUIPPED   Devm_LogicEntitys_LogicEntity_OperState = 5
	Devm_LogicEntitys_LogicEntity_OperState_NOTINSTALL           Devm_LogicEntitys_LogicEntity_OperState = 6
	Devm_LogicEntitys_LogicEntity_OperState_WRONGTYPE            Devm_LogicEntitys_LogicEntity_OperState = 7
	Devm_LogicEntitys_LogicEntity_OperState_REGISTERED           Devm_LogicEntitys_LogicEntity_OperState = 8
	Devm_LogicEntitys_LogicEntity_OperState_UNREGISTERED         Devm_LogicEntitys_LogicEntity_OperState = 9
	Devm_LogicEntitys_LogicEntity_OperState_POWEROFF             Devm_LogicEntitys_LogicEntity_OperState = 10
	Devm_LogicEntitys_LogicEntity_OperState_PORTX_PHYSICALX_DOWN Devm_LogicEntitys_LogicEntity_OperState = 11
	Devm_LogicEntitys_LogicEntity_OperState_ONLINE               Devm_LogicEntitys_LogicEntity_OperState = 12
)

// Enum value maps for Devm_LogicEntitys_LogicEntity_OperState.
var (
	Devm_LogicEntitys_LogicEntity_OperState_name = map[int32]string{
		0:  "OperState_UNKNOWN",
		1:  "OperState_NORMAL",
		2:  "OperState_FAULT",
		3:  "OperState_OFFLINE",
		4:  "OperState_NOTSUPPORTED",
		5:  "OperState_OPTICALNOTEQUIPPED",
		6:  "OperState_NOTINSTALL",
		7:  "OperState_WRONGTYPE",
		8:  "OperState_REGISTERED",
		9:  "OperState_UNREGISTERED",
		10: "OperState_POWEROFF",
		11: "OperState_PORTX_PHYSICALX_DOWN",
		12: "OperState_ONLINE",
	}
	Devm_LogicEntitys_LogicEntity_OperState_value = map[string]int32{
		"OperState_UNKNOWN":              0,
		"OperState_NORMAL":               1,
		"OperState_FAULT":                2,
		"OperState_OFFLINE":              3,
		"OperState_NOTSUPPORTED":         4,
		"OperState_OPTICALNOTEQUIPPED":   5,
		"OperState_NOTINSTALL":           6,
		"OperState_WRONGTYPE":            7,
		"OperState_REGISTERED":           8,
		"OperState_UNREGISTERED":         9,
		"OperState_POWEROFF":             10,
		"OperState_PORTX_PHYSICALX_DOWN": 11,
		"OperState_ONLINE":               12,
	}
)

func (x Devm_LogicEntitys_LogicEntity_OperState) Enum() *Devm_LogicEntitys_LogicEntity_OperState {
	p := new(Devm_LogicEntitys_LogicEntity_OperState)
	*p = x
	return p
}

func (x Devm_LogicEntitys_LogicEntity_OperState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_LogicEntitys_LogicEntity_OperState) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[5].Descriptor()
}

func (Devm_LogicEntitys_LogicEntity_OperState) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[5]
}

func (x Devm_LogicEntitys_LogicEntity_OperState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_LogicEntitys_LogicEntity_OperState.Descriptor instead.
func (Devm_LogicEntitys_LogicEntity_OperState) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 1, 0, 1}
}

type Devm_Chassiss_Chassis_CurrentRunMode int32

const (
	Devm_Chassiss_Chassis_CurrentRunMode_UNKNOWN Devm_Chassiss_Chassis_CurrentRunMode = 0
	Devm_Chassiss_Chassis_CurrentRunMode_SINGLE  Devm_Chassiss_Chassis_CurrentRunMode = 1
	Devm_Chassiss_Chassis_CurrentRunMode_CCCX_0  Devm_Chassiss_Chassis_CurrentRunMode = 2
	Devm_Chassiss_Chassis_CurrentRunMode_CCCX_1  Devm_Chassiss_Chassis_CurrentRunMode = 3
	Devm_Chassiss_Chassis_CurrentRunMode_CCCX_2  Devm_Chassiss_Chassis_CurrentRunMode = 4
)

// Enum value maps for Devm_Chassiss_Chassis_CurrentRunMode.
var (
	Devm_Chassiss_Chassis_CurrentRunMode_name = map[int32]string{
		0: "CurrentRunMode_UNKNOWN",
		1: "CurrentRunMode_SINGLE",
		2: "CurrentRunMode_CCCX_0",
		3: "CurrentRunMode_CCCX_1",
		4: "CurrentRunMode_CCCX_2",
	}
	Devm_Chassiss_Chassis_CurrentRunMode_value = map[string]int32{
		"CurrentRunMode_UNKNOWN": 0,
		"CurrentRunMode_SINGLE":  1,
		"CurrentRunMode_CCCX_0":  2,
		"CurrentRunMode_CCCX_1":  3,
		"CurrentRunMode_CCCX_2":  4,
	}
)

func (x Devm_Chassiss_Chassis_CurrentRunMode) Enum() *Devm_Chassiss_Chassis_CurrentRunMode {
	p := new(Devm_Chassiss_Chassis_CurrentRunMode)
	*p = x
	return p
}

func (x Devm_Chassiss_Chassis_CurrentRunMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Chassiss_Chassis_CurrentRunMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[6].Descriptor()
}

func (Devm_Chassiss_Chassis_CurrentRunMode) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[6]
}

func (x Devm_Chassiss_Chassis_CurrentRunMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Chassiss_Chassis_CurrentRunMode.Descriptor instead.
func (Devm_Chassiss_Chassis_CurrentRunMode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 2, 0, 0}
}

type Devm_Chassiss_Chassis_NextRunMode int32

const (
	Devm_Chassiss_Chassis_NextRunMode_UNKNOWN Devm_Chassiss_Chassis_NextRunMode = 0
	Devm_Chassiss_Chassis_NextRunMode_SINGLE  Devm_Chassiss_Chassis_NextRunMode = 1
	Devm_Chassiss_Chassis_NextRunMode_CCCX_0  Devm_Chassiss_Chassis_NextRunMode = 2
	Devm_Chassiss_Chassis_NextRunMode_CCCX_1  Devm_Chassiss_Chassis_NextRunMode = 3
	Devm_Chassiss_Chassis_NextRunMode_CCCX_2  Devm_Chassiss_Chassis_NextRunMode = 4
)

// Enum value maps for Devm_Chassiss_Chassis_NextRunMode.
var (
	Devm_Chassiss_Chassis_NextRunMode_name = map[int32]string{
		0: "NextRunMode_UNKNOWN",
		1: "NextRunMode_SINGLE",
		2: "NextRunMode_CCCX_0",
		3: "NextRunMode_CCCX_1",
		4: "NextRunMode_CCCX_2",
	}
	Devm_Chassiss_Chassis_NextRunMode_value = map[string]int32{
		"NextRunMode_UNKNOWN": 0,
		"NextRunMode_SINGLE":  1,
		"NextRunMode_CCCX_0":  2,
		"NextRunMode_CCCX_1":  3,
		"NextRunMode_CCCX_2":  4,
	}
)

func (x Devm_Chassiss_Chassis_NextRunMode) Enum() *Devm_Chassiss_Chassis_NextRunMode {
	p := new(Devm_Chassiss_Chassis_NextRunMode)
	*p = x
	return p
}

func (x Devm_Chassiss_Chassis_NextRunMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Chassiss_Chassis_NextRunMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[7].Descriptor()
}

func (Devm_Chassiss_Chassis_NextRunMode) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[7]
}

func (x Devm_Chassiss_Chassis_NextRunMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Chassiss_Chassis_NextRunMode.Descriptor instead.
func (Devm_Chassiss_Chassis_NextRunMode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 2, 0, 1}
}

type Devm_Chassiss_Chassis_FanAttribute_Workmode int32

const (
	Devm_Chassiss_Chassis_FanAttribute_INVALID_ENUM_VALUE_Workmode Devm_Chassiss_Chassis_FanAttribute_Workmode = 0
	Devm_Chassiss_Chassis_FanAttribute_Workmode_AUTO               Devm_Chassiss_Chassis_FanAttribute_Workmode = 1
	Devm_Chassiss_Chassis_FanAttribute_Workmode_MANUAL             Devm_Chassiss_Chassis_FanAttribute_Workmode = 2
	Devm_Chassiss_Chassis_FanAttribute_Workmode_SILENT             Devm_Chassiss_Chassis_FanAttribute_Workmode = 4
	Devm_Chassiss_Chassis_FanAttribute_Workmode_FULL               Devm_Chassiss_Chassis_FanAttribute_Workmode = 5
	Devm_Chassiss_Chassis_FanAttribute_Workmode_MINIMUMX_PERCENT   Devm_Chassiss_Chassis_FanAttribute_Workmode = 9
	Devm_Chassiss_Chassis_FanAttribute_Workmode_DENOISE            Devm_Chassiss_Chassis_FanAttribute_Workmode = 11
)

// Enum value maps for Devm_Chassiss_Chassis_FanAttribute_Workmode.
var (
	Devm_Chassiss_Chassis_FanAttribute_Workmode_name = map[int32]string{
		0:  "INVALID_ENUM_VALUE_Workmode",
		1:  "Workmode_AUTO",
		2:  "Workmode_MANUAL",
		4:  "Workmode_SILENT",
		5:  "Workmode_FULL",
		9:  "Workmode_MINIMUMX_PERCENT",
		11: "Workmode_DENOISE",
	}
	Devm_Chassiss_Chassis_FanAttribute_Workmode_value = map[string]int32{
		"INVALID_ENUM_VALUE_Workmode": 0,
		"Workmode_AUTO":               1,
		"Workmode_MANUAL":             2,
		"Workmode_SILENT":             4,
		"Workmode_FULL":               5,
		"Workmode_MINIMUMX_PERCENT":   9,
		"Workmode_DENOISE":            11,
	}
)

func (x Devm_Chassiss_Chassis_FanAttribute_Workmode) Enum() *Devm_Chassiss_Chassis_FanAttribute_Workmode {
	p := new(Devm_Chassiss_Chassis_FanAttribute_Workmode)
	*p = x
	return p
}

func (x Devm_Chassiss_Chassis_FanAttribute_Workmode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Chassiss_Chassis_FanAttribute_Workmode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[8].Descriptor()
}

func (Devm_Chassiss_Chassis_FanAttribute_Workmode) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[8]
}

func (x Devm_Chassiss_Chassis_FanAttribute_Workmode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Chassiss_Chassis_FanAttribute_Workmode.Descriptor instead.
func (Devm_Chassiss_Chassis_FanAttribute_Workmode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 2, 0, 1, 0}
}

type Devm_Chassiss_Chassis_PowerSupplyAttribute_PmInputVoltage110 int32

const (
	Devm_Chassiss_Chassis_PowerSupplyAttribute_PmInputVoltage110_NO  Devm_Chassiss_Chassis_PowerSupplyAttribute_PmInputVoltage110 = 0
	Devm_Chassiss_Chassis_PowerSupplyAttribute_PmInputVoltage110_YES Devm_Chassiss_Chassis_PowerSupplyAttribute_PmInputVoltage110 = 1
)

// Enum value maps for Devm_Chassiss_Chassis_PowerSupplyAttribute_PmInputVoltage110.
var (
	Devm_Chassiss_Chassis_PowerSupplyAttribute_PmInputVoltage110_name = map[int32]string{
		0: "PmInputVoltage110_NO",
		1: "PmInputVoltage110_YES",
	}
	Devm_Chassiss_Chassis_PowerSupplyAttribute_PmInputVoltage110_value = map[string]int32{
		"PmInputVoltage110_NO":  0,
		"PmInputVoltage110_YES": 1,
	}
)

func (x Devm_Chassiss_Chassis_PowerSupplyAttribute_PmInputVoltage110) Enum() *Devm_Chassiss_Chassis_PowerSupplyAttribute_PmInputVoltage110 {
	p := new(Devm_Chassiss_Chassis_PowerSupplyAttribute_PmInputVoltage110)
	*p = x
	return p
}

func (x Devm_Chassiss_Chassis_PowerSupplyAttribute_PmInputVoltage110) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Chassiss_Chassis_PowerSupplyAttribute_PmInputVoltage110) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[9].Descriptor()
}

func (Devm_Chassiss_Chassis_PowerSupplyAttribute_PmInputVoltage110) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[9]
}

func (x Devm_Chassiss_Chassis_PowerSupplyAttribute_PmInputVoltage110) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Chassiss_Chassis_PowerSupplyAttribute_PmInputVoltage110.Descriptor instead.
func (Devm_Chassiss_Chassis_PowerSupplyAttribute_PmInputVoltage110) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 2, 0, 2, 0}
}

type Devm_Chassiss_Chassis_PowerSupplyAttribute_PowerSupplyMode int32

const (
	Devm_Chassiss_Chassis_PowerSupplyAttribute_INVALID_ENUM_VALUE_PowerSupplyMode Devm_Chassiss_Chassis_PowerSupplyAttribute_PowerSupplyMode = 0
	Devm_Chassiss_Chassis_PowerSupplyAttribute_PowerSupplyMode_STANDARD           Devm_Chassiss_Chassis_PowerSupplyAttribute_PowerSupplyMode = 1
	Devm_Chassiss_Chassis_PowerSupplyAttribute_PowerSupplyMode_ASSIGN             Devm_Chassiss_Chassis_PowerSupplyAttribute_PowerSupplyMode = 2
)

// Enum value maps for Devm_Chassiss_Chassis_PowerSupplyAttribute_PowerSupplyMode.
var (
	Devm_Chassiss_Chassis_PowerSupplyAttribute_PowerSupplyMode_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_PowerSupplyMode",
		1: "PowerSupplyMode_STANDARD",
		2: "PowerSupplyMode_ASSIGN",
	}
	Devm_Chassiss_Chassis_PowerSupplyAttribute_PowerSupplyMode_value = map[string]int32{
		"INVALID_ENUM_VALUE_PowerSupplyMode": 0,
		"PowerSupplyMode_STANDARD":           1,
		"PowerSupplyMode_ASSIGN":             2,
	}
)

func (x Devm_Chassiss_Chassis_PowerSupplyAttribute_PowerSupplyMode) Enum() *Devm_Chassiss_Chassis_PowerSupplyAttribute_PowerSupplyMode {
	p := new(Devm_Chassiss_Chassis_PowerSupplyAttribute_PowerSupplyMode)
	*p = x
	return p
}

func (x Devm_Chassiss_Chassis_PowerSupplyAttribute_PowerSupplyMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Chassiss_Chassis_PowerSupplyAttribute_PowerSupplyMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[10].Descriptor()
}

func (Devm_Chassiss_Chassis_PowerSupplyAttribute_PowerSupplyMode) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[10]
}

func (x Devm_Chassiss_Chassis_PowerSupplyAttribute_PowerSupplyMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Chassiss_Chassis_PowerSupplyAttribute_PowerSupplyMode.Descriptor instead.
func (Devm_Chassiss_Chassis_PowerSupplyAttribute_PowerSupplyMode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 2, 0, 2, 1}
}

type Devm_Chassiss_Chassis_PowerSupplyAttribute_PowerSupplyTemp int32

const (
	Devm_Chassiss_Chassis_PowerSupplyAttribute_INVALID_ENUM_VALUE_PowerSupplyTemp Devm_Chassiss_Chassis_PowerSupplyAttribute_PowerSupplyTemp = 0
	Devm_Chassiss_Chassis_PowerSupplyAttribute_PowerSupplyTemp_TEMPLOW            Devm_Chassiss_Chassis_PowerSupplyAttribute_PowerSupplyTemp = 40
	Devm_Chassiss_Chassis_PowerSupplyAttribute_PowerSupplyTemp_TEMPMIDDLE         Devm_Chassiss_Chassis_PowerSupplyAttribute_PowerSupplyTemp = 50
	Devm_Chassiss_Chassis_PowerSupplyAttribute_PowerSupplyTemp_TEMPHIGH           Devm_Chassiss_Chassis_PowerSupplyAttribute_PowerSupplyTemp = 55
)

// Enum value maps for Devm_Chassiss_Chassis_PowerSupplyAttribute_PowerSupplyTemp.
var (
	Devm_Chassiss_Chassis_PowerSupplyAttribute_PowerSupplyTemp_name = map[int32]string{
		0:  "INVALID_ENUM_VALUE_PowerSupplyTemp",
		40: "PowerSupplyTemp_TEMPLOW",
		50: "PowerSupplyTemp_TEMPMIDDLE",
		55: "PowerSupplyTemp_TEMPHIGH",
	}
	Devm_Chassiss_Chassis_PowerSupplyAttribute_PowerSupplyTemp_value = map[string]int32{
		"INVALID_ENUM_VALUE_PowerSupplyTemp": 0,
		"PowerSupplyTemp_TEMPLOW":            40,
		"PowerSupplyTemp_TEMPMIDDLE":         50,
		"PowerSupplyTemp_TEMPHIGH":           55,
	}
)

func (x Devm_Chassiss_Chassis_PowerSupplyAttribute_PowerSupplyTemp) Enum() *Devm_Chassiss_Chassis_PowerSupplyAttribute_PowerSupplyTemp {
	p := new(Devm_Chassiss_Chassis_PowerSupplyAttribute_PowerSupplyTemp)
	*p = x
	return p
}

func (x Devm_Chassiss_Chassis_PowerSupplyAttribute_PowerSupplyTemp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Chassiss_Chassis_PowerSupplyAttribute_PowerSupplyTemp) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[11].Descriptor()
}

func (Devm_Chassiss_Chassis_PowerSupplyAttribute_PowerSupplyTemp) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[11]
}

func (x Devm_Chassiss_Chassis_PowerSupplyAttribute_PowerSupplyTemp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Chassiss_Chassis_PowerSupplyAttribute_PowerSupplyTemp.Descriptor instead.
func (Devm_Chassiss_Chassis_PowerSupplyAttribute_PowerSupplyTemp) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 2, 0, 2, 2}
}

type Devm_Chassiss_Chassis_DustproofAttribute_Dustproofcheck int32

const (
	Devm_Chassiss_Chassis_DustproofAttribute_Dustproofcheck_ENABLE  Devm_Chassiss_Chassis_DustproofAttribute_Dustproofcheck = 0
	Devm_Chassiss_Chassis_DustproofAttribute_Dustproofcheck_DISABLE Devm_Chassiss_Chassis_DustproofAttribute_Dustproofcheck = 1
)

// Enum value maps for Devm_Chassiss_Chassis_DustproofAttribute_Dustproofcheck.
var (
	Devm_Chassiss_Chassis_DustproofAttribute_Dustproofcheck_name = map[int32]string{
		0: "Dustproofcheck_ENABLE",
		1: "Dustproofcheck_DISABLE",
	}
	Devm_Chassiss_Chassis_DustproofAttribute_Dustproofcheck_value = map[string]int32{
		"Dustproofcheck_ENABLE":  0,
		"Dustproofcheck_DISABLE": 1,
	}
)

func (x Devm_Chassiss_Chassis_DustproofAttribute_Dustproofcheck) Enum() *Devm_Chassiss_Chassis_DustproofAttribute_Dustproofcheck {
	p := new(Devm_Chassiss_Chassis_DustproofAttribute_Dustproofcheck)
	*p = x
	return p
}

func (x Devm_Chassiss_Chassis_DustproofAttribute_Dustproofcheck) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Chassiss_Chassis_DustproofAttribute_Dustproofcheck) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[12].Descriptor()
}

func (Devm_Chassiss_Chassis_DustproofAttribute_Dustproofcheck) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[12]
}

func (x Devm_Chassiss_Chassis_DustproofAttribute_Dustproofcheck) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Chassiss_Chassis_DustproofAttribute_Dustproofcheck.Descriptor instead.
func (Devm_Chassiss_Chassis_DustproofAttribute_Dustproofcheck) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 2, 0, 3, 0}
}

type Devm_Chassiss_Chassis_ChassisRunMode_CurrentRunMode int32

const (
	Devm_Chassiss_Chassis_ChassisRunMode_INVALID_ENUM_VALUE_CurrentRunMode        Devm_Chassiss_Chassis_ChassisRunMode_CurrentRunMode = 0
	Devm_Chassiss_Chassis_ChassisRunMode_CurrentRunMode_SINGLE                    Devm_Chassiss_Chassis_ChassisRunMode_CurrentRunMode = 1
	Devm_Chassiss_Chassis_ChassisRunMode_CurrentRunMode_CCCX_0                    Devm_Chassiss_Chassis_ChassisRunMode_CurrentRunMode = 2
	Devm_Chassiss_Chassis_ChassisRunMode_CurrentRunMode_CCCX_1                    Devm_Chassiss_Chassis_ChassisRunMode_CurrentRunMode = 3
	Devm_Chassiss_Chassis_ChassisRunMode_CurrentRunMode_CCCX_2                    Devm_Chassiss_Chassis_ChassisRunMode_CurrentRunMode = 4
	Devm_Chassiss_Chassis_ChassisRunMode_CurrentRunMode_VIRTUALX_CLUSTERX_CHASSIS Devm_Chassiss_Chassis_ChassisRunMode_CurrentRunMode = 6
)

// Enum value maps for Devm_Chassiss_Chassis_ChassisRunMode_CurrentRunMode.
var (
	Devm_Chassiss_Chassis_ChassisRunMode_CurrentRunMode_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_CurrentRunMode",
		1: "CurrentRunMode_SINGLE",
		2: "CurrentRunMode_CCCX_0",
		3: "CurrentRunMode_CCCX_1",
		4: "CurrentRunMode_CCCX_2",
		6: "CurrentRunMode_VIRTUALX_CLUSTERX_CHASSIS",
	}
	Devm_Chassiss_Chassis_ChassisRunMode_CurrentRunMode_value = map[string]int32{
		"INVALID_ENUM_VALUE_CurrentRunMode":        0,
		"CurrentRunMode_SINGLE":                    1,
		"CurrentRunMode_CCCX_0":                    2,
		"CurrentRunMode_CCCX_1":                    3,
		"CurrentRunMode_CCCX_2":                    4,
		"CurrentRunMode_VIRTUALX_CLUSTERX_CHASSIS": 6,
	}
)

func (x Devm_Chassiss_Chassis_ChassisRunMode_CurrentRunMode) Enum() *Devm_Chassiss_Chassis_ChassisRunMode_CurrentRunMode {
	p := new(Devm_Chassiss_Chassis_ChassisRunMode_CurrentRunMode)
	*p = x
	return p
}

func (x Devm_Chassiss_Chassis_ChassisRunMode_CurrentRunMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Chassiss_Chassis_ChassisRunMode_CurrentRunMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[13].Descriptor()
}

func (Devm_Chassiss_Chassis_ChassisRunMode_CurrentRunMode) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[13]
}

func (x Devm_Chassiss_Chassis_ChassisRunMode_CurrentRunMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Chassiss_Chassis_ChassisRunMode_CurrentRunMode.Descriptor instead.
func (Devm_Chassiss_Chassis_ChassisRunMode_CurrentRunMode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 2, 0, 5, 0}
}

type Devm_Chassiss_Chassis_ChassisRunMode_NextRunMode int32

const (
	Devm_Chassiss_Chassis_ChassisRunMode_INVALID_ENUM_VALUE_NextRunMode        Devm_Chassiss_Chassis_ChassisRunMode_NextRunMode = 0
	Devm_Chassiss_Chassis_ChassisRunMode_NextRunMode_SINGLE                    Devm_Chassiss_Chassis_ChassisRunMode_NextRunMode = 1
	Devm_Chassiss_Chassis_ChassisRunMode_NextRunMode_CCCX_0                    Devm_Chassiss_Chassis_ChassisRunMode_NextRunMode = 2
	Devm_Chassiss_Chassis_ChassisRunMode_NextRunMode_CCCX_1                    Devm_Chassiss_Chassis_ChassisRunMode_NextRunMode = 3
	Devm_Chassiss_Chassis_ChassisRunMode_NextRunMode_CCCX_2                    Devm_Chassiss_Chassis_ChassisRunMode_NextRunMode = 4
	Devm_Chassiss_Chassis_ChassisRunMode_NextRunMode_VIRTUALX_CLUSTERX_CHASSIS Devm_Chassiss_Chassis_ChassisRunMode_NextRunMode = 6
)

// Enum value maps for Devm_Chassiss_Chassis_ChassisRunMode_NextRunMode.
var (
	Devm_Chassiss_Chassis_ChassisRunMode_NextRunMode_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_NextRunMode",
		1: "NextRunMode_SINGLE",
		2: "NextRunMode_CCCX_0",
		3: "NextRunMode_CCCX_1",
		4: "NextRunMode_CCCX_2",
		6: "NextRunMode_VIRTUALX_CLUSTERX_CHASSIS",
	}
	Devm_Chassiss_Chassis_ChassisRunMode_NextRunMode_value = map[string]int32{
		"INVALID_ENUM_VALUE_NextRunMode":        0,
		"NextRunMode_SINGLE":                    1,
		"NextRunMode_CCCX_0":                    2,
		"NextRunMode_CCCX_1":                    3,
		"NextRunMode_CCCX_2":                    4,
		"NextRunMode_VIRTUALX_CLUSTERX_CHASSIS": 6,
	}
)

func (x Devm_Chassiss_Chassis_ChassisRunMode_NextRunMode) Enum() *Devm_Chassiss_Chassis_ChassisRunMode_NextRunMode {
	p := new(Devm_Chassiss_Chassis_ChassisRunMode_NextRunMode)
	*p = x
	return p
}

func (x Devm_Chassiss_Chassis_ChassisRunMode_NextRunMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Chassiss_Chassis_ChassisRunMode_NextRunMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[14].Descriptor()
}

func (Devm_Chassiss_Chassis_ChassisRunMode_NextRunMode) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[14]
}

func (x Devm_Chassiss_Chassis_ChassisRunMode_NextRunMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Chassiss_Chassis_ChassisRunMode_NextRunMode.Descriptor instead.
func (Devm_Chassiss_Chassis_ChassisRunMode_NextRunMode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 2, 0, 5, 1}
}

type Devm_Chassiss_Chassis_PmInputAttribute_PmInputMode int32

const (
	Devm_Chassiss_Chassis_PmInputAttribute_PmInputMode_DEFAULT          Devm_Chassiss_Chassis_PmInputAttribute_PmInputMode = 0
	Devm_Chassiss_Chassis_PmInputAttribute_PmInputMode_UNKNOWN          Devm_Chassiss_Chassis_PmInputAttribute_PmInputMode = 1
	Devm_Chassiss_Chassis_PmInputAttribute_PmInputMode_STANDARD         Devm_Chassiss_Chassis_PmInputAttribute_PmInputMode = 85
	Devm_Chassiss_Chassis_PmInputAttribute_PmInputMode_LOWX_RELIABILITY Devm_Chassiss_Chassis_PmInputAttribute_PmInputMode = 170
)

// Enum value maps for Devm_Chassiss_Chassis_PmInputAttribute_PmInputMode.
var (
	Devm_Chassiss_Chassis_PmInputAttribute_PmInputMode_name = map[int32]string{
		0:   "PmInputMode_DEFAULT",
		1:   "PmInputMode_UNKNOWN",
		85:  "PmInputMode_STANDARD",
		170: "PmInputMode_LOWX_RELIABILITY",
	}
	Devm_Chassiss_Chassis_PmInputAttribute_PmInputMode_value = map[string]int32{
		"PmInputMode_DEFAULT":          0,
		"PmInputMode_UNKNOWN":          1,
		"PmInputMode_STANDARD":         85,
		"PmInputMode_LOWX_RELIABILITY": 170,
	}
)

func (x Devm_Chassiss_Chassis_PmInputAttribute_PmInputMode) Enum() *Devm_Chassiss_Chassis_PmInputAttribute_PmInputMode {
	p := new(Devm_Chassiss_Chassis_PmInputAttribute_PmInputMode)
	*p = x
	return p
}

func (x Devm_Chassiss_Chassis_PmInputAttribute_PmInputMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Chassiss_Chassis_PmInputAttribute_PmInputMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[15].Descriptor()
}

func (Devm_Chassiss_Chassis_PmInputAttribute_PmInputMode) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[15]
}

func (x Devm_Chassiss_Chassis_PmInputAttribute_PmInputMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Chassiss_Chassis_PmInputAttribute_PmInputMode.Descriptor instead.
func (Devm_Chassiss_Chassis_PmInputAttribute_PmInputMode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 2, 0, 6, 0}
}

type Devm_Chassiss_Chassis_ChassisSfuMode_CurrentSfuMode int32

const (
	Devm_Chassiss_Chassis_ChassisSfuMode_INVALID_ENUM_VALUE_CurrentSfuMode Devm_Chassiss_Chassis_ChassisSfuMode_CurrentSfuMode = 0
	Devm_Chassiss_Chassis_ChassisSfuMode_CurrentSfuMode_FOURX_SFU          Devm_Chassiss_Chassis_ChassisSfuMode_CurrentSfuMode = 1
	Devm_Chassiss_Chassis_ChassisSfuMode_CurrentSfuMode_SIXX_SFU           Devm_Chassiss_Chassis_ChassisSfuMode_CurrentSfuMode = 2
)

// Enum value maps for Devm_Chassiss_Chassis_ChassisSfuMode_CurrentSfuMode.
var (
	Devm_Chassiss_Chassis_ChassisSfuMode_CurrentSfuMode_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_CurrentSfuMode",
		1: "CurrentSfuMode_FOURX_SFU",
		2: "CurrentSfuMode_SIXX_SFU",
	}
	Devm_Chassiss_Chassis_ChassisSfuMode_CurrentSfuMode_value = map[string]int32{
		"INVALID_ENUM_VALUE_CurrentSfuMode": 0,
		"CurrentSfuMode_FOURX_SFU":          1,
		"CurrentSfuMode_SIXX_SFU":           2,
	}
)

func (x Devm_Chassiss_Chassis_ChassisSfuMode_CurrentSfuMode) Enum() *Devm_Chassiss_Chassis_ChassisSfuMode_CurrentSfuMode {
	p := new(Devm_Chassiss_Chassis_ChassisSfuMode_CurrentSfuMode)
	*p = x
	return p
}

func (x Devm_Chassiss_Chassis_ChassisSfuMode_CurrentSfuMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Chassiss_Chassis_ChassisSfuMode_CurrentSfuMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[16].Descriptor()
}

func (Devm_Chassiss_Chassis_ChassisSfuMode_CurrentSfuMode) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[16]
}

func (x Devm_Chassiss_Chassis_ChassisSfuMode_CurrentSfuMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Chassiss_Chassis_ChassisSfuMode_CurrentSfuMode.Descriptor instead.
func (Devm_Chassiss_Chassis_ChassisSfuMode_CurrentSfuMode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 2, 0, 7, 0}
}

type Devm_Chassiss_Chassis_ChassisSfuMode_NextSfuMode int32

const (
	Devm_Chassiss_Chassis_ChassisSfuMode_INVALID_ENUM_VALUE_NextSfuMode Devm_Chassiss_Chassis_ChassisSfuMode_NextSfuMode = 0
	Devm_Chassiss_Chassis_ChassisSfuMode_NextSfuMode_FOURX_SFU          Devm_Chassiss_Chassis_ChassisSfuMode_NextSfuMode = 1
	Devm_Chassiss_Chassis_ChassisSfuMode_NextSfuMode_SIXX_SFU           Devm_Chassiss_Chassis_ChassisSfuMode_NextSfuMode = 2
)

// Enum value maps for Devm_Chassiss_Chassis_ChassisSfuMode_NextSfuMode.
var (
	Devm_Chassiss_Chassis_ChassisSfuMode_NextSfuMode_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_NextSfuMode",
		1: "NextSfuMode_FOURX_SFU",
		2: "NextSfuMode_SIXX_SFU",
	}
	Devm_Chassiss_Chassis_ChassisSfuMode_NextSfuMode_value = map[string]int32{
		"INVALID_ENUM_VALUE_NextSfuMode": 0,
		"NextSfuMode_FOURX_SFU":          1,
		"NextSfuMode_SIXX_SFU":           2,
	}
)

func (x Devm_Chassiss_Chassis_ChassisSfuMode_NextSfuMode) Enum() *Devm_Chassiss_Chassis_ChassisSfuMode_NextSfuMode {
	p := new(Devm_Chassiss_Chassis_ChassisSfuMode_NextSfuMode)
	*p = x
	return p
}

func (x Devm_Chassiss_Chassis_ChassisSfuMode_NextSfuMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Chassiss_Chassis_ChassisSfuMode_NextSfuMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[17].Descriptor()
}

func (Devm_Chassiss_Chassis_ChassisSfuMode_NextSfuMode) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[17]
}

func (x Devm_Chassiss_Chassis_ChassisSfuMode_NextSfuMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Chassiss_Chassis_ChassisSfuMode_NextSfuMode.Descriptor instead.
func (Devm_Chassiss_Chassis_ChassisSfuMode_NextSfuMode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 2, 0, 7, 1}
}

type Devm_LogicContainers_LogicContainer_ContainerType int32

const (
	Devm_LogicContainers_LogicContainer_ContainerType_UNKNOWN        Devm_LogicContainers_LogicContainer_ContainerType = 0
	Devm_LogicContainers_LogicContainer_ContainerType_BOARDSLOT      Devm_LogicContainers_LogicContainer_ContainerType = 1
	Devm_LogicContainers_LogicContainer_ContainerType_MPUSLOT        Devm_LogicContainers_LogicContainer_ContainerType = 2
	Devm_LogicContainers_LogicContainer_ContainerType_LPUSLOT        Devm_LogicContainers_LogicContainer_ContainerType = 3
	Devm_LogicContainers_LogicContainer_ContainerType_SFUSLOT        Devm_LogicContainers_LogicContainer_ContainerType = 4
	Devm_LogicContainers_LogicContainer_ContainerType_ICUSLOT        Devm_LogicContainers_LogicContainer_ContainerType = 5
	Devm_LogicContainers_LogicContainer_ContainerType_ECUSLOT        Devm_LogicContainers_LogicContainer_ContainerType = 6
	Devm_LogicContainers_LogicContainer_ContainerType_CLKSLOT        Devm_LogicContainers_LogicContainer_ContainerType = 7
	Devm_LogicContainers_LogicContainer_ContainerType_CMUSLOT        Devm_LogicContainers_LogicContainer_ContainerType = 8
	Devm_LogicContainers_LogicContainer_ContainerType_FANSLOT        Devm_LogicContainers_LogicContainer_ContainerType = 9
	Devm_LogicContainers_LogicContainer_ContainerType_POWERSLOT      Devm_LogicContainers_LogicContainer_ContainerType = 10
	Devm_LogicContainers_LogicContainer_ContainerType_LCDSLOT        Devm_LogicContainers_LogicContainer_ContainerType = 11
	Devm_LogicContainers_LogicContainer_ContainerType_PICSLOT        Devm_LogicContainers_LogicContainer_ContainerType = 12
	Devm_LogicContainers_LogicContainer_ContainerType_OFCSLOT        Devm_LogicContainers_LogicContainer_ContainerType = 13
	Devm_LogicContainers_LogicContainer_ContainerType_CFCARDSLOT     Devm_LogicContainers_LogicContainer_ContainerType = 14
	Devm_LogicContainers_LogicContainer_ContainerType_VIRTUALSLOT    Devm_LogicContainers_LogicContainer_ContainerType = 15
	Devm_LogicContainers_LogicContainer_ContainerType_VIRTUALSUBSLOT Devm_LogicContainers_LogicContainer_ContainerType = 16
)

// Enum value maps for Devm_LogicContainers_LogicContainer_ContainerType.
var (
	Devm_LogicContainers_LogicContainer_ContainerType_name = map[int32]string{
		0:  "ContainerType_UNKNOWN",
		1:  "ContainerType_BOARDSLOT",
		2:  "ContainerType_MPUSLOT",
		3:  "ContainerType_LPUSLOT",
		4:  "ContainerType_SFUSLOT",
		5:  "ContainerType_ICUSLOT",
		6:  "ContainerType_ECUSLOT",
		7:  "ContainerType_CLKSLOT",
		8:  "ContainerType_CMUSLOT",
		9:  "ContainerType_FANSLOT",
		10: "ContainerType_POWERSLOT",
		11: "ContainerType_LCDSLOT",
		12: "ContainerType_PICSLOT",
		13: "ContainerType_OFCSLOT",
		14: "ContainerType_CFCARDSLOT",
		15: "ContainerType_VIRTUALSLOT",
		16: "ContainerType_VIRTUALSUBSLOT",
	}
	Devm_LogicContainers_LogicContainer_ContainerType_value = map[string]int32{
		"ContainerType_UNKNOWN":        0,
		"ContainerType_BOARDSLOT":      1,
		"ContainerType_MPUSLOT":        2,
		"ContainerType_LPUSLOT":        3,
		"ContainerType_SFUSLOT":        4,
		"ContainerType_ICUSLOT":        5,
		"ContainerType_ECUSLOT":        6,
		"ContainerType_CLKSLOT":        7,
		"ContainerType_CMUSLOT":        8,
		"ContainerType_FANSLOT":        9,
		"ContainerType_POWERSLOT":      10,
		"ContainerType_LCDSLOT":        11,
		"ContainerType_PICSLOT":        12,
		"ContainerType_OFCSLOT":        13,
		"ContainerType_CFCARDSLOT":     14,
		"ContainerType_VIRTUALSLOT":    15,
		"ContainerType_VIRTUALSUBSLOT": 16,
	}
)

func (x Devm_LogicContainers_LogicContainer_ContainerType) Enum() *Devm_LogicContainers_LogicContainer_ContainerType {
	p := new(Devm_LogicContainers_LogicContainer_ContainerType)
	*p = x
	return p
}

func (x Devm_LogicContainers_LogicContainer_ContainerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_LogicContainers_LogicContainer_ContainerType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[18].Descriptor()
}

func (Devm_LogicContainers_LogicContainer_ContainerType) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[18]
}

func (x Devm_LogicContainers_LogicContainer_ContainerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_LogicContainers_LogicContainer_ContainerType.Descriptor instead.
func (Devm_LogicContainers_LogicContainer_ContainerType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 3, 0, 0}
}

type Devm_LogicContainers_LogicContainer_EquipedEntityType int32

const (
	Devm_LogicContainers_LogicContainer_EquipedEntityType_UNKNOWN Devm_LogicContainers_LogicContainer_EquipedEntityType = 0
)

// Enum value maps for Devm_LogicContainers_LogicContainer_EquipedEntityType.
var (
	Devm_LogicContainers_LogicContainer_EquipedEntityType_name = map[int32]string{
		0: "EquipedEntityType_UNKNOWN",
	}
	Devm_LogicContainers_LogicContainer_EquipedEntityType_value = map[string]int32{
		"EquipedEntityType_UNKNOWN": 0,
	}
)

func (x Devm_LogicContainers_LogicContainer_EquipedEntityType) Enum() *Devm_LogicContainers_LogicContainer_EquipedEntityType {
	p := new(Devm_LogicContainers_LogicContainer_EquipedEntityType)
	*p = x
	return p
}

func (x Devm_LogicContainers_LogicContainer_EquipedEntityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_LogicContainers_LogicContainer_EquipedEntityType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[19].Descriptor()
}

func (Devm_LogicContainers_LogicContainer_EquipedEntityType) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[19]
}

func (x Devm_LogicContainers_LogicContainer_EquipedEntityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_LogicContainers_LogicContainer_EquipedEntityType.Descriptor instead.
func (Devm_LogicContainers_LogicContainer_EquipedEntityType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 3, 0, 1}
}

type Devm_LogicContainers_LogicContainer_SupportedEntityTypes_SupportedEntityType_EntityType int32

const (
	Devm_LogicContainers_LogicContainer_SupportedEntityTypes_SupportedEntityType_EntityType_UNKNOWN Devm_LogicContainers_LogicContainer_SupportedEntityTypes_SupportedEntityType_EntityType = 0
)

// Enum value maps for Devm_LogicContainers_LogicContainer_SupportedEntityTypes_SupportedEntityType_EntityType.
var (
	Devm_LogicContainers_LogicContainer_SupportedEntityTypes_SupportedEntityType_EntityType_name = map[int32]string{
		0: "EntityType_UNKNOWN",
	}
	Devm_LogicContainers_LogicContainer_SupportedEntityTypes_SupportedEntityType_EntityType_value = map[string]int32{
		"EntityType_UNKNOWN": 0,
	}
)

func (x Devm_LogicContainers_LogicContainer_SupportedEntityTypes_SupportedEntityType_EntityType) Enum() *Devm_LogicContainers_LogicContainer_SupportedEntityTypes_SupportedEntityType_EntityType {
	p := new(Devm_LogicContainers_LogicContainer_SupportedEntityTypes_SupportedEntityType_EntityType)
	*p = x
	return p
}

func (x Devm_LogicContainers_LogicContainer_SupportedEntityTypes_SupportedEntityType_EntityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_LogicContainers_LogicContainer_SupportedEntityTypes_SupportedEntityType_EntityType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[20].Descriptor()
}

func (Devm_LogicContainers_LogicContainer_SupportedEntityTypes_SupportedEntityType_EntityType) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[20]
}

func (x Devm_LogicContainers_LogicContainer_SupportedEntityTypes_SupportedEntityType_EntityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_LogicContainers_LogicContainer_SupportedEntityTypes_SupportedEntityType_EntityType.Descriptor instead.
func (Devm_LogicContainers_LogicContainer_SupportedEntityTypes_SupportedEntityType_EntityType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 3, 0, 0, 0, 0}
}

type Devm_Containers_Container_Present int32

const (
	Devm_Containers_Container_Present_ABSENT  Devm_Containers_Container_Present = 0
	Devm_Containers_Container_Present_PRESENT Devm_Containers_Container_Present = 1
)

// Enum value maps for Devm_Containers_Container_Present.
var (
	Devm_Containers_Container_Present_name = map[int32]string{
		0: "Present_ABSENT",
		1: "Present_PRESENT",
	}
	Devm_Containers_Container_Present_value = map[string]int32{
		"Present_ABSENT":  0,
		"Present_PRESENT": 1,
	}
)

func (x Devm_Containers_Container_Present) Enum() *Devm_Containers_Container_Present {
	p := new(Devm_Containers_Container_Present)
	*p = x
	return p
}

func (x Devm_Containers_Container_Present) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Containers_Container_Present) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[21].Descriptor()
}

func (Devm_Containers_Container_Present) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[21]
}

func (x Devm_Containers_Container_Present) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Containers_Container_Present.Descriptor instead.
func (Devm_Containers_Container_Present) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 4, 0, 0}
}

type Devm_MpuBoards_MpuBoard_LsRole int32

const (
	Devm_MpuBoards_MpuBoard_LsRole_UNKNOWN Devm_MpuBoards_MpuBoard_LsRole = 0
	Devm_MpuBoards_MpuBoard_LsRole_MMB     Devm_MpuBoards_MpuBoard_LsRole = 1
	Devm_MpuBoards_MpuBoard_LsRole_PLMB    Devm_MpuBoards_MpuBoard_LsRole = 2
	Devm_MpuBoards_MpuBoard_LsRole_ACMB    Devm_MpuBoards_MpuBoard_LsRole = 3
	Devm_MpuBoards_MpuBoard_LsRole_MB      Devm_MpuBoards_MpuBoard_LsRole = 4
	Devm_MpuBoards_MpuBoard_LsRole_LC      Devm_MpuBoards_MpuBoard_LsRole = 5
	Devm_MpuBoards_MpuBoard_LsRole_SYSMMB  Devm_MpuBoards_MpuBoard_LsRole = 6
	Devm_MpuBoards_MpuBoard_LsRole_SYSMB   Devm_MpuBoards_MpuBoard_LsRole = 7
)

// Enum value maps for Devm_MpuBoards_MpuBoard_LsRole.
var (
	Devm_MpuBoards_MpuBoard_LsRole_name = map[int32]string{
		0: "LsRole_UNKNOWN",
		1: "LsRole_MMB",
		2: "LsRole_PLMB",
		3: "LsRole_ACMB",
		4: "LsRole_MB",
		5: "LsRole_LC",
		6: "LsRole_SYSMMB",
		7: "LsRole_SYSMB",
	}
	Devm_MpuBoards_MpuBoard_LsRole_value = map[string]int32{
		"LsRole_UNKNOWN": 0,
		"LsRole_MMB":     1,
		"LsRole_PLMB":    2,
		"LsRole_ACMB":    3,
		"LsRole_MB":      4,
		"LsRole_LC":      5,
		"LsRole_SYSMMB":  6,
		"LsRole_SYSMB":   7,
	}
)

func (x Devm_MpuBoards_MpuBoard_LsRole) Enum() *Devm_MpuBoards_MpuBoard_LsRole {
	p := new(Devm_MpuBoards_MpuBoard_LsRole)
	*p = x
	return p
}

func (x Devm_MpuBoards_MpuBoard_LsRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_MpuBoards_MpuBoard_LsRole) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[22].Descriptor()
}

func (Devm_MpuBoards_MpuBoard_LsRole) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[22]
}

func (x Devm_MpuBoards_MpuBoard_LsRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_LsRole.Descriptor instead.
func (Devm_MpuBoards_MpuBoard_LsRole) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 0}
}

type Devm_MpuBoards_MpuBoard_Bras_FlowStatisticFrequency_Type int32

const (
	Devm_MpuBoards_MpuBoard_Bras_FlowStatisticFrequency_INVALID_ENUM_VALUE_Type Devm_MpuBoards_MpuBoard_Bras_FlowStatisticFrequency_Type = 0
	Devm_MpuBoards_MpuBoard_Bras_FlowStatisticFrequency_Type_FAST               Devm_MpuBoards_MpuBoard_Bras_FlowStatisticFrequency_Type = 1
	Devm_MpuBoards_MpuBoard_Bras_FlowStatisticFrequency_Type_NORMAL             Devm_MpuBoards_MpuBoard_Bras_FlowStatisticFrequency_Type = 2
	Devm_MpuBoards_MpuBoard_Bras_FlowStatisticFrequency_Type_SLOW               Devm_MpuBoards_MpuBoard_Bras_FlowStatisticFrequency_Type = 3
	Devm_MpuBoards_MpuBoard_Bras_FlowStatisticFrequency_Type_DEFAULT            Devm_MpuBoards_MpuBoard_Bras_FlowStatisticFrequency_Type = 4
)

// Enum value maps for Devm_MpuBoards_MpuBoard_Bras_FlowStatisticFrequency_Type.
var (
	Devm_MpuBoards_MpuBoard_Bras_FlowStatisticFrequency_Type_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Type",
		1: "Type_FAST",
		2: "Type_NORMAL",
		3: "Type_SLOW",
		4: "Type_DEFAULT",
	}
	Devm_MpuBoards_MpuBoard_Bras_FlowStatisticFrequency_Type_value = map[string]int32{
		"INVALID_ENUM_VALUE_Type": 0,
		"Type_FAST":               1,
		"Type_NORMAL":             2,
		"Type_SLOW":               3,
		"Type_DEFAULT":            4,
	}
)

func (x Devm_MpuBoards_MpuBoard_Bras_FlowStatisticFrequency_Type) Enum() *Devm_MpuBoards_MpuBoard_Bras_FlowStatisticFrequency_Type {
	p := new(Devm_MpuBoards_MpuBoard_Bras_FlowStatisticFrequency_Type)
	*p = x
	return p
}

func (x Devm_MpuBoards_MpuBoard_Bras_FlowStatisticFrequency_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_MpuBoards_MpuBoard_Bras_FlowStatisticFrequency_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[23].Descriptor()
}

func (Devm_MpuBoards_MpuBoard_Bras_FlowStatisticFrequency_Type) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[23]
}

func (x Devm_MpuBoards_MpuBoard_Bras_FlowStatisticFrequency_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Bras_FlowStatisticFrequency_Type.Descriptor instead.
func (Devm_MpuBoards_MpuBoard_Bras_FlowStatisticFrequency_Type) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 0, 0, 0}
}

type Devm_MpuBoards_MpuBoard_L2Tp_ForwardMode_ModeValue int32

const (
	Devm_MpuBoards_MpuBoard_L2Tp_ForwardMode_ModeValue_LOOPBACK Devm_MpuBoards_MpuBoard_L2Tp_ForwardMode_ModeValue = 0
	Devm_MpuBoards_MpuBoard_L2Tp_ForwardMode_ModeValue_THROUGH  Devm_MpuBoards_MpuBoard_L2Tp_ForwardMode_ModeValue = 1
)

// Enum value maps for Devm_MpuBoards_MpuBoard_L2Tp_ForwardMode_ModeValue.
var (
	Devm_MpuBoards_MpuBoard_L2Tp_ForwardMode_ModeValue_name = map[int32]string{
		0: "ModeValue_LOOPBACK",
		1: "ModeValue_THROUGH",
	}
	Devm_MpuBoards_MpuBoard_L2Tp_ForwardMode_ModeValue_value = map[string]int32{
		"ModeValue_LOOPBACK": 0,
		"ModeValue_THROUGH":  1,
	}
)

func (x Devm_MpuBoards_MpuBoard_L2Tp_ForwardMode_ModeValue) Enum() *Devm_MpuBoards_MpuBoard_L2Tp_ForwardMode_ModeValue {
	p := new(Devm_MpuBoards_MpuBoard_L2Tp_ForwardMode_ModeValue)
	*p = x
	return p
}

func (x Devm_MpuBoards_MpuBoard_L2Tp_ForwardMode_ModeValue) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_MpuBoards_MpuBoard_L2Tp_ForwardMode_ModeValue) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[24].Descriptor()
}

func (Devm_MpuBoards_MpuBoard_L2Tp_ForwardMode_ModeValue) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[24]
}

func (x Devm_MpuBoards_MpuBoard_L2Tp_ForwardMode_ModeValue) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_L2Tp_ForwardMode_ModeValue.Descriptor instead.
func (Devm_MpuBoards_MpuBoard_L2Tp_ForwardMode_ModeValue) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 1, 1, 0}
}

type Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_Type int32

const (
	Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_INVALID_ENUM_VALUE_Type Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_Type = 0
	Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_Type_HOSTX_CAR          Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_Type = 1
	Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_Type_HTTPX_HOSTX_CAR    Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_Type = 2
	Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_Type_VLANX_HOSTX_CAR    Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_Type = 3
)

// Enum value maps for Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_Type.
var (
	Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_Type_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Type",
		1: "Type_HOSTX_CAR",
		2: "Type_HTTPX_HOSTX_CAR",
		3: "Type_VLANX_HOSTX_CAR",
	}
	Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_Type_value = map[string]int32{
		"INVALID_ENUM_VALUE_Type": 0,
		"Type_HOSTX_CAR":          1,
		"Type_HTTPX_HOSTX_CAR":    2,
		"Type_VLANX_HOSTX_CAR":    3,
	}
)

func (x Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_Type) Enum() *Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_Type {
	p := new(Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_Type)
	*p = x
	return p
}

func (x Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[25].Descriptor()
}

func (Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_Type) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[25]
}

func (x Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_Type.Descriptor instead.
func (Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_Type) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 4, 1, 0, 0}
}

type Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType int32

const (
	Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar_INVALID_ENUM_VALUE_CarType    Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType = 0
	Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType_ICMP                  Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType = 1
	Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType_TCP                   Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType = 2
	Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType_UDP                   Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType = 3
	Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType_GRE                   Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType = 4
	Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType_BGP                   Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType = 5
	Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType_DEFAULT               Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType = 6
	Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType_TOTAL                 Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType = 7
	Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType_IKEX_TOTALX_CAR       Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType = 8
	Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType_IKEX_TUNNELX_CAR      Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType = 9
	Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType_PLAINX_SAX_MISS       Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType = 10
	Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType_CIPHERX_SAX_MISS      Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType = 11
	Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType_IPSECX_REKEY          Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType = 12
	Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType_IKEX_DPD              Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType = 13
	Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType_FASTX_CHANNEL         Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType = 14
	Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType_BFDX_DOWN             Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType = 15
	Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType_PST                   Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType = 16
	Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType_DSLITEX_PRIVATEX_IPV4 Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType = 17
	Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType_IPX_OPTION            Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType = 18
	Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType_MTUX_EXCEED           Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType = 19
	Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType_CGNX_ICMP             Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType = 20
	Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType_CGNX_ICMPV6           Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType = 21
	Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType_CGNX_IPV4X_OTHER      Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType = 22
	Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType_CGNX_IPV6X_OTHER      Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType = 23
	Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType_CGNX_IPV6X_RAW        Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType = 24
	Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType_CGNX_TOTAL            Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType = 25
)

// Enum value maps for Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType.
var (
	Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType_name = map[int32]string{
		0:  "INVALID_ENUM_VALUE_CarType",
		1:  "CarType_ICMP",
		2:  "CarType_TCP",
		3:  "CarType_UDP",
		4:  "CarType_GRE",
		5:  "CarType_BGP",
		6:  "CarType_DEFAULT",
		7:  "CarType_TOTAL",
		8:  "CarType_IKEX_TOTALX_CAR",
		9:  "CarType_IKEX_TUNNELX_CAR",
		10: "CarType_PLAINX_SAX_MISS",
		11: "CarType_CIPHERX_SAX_MISS",
		12: "CarType_IPSECX_REKEY",
		13: "CarType_IKEX_DPD",
		14: "CarType_FASTX_CHANNEL",
		15: "CarType_BFDX_DOWN",
		16: "CarType_PST",
		17: "CarType_DSLITEX_PRIVATEX_IPV4",
		18: "CarType_IPX_OPTION",
		19: "CarType_MTUX_EXCEED",
		20: "CarType_CGNX_ICMP",
		21: "CarType_CGNX_ICMPV6",
		22: "CarType_CGNX_IPV4X_OTHER",
		23: "CarType_CGNX_IPV6X_OTHER",
		24: "CarType_CGNX_IPV6X_RAW",
		25: "CarType_CGNX_TOTAL",
	}
	Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType_value = map[string]int32{
		"INVALID_ENUM_VALUE_CarType":    0,
		"CarType_ICMP":                  1,
		"CarType_TCP":                   2,
		"CarType_UDP":                   3,
		"CarType_GRE":                   4,
		"CarType_BGP":                   5,
		"CarType_DEFAULT":               6,
		"CarType_TOTAL":                 7,
		"CarType_IKEX_TOTALX_CAR":       8,
		"CarType_IKEX_TUNNELX_CAR":      9,
		"CarType_PLAINX_SAX_MISS":       10,
		"CarType_CIPHERX_SAX_MISS":      11,
		"CarType_IPSECX_REKEY":          12,
		"CarType_IKEX_DPD":              13,
		"CarType_FASTX_CHANNEL":         14,
		"CarType_BFDX_DOWN":             15,
		"CarType_PST":                   16,
		"CarType_DSLITEX_PRIVATEX_IPV4": 17,
		"CarType_IPX_OPTION":            18,
		"CarType_MTUX_EXCEED":           19,
		"CarType_CGNX_ICMP":             20,
		"CarType_CGNX_ICMPV6":           21,
		"CarType_CGNX_IPV4X_OTHER":      22,
		"CarType_CGNX_IPV6X_OTHER":      23,
		"CarType_CGNX_IPV6X_RAW":        24,
		"CarType_CGNX_TOTAL":            25,
	}
)

func (x Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType) Enum() *Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType {
	p := new(Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType)
	*p = x
	return p
}

func (x Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[26].Descriptor()
}

func (Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[26]
}

func (x Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType.Descriptor instead.
func (Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 4, 2, 0, 0}
}

type Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms_NdAttackAlarm_Type int32

const (
	Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms_NdAttackAlarm_INVALID_ENUM_VALUE_Type Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms_NdAttackAlarm_Type = 0
	Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms_NdAttackAlarm_Type_NA                 Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms_NdAttackAlarm_Type = 1
	Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms_NdAttackAlarm_Type_NSX_UNICAST        Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms_NdAttackAlarm_Type = 2
	Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms_NdAttackAlarm_Type_NSX_MULTICAST      Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms_NdAttackAlarm_Type = 3
)

// Enum value maps for Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms_NdAttackAlarm_Type.
var (
	Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms_NdAttackAlarm_Type_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Type",
		1: "Type_NA",
		2: "Type_NSX_UNICAST",
		3: "Type_NSX_MULTICAST",
	}
	Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms_NdAttackAlarm_Type_value = map[string]int32{
		"INVALID_ENUM_VALUE_Type": 0,
		"Type_NA":                 1,
		"Type_NSX_UNICAST":        2,
		"Type_NSX_MULTICAST":      3,
	}
)

func (x Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms_NdAttackAlarm_Type) Enum() *Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms_NdAttackAlarm_Type {
	p := new(Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms_NdAttackAlarm_Type)
	*p = x
	return p
}

func (x Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms_NdAttackAlarm_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms_NdAttackAlarm_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[27].Descriptor()
}

func (Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms_NdAttackAlarm_Type) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[27]
}

func (x Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms_NdAttackAlarm_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms_NdAttackAlarm_Type.Descriptor instead.
func (Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms_NdAttackAlarm_Type) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 4, 4, 0, 0, 0}
}

type Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_Level2Cars_Level2Car_Type int32

const (
	Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_Level2Cars_Level2Car_INVALID_ENUM_VALUE_Type Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_Level2Cars_Level2Car_Type = 0
	Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_Level2Cars_Level2Car_Type_NA                 Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_Level2Cars_Level2Car_Type = 1
	Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_Level2Cars_Level2Car_Type_NSX_UNICAST        Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_Level2Cars_Level2Car_Type = 2
	Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_Level2Cars_Level2Car_Type_NSX_MULTICAST      Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_Level2Cars_Level2Car_Type = 3
)

// Enum value maps for Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_Level2Cars_Level2Car_Type.
var (
	Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_Level2Cars_Level2Car_Type_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Type",
		1: "Type_NA",
		2: "Type_NSX_UNICAST",
		3: "Type_NSX_MULTICAST",
	}
	Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_Level2Cars_Level2Car_Type_value = map[string]int32{
		"INVALID_ENUM_VALUE_Type": 0,
		"Type_NA":                 1,
		"Type_NSX_UNICAST":        2,
		"Type_NSX_MULTICAST":      3,
	}
)

func (x Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_Level2Cars_Level2Car_Type) Enum() *Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_Level2Cars_Level2Car_Type {
	p := new(Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_Level2Cars_Level2Car_Type)
	*p = x
	return p
}

func (x Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_Level2Cars_Level2Car_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_Level2Cars_Level2Car_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[28].Descriptor()
}

func (Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_Level2Cars_Level2Car_Type) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[28]
}

func (x Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_Level2Cars_Level2Car_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_Level2Cars_Level2Car_Type.Descriptor instead.
func (Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_Level2Cars_Level2Car_Type) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 4, 4, 1, 0, 0}
}

type Devm_MpuBoards_MpuBoard_CmacPadding_Padding int32

const (
	Devm_MpuBoards_MpuBoard_CmacPadding_Padding_DISABLE Devm_MpuBoards_MpuBoard_CmacPadding_Padding = 0
	Devm_MpuBoards_MpuBoard_CmacPadding_Padding_ENABLE  Devm_MpuBoards_MpuBoard_CmacPadding_Padding = 1
)

// Enum value maps for Devm_MpuBoards_MpuBoard_CmacPadding_Padding.
var (
	Devm_MpuBoards_MpuBoard_CmacPadding_Padding_name = map[int32]string{
		0: "Padding_DISABLE",
		1: "Padding_ENABLE",
	}
	Devm_MpuBoards_MpuBoard_CmacPadding_Padding_value = map[string]int32{
		"Padding_DISABLE": 0,
		"Padding_ENABLE":  1,
	}
)

func (x Devm_MpuBoards_MpuBoard_CmacPadding_Padding) Enum() *Devm_MpuBoards_MpuBoard_CmacPadding_Padding {
	p := new(Devm_MpuBoards_MpuBoard_CmacPadding_Padding)
	*p = x
	return p
}

func (x Devm_MpuBoards_MpuBoard_CmacPadding_Padding) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_MpuBoards_MpuBoard_CmacPadding_Padding) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[29].Descriptor()
}

func (Devm_MpuBoards_MpuBoard_CmacPadding_Padding) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[29]
}

func (x Devm_MpuBoards_MpuBoard_CmacPadding_Padding) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_CmacPadding_Padding.Descriptor instead.
func (Devm_MpuBoards_MpuBoard_CmacPadding_Padding) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 5, 0}
}

type Devm_MpuBoards_MpuBoard_Fim_ForwardMode int32

const (
	Devm_MpuBoards_MpuBoard_Fim_ForwardMode_LOOPBACK Devm_MpuBoards_MpuBoard_Fim_ForwardMode = 0
	Devm_MpuBoards_MpuBoard_Fim_ForwardMode_THROUGH  Devm_MpuBoards_MpuBoard_Fim_ForwardMode = 1
)

// Enum value maps for Devm_MpuBoards_MpuBoard_Fim_ForwardMode.
var (
	Devm_MpuBoards_MpuBoard_Fim_ForwardMode_name = map[int32]string{
		0: "ForwardMode_LOOPBACK",
		1: "ForwardMode_THROUGH",
	}
	Devm_MpuBoards_MpuBoard_Fim_ForwardMode_value = map[string]int32{
		"ForwardMode_LOOPBACK": 0,
		"ForwardMode_THROUGH":  1,
	}
)

func (x Devm_MpuBoards_MpuBoard_Fim_ForwardMode) Enum() *Devm_MpuBoards_MpuBoard_Fim_ForwardMode {
	p := new(Devm_MpuBoards_MpuBoard_Fim_ForwardMode)
	*p = x
	return p
}

func (x Devm_MpuBoards_MpuBoard_Fim_ForwardMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_MpuBoards_MpuBoard_Fim_ForwardMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[30].Descriptor()
}

func (Devm_MpuBoards_MpuBoard_Fim_ForwardMode) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[30]
}

func (x Devm_MpuBoards_MpuBoard_Fim_ForwardMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Fim_ForwardMode.Descriptor instead.
func (Devm_MpuBoards_MpuBoard_Fim_ForwardMode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 6, 0}
}

type Devm_MpuBoards_MpuBoard_Fim_VlanMissEnable int32

const (
	Devm_MpuBoards_MpuBoard_Fim_VlanMissEnable_DISABLE Devm_MpuBoards_MpuBoard_Fim_VlanMissEnable = 0
	Devm_MpuBoards_MpuBoard_Fim_VlanMissEnable_ENABLE  Devm_MpuBoards_MpuBoard_Fim_VlanMissEnable = 1
)

// Enum value maps for Devm_MpuBoards_MpuBoard_Fim_VlanMissEnable.
var (
	Devm_MpuBoards_MpuBoard_Fim_VlanMissEnable_name = map[int32]string{
		0: "VlanMissEnable_DISABLE",
		1: "VlanMissEnable_ENABLE",
	}
	Devm_MpuBoards_MpuBoard_Fim_VlanMissEnable_value = map[string]int32{
		"VlanMissEnable_DISABLE": 0,
		"VlanMissEnable_ENABLE":  1,
	}
)

func (x Devm_MpuBoards_MpuBoard_Fim_VlanMissEnable) Enum() *Devm_MpuBoards_MpuBoard_Fim_VlanMissEnable {
	p := new(Devm_MpuBoards_MpuBoard_Fim_VlanMissEnable)
	*p = x
	return p
}

func (x Devm_MpuBoards_MpuBoard_Fim_VlanMissEnable) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_MpuBoards_MpuBoard_Fim_VlanMissEnable) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[31].Descriptor()
}

func (Devm_MpuBoards_MpuBoard_Fim_VlanMissEnable) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[31]
}

func (x Devm_MpuBoards_MpuBoard_Fim_VlanMissEnable) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Fim_VlanMissEnable.Descriptor instead.
func (Devm_MpuBoards_MpuBoard_Fim_VlanMissEnable) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 6, 1}
}

type Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Lldp int32

const (
	Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Lldp_DISABLE Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Lldp = 0
	Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Lldp_ENABLE  Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Lldp = 1
)

// Enum value maps for Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Lldp.
var (
	Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Lldp_name = map[int32]string{
		0: "Lldp_DISABLE",
		1: "Lldp_ENABLE",
	}
	Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Lldp_value = map[string]int32{
		"Lldp_DISABLE": 0,
		"Lldp_ENABLE":  1,
	}
)

func (x Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Lldp) Enum() *Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Lldp {
	p := new(Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Lldp)
	*p = x
	return p
}

func (x Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Lldp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Lldp) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[32].Descriptor()
}

func (Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Lldp) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[32]
}

func (x Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Lldp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Lldp.Descriptor instead.
func (Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Lldp) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 10, 0}
}

type Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Lacp int32

const (
	Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Lacp_DISABLE Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Lacp = 0
	Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Lacp_ENABLE  Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Lacp = 1
)

// Enum value maps for Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Lacp.
var (
	Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Lacp_name = map[int32]string{
		0: "Lacp_DISABLE",
		1: "Lacp_ENABLE",
	}
	Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Lacp_value = map[string]int32{
		"Lacp_DISABLE": 0,
		"Lacp_ENABLE":  1,
	}
)

func (x Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Lacp) Enum() *Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Lacp {
	p := new(Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Lacp)
	*p = x
	return p
}

func (x Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Lacp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Lacp) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[33].Descriptor()
}

func (Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Lacp) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[33]
}

func (x Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Lacp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Lacp.Descriptor instead.
func (Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Lacp) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 10, 1}
}

type Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Oam int32

const (
	Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Oam_DISABLE Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Oam = 0
	Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Oam_ENABLE  Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Oam = 1
)

// Enum value maps for Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Oam.
var (
	Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Oam_name = map[int32]string{
		0: "Oam_DISABLE",
		1: "Oam_ENABLE",
	}
	Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Oam_value = map[string]int32{
		"Oam_DISABLE": 0,
		"Oam_ENABLE":  1,
	}
)

func (x Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Oam) Enum() *Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Oam {
	p := new(Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Oam)
	*p = x
	return p
}

func (x Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Oam) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Oam) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[34].Descriptor()
}

func (Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Oam) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[34]
}

func (x Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Oam) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Oam.Descriptor instead.
func (Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Oam) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 10, 2}
}

type Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Esmc int32

const (
	Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Esmc_DISABLE Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Esmc = 0
	Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Esmc_ENABLE  Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Esmc = 1
)

// Enum value maps for Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Esmc.
var (
	Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Esmc_name = map[int32]string{
		0: "Esmc_DISABLE",
		1: "Esmc_ENABLE",
	}
	Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Esmc_value = map[string]int32{
		"Esmc_DISABLE": 0,
		"Esmc_ENABLE":  1,
	}
)

func (x Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Esmc) Enum() *Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Esmc {
	p := new(Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Esmc)
	*p = x
	return p
}

func (x Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Esmc) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Esmc) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[35].Descriptor()
}

func (Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Esmc) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[35]
}

func (x Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Esmc) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Esmc.Descriptor instead.
func (Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Esmc) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 10, 3}
}

type Devm_MpuBoards_MpuBoard_Loadbalance_HashArithmetic_Arithmetic int32

const (
	Devm_MpuBoards_MpuBoard_Loadbalance_HashArithmetic_INVALID_ENUM_VALUE_Arithmetic Devm_MpuBoards_MpuBoard_Loadbalance_HashArithmetic_Arithmetic = 0
	Devm_MpuBoards_MpuBoard_Loadbalance_HashArithmetic_Arithmetic_ARITHMETIC1        Devm_MpuBoards_MpuBoard_Loadbalance_HashArithmetic_Arithmetic = 1
	Devm_MpuBoards_MpuBoard_Loadbalance_HashArithmetic_Arithmetic_ARITHMETIC2        Devm_MpuBoards_MpuBoard_Loadbalance_HashArithmetic_Arithmetic = 2
	Devm_MpuBoards_MpuBoard_Loadbalance_HashArithmetic_Arithmetic_ARITHMETIC3        Devm_MpuBoards_MpuBoard_Loadbalance_HashArithmetic_Arithmetic = 3
	Devm_MpuBoards_MpuBoard_Loadbalance_HashArithmetic_Arithmetic_ARITHMETIC4        Devm_MpuBoards_MpuBoard_Loadbalance_HashArithmetic_Arithmetic = 4
	Devm_MpuBoards_MpuBoard_Loadbalance_HashArithmetic_Arithmetic_ARITHMETIC5        Devm_MpuBoards_MpuBoard_Loadbalance_HashArithmetic_Arithmetic = 5
	Devm_MpuBoards_MpuBoard_Loadbalance_HashArithmetic_Arithmetic_RANDOM             Devm_MpuBoards_MpuBoard_Loadbalance_HashArithmetic_Arithmetic = 6
)

// Enum value maps for Devm_MpuBoards_MpuBoard_Loadbalance_HashArithmetic_Arithmetic.
var (
	Devm_MpuBoards_MpuBoard_Loadbalance_HashArithmetic_Arithmetic_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Arithmetic",
		1: "Arithmetic_ARITHMETIC1",
		2: "Arithmetic_ARITHMETIC2",
		3: "Arithmetic_ARITHMETIC3",
		4: "Arithmetic_ARITHMETIC4",
		5: "Arithmetic_ARITHMETIC5",
		6: "Arithmetic_RANDOM",
	}
	Devm_MpuBoards_MpuBoard_Loadbalance_HashArithmetic_Arithmetic_value = map[string]int32{
		"INVALID_ENUM_VALUE_Arithmetic": 0,
		"Arithmetic_ARITHMETIC1":        1,
		"Arithmetic_ARITHMETIC2":        2,
		"Arithmetic_ARITHMETIC3":        3,
		"Arithmetic_ARITHMETIC4":        4,
		"Arithmetic_ARITHMETIC5":        5,
		"Arithmetic_RANDOM":             6,
	}
)

func (x Devm_MpuBoards_MpuBoard_Loadbalance_HashArithmetic_Arithmetic) Enum() *Devm_MpuBoards_MpuBoard_Loadbalance_HashArithmetic_Arithmetic {
	p := new(Devm_MpuBoards_MpuBoard_Loadbalance_HashArithmetic_Arithmetic)
	*p = x
	return p
}

func (x Devm_MpuBoards_MpuBoard_Loadbalance_HashArithmetic_Arithmetic) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_MpuBoards_MpuBoard_Loadbalance_HashArithmetic_Arithmetic) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[36].Descriptor()
}

func (Devm_MpuBoards_MpuBoard_Loadbalance_HashArithmetic_Arithmetic) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[36]
}

func (x Devm_MpuBoards_MpuBoard_Loadbalance_HashArithmetic_Arithmetic) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Loadbalance_HashArithmetic_Arithmetic.Descriptor instead.
func (Devm_MpuBoards_MpuBoard_Loadbalance_HashArithmetic_Arithmetic) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 11, 1, 0}
}

type Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField_TrunkEcmp int32

const (
	Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField_INVALID_ENUM_VALUE_TrunkEcmp Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField_TrunkEcmp = 0
	Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField_TrunkEcmp_IP                 Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField_TrunkEcmp = 5
	Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField_TrunkEcmp_MAC                Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField_TrunkEcmp = 6
	Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField_TrunkEcmp_VLL                Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField_TrunkEcmp = 7
	Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField_TrunkEcmp_TUNNELX_INFO       Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField_TrunkEcmp = 8
	Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField_TrunkEcmp_TUNNELX_INNERX_IP  Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField_TrunkEcmp = 9
	Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField_TrunkEcmp_GTP                Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField_TrunkEcmp = 10
	Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField_TrunkEcmp_FEC                Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField_TrunkEcmp = 11
	Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField_TrunkEcmp_GTPX_INNERX_IP     Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField_TrunkEcmp = 12
)

// Enum value maps for Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField_TrunkEcmp.
var (
	Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField_TrunkEcmp_name = map[int32]string{
		0:  "INVALID_ENUM_VALUE_TrunkEcmp",
		5:  "TrunkEcmp_IP",
		6:  "TrunkEcmp_MAC",
		7:  "TrunkEcmp_VLL",
		8:  "TrunkEcmp_TUNNELX_INFO",
		9:  "TrunkEcmp_TUNNELX_INNERX_IP",
		10: "TrunkEcmp_GTP",
		11: "TrunkEcmp_FEC",
		12: "TrunkEcmp_GTPX_INNERX_IP",
	}
	Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField_TrunkEcmp_value = map[string]int32{
		"INVALID_ENUM_VALUE_TrunkEcmp": 0,
		"TrunkEcmp_IP":                 5,
		"TrunkEcmp_MAC":                6,
		"TrunkEcmp_VLL":                7,
		"TrunkEcmp_TUNNELX_INFO":       8,
		"TrunkEcmp_TUNNELX_INNERX_IP":  9,
		"TrunkEcmp_GTP":                10,
		"TrunkEcmp_FEC":                11,
		"TrunkEcmp_GTPX_INNERX_IP":     12,
	}
)

func (x Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField_TrunkEcmp) Enum() *Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField_TrunkEcmp {
	p := new(Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField_TrunkEcmp)
	*p = x
	return p
}

func (x Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField_TrunkEcmp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField_TrunkEcmp) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[37].Descriptor()
}

func (Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField_TrunkEcmp) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[37]
}

func (x Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField_TrunkEcmp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField_TrunkEcmp.Descriptor instead.
func (Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField_TrunkEcmp) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 11, 2, 0, 0}
}

type Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField_Material int32

const (
	Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField_INVALID_ENUM_VALUE_Material Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField_Material = 0
	Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField_Material_L2                 Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField_Material = 1
	Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField_Material_L3                 Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField_Material = 2
	Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField_Material_L4                 Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField_Material = 3
	Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField_Material_UNDOX_DISABLE      Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField_Material = 4
	Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField_Material_DISABLE            Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField_Material = 5
	Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField_Material_LABELX_IP          Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField_Material = 6
	Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField_Material_LABEL              Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField_Material = 7
)

// Enum value maps for Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField_Material.
var (
	Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField_Material_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Material",
		1: "Material_L2",
		2: "Material_L3",
		3: "Material_L4",
		4: "Material_UNDOX_DISABLE",
		5: "Material_DISABLE",
		6: "Material_LABELX_IP",
		7: "Material_LABEL",
	}
	Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField_Material_value = map[string]int32{
		"INVALID_ENUM_VALUE_Material": 0,
		"Material_L2":                 1,
		"Material_L3":                 2,
		"Material_L4":                 3,
		"Material_UNDOX_DISABLE":      4,
		"Material_DISABLE":            5,
		"Material_LABELX_IP":          6,
		"Material_LABEL":              7,
	}
)

func (x Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField_Material) Enum() *Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField_Material {
	p := new(Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField_Material)
	*p = x
	return p
}

func (x Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField_Material) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField_Material) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[38].Descriptor()
}

func (Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField_Material) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[38]
}

func (x Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField_Material) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField_Material.Descriptor instead.
func (Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField_Material) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 11, 2, 0, 1}
}

type Devm_MpuBoards_MpuBoard_Loadbalance_HashMultipe_MultipeFlag int32

const (
	Devm_MpuBoards_MpuBoard_Loadbalance_HashMultipe_MultipeFlag_ENABLE  Devm_MpuBoards_MpuBoard_Loadbalance_HashMultipe_MultipeFlag = 0
	Devm_MpuBoards_MpuBoard_Loadbalance_HashMultipe_MultipeFlag_DISABLE Devm_MpuBoards_MpuBoard_Loadbalance_HashMultipe_MultipeFlag = 255
)

// Enum value maps for Devm_MpuBoards_MpuBoard_Loadbalance_HashMultipe_MultipeFlag.
var (
	Devm_MpuBoards_MpuBoard_Loadbalance_HashMultipe_MultipeFlag_name = map[int32]string{
		0:   "MultipeFlag_ENABLE",
		255: "MultipeFlag_DISABLE",
	}
	Devm_MpuBoards_MpuBoard_Loadbalance_HashMultipe_MultipeFlag_value = map[string]int32{
		"MultipeFlag_ENABLE":  0,
		"MultipeFlag_DISABLE": 255,
	}
)

func (x Devm_MpuBoards_MpuBoard_Loadbalance_HashMultipe_MultipeFlag) Enum() *Devm_MpuBoards_MpuBoard_Loadbalance_HashMultipe_MultipeFlag {
	p := new(Devm_MpuBoards_MpuBoard_Loadbalance_HashMultipe_MultipeFlag)
	*p = x
	return p
}

func (x Devm_MpuBoards_MpuBoard_Loadbalance_HashMultipe_MultipeFlag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_MpuBoards_MpuBoard_Loadbalance_HashMultipe_MultipeFlag) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[39].Descriptor()
}

func (Devm_MpuBoards_MpuBoard_Loadbalance_HashMultipe_MultipeFlag) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[39]
}

func (x Devm_MpuBoards_MpuBoard_Loadbalance_HashMultipe_MultipeFlag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Loadbalance_HashMultipe_MultipeFlag.Descriptor instead.
func (Devm_MpuBoards_MpuBoard_Loadbalance_HashMultipe_MultipeFlag) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 11, 4, 0}
}

type Devm_MpuBoards_MpuBoard_MplsForward_MplsHashMode_Hashcfg int32

const (
	Devm_MpuBoards_MpuBoard_MplsForward_MplsHashMode_INVALID_ENUM_VALUE_Hashcfg Devm_MpuBoards_MpuBoard_MplsForward_MplsHashMode_Hashcfg = 0
	Devm_MpuBoards_MpuBoard_MplsForward_MplsHashMode_Hashcfg_PAYLOADX_HEADER    Devm_MpuBoards_MpuBoard_MplsForward_MplsHashMode_Hashcfg = 64
	Devm_MpuBoards_MpuBoard_MplsForward_MplsHashMode_Hashcfg_IP                 Devm_MpuBoards_MpuBoard_MplsForward_MplsHashMode_Hashcfg = 160
	Devm_MpuBoards_MpuBoard_MplsForward_MplsHashMode_Hashcfg_LABEL              Devm_MpuBoards_MpuBoard_MplsForward_MplsHashMode_Hashcfg = 192
	Devm_MpuBoards_MpuBoard_MplsForward_MplsHashMode_Hashcfg_IPX_TOS            Devm_MpuBoards_MpuBoard_MplsForward_MplsHashMode_Hashcfg = 193
	Devm_MpuBoards_MpuBoard_MplsForward_MplsHashMode_Hashcfg_MAC                Devm_MpuBoards_MpuBoard_MplsForward_MplsHashMode_Hashcfg = 196
)

// Enum value maps for Devm_MpuBoards_MpuBoard_MplsForward_MplsHashMode_Hashcfg.
var (
	Devm_MpuBoards_MpuBoard_MplsForward_MplsHashMode_Hashcfg_name = map[int32]string{
		0:   "INVALID_ENUM_VALUE_Hashcfg",
		64:  "Hashcfg_PAYLOADX_HEADER",
		160: "Hashcfg_IP",
		192: "Hashcfg_LABEL",
		193: "Hashcfg_IPX_TOS",
		196: "Hashcfg_MAC",
	}
	Devm_MpuBoards_MpuBoard_MplsForward_MplsHashMode_Hashcfg_value = map[string]int32{
		"INVALID_ENUM_VALUE_Hashcfg": 0,
		"Hashcfg_PAYLOADX_HEADER":    64,
		"Hashcfg_IP":                 160,
		"Hashcfg_LABEL":              192,
		"Hashcfg_IPX_TOS":            193,
		"Hashcfg_MAC":                196,
	}
)

func (x Devm_MpuBoards_MpuBoard_MplsForward_MplsHashMode_Hashcfg) Enum() *Devm_MpuBoards_MpuBoard_MplsForward_MplsHashMode_Hashcfg {
	p := new(Devm_MpuBoards_MpuBoard_MplsForward_MplsHashMode_Hashcfg)
	*p = x
	return p
}

func (x Devm_MpuBoards_MpuBoard_MplsForward_MplsHashMode_Hashcfg) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_MpuBoards_MpuBoard_MplsForward_MplsHashMode_Hashcfg) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[40].Descriptor()
}

func (Devm_MpuBoards_MpuBoard_MplsForward_MplsHashMode_Hashcfg) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[40]
}

func (x Devm_MpuBoards_MpuBoard_MplsForward_MplsHashMode_Hashcfg) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_MplsForward_MplsHashMode_Hashcfg.Descriptor instead.
func (Devm_MpuBoards_MpuBoard_MplsForward_MplsHashMode_Hashcfg) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 13, 0, 0}
}

type Devm_MpuBoards_MpuBoard_MplsForward_Mplsfrags_MplsfragEnable int32

const (
	Devm_MpuBoards_MpuBoard_MplsForward_Mplsfrags_MplsfragEnable_DISABLE Devm_MpuBoards_MpuBoard_MplsForward_Mplsfrags_MplsfragEnable = 0
	Devm_MpuBoards_MpuBoard_MplsForward_Mplsfrags_MplsfragEnable_ENABLE  Devm_MpuBoards_MpuBoard_MplsForward_Mplsfrags_MplsfragEnable = 1
)

// Enum value maps for Devm_MpuBoards_MpuBoard_MplsForward_Mplsfrags_MplsfragEnable.
var (
	Devm_MpuBoards_MpuBoard_MplsForward_Mplsfrags_MplsfragEnable_name = map[int32]string{
		0: "MplsfragEnable_DISABLE",
		1: "MplsfragEnable_ENABLE",
	}
	Devm_MpuBoards_MpuBoard_MplsForward_Mplsfrags_MplsfragEnable_value = map[string]int32{
		"MplsfragEnable_DISABLE": 0,
		"MplsfragEnable_ENABLE":  1,
	}
)

func (x Devm_MpuBoards_MpuBoard_MplsForward_Mplsfrags_MplsfragEnable) Enum() *Devm_MpuBoards_MpuBoard_MplsForward_Mplsfrags_MplsfragEnable {
	p := new(Devm_MpuBoards_MpuBoard_MplsForward_Mplsfrags_MplsfragEnable)
	*p = x
	return p
}

func (x Devm_MpuBoards_MpuBoard_MplsForward_Mplsfrags_MplsfragEnable) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_MpuBoards_MpuBoard_MplsForward_Mplsfrags_MplsfragEnable) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[41].Descriptor()
}

func (Devm_MpuBoards_MpuBoard_MplsForward_Mplsfrags_MplsfragEnable) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[41]
}

func (x Devm_MpuBoards_MpuBoard_MplsForward_Mplsfrags_MplsfragEnable) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_MplsForward_Mplsfrags_MplsfragEnable.Descriptor instead.
func (Devm_MpuBoards_MpuBoard_MplsForward_Mplsfrags_MplsfragEnable) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 13, 1, 0}
}

type Devm_MpuBoards_MpuBoard_MplsForward_MplsLoadCtrwords_MplsloadCtrwordDisable int32

const (
	Devm_MpuBoards_MpuBoard_MplsForward_MplsLoadCtrwords_MplsloadCtrwordDisable_DISABLE Devm_MpuBoards_MpuBoard_MplsForward_MplsLoadCtrwords_MplsloadCtrwordDisable = 0
	Devm_MpuBoards_MpuBoard_MplsForward_MplsLoadCtrwords_MplsloadCtrwordDisable_ENABLE  Devm_MpuBoards_MpuBoard_MplsForward_MplsLoadCtrwords_MplsloadCtrwordDisable = 1
)

// Enum value maps for Devm_MpuBoards_MpuBoard_MplsForward_MplsLoadCtrwords_MplsloadCtrwordDisable.
var (
	Devm_MpuBoards_MpuBoard_MplsForward_MplsLoadCtrwords_MplsloadCtrwordDisable_name = map[int32]string{
		0: "MplsloadCtrwordDisable_DISABLE",
		1: "MplsloadCtrwordDisable_ENABLE",
	}
	Devm_MpuBoards_MpuBoard_MplsForward_MplsLoadCtrwords_MplsloadCtrwordDisable_value = map[string]int32{
		"MplsloadCtrwordDisable_DISABLE": 0,
		"MplsloadCtrwordDisable_ENABLE":  1,
	}
)

func (x Devm_MpuBoards_MpuBoard_MplsForward_MplsLoadCtrwords_MplsloadCtrwordDisable) Enum() *Devm_MpuBoards_MpuBoard_MplsForward_MplsLoadCtrwords_MplsloadCtrwordDisable {
	p := new(Devm_MpuBoards_MpuBoard_MplsForward_MplsLoadCtrwords_MplsloadCtrwordDisable)
	*p = x
	return p
}

func (x Devm_MpuBoards_MpuBoard_MplsForward_MplsLoadCtrwords_MplsloadCtrwordDisable) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_MpuBoards_MpuBoard_MplsForward_MplsLoadCtrwords_MplsloadCtrwordDisable) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[42].Descriptor()
}

func (Devm_MpuBoards_MpuBoard_MplsForward_MplsLoadCtrwords_MplsloadCtrwordDisable) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[42]
}

func (x Devm_MpuBoards_MpuBoard_MplsForward_MplsLoadCtrwords_MplsloadCtrwordDisable) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_MplsForward_MplsLoadCtrwords_MplsloadCtrwordDisable.Descriptor instead.
func (Devm_MpuBoards_MpuBoard_MplsForward_MplsLoadCtrwords_MplsloadCtrwordDisable) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 13, 2, 0}
}

type Devm_MpuBoards_MpuBoard_Netstream_SamplerModes_SamplerMode_FlowType int32

const (
	Devm_MpuBoards_MpuBoard_Netstream_SamplerModes_SamplerMode_FlowType_IPX_FLOW                 Devm_MpuBoards_MpuBoard_Netstream_SamplerModes_SamplerMode_FlowType = 0
	Devm_MpuBoards_MpuBoard_Netstream_SamplerModes_SamplerMode_FlowType_IPV6X_FLOW               Devm_MpuBoards_MpuBoard_Netstream_SamplerModes_SamplerMode_FlowType = 1
	Devm_MpuBoards_MpuBoard_Netstream_SamplerModes_SamplerMode_FlowType_VXLANX_INNERX_IPX_FLOW   Devm_MpuBoards_MpuBoard_Netstream_SamplerModes_SamplerMode_FlowType = 2
	Devm_MpuBoards_MpuBoard_Netstream_SamplerModes_SamplerMode_FlowType_VXLANX_INNERX_IPV6X_FLOW Devm_MpuBoards_MpuBoard_Netstream_SamplerModes_SamplerMode_FlowType = 3
	Devm_MpuBoards_MpuBoard_Netstream_SamplerModes_SamplerMode_FlowType_ETHERNETX_FLOW           Devm_MpuBoards_MpuBoard_Netstream_SamplerModes_SamplerMode_FlowType = 4
)

// Enum value maps for Devm_MpuBoards_MpuBoard_Netstream_SamplerModes_SamplerMode_FlowType.
var (
	Devm_MpuBoards_MpuBoard_Netstream_SamplerModes_SamplerMode_FlowType_name = map[int32]string{
		0: "FlowType_IPX_FLOW",
		1: "FlowType_IPV6X_FLOW",
		2: "FlowType_VXLANX_INNERX_IPX_FLOW",
		3: "FlowType_VXLANX_INNERX_IPV6X_FLOW",
		4: "FlowType_ETHERNETX_FLOW",
	}
	Devm_MpuBoards_MpuBoard_Netstream_SamplerModes_SamplerMode_FlowType_value = map[string]int32{
		"FlowType_IPX_FLOW":                 0,
		"FlowType_IPV6X_FLOW":               1,
		"FlowType_VXLANX_INNERX_IPX_FLOW":   2,
		"FlowType_VXLANX_INNERX_IPV6X_FLOW": 3,
		"FlowType_ETHERNETX_FLOW":           4,
	}
)

func (x Devm_MpuBoards_MpuBoard_Netstream_SamplerModes_SamplerMode_FlowType) Enum() *Devm_MpuBoards_MpuBoard_Netstream_SamplerModes_SamplerMode_FlowType {
	p := new(Devm_MpuBoards_MpuBoard_Netstream_SamplerModes_SamplerMode_FlowType)
	*p = x
	return p
}

func (x Devm_MpuBoards_MpuBoard_Netstream_SamplerModes_SamplerMode_FlowType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_MpuBoards_MpuBoard_Netstream_SamplerModes_SamplerMode_FlowType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[43].Descriptor()
}

func (Devm_MpuBoards_MpuBoard_Netstream_SamplerModes_SamplerMode_FlowType) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[43]
}

func (x Devm_MpuBoards_MpuBoard_Netstream_SamplerModes_SamplerMode_FlowType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Netstream_SamplerModes_SamplerMode_FlowType.Descriptor instead.
func (Devm_MpuBoards_MpuBoard_Netstream_SamplerModes_SamplerMode_FlowType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 14, 0, 0, 0}
}

type Devm_MpuBoards_MpuBoard_Netstream_SamplerModes_SamplerMode_SamplerMode7 int32

const (
	Devm_MpuBoards_MpuBoard_Netstream_SamplerModes_SamplerMode_SamplerMode7_SELF Devm_MpuBoards_MpuBoard_Netstream_SamplerModes_SamplerMode_SamplerMode7 = 0
	Devm_MpuBoards_MpuBoard_Netstream_SamplerModes_SamplerMode_SamplerMode7_MAIN Devm_MpuBoards_MpuBoard_Netstream_SamplerModes_SamplerMode_SamplerMode7 = 1
	Devm_MpuBoards_MpuBoard_Netstream_SamplerModes_SamplerMode_SamplerMode7_BAK  Devm_MpuBoards_MpuBoard_Netstream_SamplerModes_SamplerMode_SamplerMode7 = 2
)

// Enum value maps for Devm_MpuBoards_MpuBoard_Netstream_SamplerModes_SamplerMode_SamplerMode7.
var (
	Devm_MpuBoards_MpuBoard_Netstream_SamplerModes_SamplerMode_SamplerMode7_name = map[int32]string{
		0: "SamplerMode7_SELF",
		1: "SamplerMode7_MAIN",
		2: "SamplerMode7_BAK",
	}
	Devm_MpuBoards_MpuBoard_Netstream_SamplerModes_SamplerMode_SamplerMode7_value = map[string]int32{
		"SamplerMode7_SELF": 0,
		"SamplerMode7_MAIN": 1,
		"SamplerMode7_BAK":  2,
	}
)

func (x Devm_MpuBoards_MpuBoard_Netstream_SamplerModes_SamplerMode_SamplerMode7) Enum() *Devm_MpuBoards_MpuBoard_Netstream_SamplerModes_SamplerMode_SamplerMode7 {
	p := new(Devm_MpuBoards_MpuBoard_Netstream_SamplerModes_SamplerMode_SamplerMode7)
	*p = x
	return p
}

func (x Devm_MpuBoards_MpuBoard_Netstream_SamplerModes_SamplerMode_SamplerMode7) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_MpuBoards_MpuBoard_Netstream_SamplerModes_SamplerMode_SamplerMode7) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[44].Descriptor()
}

func (Devm_MpuBoards_MpuBoard_Netstream_SamplerModes_SamplerMode_SamplerMode7) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[44]
}

func (x Devm_MpuBoards_MpuBoard_Netstream_SamplerModes_SamplerMode_SamplerMode7) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Netstream_SamplerModes_SamplerMode_SamplerMode7.Descriptor instead.
func (Devm_MpuBoards_MpuBoard_Netstream_SamplerModes_SamplerMode_SamplerMode7) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 14, 0, 0, 1}
}

type Devm_MpuBoards_MpuBoard_Netstream_SequenceMode_Mode int32

const (
	Devm_MpuBoards_MpuBoard_Netstream_SequenceMode_INVALID_ENUM_VALUE_Mode Devm_MpuBoards_MpuBoard_Netstream_SequenceMode_Mode = 0
	Devm_MpuBoards_MpuBoard_Netstream_SequenceMode_Mode_FLOW               Devm_MpuBoards_MpuBoard_Netstream_SequenceMode_Mode = 1
)

// Enum value maps for Devm_MpuBoards_MpuBoard_Netstream_SequenceMode_Mode.
var (
	Devm_MpuBoards_MpuBoard_Netstream_SequenceMode_Mode_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Mode",
		1: "Mode_FLOW",
	}
	Devm_MpuBoards_MpuBoard_Netstream_SequenceMode_Mode_value = map[string]int32{
		"INVALID_ENUM_VALUE_Mode": 0,
		"Mode_FLOW":               1,
	}
)

func (x Devm_MpuBoards_MpuBoard_Netstream_SequenceMode_Mode) Enum() *Devm_MpuBoards_MpuBoard_Netstream_SequenceMode_Mode {
	p := new(Devm_MpuBoards_MpuBoard_Netstream_SequenceMode_Mode)
	*p = x
	return p
}

func (x Devm_MpuBoards_MpuBoard_Netstream_SequenceMode_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_MpuBoards_MpuBoard_Netstream_SequenceMode_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[45].Descriptor()
}

func (Devm_MpuBoards_MpuBoard_Netstream_SequenceMode_Mode) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[45]
}

func (x Devm_MpuBoards_MpuBoard_Netstream_SequenceMode_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Netstream_SequenceMode_Mode.Descriptor instead.
func (Devm_MpuBoards_MpuBoard_Netstream_SequenceMode_Mode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 14, 1, 0}
}

type Devm_MpuBoards_MpuBoard_Netstream_ExportHosts_ExportHost_FlowType int32

const (
	Devm_MpuBoards_MpuBoard_Netstream_ExportHosts_ExportHost_FlowType_IPX_FLOW                 Devm_MpuBoards_MpuBoard_Netstream_ExportHosts_ExportHost_FlowType = 0
	Devm_MpuBoards_MpuBoard_Netstream_ExportHosts_ExportHost_FlowType_IPV6X_FLOW               Devm_MpuBoards_MpuBoard_Netstream_ExportHosts_ExportHost_FlowType = 1
	Devm_MpuBoards_MpuBoard_Netstream_ExportHosts_ExportHost_FlowType_VXLANX_INNERX_IPX_FLOW   Devm_MpuBoards_MpuBoard_Netstream_ExportHosts_ExportHost_FlowType = 2
	Devm_MpuBoards_MpuBoard_Netstream_ExportHosts_ExportHost_FlowType_VXLANX_INNERX_IPV6X_FLOW Devm_MpuBoards_MpuBoard_Netstream_ExportHosts_ExportHost_FlowType = 3
	Devm_MpuBoards_MpuBoard_Netstream_ExportHosts_ExportHost_FlowType_ETHERNETX_FLOW           Devm_MpuBoards_MpuBoard_Netstream_ExportHosts_ExportHost_FlowType = 4
)

// Enum value maps for Devm_MpuBoards_MpuBoard_Netstream_ExportHosts_ExportHost_FlowType.
var (
	Devm_MpuBoards_MpuBoard_Netstream_ExportHosts_ExportHost_FlowType_name = map[int32]string{
		0: "FlowType_IPX_FLOW",
		1: "FlowType_IPV6X_FLOW",
		2: "FlowType_VXLANX_INNERX_IPX_FLOW",
		3: "FlowType_VXLANX_INNERX_IPV6X_FLOW",
		4: "FlowType_ETHERNETX_FLOW",
	}
	Devm_MpuBoards_MpuBoard_Netstream_ExportHosts_ExportHost_FlowType_value = map[string]int32{
		"FlowType_IPX_FLOW":                 0,
		"FlowType_IPV6X_FLOW":               1,
		"FlowType_VXLANX_INNERX_IPX_FLOW":   2,
		"FlowType_VXLANX_INNERX_IPV6X_FLOW": 3,
		"FlowType_ETHERNETX_FLOW":           4,
	}
)

func (x Devm_MpuBoards_MpuBoard_Netstream_ExportHosts_ExportHost_FlowType) Enum() *Devm_MpuBoards_MpuBoard_Netstream_ExportHosts_ExportHost_FlowType {
	p := new(Devm_MpuBoards_MpuBoard_Netstream_ExportHosts_ExportHost_FlowType)
	*p = x
	return p
}

func (x Devm_MpuBoards_MpuBoard_Netstream_ExportHosts_ExportHost_FlowType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_MpuBoards_MpuBoard_Netstream_ExportHosts_ExportHost_FlowType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[46].Descriptor()
}

func (Devm_MpuBoards_MpuBoard_Netstream_ExportHosts_ExportHost_FlowType) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[46]
}

func (x Devm_MpuBoards_MpuBoard_Netstream_ExportHosts_ExportHost_FlowType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Netstream_ExportHosts_ExportHost_FlowType.Descriptor instead.
func (Devm_MpuBoards_MpuBoard_Netstream_ExportHosts_ExportHost_FlowType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 14, 2, 0, 0}
}

type Devm_MpuBoards_MpuBoard_Netstream_ExportHosts_ExportHost_AddressType int32

const (
	Devm_MpuBoards_MpuBoard_Netstream_ExportHosts_ExportHost_AddressType_IPV4 Devm_MpuBoards_MpuBoard_Netstream_ExportHosts_ExportHost_AddressType = 0
	Devm_MpuBoards_MpuBoard_Netstream_ExportHosts_ExportHost_AddressType_IPV6 Devm_MpuBoards_MpuBoard_Netstream_ExportHosts_ExportHost_AddressType = 1
)

// Enum value maps for Devm_MpuBoards_MpuBoard_Netstream_ExportHosts_ExportHost_AddressType.
var (
	Devm_MpuBoards_MpuBoard_Netstream_ExportHosts_ExportHost_AddressType_name = map[int32]string{
		0: "AddressType_IPV4",
		1: "AddressType_IPV6",
	}
	Devm_MpuBoards_MpuBoard_Netstream_ExportHosts_ExportHost_AddressType_value = map[string]int32{
		"AddressType_IPV4": 0,
		"AddressType_IPV6": 1,
	}
)

func (x Devm_MpuBoards_MpuBoard_Netstream_ExportHosts_ExportHost_AddressType) Enum() *Devm_MpuBoards_MpuBoard_Netstream_ExportHosts_ExportHost_AddressType {
	p := new(Devm_MpuBoards_MpuBoard_Netstream_ExportHosts_ExportHost_AddressType)
	*p = x
	return p
}

func (x Devm_MpuBoards_MpuBoard_Netstream_ExportHosts_ExportHost_AddressType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_MpuBoards_MpuBoard_Netstream_ExportHosts_ExportHost_AddressType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[47].Descriptor()
}

func (Devm_MpuBoards_MpuBoard_Netstream_ExportHosts_ExportHost_AddressType) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[47]
}

func (x Devm_MpuBoards_MpuBoard_Netstream_ExportHosts_ExportHost_AddressType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Netstream_ExportHosts_ExportHost_AddressType.Descriptor instead.
func (Devm_MpuBoards_MpuBoard_Netstream_ExportHosts_ExportHost_AddressType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 14, 2, 0, 1}
}

type Devm_MpuBoards_MpuBoard_Pbr_RoutingFilters_RoutingFilter_Type int32

const (
	Devm_MpuBoards_MpuBoard_Pbr_RoutingFilters_RoutingFilter_Type_IPV4     Devm_MpuBoards_MpuBoard_Pbr_RoutingFilters_RoutingFilter_Type = 0
	Devm_MpuBoards_MpuBoard_Pbr_RoutingFilters_RoutingFilter_Type_IPV6     Devm_MpuBoards_MpuBoard_Pbr_RoutingFilters_RoutingFilter_Type = 1
	Devm_MpuBoards_MpuBoard_Pbr_RoutingFilters_RoutingFilter_Type_IPV4IPV6 Devm_MpuBoards_MpuBoard_Pbr_RoutingFilters_RoutingFilter_Type = 2
)

// Enum value maps for Devm_MpuBoards_MpuBoard_Pbr_RoutingFilters_RoutingFilter_Type.
var (
	Devm_MpuBoards_MpuBoard_Pbr_RoutingFilters_RoutingFilter_Type_name = map[int32]string{
		0: "Type_IPV4",
		1: "Type_IPV6",
		2: "Type_IPV4IPV6",
	}
	Devm_MpuBoards_MpuBoard_Pbr_RoutingFilters_RoutingFilter_Type_value = map[string]int32{
		"Type_IPV4":     0,
		"Type_IPV6":     1,
		"Type_IPV4IPV6": 2,
	}
)

func (x Devm_MpuBoards_MpuBoard_Pbr_RoutingFilters_RoutingFilter_Type) Enum() *Devm_MpuBoards_MpuBoard_Pbr_RoutingFilters_RoutingFilter_Type {
	p := new(Devm_MpuBoards_MpuBoard_Pbr_RoutingFilters_RoutingFilter_Type)
	*p = x
	return p
}

func (x Devm_MpuBoards_MpuBoard_Pbr_RoutingFilters_RoutingFilter_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_MpuBoards_MpuBoard_Pbr_RoutingFilters_RoutingFilter_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[48].Descriptor()
}

func (Devm_MpuBoards_MpuBoard_Pbr_RoutingFilters_RoutingFilter_Type) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[48]
}

func (x Devm_MpuBoards_MpuBoard_Pbr_RoutingFilters_RoutingFilter_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Pbr_RoutingFilters_RoutingFilter_Type.Descriptor instead.
func (Devm_MpuBoards_MpuBoard_Pbr_RoutingFilters_RoutingFilter_Type) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 15, 0, 0, 0}
}

type Devm_MpuBoards_MpuBoard_Pbr_RoutingFilters_RoutingFilter_RoutingType int32

const (
	Devm_MpuBoards_MpuBoard_Pbr_RoutingFilters_RoutingFilter_INVALID_ENUM_VALUE_RoutingType Devm_MpuBoards_MpuBoard_Pbr_RoutingFilters_RoutingFilter_RoutingType = 0
	Devm_MpuBoards_MpuBoard_Pbr_RoutingFilters_RoutingFilter_RoutingType_DEFAULT            Devm_MpuBoards_MpuBoard_Pbr_RoutingFilters_RoutingFilter_RoutingType = 1
	Devm_MpuBoards_MpuBoard_Pbr_RoutingFilters_RoutingFilter_RoutingType_BLACKHOLE          Devm_MpuBoards_MpuBoard_Pbr_RoutingFilters_RoutingFilter_RoutingType = 2
	Devm_MpuBoards_MpuBoard_Pbr_RoutingFilters_RoutingFilter_RoutingType_DEFAULTX_BLACKHOLE Devm_MpuBoards_MpuBoard_Pbr_RoutingFilters_RoutingFilter_RoutingType = 3
)

// Enum value maps for Devm_MpuBoards_MpuBoard_Pbr_RoutingFilters_RoutingFilter_RoutingType.
var (
	Devm_MpuBoards_MpuBoard_Pbr_RoutingFilters_RoutingFilter_RoutingType_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_RoutingType",
		1: "RoutingType_DEFAULT",
		2: "RoutingType_BLACKHOLE",
		3: "RoutingType_DEFAULTX_BLACKHOLE",
	}
	Devm_MpuBoards_MpuBoard_Pbr_RoutingFilters_RoutingFilter_RoutingType_value = map[string]int32{
		"INVALID_ENUM_VALUE_RoutingType": 0,
		"RoutingType_DEFAULT":            1,
		"RoutingType_BLACKHOLE":          2,
		"RoutingType_DEFAULTX_BLACKHOLE": 3,
	}
)

func (x Devm_MpuBoards_MpuBoard_Pbr_RoutingFilters_RoutingFilter_RoutingType) Enum() *Devm_MpuBoards_MpuBoard_Pbr_RoutingFilters_RoutingFilter_RoutingType {
	p := new(Devm_MpuBoards_MpuBoard_Pbr_RoutingFilters_RoutingFilter_RoutingType)
	*p = x
	return p
}

func (x Devm_MpuBoards_MpuBoard_Pbr_RoutingFilters_RoutingFilter_RoutingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_MpuBoards_MpuBoard_Pbr_RoutingFilters_RoutingFilter_RoutingType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[49].Descriptor()
}

func (Devm_MpuBoards_MpuBoard_Pbr_RoutingFilters_RoutingFilter_RoutingType) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[49]
}

func (x Devm_MpuBoards_MpuBoard_Pbr_RoutingFilters_RoutingFilter_RoutingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Pbr_RoutingFilters_RoutingFilter_RoutingType.Descriptor instead.
func (Devm_MpuBoards_MpuBoard_Pbr_RoutingFilters_RoutingFilter_RoutingType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 15, 0, 0, 1}
}

type Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch_Type int32

const (
	Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch_Type_IPX_LAYERX_PUSH           Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch_Type = 0
	Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch_Type_IPV6X_ADDRESSX_RULEX_MASK Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch_Type = 1
	Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch_Type_PROTOCOLX_MCX_RESERVED    Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch_Type = 2
	Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch_Type_MPLSX_LAYERX_PUSH         Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch_Type = 3
	Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch_Type_MPLSX_LAYERX_L2X_INBOUND  Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch_Type = 4
	Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch_Type_RULEX_PACKET              Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch_Type = 5
	Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch_Type_MPLSX_LAYERX_POP          Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch_Type = 6
	Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch_Type_IPX_LAYERX_POP            Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch_Type = 7
)

// Enum value maps for Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch_Type.
var (
	Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch_Type_name = map[int32]string{
		0: "Type_IPX_LAYERX_PUSH",
		1: "Type_IPV6X_ADDRESSX_RULEX_MASK",
		2: "Type_PROTOCOLX_MCX_RESERVED",
		3: "Type_MPLSX_LAYERX_PUSH",
		4: "Type_MPLSX_LAYERX_L2X_INBOUND",
		5: "Type_RULEX_PACKET",
		6: "Type_MPLSX_LAYERX_POP",
		7: "Type_IPX_LAYERX_POP",
	}
	Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch_Type_value = map[string]int32{
		"Type_IPX_LAYERX_PUSH":           0,
		"Type_IPV6X_ADDRESSX_RULEX_MASK": 1,
		"Type_PROTOCOLX_MCX_RESERVED":    2,
		"Type_MPLSX_LAYERX_PUSH":         3,
		"Type_MPLSX_LAYERX_L2X_INBOUND":  4,
		"Type_RULEX_PACKET":              5,
		"Type_MPLSX_LAYERX_POP":          6,
		"Type_IPX_LAYERX_POP":            7,
	}
)

func (x Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch_Type) Enum() *Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch_Type {
	p := new(Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch_Type)
	*p = x
	return p
}

func (x Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[50].Descriptor()
}

func (Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch_Type) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[50]
}

func (x Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch_Type.Descriptor instead.
func (Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch_Type) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 16, 0, 0, 0}
}

type Devm_MpuBoards_MpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Direction int32

const (
	Devm_MpuBoards_MpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Direction_INBOUND  Devm_MpuBoards_MpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Direction = 0
	Devm_MpuBoards_MpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Direction_OUTBOUND Devm_MpuBoards_MpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Direction = 1
)

// Enum value maps for Devm_MpuBoards_MpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Direction.
var (
	Devm_MpuBoards_MpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Direction_name = map[int32]string{
		0: "Direction_INBOUND",
		1: "Direction_OUTBOUND",
	}
	Devm_MpuBoards_MpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Direction_value = map[string]int32{
		"Direction_INBOUND":  0,
		"Direction_OUTBOUND": 1,
	}
)

func (x Devm_MpuBoards_MpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Direction) Enum() *Devm_MpuBoards_MpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Direction {
	p := new(Devm_MpuBoards_MpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Direction)
	*p = x
	return p
}

func (x Devm_MpuBoards_MpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_MpuBoards_MpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[51].Descriptor()
}

func (Devm_MpuBoards_MpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Direction) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[51]
}

func (x Devm_MpuBoards_MpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Direction.Descriptor instead.
func (Devm_MpuBoards_MpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 16, 1, 0, 0}
}

type Devm_MpuBoards_MpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Mode int32

const (
	Devm_MpuBoards_MpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Mode_HIGH Devm_MpuBoards_MpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Mode = 0
	Devm_MpuBoards_MpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Mode_LOW  Devm_MpuBoards_MpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Mode = 1
)

// Enum value maps for Devm_MpuBoards_MpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Mode.
var (
	Devm_MpuBoards_MpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Mode_name = map[int32]string{
		0: "Mode_HIGH",
		1: "Mode_LOW",
	}
	Devm_MpuBoards_MpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Mode_value = map[string]int32{
		"Mode_HIGH": 0,
		"Mode_LOW":  1,
	}
)

func (x Devm_MpuBoards_MpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Mode) Enum() *Devm_MpuBoards_MpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Mode {
	p := new(Devm_MpuBoards_MpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Mode)
	*p = x
	return p
}

func (x Devm_MpuBoards_MpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_MpuBoards_MpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[52].Descriptor()
}

func (Devm_MpuBoards_MpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Mode) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[52]
}

func (x Devm_MpuBoards_MpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Mode.Descriptor instead.
func (Devm_MpuBoards_MpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Mode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 16, 1, 0, 1}
}

type Devm_MpuBoards_MpuBoard_Qos_PqSchedulePriorityOnCards_PqSchedulePriorityOnCard_Mode int32

const (
	Devm_MpuBoards_MpuBoard_Qos_PqSchedulePriorityOnCards_PqSchedulePriorityOnCard_Mode_HIGH Devm_MpuBoards_MpuBoard_Qos_PqSchedulePriorityOnCards_PqSchedulePriorityOnCard_Mode = 0
	Devm_MpuBoards_MpuBoard_Qos_PqSchedulePriorityOnCards_PqSchedulePriorityOnCard_Mode_LOW  Devm_MpuBoards_MpuBoard_Qos_PqSchedulePriorityOnCards_PqSchedulePriorityOnCard_Mode = 1
)

// Enum value maps for Devm_MpuBoards_MpuBoard_Qos_PqSchedulePriorityOnCards_PqSchedulePriorityOnCard_Mode.
var (
	Devm_MpuBoards_MpuBoard_Qos_PqSchedulePriorityOnCards_PqSchedulePriorityOnCard_Mode_name = map[int32]string{
		0: "Mode_HIGH",
		1: "Mode_LOW",
	}
	Devm_MpuBoards_MpuBoard_Qos_PqSchedulePriorityOnCards_PqSchedulePriorityOnCard_Mode_value = map[string]int32{
		"Mode_HIGH": 0,
		"Mode_LOW":  1,
	}
)

func (x Devm_MpuBoards_MpuBoard_Qos_PqSchedulePriorityOnCards_PqSchedulePriorityOnCard_Mode) Enum() *Devm_MpuBoards_MpuBoard_Qos_PqSchedulePriorityOnCards_PqSchedulePriorityOnCard_Mode {
	p := new(Devm_MpuBoards_MpuBoard_Qos_PqSchedulePriorityOnCards_PqSchedulePriorityOnCard_Mode)
	*p = x
	return p
}

func (x Devm_MpuBoards_MpuBoard_Qos_PqSchedulePriorityOnCards_PqSchedulePriorityOnCard_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_MpuBoards_MpuBoard_Qos_PqSchedulePriorityOnCards_PqSchedulePriorityOnCard_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[53].Descriptor()
}

func (Devm_MpuBoards_MpuBoard_Qos_PqSchedulePriorityOnCards_PqSchedulePriorityOnCard_Mode) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[53]
}

func (x Devm_MpuBoards_MpuBoard_Qos_PqSchedulePriorityOnCards_PqSchedulePriorityOnCard_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Qos_PqSchedulePriorityOnCards_PqSchedulePriorityOnCard_Mode.Descriptor instead.
func (Devm_MpuBoards_MpuBoard_Qos_PqSchedulePriorityOnCards_PqSchedulePriorityOnCard_Mode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 16, 2, 0, 0}
}

type Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ServiceClass int32

const (
	Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ServiceClass_BE  Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ServiceClass = 0
	Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ServiceClass_AF1 Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ServiceClass = 1
	Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ServiceClass_AF2 Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ServiceClass = 2
	Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ServiceClass_AF3 Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ServiceClass = 3
	Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ServiceClass_AF4 Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ServiceClass = 4
	Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ServiceClass_EF  Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ServiceClass = 5
	Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ServiceClass_CS6 Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ServiceClass = 6
	Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ServiceClass_CS7 Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ServiceClass = 7
)

// Enum value maps for Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ServiceClass.
var (
	Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ServiceClass_name = map[int32]string{
		0: "ServiceClass_BE",
		1: "ServiceClass_AF1",
		2: "ServiceClass_AF2",
		3: "ServiceClass_AF3",
		4: "ServiceClass_AF4",
		5: "ServiceClass_EF",
		6: "ServiceClass_CS6",
		7: "ServiceClass_CS7",
	}
	Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ServiceClass_value = map[string]int32{
		"ServiceClass_BE":  0,
		"ServiceClass_AF1": 1,
		"ServiceClass_AF2": 2,
		"ServiceClass_AF3": 3,
		"ServiceClass_AF4": 4,
		"ServiceClass_EF":  5,
		"ServiceClass_CS6": 6,
		"ServiceClass_CS7": 7,
	}
)

func (x Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ServiceClass) Enum() *Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ServiceClass {
	p := new(Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ServiceClass)
	*p = x
	return p
}

func (x Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ServiceClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ServiceClass) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[54].Descriptor()
}

func (Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ServiceClass) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[54]
}

func (x Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ServiceClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ServiceClass.Descriptor instead.
func (Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ServiceClass) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 16, 3, 0, 0}
}

type Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_QueueScheduleMode int32

const (
	Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_QueueScheduleMode_PQ  Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_QueueScheduleMode = 0
	Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_QueueScheduleMode_WFQ Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_QueueScheduleMode = 1
	Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_QueueScheduleMode_LPQ Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_QueueScheduleMode = 2
)

// Enum value maps for Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_QueueScheduleMode.
var (
	Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_QueueScheduleMode_name = map[int32]string{
		0: "QueueScheduleMode_PQ",
		1: "QueueScheduleMode_WFQ",
		2: "QueueScheduleMode_LPQ",
	}
	Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_QueueScheduleMode_value = map[string]int32{
		"QueueScheduleMode_PQ":  0,
		"QueueScheduleMode_WFQ": 1,
		"QueueScheduleMode_LPQ": 2,
	}
)

func (x Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_QueueScheduleMode) Enum() *Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_QueueScheduleMode {
	p := new(Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_QueueScheduleMode)
	*p = x
	return p
}

func (x Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_QueueScheduleMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_QueueScheduleMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[55].Descriptor()
}

func (Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_QueueScheduleMode) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[55]
}

func (x Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_QueueScheduleMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_QueueScheduleMode.Descriptor instead.
func (Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_QueueScheduleMode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 16, 3, 0, 1}
}

type Devm_MpuBoards_MpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingTypeMode_ShapingType int32

const (
	Devm_MpuBoards_MpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingTypeMode_ShapingType_X_256K Devm_MpuBoards_MpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingTypeMode_ShapingType = 0
	Devm_MpuBoards_MpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingTypeMode_ShapingType_X_512K Devm_MpuBoards_MpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingTypeMode_ShapingType = 1
)

// Enum value maps for Devm_MpuBoards_MpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingTypeMode_ShapingType.
var (
	Devm_MpuBoards_MpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingTypeMode_ShapingType_name = map[int32]string{
		0: "ShapingType_X_256K",
		1: "ShapingType_X_512K",
	}
	Devm_MpuBoards_MpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingTypeMode_ShapingType_value = map[string]int32{
		"ShapingType_X_256K": 0,
		"ShapingType_X_512K": 1,
	}
)

func (x Devm_MpuBoards_MpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingTypeMode_ShapingType) Enum() *Devm_MpuBoards_MpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingTypeMode_ShapingType {
	p := new(Devm_MpuBoards_MpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingTypeMode_ShapingType)
	*p = x
	return p
}

func (x Devm_MpuBoards_MpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingTypeMode_ShapingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_MpuBoards_MpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingTypeMode_ShapingType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[56].Descriptor()
}

func (Devm_MpuBoards_MpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingTypeMode_ShapingType) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[56]
}

func (x Devm_MpuBoards_MpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingTypeMode_ShapingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingTypeMode_ShapingType.Descriptor instead.
func (Devm_MpuBoards_MpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingTypeMode_ShapingType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 16, 4, 0, 0}
}

type Devm_MpuBoards_MpuBoard_Qos_ExpPhbDisable_ForwardType int32

const (
	Devm_MpuBoards_MpuBoard_Qos_ExpPhbDisable_INVALID_ENUM_VALUE_ForwardType Devm_MpuBoards_MpuBoard_Qos_ExpPhbDisable_ForwardType = 0
	Devm_MpuBoards_MpuBoard_Qos_ExpPhbDisable_ForwardType_VLL                Devm_MpuBoards_MpuBoard_Qos_ExpPhbDisable_ForwardType = 1
)

// Enum value maps for Devm_MpuBoards_MpuBoard_Qos_ExpPhbDisable_ForwardType.
var (
	Devm_MpuBoards_MpuBoard_Qos_ExpPhbDisable_ForwardType_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_ForwardType",
		1: "ForwardType_VLL",
	}
	Devm_MpuBoards_MpuBoard_Qos_ExpPhbDisable_ForwardType_value = map[string]int32{
		"INVALID_ENUM_VALUE_ForwardType": 0,
		"ForwardType_VLL":                1,
	}
)

func (x Devm_MpuBoards_MpuBoard_Qos_ExpPhbDisable_ForwardType) Enum() *Devm_MpuBoards_MpuBoard_Qos_ExpPhbDisable_ForwardType {
	p := new(Devm_MpuBoards_MpuBoard_Qos_ExpPhbDisable_ForwardType)
	*p = x
	return p
}

func (x Devm_MpuBoards_MpuBoard_Qos_ExpPhbDisable_ForwardType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_MpuBoards_MpuBoard_Qos_ExpPhbDisable_ForwardType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[57].Descriptor()
}

func (Devm_MpuBoards_MpuBoard_Qos_ExpPhbDisable_ForwardType) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[57]
}

func (x Devm_MpuBoards_MpuBoard_Qos_ExpPhbDisable_ForwardType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Qos_ExpPhbDisable_ForwardType.Descriptor instead.
func (Devm_MpuBoards_MpuBoard_Qos_ExpPhbDisable_ForwardType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 16, 6, 0}
}

type Devm_MpuBoards_MpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold_ServiceClass int32

const (
	Devm_MpuBoards_MpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold_ServiceClass_BE  Devm_MpuBoards_MpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold_ServiceClass = 0
	Devm_MpuBoards_MpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold_ServiceClass_AF1 Devm_MpuBoards_MpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold_ServiceClass = 1
	Devm_MpuBoards_MpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold_ServiceClass_AF2 Devm_MpuBoards_MpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold_ServiceClass = 2
	Devm_MpuBoards_MpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold_ServiceClass_AF3 Devm_MpuBoards_MpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold_ServiceClass = 3
	Devm_MpuBoards_MpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold_ServiceClass_AF4 Devm_MpuBoards_MpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold_ServiceClass = 4
	Devm_MpuBoards_MpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold_ServiceClass_EF  Devm_MpuBoards_MpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold_ServiceClass = 5
	Devm_MpuBoards_MpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold_ServiceClass_CS6 Devm_MpuBoards_MpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold_ServiceClass = 6
	Devm_MpuBoards_MpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold_ServiceClass_CS7 Devm_MpuBoards_MpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold_ServiceClass = 7
)

// Enum value maps for Devm_MpuBoards_MpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold_ServiceClass.
var (
	Devm_MpuBoards_MpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold_ServiceClass_name = map[int32]string{
		0: "ServiceClass_BE",
		1: "ServiceClass_AF1",
		2: "ServiceClass_AF2",
		3: "ServiceClass_AF3",
		4: "ServiceClass_AF4",
		5: "ServiceClass_EF",
		6: "ServiceClass_CS6",
		7: "ServiceClass_CS7",
	}
	Devm_MpuBoards_MpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold_ServiceClass_value = map[string]int32{
		"ServiceClass_BE":  0,
		"ServiceClass_AF1": 1,
		"ServiceClass_AF2": 2,
		"ServiceClass_AF3": 3,
		"ServiceClass_AF4": 4,
		"ServiceClass_EF":  5,
		"ServiceClass_CS6": 6,
		"ServiceClass_CS7": 7,
	}
)

func (x Devm_MpuBoards_MpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold_ServiceClass) Enum() *Devm_MpuBoards_MpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold_ServiceClass {
	p := new(Devm_MpuBoards_MpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold_ServiceClass)
	*p = x
	return p
}

func (x Devm_MpuBoards_MpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold_ServiceClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_MpuBoards_MpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold_ServiceClass) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[58].Descriptor()
}

func (Devm_MpuBoards_MpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold_ServiceClass) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[58]
}

func (x Devm_MpuBoards_MpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold_ServiceClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold_ServiceClass.Descriptor instead.
func (Devm_MpuBoards_MpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold_ServiceClass) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 16, 7, 0, 0}
}

type Devm_MpuBoards_MpuBoard_Qos_ChannelAlarms_ChannelAlarm_AlarmType int32

const (
	Devm_MpuBoards_MpuBoard_Qos_ChannelAlarms_ChannelAlarm_AlarmType_QUANTITY  Devm_MpuBoards_MpuBoard_Qos_ChannelAlarms_ChannelAlarm_AlarmType = 0
	Devm_MpuBoards_MpuBoard_Qos_ChannelAlarms_ChannelAlarm_AlarmType_BANDWIDTH Devm_MpuBoards_MpuBoard_Qos_ChannelAlarms_ChannelAlarm_AlarmType = 1
)

// Enum value maps for Devm_MpuBoards_MpuBoard_Qos_ChannelAlarms_ChannelAlarm_AlarmType.
var (
	Devm_MpuBoards_MpuBoard_Qos_ChannelAlarms_ChannelAlarm_AlarmType_name = map[int32]string{
		0: "AlarmType_QUANTITY",
		1: "AlarmType_BANDWIDTH",
	}
	Devm_MpuBoards_MpuBoard_Qos_ChannelAlarms_ChannelAlarm_AlarmType_value = map[string]int32{
		"AlarmType_QUANTITY":  0,
		"AlarmType_BANDWIDTH": 1,
	}
)

func (x Devm_MpuBoards_MpuBoard_Qos_ChannelAlarms_ChannelAlarm_AlarmType) Enum() *Devm_MpuBoards_MpuBoard_Qos_ChannelAlarms_ChannelAlarm_AlarmType {
	p := new(Devm_MpuBoards_MpuBoard_Qos_ChannelAlarms_ChannelAlarm_AlarmType)
	*p = x
	return p
}

func (x Devm_MpuBoards_MpuBoard_Qos_ChannelAlarms_ChannelAlarm_AlarmType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_MpuBoards_MpuBoard_Qos_ChannelAlarms_ChannelAlarm_AlarmType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[59].Descriptor()
}

func (Devm_MpuBoards_MpuBoard_Qos_ChannelAlarms_ChannelAlarm_AlarmType) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[59]
}

func (x Devm_MpuBoards_MpuBoard_Qos_ChannelAlarms_ChannelAlarm_AlarmType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Qos_ChannelAlarms_ChannelAlarm_AlarmType.Descriptor instead.
func (Devm_MpuBoards_MpuBoard_Qos_ChannelAlarms_ChannelAlarm_AlarmType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 16, 9, 0, 0}
}

type Devm_MpuBoards_MpuBoard_Qos_ChannelAlarms_ChannelAlarm_Pool int32

const (
	Devm_MpuBoards_MpuBoard_Qos_ChannelAlarms_ChannelAlarm_INVALID_ENUM_VALUE_Pool Devm_MpuBoards_MpuBoard_Qos_ChannelAlarms_ChannelAlarm_Pool = 0
	Devm_MpuBoards_MpuBoard_Qos_ChannelAlarms_ChannelAlarm_Pool_POOLX_0            Devm_MpuBoards_MpuBoard_Qos_ChannelAlarms_ChannelAlarm_Pool = 1
	Devm_MpuBoards_MpuBoard_Qos_ChannelAlarms_ChannelAlarm_Pool_POOLX_1            Devm_MpuBoards_MpuBoard_Qos_ChannelAlarms_ChannelAlarm_Pool = 2
)

// Enum value maps for Devm_MpuBoards_MpuBoard_Qos_ChannelAlarms_ChannelAlarm_Pool.
var (
	Devm_MpuBoards_MpuBoard_Qos_ChannelAlarms_ChannelAlarm_Pool_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Pool",
		1: "Pool_POOLX_0",
		2: "Pool_POOLX_1",
	}
	Devm_MpuBoards_MpuBoard_Qos_ChannelAlarms_ChannelAlarm_Pool_value = map[string]int32{
		"INVALID_ENUM_VALUE_Pool": 0,
		"Pool_POOLX_0":            1,
		"Pool_POOLX_1":            2,
	}
)

func (x Devm_MpuBoards_MpuBoard_Qos_ChannelAlarms_ChannelAlarm_Pool) Enum() *Devm_MpuBoards_MpuBoard_Qos_ChannelAlarms_ChannelAlarm_Pool {
	p := new(Devm_MpuBoards_MpuBoard_Qos_ChannelAlarms_ChannelAlarm_Pool)
	*p = x
	return p
}

func (x Devm_MpuBoards_MpuBoard_Qos_ChannelAlarms_ChannelAlarm_Pool) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_MpuBoards_MpuBoard_Qos_ChannelAlarms_ChannelAlarm_Pool) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[60].Descriptor()
}

func (Devm_MpuBoards_MpuBoard_Qos_ChannelAlarms_ChannelAlarm_Pool) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[60]
}

func (x Devm_MpuBoards_MpuBoard_Qos_ChannelAlarms_ChannelAlarm_Pool) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Qos_ChannelAlarms_ChannelAlarm_Pool.Descriptor instead.
func (Devm_MpuBoards_MpuBoard_Qos_ChannelAlarms_ChannelAlarm_Pool) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 16, 9, 0, 1}
}

type Devm_MpuBoards_MpuBoard_Qos_ChannelProfilePrecision_Type int32

const (
	Devm_MpuBoards_MpuBoard_Qos_ChannelProfilePrecision_INVALID_ENUM_VALUE_Type Devm_MpuBoards_MpuBoard_Qos_ChannelProfilePrecision_Type = 0
	Devm_MpuBoards_MpuBoard_Qos_ChannelProfilePrecision_Type_UP                 Devm_MpuBoards_MpuBoard_Qos_ChannelProfilePrecision_Type = 1
	Devm_MpuBoards_MpuBoard_Qos_ChannelProfilePrecision_Type_DOWN               Devm_MpuBoards_MpuBoard_Qos_ChannelProfilePrecision_Type = 2
)

// Enum value maps for Devm_MpuBoards_MpuBoard_Qos_ChannelProfilePrecision_Type.
var (
	Devm_MpuBoards_MpuBoard_Qos_ChannelProfilePrecision_Type_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Type",
		1: "Type_UP",
		2: "Type_DOWN",
	}
	Devm_MpuBoards_MpuBoard_Qos_ChannelProfilePrecision_Type_value = map[string]int32{
		"INVALID_ENUM_VALUE_Type": 0,
		"Type_UP":                 1,
		"Type_DOWN":               2,
	}
)

func (x Devm_MpuBoards_MpuBoard_Qos_ChannelProfilePrecision_Type) Enum() *Devm_MpuBoards_MpuBoard_Qos_ChannelProfilePrecision_Type {
	p := new(Devm_MpuBoards_MpuBoard_Qos_ChannelProfilePrecision_Type)
	*p = x
	return p
}

func (x Devm_MpuBoards_MpuBoard_Qos_ChannelProfilePrecision_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_MpuBoards_MpuBoard_Qos_ChannelProfilePrecision_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[61].Descriptor()
}

func (Devm_MpuBoards_MpuBoard_Qos_ChannelProfilePrecision_Type) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[61]
}

func (x Devm_MpuBoards_MpuBoard_Qos_ChannelProfilePrecision_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Qos_ChannelProfilePrecision_Type.Descriptor instead.
func (Devm_MpuBoards_MpuBoard_Qos_ChannelProfilePrecision_Type) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 16, 10, 0}
}

type Devm_MpuBoards_MpuBoard_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass int32

const (
	Devm_MpuBoards_MpuBoard_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass_BE  Devm_MpuBoards_MpuBoard_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass = 0
	Devm_MpuBoards_MpuBoard_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass_AF1 Devm_MpuBoards_MpuBoard_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass = 1
	Devm_MpuBoards_MpuBoard_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass_AF2 Devm_MpuBoards_MpuBoard_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass = 2
	Devm_MpuBoards_MpuBoard_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass_AF3 Devm_MpuBoards_MpuBoard_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass = 3
	Devm_MpuBoards_MpuBoard_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass_AF4 Devm_MpuBoards_MpuBoard_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass = 4
	Devm_MpuBoards_MpuBoard_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass_EF  Devm_MpuBoards_MpuBoard_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass = 5
	Devm_MpuBoards_MpuBoard_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass_CS6 Devm_MpuBoards_MpuBoard_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass = 6
	Devm_MpuBoards_MpuBoard_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass_CS7 Devm_MpuBoards_MpuBoard_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass = 7
)

// Enum value maps for Devm_MpuBoards_MpuBoard_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass.
var (
	Devm_MpuBoards_MpuBoard_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass_name = map[int32]string{
		0: "ServiceClass_BE",
		1: "ServiceClass_AF1",
		2: "ServiceClass_AF2",
		3: "ServiceClass_AF3",
		4: "ServiceClass_AF4",
		5: "ServiceClass_EF",
		6: "ServiceClass_CS6",
		7: "ServiceClass_CS7",
	}
	Devm_MpuBoards_MpuBoard_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass_value = map[string]int32{
		"ServiceClass_BE":  0,
		"ServiceClass_AF1": 1,
		"ServiceClass_AF2": 2,
		"ServiceClass_AF3": 3,
		"ServiceClass_AF4": 4,
		"ServiceClass_EF":  5,
		"ServiceClass_CS6": 6,
		"ServiceClass_CS7": 7,
	}
)

func (x Devm_MpuBoards_MpuBoard_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass) Enum() *Devm_MpuBoards_MpuBoard_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass {
	p := new(Devm_MpuBoards_MpuBoard_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass)
	*p = x
	return p
}

func (x Devm_MpuBoards_MpuBoard_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_MpuBoards_MpuBoard_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[62].Descriptor()
}

func (Devm_MpuBoards_MpuBoard_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[62]
}

func (x Devm_MpuBoards_MpuBoard_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass.Descriptor instead.
func (Devm_MpuBoards_MpuBoard_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 16, 13, 0, 0}
}

type Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_ServiceClass int32

const (
	Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_ServiceClass_BE  Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_ServiceClass = 0
	Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_ServiceClass_AF1 Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_ServiceClass = 1
	Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_ServiceClass_AF2 Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_ServiceClass = 2
	Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_ServiceClass_AF3 Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_ServiceClass = 3
	Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_ServiceClass_AF4 Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_ServiceClass = 4
	Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_ServiceClass_EF  Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_ServiceClass = 5
	Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_ServiceClass_CS6 Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_ServiceClass = 6
	Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_ServiceClass_CS7 Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_ServiceClass = 7
)

// Enum value maps for Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_ServiceClass.
var (
	Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_ServiceClass_name = map[int32]string{
		0: "ServiceClass_BE",
		1: "ServiceClass_AF1",
		2: "ServiceClass_AF2",
		3: "ServiceClass_AF3",
		4: "ServiceClass_AF4",
		5: "ServiceClass_EF",
		6: "ServiceClass_CS6",
		7: "ServiceClass_CS7",
	}
	Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_ServiceClass_value = map[string]int32{
		"ServiceClass_BE":  0,
		"ServiceClass_AF1": 1,
		"ServiceClass_AF2": 2,
		"ServiceClass_AF3": 3,
		"ServiceClass_AF4": 4,
		"ServiceClass_EF":  5,
		"ServiceClass_CS6": 6,
		"ServiceClass_CS7": 7,
	}
)

func (x Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_ServiceClass) Enum() *Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_ServiceClass {
	p := new(Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_ServiceClass)
	*p = x
	return p
}

func (x Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_ServiceClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_ServiceClass) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[63].Descriptor()
}

func (Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_ServiceClass) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[63]
}

func (x Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_ServiceClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_ServiceClass.Descriptor instead.
func (Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_ServiceClass) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 16, 17, 0, 0}
}

type Devm_MpuBoards_MpuBoard_Qos_BurstSizes_BurstSize_ServiceClass int32

const (
	Devm_MpuBoards_MpuBoard_Qos_BurstSizes_BurstSize_ServiceClass_BE  Devm_MpuBoards_MpuBoard_Qos_BurstSizes_BurstSize_ServiceClass = 0
	Devm_MpuBoards_MpuBoard_Qos_BurstSizes_BurstSize_ServiceClass_AF1 Devm_MpuBoards_MpuBoard_Qos_BurstSizes_BurstSize_ServiceClass = 1
	Devm_MpuBoards_MpuBoard_Qos_BurstSizes_BurstSize_ServiceClass_AF2 Devm_MpuBoards_MpuBoard_Qos_BurstSizes_BurstSize_ServiceClass = 2
	Devm_MpuBoards_MpuBoard_Qos_BurstSizes_BurstSize_ServiceClass_AF3 Devm_MpuBoards_MpuBoard_Qos_BurstSizes_BurstSize_ServiceClass = 3
	Devm_MpuBoards_MpuBoard_Qos_BurstSizes_BurstSize_ServiceClass_AF4 Devm_MpuBoards_MpuBoard_Qos_BurstSizes_BurstSize_ServiceClass = 4
	Devm_MpuBoards_MpuBoard_Qos_BurstSizes_BurstSize_ServiceClass_EF  Devm_MpuBoards_MpuBoard_Qos_BurstSizes_BurstSize_ServiceClass = 5
	Devm_MpuBoards_MpuBoard_Qos_BurstSizes_BurstSize_ServiceClass_CS6 Devm_MpuBoards_MpuBoard_Qos_BurstSizes_BurstSize_ServiceClass = 6
	Devm_MpuBoards_MpuBoard_Qos_BurstSizes_BurstSize_ServiceClass_CS7 Devm_MpuBoards_MpuBoard_Qos_BurstSizes_BurstSize_ServiceClass = 7
)

// Enum value maps for Devm_MpuBoards_MpuBoard_Qos_BurstSizes_BurstSize_ServiceClass.
var (
	Devm_MpuBoards_MpuBoard_Qos_BurstSizes_BurstSize_ServiceClass_name = map[int32]string{
		0: "ServiceClass_BE",
		1: "ServiceClass_AF1",
		2: "ServiceClass_AF2",
		3: "ServiceClass_AF3",
		4: "ServiceClass_AF4",
		5: "ServiceClass_EF",
		6: "ServiceClass_CS6",
		7: "ServiceClass_CS7",
	}
	Devm_MpuBoards_MpuBoard_Qos_BurstSizes_BurstSize_ServiceClass_value = map[string]int32{
		"ServiceClass_BE":  0,
		"ServiceClass_AF1": 1,
		"ServiceClass_AF2": 2,
		"ServiceClass_AF3": 3,
		"ServiceClass_AF4": 4,
		"ServiceClass_EF":  5,
		"ServiceClass_CS6": 6,
		"ServiceClass_CS7": 7,
	}
)

func (x Devm_MpuBoards_MpuBoard_Qos_BurstSizes_BurstSize_ServiceClass) Enum() *Devm_MpuBoards_MpuBoard_Qos_BurstSizes_BurstSize_ServiceClass {
	p := new(Devm_MpuBoards_MpuBoard_Qos_BurstSizes_BurstSize_ServiceClass)
	*p = x
	return p
}

func (x Devm_MpuBoards_MpuBoard_Qos_BurstSizes_BurstSize_ServiceClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_MpuBoards_MpuBoard_Qos_BurstSizes_BurstSize_ServiceClass) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[64].Descriptor()
}

func (Devm_MpuBoards_MpuBoard_Qos_BurstSizes_BurstSize_ServiceClass) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[64]
}

func (x Devm_MpuBoards_MpuBoard_Qos_BurstSizes_BurstSize_ServiceClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Qos_BurstSizes_BurstSize_ServiceClass.Descriptor instead.
func (Devm_MpuBoards_MpuBoard_Qos_BurstSizes_BurstSize_ServiceClass) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 16, 19, 0, 0}
}

type Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareThresholds_GlobalBufferShareThreshold_Direction int32

const (
	Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareThresholds_GlobalBufferShareThreshold_Direction_INBOUND  Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareThresholds_GlobalBufferShareThreshold_Direction = 0
	Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareThresholds_GlobalBufferShareThreshold_Direction_OUTBOUND Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareThresholds_GlobalBufferShareThreshold_Direction = 1
)

// Enum value maps for Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareThresholds_GlobalBufferShareThreshold_Direction.
var (
	Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareThresholds_GlobalBufferShareThreshold_Direction_name = map[int32]string{
		0: "Direction_INBOUND",
		1: "Direction_OUTBOUND",
	}
	Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareThresholds_GlobalBufferShareThreshold_Direction_value = map[string]int32{
		"Direction_INBOUND":  0,
		"Direction_OUTBOUND": 1,
	}
)

func (x Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareThresholds_GlobalBufferShareThreshold_Direction) Enum() *Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareThresholds_GlobalBufferShareThreshold_Direction {
	p := new(Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareThresholds_GlobalBufferShareThreshold_Direction)
	*p = x
	return p
}

func (x Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareThresholds_GlobalBufferShareThreshold_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareThresholds_GlobalBufferShareThreshold_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[65].Descriptor()
}

func (Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareThresholds_GlobalBufferShareThreshold_Direction) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[65]
}

func (x Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareThresholds_GlobalBufferShareThreshold_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareThresholds_GlobalBufferShareThreshold_Direction.Descriptor instead.
func (Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareThresholds_GlobalBufferShareThreshold_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 16, 20, 0, 0}
}

type Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_ServiceClass int32

const (
	Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_ServiceClass_BE  Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_ServiceClass = 0
	Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_ServiceClass_AF1 Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_ServiceClass = 1
	Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_ServiceClass_AF2 Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_ServiceClass = 2
	Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_ServiceClass_AF3 Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_ServiceClass = 3
	Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_ServiceClass_AF4 Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_ServiceClass = 4
	Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_ServiceClass_EF  Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_ServiceClass = 5
	Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_ServiceClass_CS6 Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_ServiceClass = 6
	Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_ServiceClass_CS7 Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_ServiceClass = 7
)

// Enum value maps for Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_ServiceClass.
var (
	Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_ServiceClass_name = map[int32]string{
		0: "ServiceClass_BE",
		1: "ServiceClass_AF1",
		2: "ServiceClass_AF2",
		3: "ServiceClass_AF3",
		4: "ServiceClass_AF4",
		5: "ServiceClass_EF",
		6: "ServiceClass_CS6",
		7: "ServiceClass_CS7",
	}
	Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_ServiceClass_value = map[string]int32{
		"ServiceClass_BE":  0,
		"ServiceClass_AF1": 1,
		"ServiceClass_AF2": 2,
		"ServiceClass_AF3": 3,
		"ServiceClass_AF4": 4,
		"ServiceClass_EF":  5,
		"ServiceClass_CS6": 6,
		"ServiceClass_CS7": 7,
	}
)

func (x Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_ServiceClass) Enum() *Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_ServiceClass {
	p := new(Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_ServiceClass)
	*p = x
	return p
}

func (x Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_ServiceClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_ServiceClass) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[66].Descriptor()
}

func (Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_ServiceClass) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[66]
}

func (x Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_ServiceClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_ServiceClass.Descriptor instead.
func (Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_ServiceClass) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 16, 21, 0, 0}
}

type Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_Direction int32

const (
	Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_Direction_INBOUND  Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_Direction = 0
	Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_Direction_OUTBOUND Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_Direction = 1
)

// Enum value maps for Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_Direction.
var (
	Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_Direction_name = map[int32]string{
		0: "Direction_INBOUND",
		1: "Direction_OUTBOUND",
	}
	Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_Direction_value = map[string]int32{
		"Direction_INBOUND":  0,
		"Direction_OUTBOUND": 1,
	}
)

func (x Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_Direction) Enum() *Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_Direction {
	p := new(Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_Direction)
	*p = x
	return p
}

func (x Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[67].Descriptor()
}

func (Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_Direction) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[67]
}

func (x Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_Direction.Descriptor instead.
func (Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 16, 21, 0, 1}
}

type Devm_MpuBoards_MpuBoard_Qos_UserQueueResource8CosEnhances_UserQueueResource8CosEnhance_Direction int32

const (
	Devm_MpuBoards_MpuBoard_Qos_UserQueueResource8CosEnhances_UserQueueResource8CosEnhance_Direction_INBOUND  Devm_MpuBoards_MpuBoard_Qos_UserQueueResource8CosEnhances_UserQueueResource8CosEnhance_Direction = 0
	Devm_MpuBoards_MpuBoard_Qos_UserQueueResource8CosEnhances_UserQueueResource8CosEnhance_Direction_OUTBOUND Devm_MpuBoards_MpuBoard_Qos_UserQueueResource8CosEnhances_UserQueueResource8CosEnhance_Direction = 1
)

// Enum value maps for Devm_MpuBoards_MpuBoard_Qos_UserQueueResource8CosEnhances_UserQueueResource8CosEnhance_Direction.
var (
	Devm_MpuBoards_MpuBoard_Qos_UserQueueResource8CosEnhances_UserQueueResource8CosEnhance_Direction_name = map[int32]string{
		0: "Direction_INBOUND",
		1: "Direction_OUTBOUND",
	}
	Devm_MpuBoards_MpuBoard_Qos_UserQueueResource8CosEnhances_UserQueueResource8CosEnhance_Direction_value = map[string]int32{
		"Direction_INBOUND":  0,
		"Direction_OUTBOUND": 1,
	}
)

func (x Devm_MpuBoards_MpuBoard_Qos_UserQueueResource8CosEnhances_UserQueueResource8CosEnhance_Direction) Enum() *Devm_MpuBoards_MpuBoard_Qos_UserQueueResource8CosEnhances_UserQueueResource8CosEnhance_Direction {
	p := new(Devm_MpuBoards_MpuBoard_Qos_UserQueueResource8CosEnhances_UserQueueResource8CosEnhance_Direction)
	*p = x
	return p
}

func (x Devm_MpuBoards_MpuBoard_Qos_UserQueueResource8CosEnhances_UserQueueResource8CosEnhance_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_MpuBoards_MpuBoard_Qos_UserQueueResource8CosEnhances_UserQueueResource8CosEnhance_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[68].Descriptor()
}

func (Devm_MpuBoards_MpuBoard_Qos_UserQueueResource8CosEnhances_UserQueueResource8CosEnhance_Direction) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[68]
}

func (x Devm_MpuBoards_MpuBoard_Qos_UserQueueResource8CosEnhances_UserQueueResource8CosEnhance_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Qos_UserQueueResource8CosEnhances_UserQueueResource8CosEnhance_Direction.Descriptor instead.
func (Devm_MpuBoards_MpuBoard_Qos_UserQueueResource8CosEnhances_UserQueueResource8CosEnhance_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 16, 25, 0, 0}
}

type Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_LoopLevelThresholds_LoopLevelThreshold_InterfaceType int32

const (
	Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_LoopLevelThresholds_LoopLevelThreshold_InterfaceType_MAINX_INTERFACE Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_LoopLevelThresholds_LoopLevelThreshold_InterfaceType = 0
	Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_LoopLevelThresholds_LoopLevelThreshold_InterfaceType_SUBX_INTERFACE  Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_LoopLevelThresholds_LoopLevelThreshold_InterfaceType = 1
)

// Enum value maps for Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_LoopLevelThresholds_LoopLevelThreshold_InterfaceType.
var (
	Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_LoopLevelThresholds_LoopLevelThreshold_InterfaceType_name = map[int32]string{
		0: "InterfaceType_MAINX_INTERFACE",
		1: "InterfaceType_SUBX_INTERFACE",
	}
	Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_LoopLevelThresholds_LoopLevelThreshold_InterfaceType_value = map[string]int32{
		"InterfaceType_MAINX_INTERFACE": 0,
		"InterfaceType_SUBX_INTERFACE":  1,
	}
)

func (x Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_LoopLevelThresholds_LoopLevelThreshold_InterfaceType) Enum() *Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_LoopLevelThresholds_LoopLevelThreshold_InterfaceType {
	p := new(Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_LoopLevelThresholds_LoopLevelThreshold_InterfaceType)
	*p = x
	return p
}

func (x Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_LoopLevelThresholds_LoopLevelThreshold_InterfaceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_LoopLevelThresholds_LoopLevelThreshold_InterfaceType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[69].Descriptor()
}

func (Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_LoopLevelThresholds_LoopLevelThreshold_InterfaceType) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[69]
}

func (x Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_LoopLevelThresholds_LoopLevelThreshold_InterfaceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_LoopLevelThresholds_LoopLevelThreshold_InterfaceType.Descriptor instead.
func (Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_LoopLevelThresholds_LoopLevelThreshold_InterfaceType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 17, 0, 2, 0, 0}
}

type Devm_MpuBoards_MpuBoard_UnicastForward_GreTtlMode_TtlMode int32

const (
	Devm_MpuBoards_MpuBoard_UnicastForward_GreTtlMode_TtlMode_PIPE    Devm_MpuBoards_MpuBoard_UnicastForward_GreTtlMode_TtlMode = 0
	Devm_MpuBoards_MpuBoard_UnicastForward_GreTtlMode_TtlMode_UNIFORM Devm_MpuBoards_MpuBoard_UnicastForward_GreTtlMode_TtlMode = 1
)

// Enum value maps for Devm_MpuBoards_MpuBoard_UnicastForward_GreTtlMode_TtlMode.
var (
	Devm_MpuBoards_MpuBoard_UnicastForward_GreTtlMode_TtlMode_name = map[int32]string{
		0: "TtlMode_PIPE",
		1: "TtlMode_UNIFORM",
	}
	Devm_MpuBoards_MpuBoard_UnicastForward_GreTtlMode_TtlMode_value = map[string]int32{
		"TtlMode_PIPE":    0,
		"TtlMode_UNIFORM": 1,
	}
)

func (x Devm_MpuBoards_MpuBoard_UnicastForward_GreTtlMode_TtlMode) Enum() *Devm_MpuBoards_MpuBoard_UnicastForward_GreTtlMode_TtlMode {
	p := new(Devm_MpuBoards_MpuBoard_UnicastForward_GreTtlMode_TtlMode)
	*p = x
	return p
}

func (x Devm_MpuBoards_MpuBoard_UnicastForward_GreTtlMode_TtlMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_MpuBoards_MpuBoard_UnicastForward_GreTtlMode_TtlMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[70].Descriptor()
}

func (Devm_MpuBoards_MpuBoard_UnicastForward_GreTtlMode_TtlMode) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[70]
}

func (x Devm_MpuBoards_MpuBoard_UnicastForward_GreTtlMode_TtlMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_UnicastForward_GreTtlMode_TtlMode.Descriptor instead.
func (Devm_MpuBoards_MpuBoard_UnicastForward_GreTtlMode_TtlMode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 18, 2, 0}
}

type Devm_MpuBoards_MpuBoard_Dcb_DeadlockRecoveryBehavior_Behavior int32

const (
	Devm_MpuBoards_MpuBoard_Dcb_DeadlockRecoveryBehavior_Behavior_FORWARDING Devm_MpuBoards_MpuBoard_Dcb_DeadlockRecoveryBehavior_Behavior = 0
	Devm_MpuBoards_MpuBoard_Dcb_DeadlockRecoveryBehavior_Behavior_DISCARD    Devm_MpuBoards_MpuBoard_Dcb_DeadlockRecoveryBehavior_Behavior = 1
)

// Enum value maps for Devm_MpuBoards_MpuBoard_Dcb_DeadlockRecoveryBehavior_Behavior.
var (
	Devm_MpuBoards_MpuBoard_Dcb_DeadlockRecoveryBehavior_Behavior_name = map[int32]string{
		0: "Behavior_FORWARDING",
		1: "Behavior_DISCARD",
	}
	Devm_MpuBoards_MpuBoard_Dcb_DeadlockRecoveryBehavior_Behavior_value = map[string]int32{
		"Behavior_FORWARDING": 0,
		"Behavior_DISCARD":    1,
	}
)

func (x Devm_MpuBoards_MpuBoard_Dcb_DeadlockRecoveryBehavior_Behavior) Enum() *Devm_MpuBoards_MpuBoard_Dcb_DeadlockRecoveryBehavior_Behavior {
	p := new(Devm_MpuBoards_MpuBoard_Dcb_DeadlockRecoveryBehavior_Behavior)
	*p = x
	return p
}

func (x Devm_MpuBoards_MpuBoard_Dcb_DeadlockRecoveryBehavior_Behavior) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_MpuBoards_MpuBoard_Dcb_DeadlockRecoveryBehavior_Behavior) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[71].Descriptor()
}

func (Devm_MpuBoards_MpuBoard_Dcb_DeadlockRecoveryBehavior_Behavior) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[71]
}

func (x Devm_MpuBoards_MpuBoard_Dcb_DeadlockRecoveryBehavior_Behavior) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Dcb_DeadlockRecoveryBehavior_Behavior.Descriptor instead.
func (Devm_MpuBoards_MpuBoard_Dcb_DeadlockRecoveryBehavior_Behavior) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 25, 1, 0}
}

type Devm_MpuBoards_MpuBoard_Dcb_PfcMappingType_Type int32

const (
	Devm_MpuBoards_MpuBoard_Dcb_PfcMappingType_Type_X_8021P Devm_MpuBoards_MpuBoard_Dcb_PfcMappingType_Type = 0
	Devm_MpuBoards_MpuBoard_Dcb_PfcMappingType_Type_DSCP    Devm_MpuBoards_MpuBoard_Dcb_PfcMappingType_Type = 1
)

// Enum value maps for Devm_MpuBoards_MpuBoard_Dcb_PfcMappingType_Type.
var (
	Devm_MpuBoards_MpuBoard_Dcb_PfcMappingType_Type_name = map[int32]string{
		0: "Type_X_8021P",
		1: "Type_DSCP",
	}
	Devm_MpuBoards_MpuBoard_Dcb_PfcMappingType_Type_value = map[string]int32{
		"Type_X_8021P": 0,
		"Type_DSCP":    1,
	}
)

func (x Devm_MpuBoards_MpuBoard_Dcb_PfcMappingType_Type) Enum() *Devm_MpuBoards_MpuBoard_Dcb_PfcMappingType_Type {
	p := new(Devm_MpuBoards_MpuBoard_Dcb_PfcMappingType_Type)
	*p = x
	return p
}

func (x Devm_MpuBoards_MpuBoard_Dcb_PfcMappingType_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_MpuBoards_MpuBoard_Dcb_PfcMappingType_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[72].Descriptor()
}

func (Devm_MpuBoards_MpuBoard_Dcb_PfcMappingType_Type) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[72]
}

func (x Devm_MpuBoards_MpuBoard_Dcb_PfcMappingType_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Dcb_PfcMappingType_Type.Descriptor instead.
func (Devm_MpuBoards_MpuBoard_Dcb_PfcMappingType_Type) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 25, 2, 0}
}

type Devm_LpuBoards_LpuBoard_ServiceType int32

const (
	Devm_LpuBoards_LpuBoard_ServiceType_LPU Devm_LpuBoards_LpuBoard_ServiceType = 0
	Devm_LpuBoards_LpuBoard_ServiceType_RNR Devm_LpuBoards_LpuBoard_ServiceType = 1
	Devm_LpuBoards_LpuBoard_ServiceType_TSU Devm_LpuBoards_LpuBoard_ServiceType = 2
	Devm_LpuBoards_LpuBoard_ServiceType_NS  Devm_LpuBoards_LpuBoard_ServiceType = 3
	Devm_LpuBoards_LpuBoard_ServiceType_GRE Devm_LpuBoards_LpuBoard_ServiceType = 4
	Devm_LpuBoards_LpuBoard_ServiceType_VSU Devm_LpuBoards_LpuBoard_ServiceType = 5
)

// Enum value maps for Devm_LpuBoards_LpuBoard_ServiceType.
var (
	Devm_LpuBoards_LpuBoard_ServiceType_name = map[int32]string{
		0: "ServiceType_LPU",
		1: "ServiceType_RNR",
		2: "ServiceType_TSU",
		3: "ServiceType_NS",
		4: "ServiceType_GRE",
		5: "ServiceType_VSU",
	}
	Devm_LpuBoards_LpuBoard_ServiceType_value = map[string]int32{
		"ServiceType_LPU": 0,
		"ServiceType_RNR": 1,
		"ServiceType_TSU": 2,
		"ServiceType_NS":  3,
		"ServiceType_GRE": 4,
		"ServiceType_VSU": 5,
	}
)

func (x Devm_LpuBoards_LpuBoard_ServiceType) Enum() *Devm_LpuBoards_LpuBoard_ServiceType {
	p := new(Devm_LpuBoards_LpuBoard_ServiceType)
	*p = x
	return p
}

func (x Devm_LpuBoards_LpuBoard_ServiceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_LpuBoards_LpuBoard_ServiceType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[73].Descriptor()
}

func (Devm_LpuBoards_LpuBoard_ServiceType) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[73]
}

func (x Devm_LpuBoards_LpuBoard_ServiceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_ServiceType.Descriptor instead.
func (Devm_LpuBoards_LpuBoard_ServiceType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 0}
}

type Devm_LpuBoards_LpuBoard_NextServiceType int32

const (
	Devm_LpuBoards_LpuBoard_NextServiceType_LPU Devm_LpuBoards_LpuBoard_NextServiceType = 0
	Devm_LpuBoards_LpuBoard_NextServiceType_RNR Devm_LpuBoards_LpuBoard_NextServiceType = 1
	Devm_LpuBoards_LpuBoard_NextServiceType_TSU Devm_LpuBoards_LpuBoard_NextServiceType = 2
	Devm_LpuBoards_LpuBoard_NextServiceType_NS  Devm_LpuBoards_LpuBoard_NextServiceType = 3
	Devm_LpuBoards_LpuBoard_NextServiceType_GRE Devm_LpuBoards_LpuBoard_NextServiceType = 4
	Devm_LpuBoards_LpuBoard_NextServiceType_VSU Devm_LpuBoards_LpuBoard_NextServiceType = 5
)

// Enum value maps for Devm_LpuBoards_LpuBoard_NextServiceType.
var (
	Devm_LpuBoards_LpuBoard_NextServiceType_name = map[int32]string{
		0: "NextServiceType_LPU",
		1: "NextServiceType_RNR",
		2: "NextServiceType_TSU",
		3: "NextServiceType_NS",
		4: "NextServiceType_GRE",
		5: "NextServiceType_VSU",
	}
	Devm_LpuBoards_LpuBoard_NextServiceType_value = map[string]int32{
		"NextServiceType_LPU": 0,
		"NextServiceType_RNR": 1,
		"NextServiceType_TSU": 2,
		"NextServiceType_NS":  3,
		"NextServiceType_GRE": 4,
		"NextServiceType_VSU": 5,
	}
)

func (x Devm_LpuBoards_LpuBoard_NextServiceType) Enum() *Devm_LpuBoards_LpuBoard_NextServiceType {
	p := new(Devm_LpuBoards_LpuBoard_NextServiceType)
	*p = x
	return p
}

func (x Devm_LpuBoards_LpuBoard_NextServiceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_LpuBoards_LpuBoard_NextServiceType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[74].Descriptor()
}

func (Devm_LpuBoards_LpuBoard_NextServiceType) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[74]
}

func (x Devm_LpuBoards_LpuBoard_NextServiceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_NextServiceType.Descriptor instead.
func (Devm_LpuBoards_LpuBoard_NextServiceType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 1}
}

type Devm_LpuBoards_LpuBoard_Bras_FlowStatisticFrequency_Type int32

const (
	Devm_LpuBoards_LpuBoard_Bras_FlowStatisticFrequency_INVALID_ENUM_VALUE_Type Devm_LpuBoards_LpuBoard_Bras_FlowStatisticFrequency_Type = 0
	Devm_LpuBoards_LpuBoard_Bras_FlowStatisticFrequency_Type_FAST               Devm_LpuBoards_LpuBoard_Bras_FlowStatisticFrequency_Type = 1
	Devm_LpuBoards_LpuBoard_Bras_FlowStatisticFrequency_Type_NORMAL             Devm_LpuBoards_LpuBoard_Bras_FlowStatisticFrequency_Type = 2
	Devm_LpuBoards_LpuBoard_Bras_FlowStatisticFrequency_Type_SLOW               Devm_LpuBoards_LpuBoard_Bras_FlowStatisticFrequency_Type = 3
	Devm_LpuBoards_LpuBoard_Bras_FlowStatisticFrequency_Type_DEFAULT            Devm_LpuBoards_LpuBoard_Bras_FlowStatisticFrequency_Type = 4
)

// Enum value maps for Devm_LpuBoards_LpuBoard_Bras_FlowStatisticFrequency_Type.
var (
	Devm_LpuBoards_LpuBoard_Bras_FlowStatisticFrequency_Type_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Type",
		1: "Type_FAST",
		2: "Type_NORMAL",
		3: "Type_SLOW",
		4: "Type_DEFAULT",
	}
	Devm_LpuBoards_LpuBoard_Bras_FlowStatisticFrequency_Type_value = map[string]int32{
		"INVALID_ENUM_VALUE_Type": 0,
		"Type_FAST":               1,
		"Type_NORMAL":             2,
		"Type_SLOW":               3,
		"Type_DEFAULT":            4,
	}
)

func (x Devm_LpuBoards_LpuBoard_Bras_FlowStatisticFrequency_Type) Enum() *Devm_LpuBoards_LpuBoard_Bras_FlowStatisticFrequency_Type {
	p := new(Devm_LpuBoards_LpuBoard_Bras_FlowStatisticFrequency_Type)
	*p = x
	return p
}

func (x Devm_LpuBoards_LpuBoard_Bras_FlowStatisticFrequency_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_LpuBoards_LpuBoard_Bras_FlowStatisticFrequency_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[75].Descriptor()
}

func (Devm_LpuBoards_LpuBoard_Bras_FlowStatisticFrequency_Type) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[75]
}

func (x Devm_LpuBoards_LpuBoard_Bras_FlowStatisticFrequency_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Bras_FlowStatisticFrequency_Type.Descriptor instead.
func (Devm_LpuBoards_LpuBoard_Bras_FlowStatisticFrequency_Type) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 0, 0, 0}
}

type Devm_LpuBoards_LpuBoard_L2Tp_ForwardMode_ModeValue int32

const (
	Devm_LpuBoards_LpuBoard_L2Tp_ForwardMode_ModeValue_LOOPBACK Devm_LpuBoards_LpuBoard_L2Tp_ForwardMode_ModeValue = 0
	Devm_LpuBoards_LpuBoard_L2Tp_ForwardMode_ModeValue_THROUGH  Devm_LpuBoards_LpuBoard_L2Tp_ForwardMode_ModeValue = 1
)

// Enum value maps for Devm_LpuBoards_LpuBoard_L2Tp_ForwardMode_ModeValue.
var (
	Devm_LpuBoards_LpuBoard_L2Tp_ForwardMode_ModeValue_name = map[int32]string{
		0: "ModeValue_LOOPBACK",
		1: "ModeValue_THROUGH",
	}
	Devm_LpuBoards_LpuBoard_L2Tp_ForwardMode_ModeValue_value = map[string]int32{
		"ModeValue_LOOPBACK": 0,
		"ModeValue_THROUGH":  1,
	}
)

func (x Devm_LpuBoards_LpuBoard_L2Tp_ForwardMode_ModeValue) Enum() *Devm_LpuBoards_LpuBoard_L2Tp_ForwardMode_ModeValue {
	p := new(Devm_LpuBoards_LpuBoard_L2Tp_ForwardMode_ModeValue)
	*p = x
	return p
}

func (x Devm_LpuBoards_LpuBoard_L2Tp_ForwardMode_ModeValue) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_LpuBoards_LpuBoard_L2Tp_ForwardMode_ModeValue) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[76].Descriptor()
}

func (Devm_LpuBoards_LpuBoard_L2Tp_ForwardMode_ModeValue) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[76]
}

func (x Devm_LpuBoards_LpuBoard_L2Tp_ForwardMode_ModeValue) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_L2Tp_ForwardMode_ModeValue.Descriptor instead.
func (Devm_LpuBoards_LpuBoard_L2Tp_ForwardMode_ModeValue) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 2, 1, 0}
}

type Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_Type int32

const (
	Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_INVALID_ENUM_VALUE_Type Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_Type = 0
	Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_Type_HOSTX_CAR          Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_Type = 1
	Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_Type_HTTPX_HOSTX_CAR    Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_Type = 2
	Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_Type_VLANX_HOSTX_CAR    Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_Type = 3
)

// Enum value maps for Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_Type.
var (
	Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_Type_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Type",
		1: "Type_HOSTX_CAR",
		2: "Type_HTTPX_HOSTX_CAR",
		3: "Type_VLANX_HOSTX_CAR",
	}
	Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_Type_value = map[string]int32{
		"INVALID_ENUM_VALUE_Type": 0,
		"Type_HOSTX_CAR":          1,
		"Type_HTTPX_HOSTX_CAR":    2,
		"Type_VLANX_HOSTX_CAR":    3,
	}
)

func (x Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_Type) Enum() *Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_Type {
	p := new(Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_Type)
	*p = x
	return p
}

func (x Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[77].Descriptor()
}

func (Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_Type) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[77]
}

func (x Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_Type.Descriptor instead.
func (Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_Type) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 5, 1, 0, 0}
}

type Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType int32

const (
	Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar_INVALID_ENUM_VALUE_CarType    Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType = 0
	Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType_ICMP                  Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType = 1
	Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType_TCP                   Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType = 2
	Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType_UDP                   Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType = 3
	Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType_GRE                   Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType = 4
	Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType_BGP                   Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType = 5
	Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType_DEFAULT               Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType = 6
	Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType_TOTAL                 Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType = 7
	Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType_IKEX_TOTALX_CAR       Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType = 8
	Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType_IKEX_TUNNELX_CAR      Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType = 9
	Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType_PLAINX_SAX_MISS       Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType = 10
	Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType_CIPHERX_SAX_MISS      Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType = 11
	Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType_IPSECX_REKEY          Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType = 12
	Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType_IKEX_DPD              Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType = 13
	Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType_FASTX_CHANNEL         Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType = 14
	Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType_BFDX_DOWN             Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType = 15
	Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType_PST                   Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType = 16
	Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType_DSLITEX_PRIVATEX_IPV4 Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType = 17
	Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType_IPX_OPTION            Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType = 18
	Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType_MTUX_EXCEED           Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType = 19
	Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType_CGNX_ICMP             Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType = 20
	Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType_CGNX_ICMPV6           Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType = 21
	Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType_CGNX_IPV4X_OTHER      Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType = 22
	Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType_CGNX_IPV6X_OTHER      Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType = 23
	Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType_CGNX_IPV6X_RAW        Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType = 24
	Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType_CGNX_TOTAL            Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType = 25
)

// Enum value maps for Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType.
var (
	Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType_name = map[int32]string{
		0:  "INVALID_ENUM_VALUE_CarType",
		1:  "CarType_ICMP",
		2:  "CarType_TCP",
		3:  "CarType_UDP",
		4:  "CarType_GRE",
		5:  "CarType_BGP",
		6:  "CarType_DEFAULT",
		7:  "CarType_TOTAL",
		8:  "CarType_IKEX_TOTALX_CAR",
		9:  "CarType_IKEX_TUNNELX_CAR",
		10: "CarType_PLAINX_SAX_MISS",
		11: "CarType_CIPHERX_SAX_MISS",
		12: "CarType_IPSECX_REKEY",
		13: "CarType_IKEX_DPD",
		14: "CarType_FASTX_CHANNEL",
		15: "CarType_BFDX_DOWN",
		16: "CarType_PST",
		17: "CarType_DSLITEX_PRIVATEX_IPV4",
		18: "CarType_IPX_OPTION",
		19: "CarType_MTUX_EXCEED",
		20: "CarType_CGNX_ICMP",
		21: "CarType_CGNX_ICMPV6",
		22: "CarType_CGNX_IPV4X_OTHER",
		23: "CarType_CGNX_IPV6X_OTHER",
		24: "CarType_CGNX_IPV6X_RAW",
		25: "CarType_CGNX_TOTAL",
	}
	Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType_value = map[string]int32{
		"INVALID_ENUM_VALUE_CarType":    0,
		"CarType_ICMP":                  1,
		"CarType_TCP":                   2,
		"CarType_UDP":                   3,
		"CarType_GRE":                   4,
		"CarType_BGP":                   5,
		"CarType_DEFAULT":               6,
		"CarType_TOTAL":                 7,
		"CarType_IKEX_TOTALX_CAR":       8,
		"CarType_IKEX_TUNNELX_CAR":      9,
		"CarType_PLAINX_SAX_MISS":       10,
		"CarType_CIPHERX_SAX_MISS":      11,
		"CarType_IPSECX_REKEY":          12,
		"CarType_IKEX_DPD":              13,
		"CarType_FASTX_CHANNEL":         14,
		"CarType_BFDX_DOWN":             15,
		"CarType_PST":                   16,
		"CarType_DSLITEX_PRIVATEX_IPV4": 17,
		"CarType_IPX_OPTION":            18,
		"CarType_MTUX_EXCEED":           19,
		"CarType_CGNX_ICMP":             20,
		"CarType_CGNX_ICMPV6":           21,
		"CarType_CGNX_IPV4X_OTHER":      22,
		"CarType_CGNX_IPV6X_OTHER":      23,
		"CarType_CGNX_IPV6X_RAW":        24,
		"CarType_CGNX_TOTAL":            25,
	}
)

func (x Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType) Enum() *Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType {
	p := new(Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType)
	*p = x
	return p
}

func (x Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[78].Descriptor()
}

func (Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[78]
}

func (x Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType.Descriptor instead.
func (Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 5, 2, 0, 0}
}

type Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms_NdAttackAlarm_Type int32

const (
	Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms_NdAttackAlarm_INVALID_ENUM_VALUE_Type Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms_NdAttackAlarm_Type = 0
	Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms_NdAttackAlarm_Type_NA                 Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms_NdAttackAlarm_Type = 1
	Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms_NdAttackAlarm_Type_NSX_UNICAST        Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms_NdAttackAlarm_Type = 2
	Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms_NdAttackAlarm_Type_NSX_MULTICAST      Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms_NdAttackAlarm_Type = 3
)

// Enum value maps for Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms_NdAttackAlarm_Type.
var (
	Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms_NdAttackAlarm_Type_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Type",
		1: "Type_NA",
		2: "Type_NSX_UNICAST",
		3: "Type_NSX_MULTICAST",
	}
	Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms_NdAttackAlarm_Type_value = map[string]int32{
		"INVALID_ENUM_VALUE_Type": 0,
		"Type_NA":                 1,
		"Type_NSX_UNICAST":        2,
		"Type_NSX_MULTICAST":      3,
	}
)

func (x Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms_NdAttackAlarm_Type) Enum() *Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms_NdAttackAlarm_Type {
	p := new(Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms_NdAttackAlarm_Type)
	*p = x
	return p
}

func (x Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms_NdAttackAlarm_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms_NdAttackAlarm_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[79].Descriptor()
}

func (Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms_NdAttackAlarm_Type) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[79]
}

func (x Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms_NdAttackAlarm_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms_NdAttackAlarm_Type.Descriptor instead.
func (Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms_NdAttackAlarm_Type) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 5, 4, 0, 0, 0}
}

type Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_Level2Cars_Level2Car_Type int32

const (
	Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_Level2Cars_Level2Car_INVALID_ENUM_VALUE_Type Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_Level2Cars_Level2Car_Type = 0
	Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_Level2Cars_Level2Car_Type_NA                 Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_Level2Cars_Level2Car_Type = 1
	Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_Level2Cars_Level2Car_Type_NSX_UNICAST        Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_Level2Cars_Level2Car_Type = 2
	Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_Level2Cars_Level2Car_Type_NSX_MULTICAST      Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_Level2Cars_Level2Car_Type = 3
)

// Enum value maps for Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_Level2Cars_Level2Car_Type.
var (
	Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_Level2Cars_Level2Car_Type_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Type",
		1: "Type_NA",
		2: "Type_NSX_UNICAST",
		3: "Type_NSX_MULTICAST",
	}
	Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_Level2Cars_Level2Car_Type_value = map[string]int32{
		"INVALID_ENUM_VALUE_Type": 0,
		"Type_NA":                 1,
		"Type_NSX_UNICAST":        2,
		"Type_NSX_MULTICAST":      3,
	}
)

func (x Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_Level2Cars_Level2Car_Type) Enum() *Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_Level2Cars_Level2Car_Type {
	p := new(Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_Level2Cars_Level2Car_Type)
	*p = x
	return p
}

func (x Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_Level2Cars_Level2Car_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_Level2Cars_Level2Car_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[80].Descriptor()
}

func (Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_Level2Cars_Level2Car_Type) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[80]
}

func (x Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_Level2Cars_Level2Car_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_Level2Cars_Level2Car_Type.Descriptor instead.
func (Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_Level2Cars_Level2Car_Type) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 5, 4, 1, 0, 0}
}

type Devm_LpuBoards_LpuBoard_Driver_L3Clocks_L3Clock_L3ClockState int32

const (
	Devm_LpuBoards_LpuBoard_Driver_L3Clocks_L3Clock_L3ClockState_ABNORMAL Devm_LpuBoards_LpuBoard_Driver_L3Clocks_L3Clock_L3ClockState = 0
	Devm_LpuBoards_LpuBoard_Driver_L3Clocks_L3Clock_L3ClockState_NORMAL   Devm_LpuBoards_LpuBoard_Driver_L3Clocks_L3Clock_L3ClockState = 1
)

// Enum value maps for Devm_LpuBoards_LpuBoard_Driver_L3Clocks_L3Clock_L3ClockState.
var (
	Devm_LpuBoards_LpuBoard_Driver_L3Clocks_L3Clock_L3ClockState_name = map[int32]string{
		0: "L3ClockState_ABNORMAL",
		1: "L3ClockState_NORMAL",
	}
	Devm_LpuBoards_LpuBoard_Driver_L3Clocks_L3Clock_L3ClockState_value = map[string]int32{
		"L3ClockState_ABNORMAL": 0,
		"L3ClockState_NORMAL":   1,
	}
)

func (x Devm_LpuBoards_LpuBoard_Driver_L3Clocks_L3Clock_L3ClockState) Enum() *Devm_LpuBoards_LpuBoard_Driver_L3Clocks_L3Clock_L3ClockState {
	p := new(Devm_LpuBoards_LpuBoard_Driver_L3Clocks_L3Clock_L3ClockState)
	*p = x
	return p
}

func (x Devm_LpuBoards_LpuBoard_Driver_L3Clocks_L3Clock_L3ClockState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_LpuBoards_LpuBoard_Driver_L3Clocks_L3Clock_L3ClockState) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[81].Descriptor()
}

func (Devm_LpuBoards_LpuBoard_Driver_L3Clocks_L3Clock_L3ClockState) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[81]
}

func (x Devm_LpuBoards_LpuBoard_Driver_L3Clocks_L3Clock_L3ClockState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Driver_L3Clocks_L3Clock_L3ClockState.Descriptor instead.
func (Devm_LpuBoards_LpuBoard_Driver_L3Clocks_L3Clock_L3ClockState) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 6, 0, 0, 0}
}

type Devm_LpuBoards_LpuBoard_CmacPadding_Padding int32

const (
	Devm_LpuBoards_LpuBoard_CmacPadding_Padding_DISABLE Devm_LpuBoards_LpuBoard_CmacPadding_Padding = 0
	Devm_LpuBoards_LpuBoard_CmacPadding_Padding_ENABLE  Devm_LpuBoards_LpuBoard_CmacPadding_Padding = 1
)

// Enum value maps for Devm_LpuBoards_LpuBoard_CmacPadding_Padding.
var (
	Devm_LpuBoards_LpuBoard_CmacPadding_Padding_name = map[int32]string{
		0: "Padding_DISABLE",
		1: "Padding_ENABLE",
	}
	Devm_LpuBoards_LpuBoard_CmacPadding_Padding_value = map[string]int32{
		"Padding_DISABLE": 0,
		"Padding_ENABLE":  1,
	}
)

func (x Devm_LpuBoards_LpuBoard_CmacPadding_Padding) Enum() *Devm_LpuBoards_LpuBoard_CmacPadding_Padding {
	p := new(Devm_LpuBoards_LpuBoard_CmacPadding_Padding)
	*p = x
	return p
}

func (x Devm_LpuBoards_LpuBoard_CmacPadding_Padding) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_LpuBoards_LpuBoard_CmacPadding_Padding) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[82].Descriptor()
}

func (Devm_LpuBoards_LpuBoard_CmacPadding_Padding) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[82]
}

func (x Devm_LpuBoards_LpuBoard_CmacPadding_Padding) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_CmacPadding_Padding.Descriptor instead.
func (Devm_LpuBoards_LpuBoard_CmacPadding_Padding) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 7, 0}
}

type Devm_LpuBoards_LpuBoard_Fim_ForwardMode int32

const (
	Devm_LpuBoards_LpuBoard_Fim_ForwardMode_LOOPBACK Devm_LpuBoards_LpuBoard_Fim_ForwardMode = 0
	Devm_LpuBoards_LpuBoard_Fim_ForwardMode_THROUGH  Devm_LpuBoards_LpuBoard_Fim_ForwardMode = 1
)

// Enum value maps for Devm_LpuBoards_LpuBoard_Fim_ForwardMode.
var (
	Devm_LpuBoards_LpuBoard_Fim_ForwardMode_name = map[int32]string{
		0: "ForwardMode_LOOPBACK",
		1: "ForwardMode_THROUGH",
	}
	Devm_LpuBoards_LpuBoard_Fim_ForwardMode_value = map[string]int32{
		"ForwardMode_LOOPBACK": 0,
		"ForwardMode_THROUGH":  1,
	}
)

func (x Devm_LpuBoards_LpuBoard_Fim_ForwardMode) Enum() *Devm_LpuBoards_LpuBoard_Fim_ForwardMode {
	p := new(Devm_LpuBoards_LpuBoard_Fim_ForwardMode)
	*p = x
	return p
}

func (x Devm_LpuBoards_LpuBoard_Fim_ForwardMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_LpuBoards_LpuBoard_Fim_ForwardMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[83].Descriptor()
}

func (Devm_LpuBoards_LpuBoard_Fim_ForwardMode) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[83]
}

func (x Devm_LpuBoards_LpuBoard_Fim_ForwardMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Fim_ForwardMode.Descriptor instead.
func (Devm_LpuBoards_LpuBoard_Fim_ForwardMode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 8, 0}
}

type Devm_LpuBoards_LpuBoard_Fim_VlanMissEnable int32

const (
	Devm_LpuBoards_LpuBoard_Fim_VlanMissEnable_DISABLE Devm_LpuBoards_LpuBoard_Fim_VlanMissEnable = 0
	Devm_LpuBoards_LpuBoard_Fim_VlanMissEnable_ENABLE  Devm_LpuBoards_LpuBoard_Fim_VlanMissEnable = 1
)

// Enum value maps for Devm_LpuBoards_LpuBoard_Fim_VlanMissEnable.
var (
	Devm_LpuBoards_LpuBoard_Fim_VlanMissEnable_name = map[int32]string{
		0: "VlanMissEnable_DISABLE",
		1: "VlanMissEnable_ENABLE",
	}
	Devm_LpuBoards_LpuBoard_Fim_VlanMissEnable_value = map[string]int32{
		"VlanMissEnable_DISABLE": 0,
		"VlanMissEnable_ENABLE":  1,
	}
)

func (x Devm_LpuBoards_LpuBoard_Fim_VlanMissEnable) Enum() *Devm_LpuBoards_LpuBoard_Fim_VlanMissEnable {
	p := new(Devm_LpuBoards_LpuBoard_Fim_VlanMissEnable)
	*p = x
	return p
}

func (x Devm_LpuBoards_LpuBoard_Fim_VlanMissEnable) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_LpuBoards_LpuBoard_Fim_VlanMissEnable) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[84].Descriptor()
}

func (Devm_LpuBoards_LpuBoard_Fim_VlanMissEnable) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[84]
}

func (x Devm_LpuBoards_LpuBoard_Fim_VlanMissEnable) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Fim_VlanMissEnable.Descriptor instead.
func (Devm_LpuBoards_LpuBoard_Fim_VlanMissEnable) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 8, 1}
}

type Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Lldp int32

const (
	Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Lldp_DISABLE Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Lldp = 0
	Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Lldp_ENABLE  Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Lldp = 1
)

// Enum value maps for Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Lldp.
var (
	Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Lldp_name = map[int32]string{
		0: "Lldp_DISABLE",
		1: "Lldp_ENABLE",
	}
	Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Lldp_value = map[string]int32{
		"Lldp_DISABLE": 0,
		"Lldp_ENABLE":  1,
	}
)

func (x Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Lldp) Enum() *Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Lldp {
	p := new(Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Lldp)
	*p = x
	return p
}

func (x Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Lldp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Lldp) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[85].Descriptor()
}

func (Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Lldp) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[85]
}

func (x Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Lldp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Lldp.Descriptor instead.
func (Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Lldp) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 13, 0}
}

type Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Lacp int32

const (
	Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Lacp_DISABLE Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Lacp = 0
	Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Lacp_ENABLE  Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Lacp = 1
)

// Enum value maps for Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Lacp.
var (
	Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Lacp_name = map[int32]string{
		0: "Lacp_DISABLE",
		1: "Lacp_ENABLE",
	}
	Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Lacp_value = map[string]int32{
		"Lacp_DISABLE": 0,
		"Lacp_ENABLE":  1,
	}
)

func (x Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Lacp) Enum() *Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Lacp {
	p := new(Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Lacp)
	*p = x
	return p
}

func (x Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Lacp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Lacp) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[86].Descriptor()
}

func (Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Lacp) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[86]
}

func (x Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Lacp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Lacp.Descriptor instead.
func (Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Lacp) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 13, 1}
}

type Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Oam int32

const (
	Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Oam_DISABLE Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Oam = 0
	Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Oam_ENABLE  Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Oam = 1
)

// Enum value maps for Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Oam.
var (
	Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Oam_name = map[int32]string{
		0: "Oam_DISABLE",
		1: "Oam_ENABLE",
	}
	Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Oam_value = map[string]int32{
		"Oam_DISABLE": 0,
		"Oam_ENABLE":  1,
	}
)

func (x Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Oam) Enum() *Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Oam {
	p := new(Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Oam)
	*p = x
	return p
}

func (x Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Oam) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Oam) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[87].Descriptor()
}

func (Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Oam) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[87]
}

func (x Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Oam) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Oam.Descriptor instead.
func (Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Oam) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 13, 2}
}

type Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Esmc int32

const (
	Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Esmc_DISABLE Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Esmc = 0
	Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Esmc_ENABLE  Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Esmc = 1
)

// Enum value maps for Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Esmc.
var (
	Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Esmc_name = map[int32]string{
		0: "Esmc_DISABLE",
		1: "Esmc_ENABLE",
	}
	Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Esmc_value = map[string]int32{
		"Esmc_DISABLE": 0,
		"Esmc_ENABLE":  1,
	}
)

func (x Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Esmc) Enum() *Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Esmc {
	p := new(Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Esmc)
	*p = x
	return p
}

func (x Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Esmc) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Esmc) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[88].Descriptor()
}

func (Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Esmc) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[88]
}

func (x Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Esmc) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Esmc.Descriptor instead.
func (Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Esmc) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 13, 3}
}

type Devm_LpuBoards_LpuBoard_Loadbalance_HashArithmetic_Arithmetic int32

const (
	Devm_LpuBoards_LpuBoard_Loadbalance_HashArithmetic_INVALID_ENUM_VALUE_Arithmetic Devm_LpuBoards_LpuBoard_Loadbalance_HashArithmetic_Arithmetic = 0
	Devm_LpuBoards_LpuBoard_Loadbalance_HashArithmetic_Arithmetic_ARITHMETIC1        Devm_LpuBoards_LpuBoard_Loadbalance_HashArithmetic_Arithmetic = 1
	Devm_LpuBoards_LpuBoard_Loadbalance_HashArithmetic_Arithmetic_ARITHMETIC2        Devm_LpuBoards_LpuBoard_Loadbalance_HashArithmetic_Arithmetic = 2
	Devm_LpuBoards_LpuBoard_Loadbalance_HashArithmetic_Arithmetic_ARITHMETIC3        Devm_LpuBoards_LpuBoard_Loadbalance_HashArithmetic_Arithmetic = 3
	Devm_LpuBoards_LpuBoard_Loadbalance_HashArithmetic_Arithmetic_ARITHMETIC4        Devm_LpuBoards_LpuBoard_Loadbalance_HashArithmetic_Arithmetic = 4
	Devm_LpuBoards_LpuBoard_Loadbalance_HashArithmetic_Arithmetic_ARITHMETIC5        Devm_LpuBoards_LpuBoard_Loadbalance_HashArithmetic_Arithmetic = 5
	Devm_LpuBoards_LpuBoard_Loadbalance_HashArithmetic_Arithmetic_RANDOM             Devm_LpuBoards_LpuBoard_Loadbalance_HashArithmetic_Arithmetic = 6
)

// Enum value maps for Devm_LpuBoards_LpuBoard_Loadbalance_HashArithmetic_Arithmetic.
var (
	Devm_LpuBoards_LpuBoard_Loadbalance_HashArithmetic_Arithmetic_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Arithmetic",
		1: "Arithmetic_ARITHMETIC1",
		2: "Arithmetic_ARITHMETIC2",
		3: "Arithmetic_ARITHMETIC3",
		4: "Arithmetic_ARITHMETIC4",
		5: "Arithmetic_ARITHMETIC5",
		6: "Arithmetic_RANDOM",
	}
	Devm_LpuBoards_LpuBoard_Loadbalance_HashArithmetic_Arithmetic_value = map[string]int32{
		"INVALID_ENUM_VALUE_Arithmetic": 0,
		"Arithmetic_ARITHMETIC1":        1,
		"Arithmetic_ARITHMETIC2":        2,
		"Arithmetic_ARITHMETIC3":        3,
		"Arithmetic_ARITHMETIC4":        4,
		"Arithmetic_ARITHMETIC5":        5,
		"Arithmetic_RANDOM":             6,
	}
)

func (x Devm_LpuBoards_LpuBoard_Loadbalance_HashArithmetic_Arithmetic) Enum() *Devm_LpuBoards_LpuBoard_Loadbalance_HashArithmetic_Arithmetic {
	p := new(Devm_LpuBoards_LpuBoard_Loadbalance_HashArithmetic_Arithmetic)
	*p = x
	return p
}

func (x Devm_LpuBoards_LpuBoard_Loadbalance_HashArithmetic_Arithmetic) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_LpuBoards_LpuBoard_Loadbalance_HashArithmetic_Arithmetic) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[89].Descriptor()
}

func (Devm_LpuBoards_LpuBoard_Loadbalance_HashArithmetic_Arithmetic) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[89]
}

func (x Devm_LpuBoards_LpuBoard_Loadbalance_HashArithmetic_Arithmetic) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Loadbalance_HashArithmetic_Arithmetic.Descriptor instead.
func (Devm_LpuBoards_LpuBoard_Loadbalance_HashArithmetic_Arithmetic) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 14, 1, 0}
}

type Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField_TrunkEcmp int32

const (
	Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField_INVALID_ENUM_VALUE_TrunkEcmp Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField_TrunkEcmp = 0
	Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField_TrunkEcmp_IP                 Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField_TrunkEcmp = 5
	Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField_TrunkEcmp_MAC                Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField_TrunkEcmp = 6
	Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField_TrunkEcmp_VLL                Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField_TrunkEcmp = 7
	Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField_TrunkEcmp_TUNNELX_INFO       Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField_TrunkEcmp = 8
	Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField_TrunkEcmp_TUNNELX_INNERX_IP  Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField_TrunkEcmp = 9
	Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField_TrunkEcmp_GTP                Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField_TrunkEcmp = 10
	Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField_TrunkEcmp_FEC                Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField_TrunkEcmp = 11
	Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField_TrunkEcmp_GTPX_INNERX_IP     Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField_TrunkEcmp = 12
)

// Enum value maps for Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField_TrunkEcmp.
var (
	Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField_TrunkEcmp_name = map[int32]string{
		0:  "INVALID_ENUM_VALUE_TrunkEcmp",
		5:  "TrunkEcmp_IP",
		6:  "TrunkEcmp_MAC",
		7:  "TrunkEcmp_VLL",
		8:  "TrunkEcmp_TUNNELX_INFO",
		9:  "TrunkEcmp_TUNNELX_INNERX_IP",
		10: "TrunkEcmp_GTP",
		11: "TrunkEcmp_FEC",
		12: "TrunkEcmp_GTPX_INNERX_IP",
	}
	Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField_TrunkEcmp_value = map[string]int32{
		"INVALID_ENUM_VALUE_TrunkEcmp": 0,
		"TrunkEcmp_IP":                 5,
		"TrunkEcmp_MAC":                6,
		"TrunkEcmp_VLL":                7,
		"TrunkEcmp_TUNNELX_INFO":       8,
		"TrunkEcmp_TUNNELX_INNERX_IP":  9,
		"TrunkEcmp_GTP":                10,
		"TrunkEcmp_FEC":                11,
		"TrunkEcmp_GTPX_INNERX_IP":     12,
	}
)

func (x Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField_TrunkEcmp) Enum() *Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField_TrunkEcmp {
	p := new(Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField_TrunkEcmp)
	*p = x
	return p
}

func (x Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField_TrunkEcmp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField_TrunkEcmp) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[90].Descriptor()
}

func (Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField_TrunkEcmp) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[90]
}

func (x Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField_TrunkEcmp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField_TrunkEcmp.Descriptor instead.
func (Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField_TrunkEcmp) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 14, 2, 0, 0}
}

type Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField_Material int32

const (
	Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField_INVALID_ENUM_VALUE_Material Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField_Material = 0
	Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField_Material_L2                 Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField_Material = 1
	Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField_Material_L3                 Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField_Material = 2
	Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField_Material_L4                 Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField_Material = 3
	Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField_Material_UNDOX_DISABLE      Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField_Material = 4
	Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField_Material_DISABLE            Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField_Material = 5
	Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField_Material_LABELX_IP          Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField_Material = 6
	Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField_Material_LABEL              Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField_Material = 7
)

// Enum value maps for Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField_Material.
var (
	Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField_Material_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Material",
		1: "Material_L2",
		2: "Material_L3",
		3: "Material_L4",
		4: "Material_UNDOX_DISABLE",
		5: "Material_DISABLE",
		6: "Material_LABELX_IP",
		7: "Material_LABEL",
	}
	Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField_Material_value = map[string]int32{
		"INVALID_ENUM_VALUE_Material": 0,
		"Material_L2":                 1,
		"Material_L3":                 2,
		"Material_L4":                 3,
		"Material_UNDOX_DISABLE":      4,
		"Material_DISABLE":            5,
		"Material_LABELX_IP":          6,
		"Material_LABEL":              7,
	}
)

func (x Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField_Material) Enum() *Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField_Material {
	p := new(Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField_Material)
	*p = x
	return p
}

func (x Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField_Material) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField_Material) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[91].Descriptor()
}

func (Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField_Material) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[91]
}

func (x Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField_Material) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField_Material.Descriptor instead.
func (Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField_Material) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 14, 2, 0, 1}
}

type Devm_LpuBoards_LpuBoard_Loadbalance_HashMultipe_MultipeFlag int32

const (
	Devm_LpuBoards_LpuBoard_Loadbalance_HashMultipe_MultipeFlag_ENABLE  Devm_LpuBoards_LpuBoard_Loadbalance_HashMultipe_MultipeFlag = 0
	Devm_LpuBoards_LpuBoard_Loadbalance_HashMultipe_MultipeFlag_DISABLE Devm_LpuBoards_LpuBoard_Loadbalance_HashMultipe_MultipeFlag = 255
)

// Enum value maps for Devm_LpuBoards_LpuBoard_Loadbalance_HashMultipe_MultipeFlag.
var (
	Devm_LpuBoards_LpuBoard_Loadbalance_HashMultipe_MultipeFlag_name = map[int32]string{
		0:   "MultipeFlag_ENABLE",
		255: "MultipeFlag_DISABLE",
	}
	Devm_LpuBoards_LpuBoard_Loadbalance_HashMultipe_MultipeFlag_value = map[string]int32{
		"MultipeFlag_ENABLE":  0,
		"MultipeFlag_DISABLE": 255,
	}
)

func (x Devm_LpuBoards_LpuBoard_Loadbalance_HashMultipe_MultipeFlag) Enum() *Devm_LpuBoards_LpuBoard_Loadbalance_HashMultipe_MultipeFlag {
	p := new(Devm_LpuBoards_LpuBoard_Loadbalance_HashMultipe_MultipeFlag)
	*p = x
	return p
}

func (x Devm_LpuBoards_LpuBoard_Loadbalance_HashMultipe_MultipeFlag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_LpuBoards_LpuBoard_Loadbalance_HashMultipe_MultipeFlag) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[92].Descriptor()
}

func (Devm_LpuBoards_LpuBoard_Loadbalance_HashMultipe_MultipeFlag) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[92]
}

func (x Devm_LpuBoards_LpuBoard_Loadbalance_HashMultipe_MultipeFlag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Loadbalance_HashMultipe_MultipeFlag.Descriptor instead.
func (Devm_LpuBoards_LpuBoard_Loadbalance_HashMultipe_MultipeFlag) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 14, 4, 0}
}

type Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_Type int32

const (
	Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_INVALID_ENUM_VALUE_Type Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_Type = 0
	Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_Type_BOX                Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_Type = 1
	Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_Type_SEED               Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_Type = 2
	Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_Type_ARITHMETIC         Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_Type = 3
	Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_Type_FIELDS             Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_Type = 4
)

// Enum value maps for Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_Type.
var (
	Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_Type_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Type",
		1: "Type_BOX",
		2: "Type_SEED",
		3: "Type_ARITHMETIC",
		4: "Type_FIELDS",
	}
	Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_Type_value = map[string]int32{
		"INVALID_ENUM_VALUE_Type": 0,
		"Type_BOX":                1,
		"Type_SEED":               2,
		"Type_ARITHMETIC":         3,
		"Type_FIELDS":             4,
	}
)

func (x Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_Type) Enum() *Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_Type {
	p := new(Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_Type)
	*p = x
	return p
}

func (x Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[93].Descriptor()
}

func (Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_Type) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[93]
}

func (x Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_Type.Descriptor instead.
func (Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_Type) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 14, 5, 0, 0}
}

type Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_TrunkEcmp int32

const (
	Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_TrunkEcmp_INVALID Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_TrunkEcmp = 0
	Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_TrunkEcmp_ECMP1   Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_TrunkEcmp = 1
	Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_TrunkEcmp_ECMP2   Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_TrunkEcmp = 2
	Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_TrunkEcmp_TRUNK   Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_TrunkEcmp = 3
	Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_TrunkEcmp_ECMP    Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_TrunkEcmp = 4
	Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_TrunkEcmp_IP      Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_TrunkEcmp = 5
	Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_TrunkEcmp_MAC     Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_TrunkEcmp = 6
	Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_TrunkEcmp_VLL     Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_TrunkEcmp = 7
)

// Enum value maps for Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_TrunkEcmp.
var (
	Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_TrunkEcmp_name = map[int32]string{
		0: "TrunkEcmp_INVALID",
		1: "TrunkEcmp_ECMP1",
		2: "TrunkEcmp_ECMP2",
		3: "TrunkEcmp_TRUNK",
		4: "TrunkEcmp_ECMP",
		5: "TrunkEcmp_IP",
		6: "TrunkEcmp_MAC",
		7: "TrunkEcmp_VLL",
	}
	Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_TrunkEcmp_value = map[string]int32{
		"TrunkEcmp_INVALID": 0,
		"TrunkEcmp_ECMP1":   1,
		"TrunkEcmp_ECMP2":   2,
		"TrunkEcmp_TRUNK":   3,
		"TrunkEcmp_ECMP":    4,
		"TrunkEcmp_IP":      5,
		"TrunkEcmp_MAC":     6,
		"TrunkEcmp_VLL":     7,
	}
)

func (x Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_TrunkEcmp) Enum() *Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_TrunkEcmp {
	p := new(Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_TrunkEcmp)
	*p = x
	return p
}

func (x Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_TrunkEcmp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_TrunkEcmp) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[94].Descriptor()
}

func (Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_TrunkEcmp) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[94]
}

func (x Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_TrunkEcmp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_TrunkEcmp.Descriptor instead.
func (Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_TrunkEcmp) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 14, 5, 0, 1}
}

type Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_Arithmetic int32

const (
	Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_INVALID_ENUM_VALUE_Arithmetic Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_Arithmetic = 0
	Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_Arithmetic_ARITHMETIC1        Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_Arithmetic = 1
	Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_Arithmetic_ARITHMETIC2        Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_Arithmetic = 2
	Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_Arithmetic_ARITHMETIC3        Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_Arithmetic = 3
)

// Enum value maps for Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_Arithmetic.
var (
	Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_Arithmetic_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Arithmetic",
		1: "Arithmetic_ARITHMETIC1",
		2: "Arithmetic_ARITHMETIC2",
		3: "Arithmetic_ARITHMETIC3",
	}
	Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_Arithmetic_value = map[string]int32{
		"INVALID_ENUM_VALUE_Arithmetic": 0,
		"Arithmetic_ARITHMETIC1":        1,
		"Arithmetic_ARITHMETIC2":        2,
		"Arithmetic_ARITHMETIC3":        3,
	}
)

func (x Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_Arithmetic) Enum() *Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_Arithmetic {
	p := new(Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_Arithmetic)
	*p = x
	return p
}

func (x Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_Arithmetic) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_Arithmetic) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[95].Descriptor()
}

func (Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_Arithmetic) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[95]
}

func (x Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_Arithmetic) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_Arithmetic.Descriptor instead.
func (Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_Arithmetic) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 14, 5, 0, 2}
}

type Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_Material int32

const (
	Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_Material_INVALID Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_Material = 0
	Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_Material_L2      Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_Material = 1
	Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_Material_L3      Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_Material = 2
	Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_Material_L4      Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_Material = 3
)

// Enum value maps for Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_Material.
var (
	Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_Material_name = map[int32]string{
		0: "Material_INVALID",
		1: "Material_L2",
		2: "Material_L3",
		3: "Material_L4",
	}
	Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_Material_value = map[string]int32{
		"Material_INVALID": 0,
		"Material_L2":      1,
		"Material_L3":      2,
		"Material_L4":      3,
	}
)

func (x Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_Material) Enum() *Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_Material {
	p := new(Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_Material)
	*p = x
	return p
}

func (x Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_Material) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_Material) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[96].Descriptor()
}

func (Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_Material) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[96]
}

func (x Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_Material) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_Material.Descriptor instead.
func (Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_Material) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 14, 5, 0, 3}
}

type Devm_LpuBoards_LpuBoard_MplsForward_MplsHashMode_Hashcfg int32

const (
	Devm_LpuBoards_LpuBoard_MplsForward_MplsHashMode_INVALID_ENUM_VALUE_Hashcfg Devm_LpuBoards_LpuBoard_MplsForward_MplsHashMode_Hashcfg = 0
	Devm_LpuBoards_LpuBoard_MplsForward_MplsHashMode_Hashcfg_PAYLOADX_HEADER    Devm_LpuBoards_LpuBoard_MplsForward_MplsHashMode_Hashcfg = 64
	Devm_LpuBoards_LpuBoard_MplsForward_MplsHashMode_Hashcfg_IP                 Devm_LpuBoards_LpuBoard_MplsForward_MplsHashMode_Hashcfg = 160
	Devm_LpuBoards_LpuBoard_MplsForward_MplsHashMode_Hashcfg_LABEL              Devm_LpuBoards_LpuBoard_MplsForward_MplsHashMode_Hashcfg = 192
	Devm_LpuBoards_LpuBoard_MplsForward_MplsHashMode_Hashcfg_IPX_TOS            Devm_LpuBoards_LpuBoard_MplsForward_MplsHashMode_Hashcfg = 193
	Devm_LpuBoards_LpuBoard_MplsForward_MplsHashMode_Hashcfg_MAC                Devm_LpuBoards_LpuBoard_MplsForward_MplsHashMode_Hashcfg = 196
)

// Enum value maps for Devm_LpuBoards_LpuBoard_MplsForward_MplsHashMode_Hashcfg.
var (
	Devm_LpuBoards_LpuBoard_MplsForward_MplsHashMode_Hashcfg_name = map[int32]string{
		0:   "INVALID_ENUM_VALUE_Hashcfg",
		64:  "Hashcfg_PAYLOADX_HEADER",
		160: "Hashcfg_IP",
		192: "Hashcfg_LABEL",
		193: "Hashcfg_IPX_TOS",
		196: "Hashcfg_MAC",
	}
	Devm_LpuBoards_LpuBoard_MplsForward_MplsHashMode_Hashcfg_value = map[string]int32{
		"INVALID_ENUM_VALUE_Hashcfg": 0,
		"Hashcfg_PAYLOADX_HEADER":    64,
		"Hashcfg_IP":                 160,
		"Hashcfg_LABEL":              192,
		"Hashcfg_IPX_TOS":            193,
		"Hashcfg_MAC":                196,
	}
)

func (x Devm_LpuBoards_LpuBoard_MplsForward_MplsHashMode_Hashcfg) Enum() *Devm_LpuBoards_LpuBoard_MplsForward_MplsHashMode_Hashcfg {
	p := new(Devm_LpuBoards_LpuBoard_MplsForward_MplsHashMode_Hashcfg)
	*p = x
	return p
}

func (x Devm_LpuBoards_LpuBoard_MplsForward_MplsHashMode_Hashcfg) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_LpuBoards_LpuBoard_MplsForward_MplsHashMode_Hashcfg) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[97].Descriptor()
}

func (Devm_LpuBoards_LpuBoard_MplsForward_MplsHashMode_Hashcfg) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[97]
}

func (x Devm_LpuBoards_LpuBoard_MplsForward_MplsHashMode_Hashcfg) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_MplsForward_MplsHashMode_Hashcfg.Descriptor instead.
func (Devm_LpuBoards_LpuBoard_MplsForward_MplsHashMode_Hashcfg) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 17, 0, 0}
}

type Devm_LpuBoards_LpuBoard_MplsForward_Mplsfrags_MplsfragEnable int32

const (
	Devm_LpuBoards_LpuBoard_MplsForward_Mplsfrags_MplsfragEnable_DISABLE Devm_LpuBoards_LpuBoard_MplsForward_Mplsfrags_MplsfragEnable = 0
	Devm_LpuBoards_LpuBoard_MplsForward_Mplsfrags_MplsfragEnable_ENABLE  Devm_LpuBoards_LpuBoard_MplsForward_Mplsfrags_MplsfragEnable = 1
)

// Enum value maps for Devm_LpuBoards_LpuBoard_MplsForward_Mplsfrags_MplsfragEnable.
var (
	Devm_LpuBoards_LpuBoard_MplsForward_Mplsfrags_MplsfragEnable_name = map[int32]string{
		0: "MplsfragEnable_DISABLE",
		1: "MplsfragEnable_ENABLE",
	}
	Devm_LpuBoards_LpuBoard_MplsForward_Mplsfrags_MplsfragEnable_value = map[string]int32{
		"MplsfragEnable_DISABLE": 0,
		"MplsfragEnable_ENABLE":  1,
	}
)

func (x Devm_LpuBoards_LpuBoard_MplsForward_Mplsfrags_MplsfragEnable) Enum() *Devm_LpuBoards_LpuBoard_MplsForward_Mplsfrags_MplsfragEnable {
	p := new(Devm_LpuBoards_LpuBoard_MplsForward_Mplsfrags_MplsfragEnable)
	*p = x
	return p
}

func (x Devm_LpuBoards_LpuBoard_MplsForward_Mplsfrags_MplsfragEnable) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_LpuBoards_LpuBoard_MplsForward_Mplsfrags_MplsfragEnable) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[98].Descriptor()
}

func (Devm_LpuBoards_LpuBoard_MplsForward_Mplsfrags_MplsfragEnable) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[98]
}

func (x Devm_LpuBoards_LpuBoard_MplsForward_Mplsfrags_MplsfragEnable) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_MplsForward_Mplsfrags_MplsfragEnable.Descriptor instead.
func (Devm_LpuBoards_LpuBoard_MplsForward_Mplsfrags_MplsfragEnable) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 17, 1, 0}
}

type Devm_LpuBoards_LpuBoard_MplsForward_MplsLoadCtrwords_MplsloadCtrwordDisable int32

const (
	Devm_LpuBoards_LpuBoard_MplsForward_MplsLoadCtrwords_MplsloadCtrwordDisable_DISABLE Devm_LpuBoards_LpuBoard_MplsForward_MplsLoadCtrwords_MplsloadCtrwordDisable = 0
	Devm_LpuBoards_LpuBoard_MplsForward_MplsLoadCtrwords_MplsloadCtrwordDisable_ENABLE  Devm_LpuBoards_LpuBoard_MplsForward_MplsLoadCtrwords_MplsloadCtrwordDisable = 1
)

// Enum value maps for Devm_LpuBoards_LpuBoard_MplsForward_MplsLoadCtrwords_MplsloadCtrwordDisable.
var (
	Devm_LpuBoards_LpuBoard_MplsForward_MplsLoadCtrwords_MplsloadCtrwordDisable_name = map[int32]string{
		0: "MplsloadCtrwordDisable_DISABLE",
		1: "MplsloadCtrwordDisable_ENABLE",
	}
	Devm_LpuBoards_LpuBoard_MplsForward_MplsLoadCtrwords_MplsloadCtrwordDisable_value = map[string]int32{
		"MplsloadCtrwordDisable_DISABLE": 0,
		"MplsloadCtrwordDisable_ENABLE":  1,
	}
)

func (x Devm_LpuBoards_LpuBoard_MplsForward_MplsLoadCtrwords_MplsloadCtrwordDisable) Enum() *Devm_LpuBoards_LpuBoard_MplsForward_MplsLoadCtrwords_MplsloadCtrwordDisable {
	p := new(Devm_LpuBoards_LpuBoard_MplsForward_MplsLoadCtrwords_MplsloadCtrwordDisable)
	*p = x
	return p
}

func (x Devm_LpuBoards_LpuBoard_MplsForward_MplsLoadCtrwords_MplsloadCtrwordDisable) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_LpuBoards_LpuBoard_MplsForward_MplsLoadCtrwords_MplsloadCtrwordDisable) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[99].Descriptor()
}

func (Devm_LpuBoards_LpuBoard_MplsForward_MplsLoadCtrwords_MplsloadCtrwordDisable) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[99]
}

func (x Devm_LpuBoards_LpuBoard_MplsForward_MplsLoadCtrwords_MplsloadCtrwordDisable) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_MplsForward_MplsLoadCtrwords_MplsloadCtrwordDisable.Descriptor instead.
func (Devm_LpuBoards_LpuBoard_MplsForward_MplsLoadCtrwords_MplsloadCtrwordDisable) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 17, 2, 0}
}

type Devm_LpuBoards_LpuBoard_Netstream_SamplerModes_SamplerMode_FlowType int32

const (
	Devm_LpuBoards_LpuBoard_Netstream_SamplerModes_SamplerMode_FlowType_IPX_FLOW                 Devm_LpuBoards_LpuBoard_Netstream_SamplerModes_SamplerMode_FlowType = 0
	Devm_LpuBoards_LpuBoard_Netstream_SamplerModes_SamplerMode_FlowType_IPV6X_FLOW               Devm_LpuBoards_LpuBoard_Netstream_SamplerModes_SamplerMode_FlowType = 1
	Devm_LpuBoards_LpuBoard_Netstream_SamplerModes_SamplerMode_FlowType_VXLANX_INNERX_IPX_FLOW   Devm_LpuBoards_LpuBoard_Netstream_SamplerModes_SamplerMode_FlowType = 2
	Devm_LpuBoards_LpuBoard_Netstream_SamplerModes_SamplerMode_FlowType_VXLANX_INNERX_IPV6X_FLOW Devm_LpuBoards_LpuBoard_Netstream_SamplerModes_SamplerMode_FlowType = 3
	Devm_LpuBoards_LpuBoard_Netstream_SamplerModes_SamplerMode_FlowType_ETHERNETX_FLOW           Devm_LpuBoards_LpuBoard_Netstream_SamplerModes_SamplerMode_FlowType = 4
)

// Enum value maps for Devm_LpuBoards_LpuBoard_Netstream_SamplerModes_SamplerMode_FlowType.
var (
	Devm_LpuBoards_LpuBoard_Netstream_SamplerModes_SamplerMode_FlowType_name = map[int32]string{
		0: "FlowType_IPX_FLOW",
		1: "FlowType_IPV6X_FLOW",
		2: "FlowType_VXLANX_INNERX_IPX_FLOW",
		3: "FlowType_VXLANX_INNERX_IPV6X_FLOW",
		4: "FlowType_ETHERNETX_FLOW",
	}
	Devm_LpuBoards_LpuBoard_Netstream_SamplerModes_SamplerMode_FlowType_value = map[string]int32{
		"FlowType_IPX_FLOW":                 0,
		"FlowType_IPV6X_FLOW":               1,
		"FlowType_VXLANX_INNERX_IPX_FLOW":   2,
		"FlowType_VXLANX_INNERX_IPV6X_FLOW": 3,
		"FlowType_ETHERNETX_FLOW":           4,
	}
)

func (x Devm_LpuBoards_LpuBoard_Netstream_SamplerModes_SamplerMode_FlowType) Enum() *Devm_LpuBoards_LpuBoard_Netstream_SamplerModes_SamplerMode_FlowType {
	p := new(Devm_LpuBoards_LpuBoard_Netstream_SamplerModes_SamplerMode_FlowType)
	*p = x
	return p
}

func (x Devm_LpuBoards_LpuBoard_Netstream_SamplerModes_SamplerMode_FlowType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_LpuBoards_LpuBoard_Netstream_SamplerModes_SamplerMode_FlowType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[100].Descriptor()
}

func (Devm_LpuBoards_LpuBoard_Netstream_SamplerModes_SamplerMode_FlowType) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[100]
}

func (x Devm_LpuBoards_LpuBoard_Netstream_SamplerModes_SamplerMode_FlowType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Netstream_SamplerModes_SamplerMode_FlowType.Descriptor instead.
func (Devm_LpuBoards_LpuBoard_Netstream_SamplerModes_SamplerMode_FlowType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 18, 0, 0, 0}
}

type Devm_LpuBoards_LpuBoard_Netstream_SamplerModes_SamplerMode_SamplerMode7 int32

const (
	Devm_LpuBoards_LpuBoard_Netstream_SamplerModes_SamplerMode_SamplerMode7_SELF Devm_LpuBoards_LpuBoard_Netstream_SamplerModes_SamplerMode_SamplerMode7 = 0
	Devm_LpuBoards_LpuBoard_Netstream_SamplerModes_SamplerMode_SamplerMode7_MAIN Devm_LpuBoards_LpuBoard_Netstream_SamplerModes_SamplerMode_SamplerMode7 = 1
	Devm_LpuBoards_LpuBoard_Netstream_SamplerModes_SamplerMode_SamplerMode7_BAK  Devm_LpuBoards_LpuBoard_Netstream_SamplerModes_SamplerMode_SamplerMode7 = 2
)

// Enum value maps for Devm_LpuBoards_LpuBoard_Netstream_SamplerModes_SamplerMode_SamplerMode7.
var (
	Devm_LpuBoards_LpuBoard_Netstream_SamplerModes_SamplerMode_SamplerMode7_name = map[int32]string{
		0: "SamplerMode7_SELF",
		1: "SamplerMode7_MAIN",
		2: "SamplerMode7_BAK",
	}
	Devm_LpuBoards_LpuBoard_Netstream_SamplerModes_SamplerMode_SamplerMode7_value = map[string]int32{
		"SamplerMode7_SELF": 0,
		"SamplerMode7_MAIN": 1,
		"SamplerMode7_BAK":  2,
	}
)

func (x Devm_LpuBoards_LpuBoard_Netstream_SamplerModes_SamplerMode_SamplerMode7) Enum() *Devm_LpuBoards_LpuBoard_Netstream_SamplerModes_SamplerMode_SamplerMode7 {
	p := new(Devm_LpuBoards_LpuBoard_Netstream_SamplerModes_SamplerMode_SamplerMode7)
	*p = x
	return p
}

func (x Devm_LpuBoards_LpuBoard_Netstream_SamplerModes_SamplerMode_SamplerMode7) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_LpuBoards_LpuBoard_Netstream_SamplerModes_SamplerMode_SamplerMode7) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[101].Descriptor()
}

func (Devm_LpuBoards_LpuBoard_Netstream_SamplerModes_SamplerMode_SamplerMode7) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[101]
}

func (x Devm_LpuBoards_LpuBoard_Netstream_SamplerModes_SamplerMode_SamplerMode7) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Netstream_SamplerModes_SamplerMode_SamplerMode7.Descriptor instead.
func (Devm_LpuBoards_LpuBoard_Netstream_SamplerModes_SamplerMode_SamplerMode7) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 18, 0, 0, 1}
}

type Devm_LpuBoards_LpuBoard_Netstream_SequenceMode_Mode int32

const (
	Devm_LpuBoards_LpuBoard_Netstream_SequenceMode_INVALID_ENUM_VALUE_Mode Devm_LpuBoards_LpuBoard_Netstream_SequenceMode_Mode = 0
	Devm_LpuBoards_LpuBoard_Netstream_SequenceMode_Mode_FLOW               Devm_LpuBoards_LpuBoard_Netstream_SequenceMode_Mode = 1
)

// Enum value maps for Devm_LpuBoards_LpuBoard_Netstream_SequenceMode_Mode.
var (
	Devm_LpuBoards_LpuBoard_Netstream_SequenceMode_Mode_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Mode",
		1: "Mode_FLOW",
	}
	Devm_LpuBoards_LpuBoard_Netstream_SequenceMode_Mode_value = map[string]int32{
		"INVALID_ENUM_VALUE_Mode": 0,
		"Mode_FLOW":               1,
	}
)

func (x Devm_LpuBoards_LpuBoard_Netstream_SequenceMode_Mode) Enum() *Devm_LpuBoards_LpuBoard_Netstream_SequenceMode_Mode {
	p := new(Devm_LpuBoards_LpuBoard_Netstream_SequenceMode_Mode)
	*p = x
	return p
}

func (x Devm_LpuBoards_LpuBoard_Netstream_SequenceMode_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_LpuBoards_LpuBoard_Netstream_SequenceMode_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[102].Descriptor()
}

func (Devm_LpuBoards_LpuBoard_Netstream_SequenceMode_Mode) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[102]
}

func (x Devm_LpuBoards_LpuBoard_Netstream_SequenceMode_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Netstream_SequenceMode_Mode.Descriptor instead.
func (Devm_LpuBoards_LpuBoard_Netstream_SequenceMode_Mode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 18, 1, 0}
}

type Devm_LpuBoards_LpuBoard_Netstream_ExportHosts_ExportHost_FlowType int32

const (
	Devm_LpuBoards_LpuBoard_Netstream_ExportHosts_ExportHost_FlowType_IPX_FLOW                 Devm_LpuBoards_LpuBoard_Netstream_ExportHosts_ExportHost_FlowType = 0
	Devm_LpuBoards_LpuBoard_Netstream_ExportHosts_ExportHost_FlowType_IPV6X_FLOW               Devm_LpuBoards_LpuBoard_Netstream_ExportHosts_ExportHost_FlowType = 1
	Devm_LpuBoards_LpuBoard_Netstream_ExportHosts_ExportHost_FlowType_VXLANX_INNERX_IPX_FLOW   Devm_LpuBoards_LpuBoard_Netstream_ExportHosts_ExportHost_FlowType = 2
	Devm_LpuBoards_LpuBoard_Netstream_ExportHosts_ExportHost_FlowType_VXLANX_INNERX_IPV6X_FLOW Devm_LpuBoards_LpuBoard_Netstream_ExportHosts_ExportHost_FlowType = 3
	Devm_LpuBoards_LpuBoard_Netstream_ExportHosts_ExportHost_FlowType_ETHERNETX_FLOW           Devm_LpuBoards_LpuBoard_Netstream_ExportHosts_ExportHost_FlowType = 4
)

// Enum value maps for Devm_LpuBoards_LpuBoard_Netstream_ExportHosts_ExportHost_FlowType.
var (
	Devm_LpuBoards_LpuBoard_Netstream_ExportHosts_ExportHost_FlowType_name = map[int32]string{
		0: "FlowType_IPX_FLOW",
		1: "FlowType_IPV6X_FLOW",
		2: "FlowType_VXLANX_INNERX_IPX_FLOW",
		3: "FlowType_VXLANX_INNERX_IPV6X_FLOW",
		4: "FlowType_ETHERNETX_FLOW",
	}
	Devm_LpuBoards_LpuBoard_Netstream_ExportHosts_ExportHost_FlowType_value = map[string]int32{
		"FlowType_IPX_FLOW":                 0,
		"FlowType_IPV6X_FLOW":               1,
		"FlowType_VXLANX_INNERX_IPX_FLOW":   2,
		"FlowType_VXLANX_INNERX_IPV6X_FLOW": 3,
		"FlowType_ETHERNETX_FLOW":           4,
	}
)

func (x Devm_LpuBoards_LpuBoard_Netstream_ExportHosts_ExportHost_FlowType) Enum() *Devm_LpuBoards_LpuBoard_Netstream_ExportHosts_ExportHost_FlowType {
	p := new(Devm_LpuBoards_LpuBoard_Netstream_ExportHosts_ExportHost_FlowType)
	*p = x
	return p
}

func (x Devm_LpuBoards_LpuBoard_Netstream_ExportHosts_ExportHost_FlowType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_LpuBoards_LpuBoard_Netstream_ExportHosts_ExportHost_FlowType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[103].Descriptor()
}

func (Devm_LpuBoards_LpuBoard_Netstream_ExportHosts_ExportHost_FlowType) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[103]
}

func (x Devm_LpuBoards_LpuBoard_Netstream_ExportHosts_ExportHost_FlowType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Netstream_ExportHosts_ExportHost_FlowType.Descriptor instead.
func (Devm_LpuBoards_LpuBoard_Netstream_ExportHosts_ExportHost_FlowType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 18, 2, 0, 0}
}

type Devm_LpuBoards_LpuBoard_Netstream_ExportHosts_ExportHost_AddressType int32

const (
	Devm_LpuBoards_LpuBoard_Netstream_ExportHosts_ExportHost_AddressType_IPV4 Devm_LpuBoards_LpuBoard_Netstream_ExportHosts_ExportHost_AddressType = 0
	Devm_LpuBoards_LpuBoard_Netstream_ExportHosts_ExportHost_AddressType_IPV6 Devm_LpuBoards_LpuBoard_Netstream_ExportHosts_ExportHost_AddressType = 1
)

// Enum value maps for Devm_LpuBoards_LpuBoard_Netstream_ExportHosts_ExportHost_AddressType.
var (
	Devm_LpuBoards_LpuBoard_Netstream_ExportHosts_ExportHost_AddressType_name = map[int32]string{
		0: "AddressType_IPV4",
		1: "AddressType_IPV6",
	}
	Devm_LpuBoards_LpuBoard_Netstream_ExportHosts_ExportHost_AddressType_value = map[string]int32{
		"AddressType_IPV4": 0,
		"AddressType_IPV6": 1,
	}
)

func (x Devm_LpuBoards_LpuBoard_Netstream_ExportHosts_ExportHost_AddressType) Enum() *Devm_LpuBoards_LpuBoard_Netstream_ExportHosts_ExportHost_AddressType {
	p := new(Devm_LpuBoards_LpuBoard_Netstream_ExportHosts_ExportHost_AddressType)
	*p = x
	return p
}

func (x Devm_LpuBoards_LpuBoard_Netstream_ExportHosts_ExportHost_AddressType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_LpuBoards_LpuBoard_Netstream_ExportHosts_ExportHost_AddressType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[104].Descriptor()
}

func (Devm_LpuBoards_LpuBoard_Netstream_ExportHosts_ExportHost_AddressType) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[104]
}

func (x Devm_LpuBoards_LpuBoard_Netstream_ExportHosts_ExportHost_AddressType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Netstream_ExportHosts_ExportHost_AddressType.Descriptor instead.
func (Devm_LpuBoards_LpuBoard_Netstream_ExportHosts_ExportHost_AddressType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 18, 2, 0, 1}
}

type Devm_LpuBoards_LpuBoard_Pbr_RoutingFilters_RoutingFilter_Type int32

const (
	Devm_LpuBoards_LpuBoard_Pbr_RoutingFilters_RoutingFilter_Type_IPV4     Devm_LpuBoards_LpuBoard_Pbr_RoutingFilters_RoutingFilter_Type = 0
	Devm_LpuBoards_LpuBoard_Pbr_RoutingFilters_RoutingFilter_Type_IPV6     Devm_LpuBoards_LpuBoard_Pbr_RoutingFilters_RoutingFilter_Type = 1
	Devm_LpuBoards_LpuBoard_Pbr_RoutingFilters_RoutingFilter_Type_IPV4IPV6 Devm_LpuBoards_LpuBoard_Pbr_RoutingFilters_RoutingFilter_Type = 2
)

// Enum value maps for Devm_LpuBoards_LpuBoard_Pbr_RoutingFilters_RoutingFilter_Type.
var (
	Devm_LpuBoards_LpuBoard_Pbr_RoutingFilters_RoutingFilter_Type_name = map[int32]string{
		0: "Type_IPV4",
		1: "Type_IPV6",
		2: "Type_IPV4IPV6",
	}
	Devm_LpuBoards_LpuBoard_Pbr_RoutingFilters_RoutingFilter_Type_value = map[string]int32{
		"Type_IPV4":     0,
		"Type_IPV6":     1,
		"Type_IPV4IPV6": 2,
	}
)

func (x Devm_LpuBoards_LpuBoard_Pbr_RoutingFilters_RoutingFilter_Type) Enum() *Devm_LpuBoards_LpuBoard_Pbr_RoutingFilters_RoutingFilter_Type {
	p := new(Devm_LpuBoards_LpuBoard_Pbr_RoutingFilters_RoutingFilter_Type)
	*p = x
	return p
}

func (x Devm_LpuBoards_LpuBoard_Pbr_RoutingFilters_RoutingFilter_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_LpuBoards_LpuBoard_Pbr_RoutingFilters_RoutingFilter_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[105].Descriptor()
}

func (Devm_LpuBoards_LpuBoard_Pbr_RoutingFilters_RoutingFilter_Type) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[105]
}

func (x Devm_LpuBoards_LpuBoard_Pbr_RoutingFilters_RoutingFilter_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Pbr_RoutingFilters_RoutingFilter_Type.Descriptor instead.
func (Devm_LpuBoards_LpuBoard_Pbr_RoutingFilters_RoutingFilter_Type) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 19, 0, 0, 0}
}

type Devm_LpuBoards_LpuBoard_Pbr_RoutingFilters_RoutingFilter_RoutingType int32

const (
	Devm_LpuBoards_LpuBoard_Pbr_RoutingFilters_RoutingFilter_INVALID_ENUM_VALUE_RoutingType Devm_LpuBoards_LpuBoard_Pbr_RoutingFilters_RoutingFilter_RoutingType = 0
	Devm_LpuBoards_LpuBoard_Pbr_RoutingFilters_RoutingFilter_RoutingType_DEFAULT            Devm_LpuBoards_LpuBoard_Pbr_RoutingFilters_RoutingFilter_RoutingType = 1
	Devm_LpuBoards_LpuBoard_Pbr_RoutingFilters_RoutingFilter_RoutingType_BLACKHOLE          Devm_LpuBoards_LpuBoard_Pbr_RoutingFilters_RoutingFilter_RoutingType = 2
	Devm_LpuBoards_LpuBoard_Pbr_RoutingFilters_RoutingFilter_RoutingType_DEFAULTX_BLACKHOLE Devm_LpuBoards_LpuBoard_Pbr_RoutingFilters_RoutingFilter_RoutingType = 3
)

// Enum value maps for Devm_LpuBoards_LpuBoard_Pbr_RoutingFilters_RoutingFilter_RoutingType.
var (
	Devm_LpuBoards_LpuBoard_Pbr_RoutingFilters_RoutingFilter_RoutingType_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_RoutingType",
		1: "RoutingType_DEFAULT",
		2: "RoutingType_BLACKHOLE",
		3: "RoutingType_DEFAULTX_BLACKHOLE",
	}
	Devm_LpuBoards_LpuBoard_Pbr_RoutingFilters_RoutingFilter_RoutingType_value = map[string]int32{
		"INVALID_ENUM_VALUE_RoutingType": 0,
		"RoutingType_DEFAULT":            1,
		"RoutingType_BLACKHOLE":          2,
		"RoutingType_DEFAULTX_BLACKHOLE": 3,
	}
)

func (x Devm_LpuBoards_LpuBoard_Pbr_RoutingFilters_RoutingFilter_RoutingType) Enum() *Devm_LpuBoards_LpuBoard_Pbr_RoutingFilters_RoutingFilter_RoutingType {
	p := new(Devm_LpuBoards_LpuBoard_Pbr_RoutingFilters_RoutingFilter_RoutingType)
	*p = x
	return p
}

func (x Devm_LpuBoards_LpuBoard_Pbr_RoutingFilters_RoutingFilter_RoutingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_LpuBoards_LpuBoard_Pbr_RoutingFilters_RoutingFilter_RoutingType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[106].Descriptor()
}

func (Devm_LpuBoards_LpuBoard_Pbr_RoutingFilters_RoutingFilter_RoutingType) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[106]
}

func (x Devm_LpuBoards_LpuBoard_Pbr_RoutingFilters_RoutingFilter_RoutingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Pbr_RoutingFilters_RoutingFilter_RoutingType.Descriptor instead.
func (Devm_LpuBoards_LpuBoard_Pbr_RoutingFilters_RoutingFilter_RoutingType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 19, 0, 0, 1}
}

type Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch_Type int32

const (
	Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch_Type_IPX_LAYERX_PUSH           Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch_Type = 0
	Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch_Type_IPV6X_ADDRESSX_RULEX_MASK Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch_Type = 1
	Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch_Type_PROTOCOLX_MCX_RESERVED    Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch_Type = 2
	Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch_Type_MPLSX_LAYERX_PUSH         Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch_Type = 3
	Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch_Type_MPLSX_LAYERX_L2X_INBOUND  Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch_Type = 4
	Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch_Type_RULEX_PACKET              Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch_Type = 5
	Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch_Type_MPLSX_LAYERX_POP          Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch_Type = 6
	Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch_Type_IPX_LAYERX_POP            Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch_Type = 7
)

// Enum value maps for Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch_Type.
var (
	Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch_Type_name = map[int32]string{
		0: "Type_IPX_LAYERX_PUSH",
		1: "Type_IPV6X_ADDRESSX_RULEX_MASK",
		2: "Type_PROTOCOLX_MCX_RESERVED",
		3: "Type_MPLSX_LAYERX_PUSH",
		4: "Type_MPLSX_LAYERX_L2X_INBOUND",
		5: "Type_RULEX_PACKET",
		6: "Type_MPLSX_LAYERX_POP",
		7: "Type_IPX_LAYERX_POP",
	}
	Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch_Type_value = map[string]int32{
		"Type_IPX_LAYERX_PUSH":           0,
		"Type_IPV6X_ADDRESSX_RULEX_MASK": 1,
		"Type_PROTOCOLX_MCX_RESERVED":    2,
		"Type_MPLSX_LAYERX_PUSH":         3,
		"Type_MPLSX_LAYERX_L2X_INBOUND":  4,
		"Type_RULEX_PACKET":              5,
		"Type_MPLSX_LAYERX_POP":          6,
		"Type_IPX_LAYERX_POP":            7,
	}
)

func (x Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch_Type) Enum() *Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch_Type {
	p := new(Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch_Type)
	*p = x
	return p
}

func (x Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[107].Descriptor()
}

func (Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch_Type) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[107]
}

func (x Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch_Type.Descriptor instead.
func (Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch_Type) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 0, 0, 0}
}

type Devm_LpuBoards_LpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Direction int32

const (
	Devm_LpuBoards_LpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Direction_INBOUND  Devm_LpuBoards_LpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Direction = 0
	Devm_LpuBoards_LpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Direction_OUTBOUND Devm_LpuBoards_LpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Direction = 1
)

// Enum value maps for Devm_LpuBoards_LpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Direction.
var (
	Devm_LpuBoards_LpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Direction_name = map[int32]string{
		0: "Direction_INBOUND",
		1: "Direction_OUTBOUND",
	}
	Devm_LpuBoards_LpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Direction_value = map[string]int32{
		"Direction_INBOUND":  0,
		"Direction_OUTBOUND": 1,
	}
)

func (x Devm_LpuBoards_LpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Direction) Enum() *Devm_LpuBoards_LpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Direction {
	p := new(Devm_LpuBoards_LpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Direction)
	*p = x
	return p
}

func (x Devm_LpuBoards_LpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_LpuBoards_LpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[108].Descriptor()
}

func (Devm_LpuBoards_LpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Direction) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[108]
}

func (x Devm_LpuBoards_LpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Direction.Descriptor instead.
func (Devm_LpuBoards_LpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 1, 0, 0}
}

type Devm_LpuBoards_LpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Mode int32

const (
	Devm_LpuBoards_LpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Mode_HIGH Devm_LpuBoards_LpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Mode = 0
	Devm_LpuBoards_LpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Mode_LOW  Devm_LpuBoards_LpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Mode = 1
)

// Enum value maps for Devm_LpuBoards_LpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Mode.
var (
	Devm_LpuBoards_LpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Mode_name = map[int32]string{
		0: "Mode_HIGH",
		1: "Mode_LOW",
	}
	Devm_LpuBoards_LpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Mode_value = map[string]int32{
		"Mode_HIGH": 0,
		"Mode_LOW":  1,
	}
)

func (x Devm_LpuBoards_LpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Mode) Enum() *Devm_LpuBoards_LpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Mode {
	p := new(Devm_LpuBoards_LpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Mode)
	*p = x
	return p
}

func (x Devm_LpuBoards_LpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_LpuBoards_LpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[109].Descriptor()
}

func (Devm_LpuBoards_LpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Mode) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[109]
}

func (x Devm_LpuBoards_LpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Mode.Descriptor instead.
func (Devm_LpuBoards_LpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Mode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 1, 0, 1}
}

type Devm_LpuBoards_LpuBoard_Qos_PqSchedulePriorityOnCards_PqSchedulePriorityOnCard_Mode int32

const (
	Devm_LpuBoards_LpuBoard_Qos_PqSchedulePriorityOnCards_PqSchedulePriorityOnCard_Mode_HIGH Devm_LpuBoards_LpuBoard_Qos_PqSchedulePriorityOnCards_PqSchedulePriorityOnCard_Mode = 0
	Devm_LpuBoards_LpuBoard_Qos_PqSchedulePriorityOnCards_PqSchedulePriorityOnCard_Mode_LOW  Devm_LpuBoards_LpuBoard_Qos_PqSchedulePriorityOnCards_PqSchedulePriorityOnCard_Mode = 1
)

// Enum value maps for Devm_LpuBoards_LpuBoard_Qos_PqSchedulePriorityOnCards_PqSchedulePriorityOnCard_Mode.
var (
	Devm_LpuBoards_LpuBoard_Qos_PqSchedulePriorityOnCards_PqSchedulePriorityOnCard_Mode_name = map[int32]string{
		0: "Mode_HIGH",
		1: "Mode_LOW",
	}
	Devm_LpuBoards_LpuBoard_Qos_PqSchedulePriorityOnCards_PqSchedulePriorityOnCard_Mode_value = map[string]int32{
		"Mode_HIGH": 0,
		"Mode_LOW":  1,
	}
)

func (x Devm_LpuBoards_LpuBoard_Qos_PqSchedulePriorityOnCards_PqSchedulePriorityOnCard_Mode) Enum() *Devm_LpuBoards_LpuBoard_Qos_PqSchedulePriorityOnCards_PqSchedulePriorityOnCard_Mode {
	p := new(Devm_LpuBoards_LpuBoard_Qos_PqSchedulePriorityOnCards_PqSchedulePriorityOnCard_Mode)
	*p = x
	return p
}

func (x Devm_LpuBoards_LpuBoard_Qos_PqSchedulePriorityOnCards_PqSchedulePriorityOnCard_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_LpuBoards_LpuBoard_Qos_PqSchedulePriorityOnCards_PqSchedulePriorityOnCard_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[110].Descriptor()
}

func (Devm_LpuBoards_LpuBoard_Qos_PqSchedulePriorityOnCards_PqSchedulePriorityOnCard_Mode) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[110]
}

func (x Devm_LpuBoards_LpuBoard_Qos_PqSchedulePriorityOnCards_PqSchedulePriorityOnCard_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_PqSchedulePriorityOnCards_PqSchedulePriorityOnCard_Mode.Descriptor instead.
func (Devm_LpuBoards_LpuBoard_Qos_PqSchedulePriorityOnCards_PqSchedulePriorityOnCard_Mode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 2, 0, 0}
}

type Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ServiceClass int32

const (
	Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ServiceClass_BE  Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ServiceClass = 0
	Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ServiceClass_AF1 Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ServiceClass = 1
	Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ServiceClass_AF2 Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ServiceClass = 2
	Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ServiceClass_AF3 Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ServiceClass = 3
	Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ServiceClass_AF4 Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ServiceClass = 4
	Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ServiceClass_EF  Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ServiceClass = 5
	Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ServiceClass_CS6 Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ServiceClass = 6
	Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ServiceClass_CS7 Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ServiceClass = 7
)

// Enum value maps for Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ServiceClass.
var (
	Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ServiceClass_name = map[int32]string{
		0: "ServiceClass_BE",
		1: "ServiceClass_AF1",
		2: "ServiceClass_AF2",
		3: "ServiceClass_AF3",
		4: "ServiceClass_AF4",
		5: "ServiceClass_EF",
		6: "ServiceClass_CS6",
		7: "ServiceClass_CS7",
	}
	Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ServiceClass_value = map[string]int32{
		"ServiceClass_BE":  0,
		"ServiceClass_AF1": 1,
		"ServiceClass_AF2": 2,
		"ServiceClass_AF3": 3,
		"ServiceClass_AF4": 4,
		"ServiceClass_EF":  5,
		"ServiceClass_CS6": 6,
		"ServiceClass_CS7": 7,
	}
)

func (x Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ServiceClass) Enum() *Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ServiceClass {
	p := new(Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ServiceClass)
	*p = x
	return p
}

func (x Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ServiceClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ServiceClass) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[111].Descriptor()
}

func (Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ServiceClass) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[111]
}

func (x Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ServiceClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ServiceClass.Descriptor instead.
func (Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ServiceClass) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 3, 0, 0}
}

type Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_QueueScheduleMode int32

const (
	Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_QueueScheduleMode_PQ  Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_QueueScheduleMode = 0
	Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_QueueScheduleMode_WFQ Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_QueueScheduleMode = 1
	Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_QueueScheduleMode_LPQ Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_QueueScheduleMode = 2
)

// Enum value maps for Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_QueueScheduleMode.
var (
	Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_QueueScheduleMode_name = map[int32]string{
		0: "QueueScheduleMode_PQ",
		1: "QueueScheduleMode_WFQ",
		2: "QueueScheduleMode_LPQ",
	}
	Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_QueueScheduleMode_value = map[string]int32{
		"QueueScheduleMode_PQ":  0,
		"QueueScheduleMode_WFQ": 1,
		"QueueScheduleMode_LPQ": 2,
	}
)

func (x Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_QueueScheduleMode) Enum() *Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_QueueScheduleMode {
	p := new(Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_QueueScheduleMode)
	*p = x
	return p
}

func (x Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_QueueScheduleMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_QueueScheduleMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[112].Descriptor()
}

func (Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_QueueScheduleMode) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[112]
}

func (x Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_QueueScheduleMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_QueueScheduleMode.Descriptor instead.
func (Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_QueueScheduleMode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 3, 0, 1}
}

type Devm_LpuBoards_LpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingTypeMode_ShapingType int32

const (
	Devm_LpuBoards_LpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingTypeMode_ShapingType_X_256K Devm_LpuBoards_LpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingTypeMode_ShapingType = 0
	Devm_LpuBoards_LpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingTypeMode_ShapingType_X_512K Devm_LpuBoards_LpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingTypeMode_ShapingType = 1
)

// Enum value maps for Devm_LpuBoards_LpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingTypeMode_ShapingType.
var (
	Devm_LpuBoards_LpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingTypeMode_ShapingType_name = map[int32]string{
		0: "ShapingType_X_256K",
		1: "ShapingType_X_512K",
	}
	Devm_LpuBoards_LpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingTypeMode_ShapingType_value = map[string]int32{
		"ShapingType_X_256K": 0,
		"ShapingType_X_512K": 1,
	}
)

func (x Devm_LpuBoards_LpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingTypeMode_ShapingType) Enum() *Devm_LpuBoards_LpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingTypeMode_ShapingType {
	p := new(Devm_LpuBoards_LpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingTypeMode_ShapingType)
	*p = x
	return p
}

func (x Devm_LpuBoards_LpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingTypeMode_ShapingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_LpuBoards_LpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingTypeMode_ShapingType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[113].Descriptor()
}

func (Devm_LpuBoards_LpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingTypeMode_ShapingType) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[113]
}

func (x Devm_LpuBoards_LpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingTypeMode_ShapingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingTypeMode_ShapingType.Descriptor instead.
func (Devm_LpuBoards_LpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingTypeMode_ShapingType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 4, 0, 0}
}

type Devm_LpuBoards_LpuBoard_Qos_ExpPhbDisable_ForwardType int32

const (
	Devm_LpuBoards_LpuBoard_Qos_ExpPhbDisable_INVALID_ENUM_VALUE_ForwardType Devm_LpuBoards_LpuBoard_Qos_ExpPhbDisable_ForwardType = 0
	Devm_LpuBoards_LpuBoard_Qos_ExpPhbDisable_ForwardType_VLL                Devm_LpuBoards_LpuBoard_Qos_ExpPhbDisable_ForwardType = 1
)

// Enum value maps for Devm_LpuBoards_LpuBoard_Qos_ExpPhbDisable_ForwardType.
var (
	Devm_LpuBoards_LpuBoard_Qos_ExpPhbDisable_ForwardType_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_ForwardType",
		1: "ForwardType_VLL",
	}
	Devm_LpuBoards_LpuBoard_Qos_ExpPhbDisable_ForwardType_value = map[string]int32{
		"INVALID_ENUM_VALUE_ForwardType": 0,
		"ForwardType_VLL":                1,
	}
)

func (x Devm_LpuBoards_LpuBoard_Qos_ExpPhbDisable_ForwardType) Enum() *Devm_LpuBoards_LpuBoard_Qos_ExpPhbDisable_ForwardType {
	p := new(Devm_LpuBoards_LpuBoard_Qos_ExpPhbDisable_ForwardType)
	*p = x
	return p
}

func (x Devm_LpuBoards_LpuBoard_Qos_ExpPhbDisable_ForwardType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_LpuBoards_LpuBoard_Qos_ExpPhbDisable_ForwardType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[114].Descriptor()
}

func (Devm_LpuBoards_LpuBoard_Qos_ExpPhbDisable_ForwardType) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[114]
}

func (x Devm_LpuBoards_LpuBoard_Qos_ExpPhbDisable_ForwardType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_ExpPhbDisable_ForwardType.Descriptor instead.
func (Devm_LpuBoards_LpuBoard_Qos_ExpPhbDisable_ForwardType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 6, 0}
}

type Devm_LpuBoards_LpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold_ServiceClass int32

const (
	Devm_LpuBoards_LpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold_ServiceClass_BE  Devm_LpuBoards_LpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold_ServiceClass = 0
	Devm_LpuBoards_LpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold_ServiceClass_AF1 Devm_LpuBoards_LpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold_ServiceClass = 1
	Devm_LpuBoards_LpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold_ServiceClass_AF2 Devm_LpuBoards_LpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold_ServiceClass = 2
	Devm_LpuBoards_LpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold_ServiceClass_AF3 Devm_LpuBoards_LpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold_ServiceClass = 3
	Devm_LpuBoards_LpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold_ServiceClass_AF4 Devm_LpuBoards_LpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold_ServiceClass = 4
	Devm_LpuBoards_LpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold_ServiceClass_EF  Devm_LpuBoards_LpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold_ServiceClass = 5
	Devm_LpuBoards_LpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold_ServiceClass_CS6 Devm_LpuBoards_LpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold_ServiceClass = 6
	Devm_LpuBoards_LpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold_ServiceClass_CS7 Devm_LpuBoards_LpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold_ServiceClass = 7
)

// Enum value maps for Devm_LpuBoards_LpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold_ServiceClass.
var (
	Devm_LpuBoards_LpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold_ServiceClass_name = map[int32]string{
		0: "ServiceClass_BE",
		1: "ServiceClass_AF1",
		2: "ServiceClass_AF2",
		3: "ServiceClass_AF3",
		4: "ServiceClass_AF4",
		5: "ServiceClass_EF",
		6: "ServiceClass_CS6",
		7: "ServiceClass_CS7",
	}
	Devm_LpuBoards_LpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold_ServiceClass_value = map[string]int32{
		"ServiceClass_BE":  0,
		"ServiceClass_AF1": 1,
		"ServiceClass_AF2": 2,
		"ServiceClass_AF3": 3,
		"ServiceClass_AF4": 4,
		"ServiceClass_EF":  5,
		"ServiceClass_CS6": 6,
		"ServiceClass_CS7": 7,
	}
)

func (x Devm_LpuBoards_LpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold_ServiceClass) Enum() *Devm_LpuBoards_LpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold_ServiceClass {
	p := new(Devm_LpuBoards_LpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold_ServiceClass)
	*p = x
	return p
}

func (x Devm_LpuBoards_LpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold_ServiceClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_LpuBoards_LpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold_ServiceClass) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[115].Descriptor()
}

func (Devm_LpuBoards_LpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold_ServiceClass) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[115]
}

func (x Devm_LpuBoards_LpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold_ServiceClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold_ServiceClass.Descriptor instead.
func (Devm_LpuBoards_LpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold_ServiceClass) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 7, 0, 0}
}

type Devm_LpuBoards_LpuBoard_Qos_ChannelAlarms_ChannelAlarm_AlarmType int32

const (
	Devm_LpuBoards_LpuBoard_Qos_ChannelAlarms_ChannelAlarm_AlarmType_QUANTITY  Devm_LpuBoards_LpuBoard_Qos_ChannelAlarms_ChannelAlarm_AlarmType = 0
	Devm_LpuBoards_LpuBoard_Qos_ChannelAlarms_ChannelAlarm_AlarmType_BANDWIDTH Devm_LpuBoards_LpuBoard_Qos_ChannelAlarms_ChannelAlarm_AlarmType = 1
)

// Enum value maps for Devm_LpuBoards_LpuBoard_Qos_ChannelAlarms_ChannelAlarm_AlarmType.
var (
	Devm_LpuBoards_LpuBoard_Qos_ChannelAlarms_ChannelAlarm_AlarmType_name = map[int32]string{
		0: "AlarmType_QUANTITY",
		1: "AlarmType_BANDWIDTH",
	}
	Devm_LpuBoards_LpuBoard_Qos_ChannelAlarms_ChannelAlarm_AlarmType_value = map[string]int32{
		"AlarmType_QUANTITY":  0,
		"AlarmType_BANDWIDTH": 1,
	}
)

func (x Devm_LpuBoards_LpuBoard_Qos_ChannelAlarms_ChannelAlarm_AlarmType) Enum() *Devm_LpuBoards_LpuBoard_Qos_ChannelAlarms_ChannelAlarm_AlarmType {
	p := new(Devm_LpuBoards_LpuBoard_Qos_ChannelAlarms_ChannelAlarm_AlarmType)
	*p = x
	return p
}

func (x Devm_LpuBoards_LpuBoard_Qos_ChannelAlarms_ChannelAlarm_AlarmType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_LpuBoards_LpuBoard_Qos_ChannelAlarms_ChannelAlarm_AlarmType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[116].Descriptor()
}

func (Devm_LpuBoards_LpuBoard_Qos_ChannelAlarms_ChannelAlarm_AlarmType) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[116]
}

func (x Devm_LpuBoards_LpuBoard_Qos_ChannelAlarms_ChannelAlarm_AlarmType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_ChannelAlarms_ChannelAlarm_AlarmType.Descriptor instead.
func (Devm_LpuBoards_LpuBoard_Qos_ChannelAlarms_ChannelAlarm_AlarmType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 9, 0, 0}
}

type Devm_LpuBoards_LpuBoard_Qos_ChannelAlarms_ChannelAlarm_Pool int32

const (
	Devm_LpuBoards_LpuBoard_Qos_ChannelAlarms_ChannelAlarm_INVALID_ENUM_VALUE_Pool Devm_LpuBoards_LpuBoard_Qos_ChannelAlarms_ChannelAlarm_Pool = 0
	Devm_LpuBoards_LpuBoard_Qos_ChannelAlarms_ChannelAlarm_Pool_POOLX_0            Devm_LpuBoards_LpuBoard_Qos_ChannelAlarms_ChannelAlarm_Pool = 1
	Devm_LpuBoards_LpuBoard_Qos_ChannelAlarms_ChannelAlarm_Pool_POOLX_1            Devm_LpuBoards_LpuBoard_Qos_ChannelAlarms_ChannelAlarm_Pool = 2
)

// Enum value maps for Devm_LpuBoards_LpuBoard_Qos_ChannelAlarms_ChannelAlarm_Pool.
var (
	Devm_LpuBoards_LpuBoard_Qos_ChannelAlarms_ChannelAlarm_Pool_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Pool",
		1: "Pool_POOLX_0",
		2: "Pool_POOLX_1",
	}
	Devm_LpuBoards_LpuBoard_Qos_ChannelAlarms_ChannelAlarm_Pool_value = map[string]int32{
		"INVALID_ENUM_VALUE_Pool": 0,
		"Pool_POOLX_0":            1,
		"Pool_POOLX_1":            2,
	}
)

func (x Devm_LpuBoards_LpuBoard_Qos_ChannelAlarms_ChannelAlarm_Pool) Enum() *Devm_LpuBoards_LpuBoard_Qos_ChannelAlarms_ChannelAlarm_Pool {
	p := new(Devm_LpuBoards_LpuBoard_Qos_ChannelAlarms_ChannelAlarm_Pool)
	*p = x
	return p
}

func (x Devm_LpuBoards_LpuBoard_Qos_ChannelAlarms_ChannelAlarm_Pool) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_LpuBoards_LpuBoard_Qos_ChannelAlarms_ChannelAlarm_Pool) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[117].Descriptor()
}

func (Devm_LpuBoards_LpuBoard_Qos_ChannelAlarms_ChannelAlarm_Pool) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[117]
}

func (x Devm_LpuBoards_LpuBoard_Qos_ChannelAlarms_ChannelAlarm_Pool) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_ChannelAlarms_ChannelAlarm_Pool.Descriptor instead.
func (Devm_LpuBoards_LpuBoard_Qos_ChannelAlarms_ChannelAlarm_Pool) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 9, 0, 1}
}

type Devm_LpuBoards_LpuBoard_Qos_ChannelProfilePrecision_Type int32

const (
	Devm_LpuBoards_LpuBoard_Qos_ChannelProfilePrecision_INVALID_ENUM_VALUE_Type Devm_LpuBoards_LpuBoard_Qos_ChannelProfilePrecision_Type = 0
	Devm_LpuBoards_LpuBoard_Qos_ChannelProfilePrecision_Type_UP                 Devm_LpuBoards_LpuBoard_Qos_ChannelProfilePrecision_Type = 1
	Devm_LpuBoards_LpuBoard_Qos_ChannelProfilePrecision_Type_DOWN               Devm_LpuBoards_LpuBoard_Qos_ChannelProfilePrecision_Type = 2
)

// Enum value maps for Devm_LpuBoards_LpuBoard_Qos_ChannelProfilePrecision_Type.
var (
	Devm_LpuBoards_LpuBoard_Qos_ChannelProfilePrecision_Type_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Type",
		1: "Type_UP",
		2: "Type_DOWN",
	}
	Devm_LpuBoards_LpuBoard_Qos_ChannelProfilePrecision_Type_value = map[string]int32{
		"INVALID_ENUM_VALUE_Type": 0,
		"Type_UP":                 1,
		"Type_DOWN":               2,
	}
)

func (x Devm_LpuBoards_LpuBoard_Qos_ChannelProfilePrecision_Type) Enum() *Devm_LpuBoards_LpuBoard_Qos_ChannelProfilePrecision_Type {
	p := new(Devm_LpuBoards_LpuBoard_Qos_ChannelProfilePrecision_Type)
	*p = x
	return p
}

func (x Devm_LpuBoards_LpuBoard_Qos_ChannelProfilePrecision_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_LpuBoards_LpuBoard_Qos_ChannelProfilePrecision_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[118].Descriptor()
}

func (Devm_LpuBoards_LpuBoard_Qos_ChannelProfilePrecision_Type) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[118]
}

func (x Devm_LpuBoards_LpuBoard_Qos_ChannelProfilePrecision_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_ChannelProfilePrecision_Type.Descriptor instead.
func (Devm_LpuBoards_LpuBoard_Qos_ChannelProfilePrecision_Type) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 10, 0}
}

type Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate_SpecificServiceClasss_SpecificServiceClass_ServiceClass int32

const (
	Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate_SpecificServiceClasss_SpecificServiceClass_ServiceClass_BE  Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate_SpecificServiceClasss_SpecificServiceClass_ServiceClass = 0
	Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate_SpecificServiceClasss_SpecificServiceClass_ServiceClass_AF1 Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate_SpecificServiceClasss_SpecificServiceClass_ServiceClass = 1
	Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate_SpecificServiceClasss_SpecificServiceClass_ServiceClass_AF2 Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate_SpecificServiceClasss_SpecificServiceClass_ServiceClass = 2
	Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate_SpecificServiceClasss_SpecificServiceClass_ServiceClass_AF3 Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate_SpecificServiceClasss_SpecificServiceClass_ServiceClass = 3
	Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate_SpecificServiceClasss_SpecificServiceClass_ServiceClass_AF4 Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate_SpecificServiceClasss_SpecificServiceClass_ServiceClass = 4
	Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate_SpecificServiceClasss_SpecificServiceClass_ServiceClass_EF  Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate_SpecificServiceClasss_SpecificServiceClass_ServiceClass = 5
	Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate_SpecificServiceClasss_SpecificServiceClass_ServiceClass_CS6 Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate_SpecificServiceClasss_SpecificServiceClass_ServiceClass = 6
	Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate_SpecificServiceClasss_SpecificServiceClass_ServiceClass_CS7 Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate_SpecificServiceClasss_SpecificServiceClass_ServiceClass = 7
)

// Enum value maps for Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate_SpecificServiceClasss_SpecificServiceClass_ServiceClass.
var (
	Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate_SpecificServiceClasss_SpecificServiceClass_ServiceClass_name = map[int32]string{
		0: "ServiceClass_BE",
		1: "ServiceClass_AF1",
		2: "ServiceClass_AF2",
		3: "ServiceClass_AF3",
		4: "ServiceClass_AF4",
		5: "ServiceClass_EF",
		6: "ServiceClass_CS6",
		7: "ServiceClass_CS7",
	}
	Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate_SpecificServiceClasss_SpecificServiceClass_ServiceClass_value = map[string]int32{
		"ServiceClass_BE":  0,
		"ServiceClass_AF1": 1,
		"ServiceClass_AF2": 2,
		"ServiceClass_AF3": 3,
		"ServiceClass_AF4": 4,
		"ServiceClass_EF":  5,
		"ServiceClass_CS6": 6,
		"ServiceClass_CS7": 7,
	}
)

func (x Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate_SpecificServiceClasss_SpecificServiceClass_ServiceClass) Enum() *Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate_SpecificServiceClasss_SpecificServiceClass_ServiceClass {
	p := new(Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate_SpecificServiceClasss_SpecificServiceClass_ServiceClass)
	*p = x
	return p
}

func (x Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate_SpecificServiceClasss_SpecificServiceClass_ServiceClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate_SpecificServiceClasss_SpecificServiceClass_ServiceClass) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[119].Descriptor()
}

func (Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate_SpecificServiceClasss_SpecificServiceClass_ServiceClass) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[119]
}

func (x Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate_SpecificServiceClasss_SpecificServiceClass_ServiceClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate_SpecificServiceClasss_SpecificServiceClass_ServiceClass.Descriptor instead.
func (Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate_SpecificServiceClasss_SpecificServiceClass_ServiceClass) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 22, 1, 0, 0}
}

type Devm_LpuBoards_LpuBoard_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass int32

const (
	Devm_LpuBoards_LpuBoard_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass_BE  Devm_LpuBoards_LpuBoard_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass = 0
	Devm_LpuBoards_LpuBoard_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass_AF1 Devm_LpuBoards_LpuBoard_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass = 1
	Devm_LpuBoards_LpuBoard_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass_AF2 Devm_LpuBoards_LpuBoard_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass = 2
	Devm_LpuBoards_LpuBoard_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass_AF3 Devm_LpuBoards_LpuBoard_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass = 3
	Devm_LpuBoards_LpuBoard_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass_AF4 Devm_LpuBoards_LpuBoard_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass = 4
	Devm_LpuBoards_LpuBoard_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass_EF  Devm_LpuBoards_LpuBoard_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass = 5
	Devm_LpuBoards_LpuBoard_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass_CS6 Devm_LpuBoards_LpuBoard_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass = 6
	Devm_LpuBoards_LpuBoard_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass_CS7 Devm_LpuBoards_LpuBoard_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass = 7
)

// Enum value maps for Devm_LpuBoards_LpuBoard_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass.
var (
	Devm_LpuBoards_LpuBoard_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass_name = map[int32]string{
		0: "ServiceClass_BE",
		1: "ServiceClass_AF1",
		2: "ServiceClass_AF2",
		3: "ServiceClass_AF3",
		4: "ServiceClass_AF4",
		5: "ServiceClass_EF",
		6: "ServiceClass_CS6",
		7: "ServiceClass_CS7",
	}
	Devm_LpuBoards_LpuBoard_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass_value = map[string]int32{
		"ServiceClass_BE":  0,
		"ServiceClass_AF1": 1,
		"ServiceClass_AF2": 2,
		"ServiceClass_AF3": 3,
		"ServiceClass_AF4": 4,
		"ServiceClass_EF":  5,
		"ServiceClass_CS6": 6,
		"ServiceClass_CS7": 7,
	}
)

func (x Devm_LpuBoards_LpuBoard_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass) Enum() *Devm_LpuBoards_LpuBoard_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass {
	p := new(Devm_LpuBoards_LpuBoard_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass)
	*p = x
	return p
}

func (x Devm_LpuBoards_LpuBoard_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_LpuBoards_LpuBoard_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[120].Descriptor()
}

func (Devm_LpuBoards_LpuBoard_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[120]
}

func (x Devm_LpuBoards_LpuBoard_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass.Descriptor instead.
func (Devm_LpuBoards_LpuBoard_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 23, 0, 0}
}

type Devm_LpuBoards_LpuBoard_Qos_MulticastShapers_MulticastShaper_Priority int32

const (
	Devm_LpuBoards_LpuBoard_Qos_MulticastShapers_MulticastShaper_Priority_LOW  Devm_LpuBoards_LpuBoard_Qos_MulticastShapers_MulticastShaper_Priority = 0
	Devm_LpuBoards_LpuBoard_Qos_MulticastShapers_MulticastShaper_Priority_HIGH Devm_LpuBoards_LpuBoard_Qos_MulticastShapers_MulticastShaper_Priority = 1
	Devm_LpuBoards_LpuBoard_Qos_MulticastShapers_MulticastShaper_Priority_BOTH Devm_LpuBoards_LpuBoard_Qos_MulticastShapers_MulticastShaper_Priority = 2
)

// Enum value maps for Devm_LpuBoards_LpuBoard_Qos_MulticastShapers_MulticastShaper_Priority.
var (
	Devm_LpuBoards_LpuBoard_Qos_MulticastShapers_MulticastShaper_Priority_name = map[int32]string{
		0: "Priority_LOW",
		1: "Priority_HIGH",
		2: "Priority_BOTH",
	}
	Devm_LpuBoards_LpuBoard_Qos_MulticastShapers_MulticastShaper_Priority_value = map[string]int32{
		"Priority_LOW":  0,
		"Priority_HIGH": 1,
		"Priority_BOTH": 2,
	}
)

func (x Devm_LpuBoards_LpuBoard_Qos_MulticastShapers_MulticastShaper_Priority) Enum() *Devm_LpuBoards_LpuBoard_Qos_MulticastShapers_MulticastShaper_Priority {
	p := new(Devm_LpuBoards_LpuBoard_Qos_MulticastShapers_MulticastShaper_Priority)
	*p = x
	return p
}

func (x Devm_LpuBoards_LpuBoard_Qos_MulticastShapers_MulticastShaper_Priority) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_LpuBoards_LpuBoard_Qos_MulticastShapers_MulticastShaper_Priority) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[121].Descriptor()
}

func (Devm_LpuBoards_LpuBoard_Qos_MulticastShapers_MulticastShaper_Priority) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[121]
}

func (x Devm_LpuBoards_LpuBoard_Qos_MulticastShapers_MulticastShaper_Priority) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_MulticastShapers_MulticastShaper_Priority.Descriptor instead.
func (Devm_LpuBoards_LpuBoard_Qos_MulticastShapers_MulticastShaper_Priority) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 25, 0, 0}
}

type Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_ServiceClass int32

const (
	Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_ServiceClass_BE  Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_ServiceClass = 0
	Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_ServiceClass_AF1 Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_ServiceClass = 1
	Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_ServiceClass_AF2 Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_ServiceClass = 2
	Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_ServiceClass_AF3 Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_ServiceClass = 3
	Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_ServiceClass_AF4 Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_ServiceClass = 4
	Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_ServiceClass_EF  Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_ServiceClass = 5
	Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_ServiceClass_CS6 Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_ServiceClass = 6
	Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_ServiceClass_CS7 Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_ServiceClass = 7
)

// Enum value maps for Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_ServiceClass.
var (
	Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_ServiceClass_name = map[int32]string{
		0: "ServiceClass_BE",
		1: "ServiceClass_AF1",
		2: "ServiceClass_AF2",
		3: "ServiceClass_AF3",
		4: "ServiceClass_AF4",
		5: "ServiceClass_EF",
		6: "ServiceClass_CS6",
		7: "ServiceClass_CS7",
	}
	Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_ServiceClass_value = map[string]int32{
		"ServiceClass_BE":  0,
		"ServiceClass_AF1": 1,
		"ServiceClass_AF2": 2,
		"ServiceClass_AF3": 3,
		"ServiceClass_AF4": 4,
		"ServiceClass_EF":  5,
		"ServiceClass_CS6": 6,
		"ServiceClass_CS7": 7,
	}
)

func (x Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_ServiceClass) Enum() *Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_ServiceClass {
	p := new(Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_ServiceClass)
	*p = x
	return p
}

func (x Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_ServiceClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_ServiceClass) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[122].Descriptor()
}

func (Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_ServiceClass) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[122]
}

func (x Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_ServiceClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_ServiceClass.Descriptor instead.
func (Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_ServiceClass) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 28, 0, 0}
}

type Devm_LpuBoards_LpuBoard_Qos_BurstSizes_BurstSize_ServiceClass int32

const (
	Devm_LpuBoards_LpuBoard_Qos_BurstSizes_BurstSize_ServiceClass_BE  Devm_LpuBoards_LpuBoard_Qos_BurstSizes_BurstSize_ServiceClass = 0
	Devm_LpuBoards_LpuBoard_Qos_BurstSizes_BurstSize_ServiceClass_AF1 Devm_LpuBoards_LpuBoard_Qos_BurstSizes_BurstSize_ServiceClass = 1
	Devm_LpuBoards_LpuBoard_Qos_BurstSizes_BurstSize_ServiceClass_AF2 Devm_LpuBoards_LpuBoard_Qos_BurstSizes_BurstSize_ServiceClass = 2
	Devm_LpuBoards_LpuBoard_Qos_BurstSizes_BurstSize_ServiceClass_AF3 Devm_LpuBoards_LpuBoard_Qos_BurstSizes_BurstSize_ServiceClass = 3
	Devm_LpuBoards_LpuBoard_Qos_BurstSizes_BurstSize_ServiceClass_AF4 Devm_LpuBoards_LpuBoard_Qos_BurstSizes_BurstSize_ServiceClass = 4
	Devm_LpuBoards_LpuBoard_Qos_BurstSizes_BurstSize_ServiceClass_EF  Devm_LpuBoards_LpuBoard_Qos_BurstSizes_BurstSize_ServiceClass = 5
	Devm_LpuBoards_LpuBoard_Qos_BurstSizes_BurstSize_ServiceClass_CS6 Devm_LpuBoards_LpuBoard_Qos_BurstSizes_BurstSize_ServiceClass = 6
	Devm_LpuBoards_LpuBoard_Qos_BurstSizes_BurstSize_ServiceClass_CS7 Devm_LpuBoards_LpuBoard_Qos_BurstSizes_BurstSize_ServiceClass = 7
)

// Enum value maps for Devm_LpuBoards_LpuBoard_Qos_BurstSizes_BurstSize_ServiceClass.
var (
	Devm_LpuBoards_LpuBoard_Qos_BurstSizes_BurstSize_ServiceClass_name = map[int32]string{
		0: "ServiceClass_BE",
		1: "ServiceClass_AF1",
		2: "ServiceClass_AF2",
		3: "ServiceClass_AF3",
		4: "ServiceClass_AF4",
		5: "ServiceClass_EF",
		6: "ServiceClass_CS6",
		7: "ServiceClass_CS7",
	}
	Devm_LpuBoards_LpuBoard_Qos_BurstSizes_BurstSize_ServiceClass_value = map[string]int32{
		"ServiceClass_BE":  0,
		"ServiceClass_AF1": 1,
		"ServiceClass_AF2": 2,
		"ServiceClass_AF3": 3,
		"ServiceClass_AF4": 4,
		"ServiceClass_EF":  5,
		"ServiceClass_CS6": 6,
		"ServiceClass_CS7": 7,
	}
)

func (x Devm_LpuBoards_LpuBoard_Qos_BurstSizes_BurstSize_ServiceClass) Enum() *Devm_LpuBoards_LpuBoard_Qos_BurstSizes_BurstSize_ServiceClass {
	p := new(Devm_LpuBoards_LpuBoard_Qos_BurstSizes_BurstSize_ServiceClass)
	*p = x
	return p
}

func (x Devm_LpuBoards_LpuBoard_Qos_BurstSizes_BurstSize_ServiceClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_LpuBoards_LpuBoard_Qos_BurstSizes_BurstSize_ServiceClass) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[123].Descriptor()
}

func (Devm_LpuBoards_LpuBoard_Qos_BurstSizes_BurstSize_ServiceClass) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[123]
}

func (x Devm_LpuBoards_LpuBoard_Qos_BurstSizes_BurstSize_ServiceClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_BurstSizes_BurstSize_ServiceClass.Descriptor instead.
func (Devm_LpuBoards_LpuBoard_Qos_BurstSizes_BurstSize_ServiceClass) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 30, 0, 0}
}

type Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareThresholds_GlobalBufferShareThreshold_Direction int32

const (
	Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareThresholds_GlobalBufferShareThreshold_Direction_INBOUND  Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareThresholds_GlobalBufferShareThreshold_Direction = 0
	Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareThresholds_GlobalBufferShareThreshold_Direction_OUTBOUND Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareThresholds_GlobalBufferShareThreshold_Direction = 1
)

// Enum value maps for Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareThresholds_GlobalBufferShareThreshold_Direction.
var (
	Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareThresholds_GlobalBufferShareThreshold_Direction_name = map[int32]string{
		0: "Direction_INBOUND",
		1: "Direction_OUTBOUND",
	}
	Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareThresholds_GlobalBufferShareThreshold_Direction_value = map[string]int32{
		"Direction_INBOUND":  0,
		"Direction_OUTBOUND": 1,
	}
)

func (x Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareThresholds_GlobalBufferShareThreshold_Direction) Enum() *Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareThresholds_GlobalBufferShareThreshold_Direction {
	p := new(Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareThresholds_GlobalBufferShareThreshold_Direction)
	*p = x
	return p
}

func (x Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareThresholds_GlobalBufferShareThreshold_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareThresholds_GlobalBufferShareThreshold_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[124].Descriptor()
}

func (Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareThresholds_GlobalBufferShareThreshold_Direction) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[124]
}

func (x Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareThresholds_GlobalBufferShareThreshold_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareThresholds_GlobalBufferShareThreshold_Direction.Descriptor instead.
func (Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareThresholds_GlobalBufferShareThreshold_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 31, 0, 0}
}

type Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_ServiceClass int32

const (
	Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_ServiceClass_BE  Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_ServiceClass = 0
	Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_ServiceClass_AF1 Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_ServiceClass = 1
	Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_ServiceClass_AF2 Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_ServiceClass = 2
	Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_ServiceClass_AF3 Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_ServiceClass = 3
	Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_ServiceClass_AF4 Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_ServiceClass = 4
	Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_ServiceClass_EF  Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_ServiceClass = 5
	Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_ServiceClass_CS6 Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_ServiceClass = 6
	Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_ServiceClass_CS7 Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_ServiceClass = 7
)

// Enum value maps for Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_ServiceClass.
var (
	Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_ServiceClass_name = map[int32]string{
		0: "ServiceClass_BE",
		1: "ServiceClass_AF1",
		2: "ServiceClass_AF2",
		3: "ServiceClass_AF3",
		4: "ServiceClass_AF4",
		5: "ServiceClass_EF",
		6: "ServiceClass_CS6",
		7: "ServiceClass_CS7",
	}
	Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_ServiceClass_value = map[string]int32{
		"ServiceClass_BE":  0,
		"ServiceClass_AF1": 1,
		"ServiceClass_AF2": 2,
		"ServiceClass_AF3": 3,
		"ServiceClass_AF4": 4,
		"ServiceClass_EF":  5,
		"ServiceClass_CS6": 6,
		"ServiceClass_CS7": 7,
	}
)

func (x Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_ServiceClass) Enum() *Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_ServiceClass {
	p := new(Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_ServiceClass)
	*p = x
	return p
}

func (x Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_ServiceClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_ServiceClass) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[125].Descriptor()
}

func (Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_ServiceClass) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[125]
}

func (x Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_ServiceClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_ServiceClass.Descriptor instead.
func (Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_ServiceClass) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 32, 0, 0}
}

type Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_Direction int32

const (
	Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_Direction_INBOUND  Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_Direction = 0
	Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_Direction_OUTBOUND Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_Direction = 1
)

// Enum value maps for Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_Direction.
var (
	Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_Direction_name = map[int32]string{
		0: "Direction_INBOUND",
		1: "Direction_OUTBOUND",
	}
	Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_Direction_value = map[string]int32{
		"Direction_INBOUND":  0,
		"Direction_OUTBOUND": 1,
	}
)

func (x Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_Direction) Enum() *Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_Direction {
	p := new(Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_Direction)
	*p = x
	return p
}

func (x Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[126].Descriptor()
}

func (Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_Direction) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[126]
}

func (x Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_Direction.Descriptor instead.
func (Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 32, 0, 1}
}

type Devm_LpuBoards_LpuBoard_Qos_UserQueueResource8CosEnhances_UserQueueResource8CosEnhance_Direction int32

const (
	Devm_LpuBoards_LpuBoard_Qos_UserQueueResource8CosEnhances_UserQueueResource8CosEnhance_Direction_INBOUND  Devm_LpuBoards_LpuBoard_Qos_UserQueueResource8CosEnhances_UserQueueResource8CosEnhance_Direction = 0
	Devm_LpuBoards_LpuBoard_Qos_UserQueueResource8CosEnhances_UserQueueResource8CosEnhance_Direction_OUTBOUND Devm_LpuBoards_LpuBoard_Qos_UserQueueResource8CosEnhances_UserQueueResource8CosEnhance_Direction = 1
)

// Enum value maps for Devm_LpuBoards_LpuBoard_Qos_UserQueueResource8CosEnhances_UserQueueResource8CosEnhance_Direction.
var (
	Devm_LpuBoards_LpuBoard_Qos_UserQueueResource8CosEnhances_UserQueueResource8CosEnhance_Direction_name = map[int32]string{
		0: "Direction_INBOUND",
		1: "Direction_OUTBOUND",
	}
	Devm_LpuBoards_LpuBoard_Qos_UserQueueResource8CosEnhances_UserQueueResource8CosEnhance_Direction_value = map[string]int32{
		"Direction_INBOUND":  0,
		"Direction_OUTBOUND": 1,
	}
)

func (x Devm_LpuBoards_LpuBoard_Qos_UserQueueResource8CosEnhances_UserQueueResource8CosEnhance_Direction) Enum() *Devm_LpuBoards_LpuBoard_Qos_UserQueueResource8CosEnhances_UserQueueResource8CosEnhance_Direction {
	p := new(Devm_LpuBoards_LpuBoard_Qos_UserQueueResource8CosEnhances_UserQueueResource8CosEnhance_Direction)
	*p = x
	return p
}

func (x Devm_LpuBoards_LpuBoard_Qos_UserQueueResource8CosEnhances_UserQueueResource8CosEnhance_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_LpuBoards_LpuBoard_Qos_UserQueueResource8CosEnhances_UserQueueResource8CosEnhance_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[127].Descriptor()
}

func (Devm_LpuBoards_LpuBoard_Qos_UserQueueResource8CosEnhances_UserQueueResource8CosEnhance_Direction) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[127]
}

func (x Devm_LpuBoards_LpuBoard_Qos_UserQueueResource8CosEnhances_UserQueueResource8CosEnhance_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_UserQueueResource8CosEnhances_UserQueueResource8CosEnhance_Direction.Descriptor instead.
func (Devm_LpuBoards_LpuBoard_Qos_UserQueueResource8CosEnhances_UserQueueResource8CosEnhance_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 36, 0, 0}
}

type Devm_LpuBoards_LpuBoard_Qos_ChannelAutoAdjustSwitch_AutoAdjustQuantity int32

const (
	Devm_LpuBoards_LpuBoard_Qos_ChannelAutoAdjustSwitch_AutoAdjustQuantity_ENABLE  Devm_LpuBoards_LpuBoard_Qos_ChannelAutoAdjustSwitch_AutoAdjustQuantity = 0
	Devm_LpuBoards_LpuBoard_Qos_ChannelAutoAdjustSwitch_AutoAdjustQuantity_DISABLE Devm_LpuBoards_LpuBoard_Qos_ChannelAutoAdjustSwitch_AutoAdjustQuantity = 1
)

// Enum value maps for Devm_LpuBoards_LpuBoard_Qos_ChannelAutoAdjustSwitch_AutoAdjustQuantity.
var (
	Devm_LpuBoards_LpuBoard_Qos_ChannelAutoAdjustSwitch_AutoAdjustQuantity_name = map[int32]string{
		0: "AutoAdjustQuantity_ENABLE",
		1: "AutoAdjustQuantity_DISABLE",
	}
	Devm_LpuBoards_LpuBoard_Qos_ChannelAutoAdjustSwitch_AutoAdjustQuantity_value = map[string]int32{
		"AutoAdjustQuantity_ENABLE":  0,
		"AutoAdjustQuantity_DISABLE": 1,
	}
)

func (x Devm_LpuBoards_LpuBoard_Qos_ChannelAutoAdjustSwitch_AutoAdjustQuantity) Enum() *Devm_LpuBoards_LpuBoard_Qos_ChannelAutoAdjustSwitch_AutoAdjustQuantity {
	p := new(Devm_LpuBoards_LpuBoard_Qos_ChannelAutoAdjustSwitch_AutoAdjustQuantity)
	*p = x
	return p
}

func (x Devm_LpuBoards_LpuBoard_Qos_ChannelAutoAdjustSwitch_AutoAdjustQuantity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_LpuBoards_LpuBoard_Qos_ChannelAutoAdjustSwitch_AutoAdjustQuantity) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[128].Descriptor()
}

func (Devm_LpuBoards_LpuBoard_Qos_ChannelAutoAdjustSwitch_AutoAdjustQuantity) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[128]
}

func (x Devm_LpuBoards_LpuBoard_Qos_ChannelAutoAdjustSwitch_AutoAdjustQuantity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_ChannelAutoAdjustSwitch_AutoAdjustQuantity.Descriptor instead.
func (Devm_LpuBoards_LpuBoard_Qos_ChannelAutoAdjustSwitch_AutoAdjustQuantity) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 37, 0}
}

type Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_LoopLevelThresholds_LoopLevelThreshold_InterfaceType int32

const (
	Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_LoopLevelThresholds_LoopLevelThreshold_InterfaceType_MAINX_INTERFACE Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_LoopLevelThresholds_LoopLevelThreshold_InterfaceType = 0
	Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_LoopLevelThresholds_LoopLevelThreshold_InterfaceType_SUBX_INTERFACE  Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_LoopLevelThresholds_LoopLevelThreshold_InterfaceType = 1
)

// Enum value maps for Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_LoopLevelThresholds_LoopLevelThreshold_InterfaceType.
var (
	Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_LoopLevelThresholds_LoopLevelThreshold_InterfaceType_name = map[int32]string{
		0: "InterfaceType_MAINX_INTERFACE",
		1: "InterfaceType_SUBX_INTERFACE",
	}
	Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_LoopLevelThresholds_LoopLevelThreshold_InterfaceType_value = map[string]int32{
		"InterfaceType_MAINX_INTERFACE": 0,
		"InterfaceType_SUBX_INTERFACE":  1,
	}
)

func (x Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_LoopLevelThresholds_LoopLevelThreshold_InterfaceType) Enum() *Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_LoopLevelThresholds_LoopLevelThreshold_InterfaceType {
	p := new(Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_LoopLevelThresholds_LoopLevelThreshold_InterfaceType)
	*p = x
	return p
}

func (x Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_LoopLevelThresholds_LoopLevelThreshold_InterfaceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_LoopLevelThresholds_LoopLevelThreshold_InterfaceType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[129].Descriptor()
}

func (Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_LoopLevelThresholds_LoopLevelThreshold_InterfaceType) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[129]
}

func (x Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_LoopLevelThresholds_LoopLevelThreshold_InterfaceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_LoopLevelThresholds_LoopLevelThreshold_InterfaceType.Descriptor instead.
func (Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_LoopLevelThresholds_LoopLevelThreshold_InterfaceType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 21, 0, 2, 0, 0}
}

type Devm_LpuBoards_LpuBoard_UnicastForward_GreTtlMode_TtlMode int32

const (
	Devm_LpuBoards_LpuBoard_UnicastForward_GreTtlMode_TtlMode_PIPE    Devm_LpuBoards_LpuBoard_UnicastForward_GreTtlMode_TtlMode = 0
	Devm_LpuBoards_LpuBoard_UnicastForward_GreTtlMode_TtlMode_UNIFORM Devm_LpuBoards_LpuBoard_UnicastForward_GreTtlMode_TtlMode = 1
)

// Enum value maps for Devm_LpuBoards_LpuBoard_UnicastForward_GreTtlMode_TtlMode.
var (
	Devm_LpuBoards_LpuBoard_UnicastForward_GreTtlMode_TtlMode_name = map[int32]string{
		0: "TtlMode_PIPE",
		1: "TtlMode_UNIFORM",
	}
	Devm_LpuBoards_LpuBoard_UnicastForward_GreTtlMode_TtlMode_value = map[string]int32{
		"TtlMode_PIPE":    0,
		"TtlMode_UNIFORM": 1,
	}
)

func (x Devm_LpuBoards_LpuBoard_UnicastForward_GreTtlMode_TtlMode) Enum() *Devm_LpuBoards_LpuBoard_UnicastForward_GreTtlMode_TtlMode {
	p := new(Devm_LpuBoards_LpuBoard_UnicastForward_GreTtlMode_TtlMode)
	*p = x
	return p
}

func (x Devm_LpuBoards_LpuBoard_UnicastForward_GreTtlMode_TtlMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_LpuBoards_LpuBoard_UnicastForward_GreTtlMode_TtlMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[130].Descriptor()
}

func (Devm_LpuBoards_LpuBoard_UnicastForward_GreTtlMode_TtlMode) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[130]
}

func (x Devm_LpuBoards_LpuBoard_UnicastForward_GreTtlMode_TtlMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_UnicastForward_GreTtlMode_TtlMode.Descriptor instead.
func (Devm_LpuBoards_LpuBoard_UnicastForward_GreTtlMode_TtlMode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 22, 2, 0}
}

type Devm_LpuBoards_LpuBoard_UnicastForward_L3LcsCapacitys_SlotL3LcsCapacity_ServiceType int32

const (
	Devm_LpuBoards_LpuBoard_UnicastForward_L3LcsCapacitys_SlotL3LcsCapacity_ServiceType_FIB   Devm_LpuBoards_LpuBoard_UnicastForward_L3LcsCapacitys_SlotL3LcsCapacity_ServiceType = 0
	Devm_LpuBoards_LpuBoard_UnicastForward_L3LcsCapacitys_SlotL3LcsCapacity_ServiceType_L3VPN Devm_LpuBoards_LpuBoard_UnicastForward_L3LcsCapacitys_SlotL3LcsCapacity_ServiceType = 1
)

// Enum value maps for Devm_LpuBoards_LpuBoard_UnicastForward_L3LcsCapacitys_SlotL3LcsCapacity_ServiceType.
var (
	Devm_LpuBoards_LpuBoard_UnicastForward_L3LcsCapacitys_SlotL3LcsCapacity_ServiceType_name = map[int32]string{
		0: "ServiceType_FIB",
		1: "ServiceType_L3VPN",
	}
	Devm_LpuBoards_LpuBoard_UnicastForward_L3LcsCapacitys_SlotL3LcsCapacity_ServiceType_value = map[string]int32{
		"ServiceType_FIB":   0,
		"ServiceType_L3VPN": 1,
	}
)

func (x Devm_LpuBoards_LpuBoard_UnicastForward_L3LcsCapacitys_SlotL3LcsCapacity_ServiceType) Enum() *Devm_LpuBoards_LpuBoard_UnicastForward_L3LcsCapacitys_SlotL3LcsCapacity_ServiceType {
	p := new(Devm_LpuBoards_LpuBoard_UnicastForward_L3LcsCapacitys_SlotL3LcsCapacity_ServiceType)
	*p = x
	return p
}

func (x Devm_LpuBoards_LpuBoard_UnicastForward_L3LcsCapacitys_SlotL3LcsCapacity_ServiceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_LpuBoards_LpuBoard_UnicastForward_L3LcsCapacitys_SlotL3LcsCapacity_ServiceType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[131].Descriptor()
}

func (Devm_LpuBoards_LpuBoard_UnicastForward_L3LcsCapacitys_SlotL3LcsCapacity_ServiceType) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[131]
}

func (x Devm_LpuBoards_LpuBoard_UnicastForward_L3LcsCapacitys_SlotL3LcsCapacity_ServiceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_UnicastForward_L3LcsCapacitys_SlotL3LcsCapacity_ServiceType.Descriptor instead.
func (Devm_LpuBoards_LpuBoard_UnicastForward_L3LcsCapacitys_SlotL3LcsCapacity_ServiceType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 22, 3, 0, 0}
}

type Devm_LpuBoards_LpuBoard_UnicastForward_VxlanRdrTrunks_VxlanRdrTrunk_RedirectType int32

const (
	Devm_LpuBoards_LpuBoard_UnicastForward_VxlanRdrTrunks_VxlanRdrTrunk_INVALID_ENUM_VALUE_RedirectType Devm_LpuBoards_LpuBoard_UnicastForward_VxlanRdrTrunks_VxlanRdrTrunk_RedirectType = 0
	Devm_LpuBoards_LpuBoard_UnicastForward_VxlanRdrTrunks_VxlanRdrTrunk_RedirectType_VXLAN              Devm_LpuBoards_LpuBoard_UnicastForward_VxlanRdrTrunks_VxlanRdrTrunk_RedirectType = 1
	Devm_LpuBoards_LpuBoard_UnicastForward_VxlanRdrTrunks_VxlanRdrTrunk_RedirectType_BDIF               Devm_LpuBoards_LpuBoard_UnicastForward_VxlanRdrTrunks_VxlanRdrTrunk_RedirectType = 2
	Devm_LpuBoards_LpuBoard_UnicastForward_VxlanRdrTrunks_VxlanRdrTrunk_RedirectType_VXLANBDIF          Devm_LpuBoards_LpuBoard_UnicastForward_VxlanRdrTrunks_VxlanRdrTrunk_RedirectType = 3
)

// Enum value maps for Devm_LpuBoards_LpuBoard_UnicastForward_VxlanRdrTrunks_VxlanRdrTrunk_RedirectType.
var (
	Devm_LpuBoards_LpuBoard_UnicastForward_VxlanRdrTrunks_VxlanRdrTrunk_RedirectType_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_RedirectType",
		1: "RedirectType_VXLAN",
		2: "RedirectType_BDIF",
		3: "RedirectType_VXLANBDIF",
	}
	Devm_LpuBoards_LpuBoard_UnicastForward_VxlanRdrTrunks_VxlanRdrTrunk_RedirectType_value = map[string]int32{
		"INVALID_ENUM_VALUE_RedirectType": 0,
		"RedirectType_VXLAN":              1,
		"RedirectType_BDIF":               2,
		"RedirectType_VXLANBDIF":          3,
	}
)

func (x Devm_LpuBoards_LpuBoard_UnicastForward_VxlanRdrTrunks_VxlanRdrTrunk_RedirectType) Enum() *Devm_LpuBoards_LpuBoard_UnicastForward_VxlanRdrTrunks_VxlanRdrTrunk_RedirectType {
	p := new(Devm_LpuBoards_LpuBoard_UnicastForward_VxlanRdrTrunks_VxlanRdrTrunk_RedirectType)
	*p = x
	return p
}

func (x Devm_LpuBoards_LpuBoard_UnicastForward_VxlanRdrTrunks_VxlanRdrTrunk_RedirectType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_LpuBoards_LpuBoard_UnicastForward_VxlanRdrTrunks_VxlanRdrTrunk_RedirectType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[132].Descriptor()
}

func (Devm_LpuBoards_LpuBoard_UnicastForward_VxlanRdrTrunks_VxlanRdrTrunk_RedirectType) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[132]
}

func (x Devm_LpuBoards_LpuBoard_UnicastForward_VxlanRdrTrunks_VxlanRdrTrunk_RedirectType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_UnicastForward_VxlanRdrTrunks_VxlanRdrTrunk_RedirectType.Descriptor instead.
func (Devm_LpuBoards_LpuBoard_UnicastForward_VxlanRdrTrunks_VxlanRdrTrunk_RedirectType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 22, 5, 0, 0}
}

type Devm_LpuBoards_LpuBoard_Dcb_DeadlockRecoveryBehavior_Behavior int32

const (
	Devm_LpuBoards_LpuBoard_Dcb_DeadlockRecoveryBehavior_Behavior_FORWARDING Devm_LpuBoards_LpuBoard_Dcb_DeadlockRecoveryBehavior_Behavior = 0
	Devm_LpuBoards_LpuBoard_Dcb_DeadlockRecoveryBehavior_Behavior_DISCARD    Devm_LpuBoards_LpuBoard_Dcb_DeadlockRecoveryBehavior_Behavior = 1
)

// Enum value maps for Devm_LpuBoards_LpuBoard_Dcb_DeadlockRecoveryBehavior_Behavior.
var (
	Devm_LpuBoards_LpuBoard_Dcb_DeadlockRecoveryBehavior_Behavior_name = map[int32]string{
		0: "Behavior_FORWARDING",
		1: "Behavior_DISCARD",
	}
	Devm_LpuBoards_LpuBoard_Dcb_DeadlockRecoveryBehavior_Behavior_value = map[string]int32{
		"Behavior_FORWARDING": 0,
		"Behavior_DISCARD":    1,
	}
)

func (x Devm_LpuBoards_LpuBoard_Dcb_DeadlockRecoveryBehavior_Behavior) Enum() *Devm_LpuBoards_LpuBoard_Dcb_DeadlockRecoveryBehavior_Behavior {
	p := new(Devm_LpuBoards_LpuBoard_Dcb_DeadlockRecoveryBehavior_Behavior)
	*p = x
	return p
}

func (x Devm_LpuBoards_LpuBoard_Dcb_DeadlockRecoveryBehavior_Behavior) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_LpuBoards_LpuBoard_Dcb_DeadlockRecoveryBehavior_Behavior) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[133].Descriptor()
}

func (Devm_LpuBoards_LpuBoard_Dcb_DeadlockRecoveryBehavior_Behavior) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[133]
}

func (x Devm_LpuBoards_LpuBoard_Dcb_DeadlockRecoveryBehavior_Behavior) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Dcb_DeadlockRecoveryBehavior_Behavior.Descriptor instead.
func (Devm_LpuBoards_LpuBoard_Dcb_DeadlockRecoveryBehavior_Behavior) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 28, 1, 0}
}

type Devm_LpuBoards_LpuBoard_Dcb_PfcMappingType_Type int32

const (
	Devm_LpuBoards_LpuBoard_Dcb_PfcMappingType_Type_X_8021P Devm_LpuBoards_LpuBoard_Dcb_PfcMappingType_Type = 0
	Devm_LpuBoards_LpuBoard_Dcb_PfcMappingType_Type_DSCP    Devm_LpuBoards_LpuBoard_Dcb_PfcMappingType_Type = 1
)

// Enum value maps for Devm_LpuBoards_LpuBoard_Dcb_PfcMappingType_Type.
var (
	Devm_LpuBoards_LpuBoard_Dcb_PfcMappingType_Type_name = map[int32]string{
		0: "Type_X_8021P",
		1: "Type_DSCP",
	}
	Devm_LpuBoards_LpuBoard_Dcb_PfcMappingType_Type_value = map[string]int32{
		"Type_X_8021P": 0,
		"Type_DSCP":    1,
	}
)

func (x Devm_LpuBoards_LpuBoard_Dcb_PfcMappingType_Type) Enum() *Devm_LpuBoards_LpuBoard_Dcb_PfcMappingType_Type {
	p := new(Devm_LpuBoards_LpuBoard_Dcb_PfcMappingType_Type)
	*p = x
	return p
}

func (x Devm_LpuBoards_LpuBoard_Dcb_PfcMappingType_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_LpuBoards_LpuBoard_Dcb_PfcMappingType_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[134].Descriptor()
}

func (Devm_LpuBoards_LpuBoard_Dcb_PfcMappingType_Type) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[134]
}

func (x Devm_LpuBoards_LpuBoard_Dcb_PfcMappingType_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Dcb_PfcMappingType_Type.Descriptor instead.
func (Devm_LpuBoards_LpuBoard_Dcb_PfcMappingType_Type) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 28, 2, 0}
}

type Devm_Cards_Card_InitStatus int32

const (
	Devm_Cards_Card_InitStatus_FAIL    Devm_Cards_Card_InitStatus = 0
	Devm_Cards_Card_InitStatus_SUCCESS Devm_Cards_Card_InitStatus = 1
	Devm_Cards_Card_InitStatus_UNKNOWN Devm_Cards_Card_InitStatus = 2
)

// Enum value maps for Devm_Cards_Card_InitStatus.
var (
	Devm_Cards_Card_InitStatus_name = map[int32]string{
		0: "InitStatus_FAIL",
		1: "InitStatus_SUCCESS",
		2: "InitStatus_UNKNOWN",
	}
	Devm_Cards_Card_InitStatus_value = map[string]int32{
		"InitStatus_FAIL":    0,
		"InitStatus_SUCCESS": 1,
		"InitStatus_UNKNOWN": 2,
	}
)

func (x Devm_Cards_Card_InitStatus) Enum() *Devm_Cards_Card_InitStatus {
	p := new(Devm_Cards_Card_InitStatus)
	*p = x
	return p
}

func (x Devm_Cards_Card_InitStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Cards_Card_InitStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[135].Descriptor()
}

func (Devm_Cards_Card_InitStatus) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[135]
}

func (x Devm_Cards_Card_InitStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Cards_Card_InitStatus.Descriptor instead.
func (Devm_Cards_Card_InitStatus) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 8, 0, 0}
}

type Devm_Cards_Card_RegisterStatus int32

const (
	Devm_Cards_Card_RegisterStatus_UNREGISTERED Devm_Cards_Card_RegisterStatus = 0
	Devm_Cards_Card_RegisterStatus_REGISTERED   Devm_Cards_Card_RegisterStatus = 1
	Devm_Cards_Card_RegisterStatus_UNKNOWN      Devm_Cards_Card_RegisterStatus = 2
)

// Enum value maps for Devm_Cards_Card_RegisterStatus.
var (
	Devm_Cards_Card_RegisterStatus_name = map[int32]string{
		0: "RegisterStatus_UNREGISTERED",
		1: "RegisterStatus_REGISTERED",
		2: "RegisterStatus_UNKNOWN",
	}
	Devm_Cards_Card_RegisterStatus_value = map[string]int32{
		"RegisterStatus_UNREGISTERED": 0,
		"RegisterStatus_REGISTERED":   1,
		"RegisterStatus_UNKNOWN":      2,
	}
)

func (x Devm_Cards_Card_RegisterStatus) Enum() *Devm_Cards_Card_RegisterStatus {
	p := new(Devm_Cards_Card_RegisterStatus)
	*p = x
	return p
}

func (x Devm_Cards_Card_RegisterStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Cards_Card_RegisterStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[136].Descriptor()
}

func (Devm_Cards_Card_RegisterStatus) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[136]
}

func (x Devm_Cards_Card_RegisterStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Cards_Card_RegisterStatus.Descriptor instead.
func (Devm_Cards_Card_RegisterStatus) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 8, 0, 1}
}

type Devm_Cards_Card_Pic_LogicStatus int32

const (
	Devm_Cards_Card_Pic_LogicStatus_FAIL    Devm_Cards_Card_Pic_LogicStatus = 0
	Devm_Cards_Card_Pic_LogicStatus_SUCCESS Devm_Cards_Card_Pic_LogicStatus = 1
	Devm_Cards_Card_Pic_LogicStatus_UNKNOWN Devm_Cards_Card_Pic_LogicStatus = 2
)

// Enum value maps for Devm_Cards_Card_Pic_LogicStatus.
var (
	Devm_Cards_Card_Pic_LogicStatus_name = map[int32]string{
		0: "LogicStatus_FAIL",
		1: "LogicStatus_SUCCESS",
		2: "LogicStatus_UNKNOWN",
	}
	Devm_Cards_Card_Pic_LogicStatus_value = map[string]int32{
		"LogicStatus_FAIL":    0,
		"LogicStatus_SUCCESS": 1,
		"LogicStatus_UNKNOWN": 2,
	}
)

func (x Devm_Cards_Card_Pic_LogicStatus) Enum() *Devm_Cards_Card_Pic_LogicStatus {
	p := new(Devm_Cards_Card_Pic_LogicStatus)
	*p = x
	return p
}

func (x Devm_Cards_Card_Pic_LogicStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Cards_Card_Pic_LogicStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[137].Descriptor()
}

func (Devm_Cards_Card_Pic_LogicStatus) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[137]
}

func (x Devm_Cards_Card_Pic_LogicStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Cards_Card_Pic_LogicStatus.Descriptor instead.
func (Devm_Cards_Card_Pic_LogicStatus) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 8, 0, 0, 0}
}

type Devm_Cards_Card_CardTdmParam_Impedance int32

const (
	Devm_Cards_Card_CardTdmParam_INVALID_ENUM_VALUE_Impedance Devm_Cards_Card_CardTdmParam_Impedance = 0
	Devm_Cards_Card_CardTdmParam_Impedance_X_75OHMS           Devm_Cards_Card_CardTdmParam_Impedance = 75
	Devm_Cards_Card_CardTdmParam_Impedance_X_120OHMS          Devm_Cards_Card_CardTdmParam_Impedance = 120
)

// Enum value maps for Devm_Cards_Card_CardTdmParam_Impedance.
var (
	Devm_Cards_Card_CardTdmParam_Impedance_name = map[int32]string{
		0:   "INVALID_ENUM_VALUE_Impedance",
		75:  "Impedance_X_75OHMS",
		120: "Impedance_X_120OHMS",
	}
	Devm_Cards_Card_CardTdmParam_Impedance_value = map[string]int32{
		"INVALID_ENUM_VALUE_Impedance": 0,
		"Impedance_X_75OHMS":           75,
		"Impedance_X_120OHMS":          120,
	}
)

func (x Devm_Cards_Card_CardTdmParam_Impedance) Enum() *Devm_Cards_Card_CardTdmParam_Impedance {
	p := new(Devm_Cards_Card_CardTdmParam_Impedance)
	*p = x
	return p
}

func (x Devm_Cards_Card_CardTdmParam_Impedance) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Cards_Card_CardTdmParam_Impedance) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[138].Descriptor()
}

func (Devm_Cards_Card_CardTdmParam_Impedance) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[138]
}

func (x Devm_Cards_Card_CardTdmParam_Impedance) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Cards_Card_CardTdmParam_Impedance.Descriptor instead.
func (Devm_Cards_Card_CardTdmParam_Impedance) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 8, 0, 1, 0}
}

type Devm_Cards_Card_ServiceMode_Portrate int32

const (
	Devm_Cards_Card_ServiceMode_Portrate_X_155M Devm_Cards_Card_ServiceMode_Portrate = 0
	Devm_Cards_Card_ServiceMode_Portrate_X_622M Devm_Cards_Card_ServiceMode_Portrate = 1
)

// Enum value maps for Devm_Cards_Card_ServiceMode_Portrate.
var (
	Devm_Cards_Card_ServiceMode_Portrate_name = map[int32]string{
		0: "Portrate_X_155M",
		1: "Portrate_X_622M",
	}
	Devm_Cards_Card_ServiceMode_Portrate_value = map[string]int32{
		"Portrate_X_155M": 0,
		"Portrate_X_622M": 1,
	}
)

func (x Devm_Cards_Card_ServiceMode_Portrate) Enum() *Devm_Cards_Card_ServiceMode_Portrate {
	p := new(Devm_Cards_Card_ServiceMode_Portrate)
	*p = x
	return p
}

func (x Devm_Cards_Card_ServiceMode_Portrate) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Cards_Card_ServiceMode_Portrate) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[139].Descriptor()
}

func (Devm_Cards_Card_ServiceMode_Portrate) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[139]
}

func (x Devm_Cards_Card_ServiceMode_Portrate) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Cards_Card_ServiceMode_Portrate.Descriptor instead.
func (Devm_Cards_Card_ServiceMode_Portrate) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 8, 0, 2, 0}
}

type Devm_Cards_Card_ServiceMode_BandwidthMode int32

const (
	Devm_Cards_Card_ServiceMode_INVALID_ENUM_VALUE_BandwidthMode           Devm_Cards_Card_ServiceMode_BandwidthMode = 0
	Devm_Cards_Card_ServiceMode_BandwidthMode_ETHX_28X10GF                 Devm_Cards_Card_ServiceMode_BandwidthMode = 1
	Devm_Cards_Card_ServiceMode_BandwidthMode_ETHX_26X10GFX_18XGF          Devm_Cards_Card_ServiceMode_BandwidthMode = 2
	Devm_Cards_Card_ServiceMode_BandwidthMode_ETHX_20X10GFX_24XGF          Devm_Cards_Card_ServiceMode_BandwidthMode = 3
	Devm_Cards_Card_ServiceMode_BandwidthMode_ETHX_2X100GEX_30X10GFX_10XGF Devm_Cards_Card_ServiceMode_BandwidthMode = 4
	Devm_Cards_Card_ServiceMode_BandwidthMode_ETHX_2X100GEX_26X10GFX_14XGF Devm_Cards_Card_ServiceMode_BandwidthMode = 5
	Devm_Cards_Card_ServiceMode_BandwidthMode_ETHX_2X100GE                 Devm_Cards_Card_ServiceMode_BandwidthMode = 6
	Devm_Cards_Card_ServiceMode_BandwidthMode_ETHX_1X100GEX_4X10GF         Devm_Cards_Card_ServiceMode_BandwidthMode = 7
	Devm_Cards_Card_ServiceMode_BandwidthMode_POSX_8X622M                  Devm_Cards_Card_ServiceMode_BandwidthMode = 12
	Devm_Cards_Card_ServiceMode_BandwidthMode_POSX_4X2X_5G                 Devm_Cards_Card_ServiceMode_BandwidthMode = 13
	Devm_Cards_Card_ServiceMode_BandwidthMode_POSX_1X10G                   Devm_Cards_Card_ServiceMode_BandwidthMode = 14
	Devm_Cards_Card_ServiceMode_BandwidthMode_POSX_8X155M                  Devm_Cards_Card_ServiceMode_BandwidthMode = 15
)

// Enum value maps for Devm_Cards_Card_ServiceMode_BandwidthMode.
var (
	Devm_Cards_Card_ServiceMode_BandwidthMode_name = map[int32]string{
		0:  "INVALID_ENUM_VALUE_BandwidthMode",
		1:  "BandwidthMode_ETHX_28X10GF",
		2:  "BandwidthMode_ETHX_26X10GFX_18XGF",
		3:  "BandwidthMode_ETHX_20X10GFX_24XGF",
		4:  "BandwidthMode_ETHX_2X100GEX_30X10GFX_10XGF",
		5:  "BandwidthMode_ETHX_2X100GEX_26X10GFX_14XGF",
		6:  "BandwidthMode_ETHX_2X100GE",
		7:  "BandwidthMode_ETHX_1X100GEX_4X10GF",
		12: "BandwidthMode_POSX_8X622M",
		13: "BandwidthMode_POSX_4X2X_5G",
		14: "BandwidthMode_POSX_1X10G",
		15: "BandwidthMode_POSX_8X155M",
	}
	Devm_Cards_Card_ServiceMode_BandwidthMode_value = map[string]int32{
		"INVALID_ENUM_VALUE_BandwidthMode":           0,
		"BandwidthMode_ETHX_28X10GF":                 1,
		"BandwidthMode_ETHX_26X10GFX_18XGF":          2,
		"BandwidthMode_ETHX_20X10GFX_24XGF":          3,
		"BandwidthMode_ETHX_2X100GEX_30X10GFX_10XGF": 4,
		"BandwidthMode_ETHX_2X100GEX_26X10GFX_14XGF": 5,
		"BandwidthMode_ETHX_2X100GE":                 6,
		"BandwidthMode_ETHX_1X100GEX_4X10GF":         7,
		"BandwidthMode_POSX_8X622M":                  12,
		"BandwidthMode_POSX_4X2X_5G":                 13,
		"BandwidthMode_POSX_1X10G":                   14,
		"BandwidthMode_POSX_8X155M":                  15,
	}
)

func (x Devm_Cards_Card_ServiceMode_BandwidthMode) Enum() *Devm_Cards_Card_ServiceMode_BandwidthMode {
	p := new(Devm_Cards_Card_ServiceMode_BandwidthMode)
	*p = x
	return p
}

func (x Devm_Cards_Card_ServiceMode_BandwidthMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Cards_Card_ServiceMode_BandwidthMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[140].Descriptor()
}

func (Devm_Cards_Card_ServiceMode_BandwidthMode) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[140]
}

func (x Devm_Cards_Card_ServiceMode_BandwidthMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Cards_Card_ServiceMode_BandwidthMode.Descriptor instead.
func (Devm_Cards_Card_ServiceMode_BandwidthMode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 8, 0, 2, 1}
}

type Devm_Cards_Card_PortGroupModes_PortGroupMode_ModeType int32

const (
	Devm_Cards_Card_PortGroupModes_PortGroupMode_INVALID_ENUM_VALUE_ModeType Devm_Cards_Card_PortGroupModes_PortGroupMode_ModeType = 0
	Devm_Cards_Card_PortGroupModes_PortGroupMode_ModeType_X_25GEX_10GE       Devm_Cards_Card_PortGroupModes_PortGroupMode_ModeType = 1
	Devm_Cards_Card_PortGroupModes_PortGroupMode_ModeType_X_10GEX_1GE        Devm_Cards_Card_PortGroupModes_PortGroupMode_ModeType = 2
	Devm_Cards_Card_PortGroupModes_PortGroupMode_ModeType_X_25GE             Devm_Cards_Card_PortGroupModes_PortGroupMode_ModeType = 3
	Devm_Cards_Card_PortGroupModes_PortGroupMode_ModeType_X_10GE             Devm_Cards_Card_PortGroupModes_PortGroupMode_ModeType = 4
)

// Enum value maps for Devm_Cards_Card_PortGroupModes_PortGroupMode_ModeType.
var (
	Devm_Cards_Card_PortGroupModes_PortGroupMode_ModeType_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_ModeType",
		1: "ModeType_X_25GEX_10GE",
		2: "ModeType_X_10GEX_1GE",
		3: "ModeType_X_25GE",
		4: "ModeType_X_10GE",
	}
	Devm_Cards_Card_PortGroupModes_PortGroupMode_ModeType_value = map[string]int32{
		"INVALID_ENUM_VALUE_ModeType": 0,
		"ModeType_X_25GEX_10GE":       1,
		"ModeType_X_10GEX_1GE":        2,
		"ModeType_X_25GE":             3,
		"ModeType_X_10GE":             4,
	}
)

func (x Devm_Cards_Card_PortGroupModes_PortGroupMode_ModeType) Enum() *Devm_Cards_Card_PortGroupModes_PortGroupMode_ModeType {
	p := new(Devm_Cards_Card_PortGroupModes_PortGroupMode_ModeType)
	*p = x
	return p
}

func (x Devm_Cards_Card_PortGroupModes_PortGroupMode_ModeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Cards_Card_PortGroupModes_PortGroupMode_ModeType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[141].Descriptor()
}

func (Devm_Cards_Card_PortGroupModes_PortGroupMode_ModeType) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[141]
}

func (x Devm_Cards_Card_PortGroupModes_PortGroupMode_ModeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Cards_Card_PortGroupModes_PortGroupMode_ModeType.Descriptor instead.
func (Devm_Cards_Card_PortGroupModes_PortGroupMode_ModeType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 8, 0, 3, 0, 0}
}

type Devm_Cards_Card_QueuePriority_QueuePriEnable int32

const (
	Devm_Cards_Card_QueuePriority_QueuePriEnable_DISABLE Devm_Cards_Card_QueuePriority_QueuePriEnable = 0
	Devm_Cards_Card_QueuePriority_QueuePriEnable_ENABLE  Devm_Cards_Card_QueuePriority_QueuePriEnable = 1
)

// Enum value maps for Devm_Cards_Card_QueuePriority_QueuePriEnable.
var (
	Devm_Cards_Card_QueuePriority_QueuePriEnable_name = map[int32]string{
		0: "QueuePriEnable_DISABLE",
		1: "QueuePriEnable_ENABLE",
	}
	Devm_Cards_Card_QueuePriority_QueuePriEnable_value = map[string]int32{
		"QueuePriEnable_DISABLE": 0,
		"QueuePriEnable_ENABLE":  1,
	}
)

func (x Devm_Cards_Card_QueuePriority_QueuePriEnable) Enum() *Devm_Cards_Card_QueuePriority_QueuePriEnable {
	p := new(Devm_Cards_Card_QueuePriority_QueuePriEnable)
	*p = x
	return p
}

func (x Devm_Cards_Card_QueuePriority_QueuePriEnable) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Cards_Card_QueuePriority_QueuePriEnable) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[142].Descriptor()
}

func (Devm_Cards_Card_QueuePriority_QueuePriEnable) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[142]
}

func (x Devm_Cards_Card_QueuePriority_QueuePriEnable) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Cards_Card_QueuePriority_QueuePriEnable.Descriptor instead.
func (Devm_Cards_Card_QueuePriority_QueuePriEnable) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 8, 0, 4, 0}
}

type Devm_Cards_Card_FrameFormat_FrameFormat5 int32

const (
	Devm_Cards_Card_FrameFormat_FrameFormat5_SDH   Devm_Cards_Card_FrameFormat_FrameFormat5 = 0
	Devm_Cards_Card_FrameFormat_FrameFormat5_SONET Devm_Cards_Card_FrameFormat_FrameFormat5 = 1
)

// Enum value maps for Devm_Cards_Card_FrameFormat_FrameFormat5.
var (
	Devm_Cards_Card_FrameFormat_FrameFormat5_name = map[int32]string{
		0: "FrameFormat5_SDH",
		1: "FrameFormat5_SONET",
	}
	Devm_Cards_Card_FrameFormat_FrameFormat5_value = map[string]int32{
		"FrameFormat5_SDH":   0,
		"FrameFormat5_SONET": 1,
	}
)

func (x Devm_Cards_Card_FrameFormat_FrameFormat5) Enum() *Devm_Cards_Card_FrameFormat_FrameFormat5 {
	p := new(Devm_Cards_Card_FrameFormat_FrameFormat5)
	*p = x
	return p
}

func (x Devm_Cards_Card_FrameFormat_FrameFormat5) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Cards_Card_FrameFormat_FrameFormat5) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[143].Descriptor()
}

func (Devm_Cards_Card_FrameFormat_FrameFormat5) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[143]
}

func (x Devm_Cards_Card_FrameFormat_FrameFormat5) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Cards_Card_FrameFormat_FrameFormat5.Descriptor instead.
func (Devm_Cards_Card_FrameFormat_FrameFormat5) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 8, 0, 5, 0}
}

type Devm_Cards_Card_ProcessMode_ShieldMode int32

const (
	Devm_Cards_Card_ProcessMode_ShieldMode_DISABLED Devm_Cards_Card_ProcessMode_ShieldMode = 0
	Devm_Cards_Card_ProcessMode_ShieldMode_ENABLED  Devm_Cards_Card_ProcessMode_ShieldMode = 1
)

// Enum value maps for Devm_Cards_Card_ProcessMode_ShieldMode.
var (
	Devm_Cards_Card_ProcessMode_ShieldMode_name = map[int32]string{
		0: "ShieldMode_DISABLED",
		1: "ShieldMode_ENABLED",
	}
	Devm_Cards_Card_ProcessMode_ShieldMode_value = map[string]int32{
		"ShieldMode_DISABLED": 0,
		"ShieldMode_ENABLED":  1,
	}
)

func (x Devm_Cards_Card_ProcessMode_ShieldMode) Enum() *Devm_Cards_Card_ProcessMode_ShieldMode {
	p := new(Devm_Cards_Card_ProcessMode_ShieldMode)
	*p = x
	return p
}

func (x Devm_Cards_Card_ProcessMode_ShieldMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Cards_Card_ProcessMode_ShieldMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[144].Descriptor()
}

func (Devm_Cards_Card_ProcessMode_ShieldMode) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[144]
}

func (x Devm_Cards_Card_ProcessMode_ShieldMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Cards_Card_ProcessMode_ShieldMode.Descriptor instead.
func (Devm_Cards_Card_ProcessMode_ShieldMode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 8, 0, 6, 0}
}

type Devm_Cards_Card_ProcessMode_FaultProcessModeStatus int32

const (
	Devm_Cards_Card_ProcessMode_FaultProcessModeStatus_RESET   Devm_Cards_Card_ProcessMode_FaultProcessModeStatus = 0
	Devm_Cards_Card_ProcessMode_FaultProcessModeStatus_ISOLATE Devm_Cards_Card_ProcessMode_FaultProcessModeStatus = 1
)

// Enum value maps for Devm_Cards_Card_ProcessMode_FaultProcessModeStatus.
var (
	Devm_Cards_Card_ProcessMode_FaultProcessModeStatus_name = map[int32]string{
		0: "FaultProcessModeStatus_RESET",
		1: "FaultProcessModeStatus_ISOLATE",
	}
	Devm_Cards_Card_ProcessMode_FaultProcessModeStatus_value = map[string]int32{
		"FaultProcessModeStatus_RESET":   0,
		"FaultProcessModeStatus_ISOLATE": 1,
	}
)

func (x Devm_Cards_Card_ProcessMode_FaultProcessModeStatus) Enum() *Devm_Cards_Card_ProcessMode_FaultProcessModeStatus {
	p := new(Devm_Cards_Card_ProcessMode_FaultProcessModeStatus)
	*p = x
	return p
}

func (x Devm_Cards_Card_ProcessMode_FaultProcessModeStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Cards_Card_ProcessMode_FaultProcessModeStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[145].Descriptor()
}

func (Devm_Cards_Card_ProcessMode_FaultProcessModeStatus) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[145]
}

func (x Devm_Cards_Card_ProcessMode_FaultProcessModeStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Cards_Card_ProcessMode_FaultProcessModeStatus.Descriptor instead.
func (Devm_Cards_Card_ProcessMode_FaultProcessModeStatus) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 8, 0, 6, 1}
}

type Devm_Cards_Card_ProcessMode_ProcessMode5 int32

const (
	Devm_Cards_Card_ProcessMode_ProcessMode5_RESET   Devm_Cards_Card_ProcessMode_ProcessMode5 = 0
	Devm_Cards_Card_ProcessMode_ProcessMode5_ISOLATE Devm_Cards_Card_ProcessMode_ProcessMode5 = 1
)

// Enum value maps for Devm_Cards_Card_ProcessMode_ProcessMode5.
var (
	Devm_Cards_Card_ProcessMode_ProcessMode5_name = map[int32]string{
		0: "ProcessMode5_RESET",
		1: "ProcessMode5_ISOLATE",
	}
	Devm_Cards_Card_ProcessMode_ProcessMode5_value = map[string]int32{
		"ProcessMode5_RESET":   0,
		"ProcessMode5_ISOLATE": 1,
	}
)

func (x Devm_Cards_Card_ProcessMode_ProcessMode5) Enum() *Devm_Cards_Card_ProcessMode_ProcessMode5 {
	p := new(Devm_Cards_Card_ProcessMode_ProcessMode5)
	*p = x
	return p
}

func (x Devm_Cards_Card_ProcessMode_ProcessMode5) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Cards_Card_ProcessMode_ProcessMode5) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[146].Descriptor()
}

func (Devm_Cards_Card_ProcessMode_ProcessMode5) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[146]
}

func (x Devm_Cards_Card_ProcessMode_ProcessMode5) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Cards_Card_ProcessMode_ProcessMode5.Descriptor instead.
func (Devm_Cards_Card_ProcessMode_ProcessMode5) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 8, 0, 6, 2}
}

type Devm_Cards_Card_EmSet_SingleMode int32

const (
	Devm_Cards_Card_EmSet_SingleMode_BELLX_1 Devm_Cards_Card_EmSet_SingleMode = 0
	Devm_Cards_Card_EmSet_SingleMode_BELLX_2 Devm_Cards_Card_EmSet_SingleMode = 1
	Devm_Cards_Card_EmSet_SingleMode_BELLX_3 Devm_Cards_Card_EmSet_SingleMode = 2
	Devm_Cards_Card_EmSet_SingleMode_BELLX_4 Devm_Cards_Card_EmSet_SingleMode = 3
	Devm_Cards_Card_EmSet_SingleMode_BELLX_5 Devm_Cards_Card_EmSet_SingleMode = 4
)

// Enum value maps for Devm_Cards_Card_EmSet_SingleMode.
var (
	Devm_Cards_Card_EmSet_SingleMode_name = map[int32]string{
		0: "SingleMode_BELLX_1",
		1: "SingleMode_BELLX_2",
		2: "SingleMode_BELLX_3",
		3: "SingleMode_BELLX_4",
		4: "SingleMode_BELLX_5",
	}
	Devm_Cards_Card_EmSet_SingleMode_value = map[string]int32{
		"SingleMode_BELLX_1": 0,
		"SingleMode_BELLX_2": 1,
		"SingleMode_BELLX_3": 2,
		"SingleMode_BELLX_4": 3,
		"SingleMode_BELLX_5": 4,
	}
)

func (x Devm_Cards_Card_EmSet_SingleMode) Enum() *Devm_Cards_Card_EmSet_SingleMode {
	p := new(Devm_Cards_Card_EmSet_SingleMode)
	*p = x
	return p
}

func (x Devm_Cards_Card_EmSet_SingleMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Cards_Card_EmSet_SingleMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[147].Descriptor()
}

func (Devm_Cards_Card_EmSet_SingleMode) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[147]
}

func (x Devm_Cards_Card_EmSet_SingleMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Cards_Card_EmSet_SingleMode.Descriptor instead.
func (Devm_Cards_Card_EmSet_SingleMode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 8, 0, 7, 0}
}

type Devm_Cards_Card_EmSet_UserlineMode int32

const (
	Devm_Cards_Card_EmSet_UserlineMode_X_2WIRE Devm_Cards_Card_EmSet_UserlineMode = 0
	Devm_Cards_Card_EmSet_UserlineMode_X_4WIRE Devm_Cards_Card_EmSet_UserlineMode = 1
)

// Enum value maps for Devm_Cards_Card_EmSet_UserlineMode.
var (
	Devm_Cards_Card_EmSet_UserlineMode_name = map[int32]string{
		0: "UserlineMode_X_2WIRE",
		1: "UserlineMode_X_4WIRE",
	}
	Devm_Cards_Card_EmSet_UserlineMode_value = map[string]int32{
		"UserlineMode_X_2WIRE": 0,
		"UserlineMode_X_4WIRE": 1,
	}
)

func (x Devm_Cards_Card_EmSet_UserlineMode) Enum() *Devm_Cards_Card_EmSet_UserlineMode {
	p := new(Devm_Cards_Card_EmSet_UserlineMode)
	*p = x
	return p
}

func (x Devm_Cards_Card_EmSet_UserlineMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Cards_Card_EmSet_UserlineMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[148].Descriptor()
}

func (Devm_Cards_Card_EmSet_UserlineMode) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[148]
}

func (x Devm_Cards_Card_EmSet_UserlineMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Cards_Card_EmSet_UserlineMode.Descriptor instead.
func (Devm_Cards_Card_EmSet_UserlineMode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 8, 0, 7, 1}
}

type Devm_Cards_Card_ServiceSwitch_ServiceSwitchMode int32

const (
	Devm_Cards_Card_ServiceSwitch_ServiceSwitchMode_P2MP        Devm_Cards_Card_ServiceSwitch_ServiceSwitchMode = 0
	Devm_Cards_Card_ServiceSwitch_ServiceSwitchMode_TIMEX_DELAY Devm_Cards_Card_ServiceSwitch_ServiceSwitchMode = 1
	Devm_Cards_Card_ServiceSwitch_ServiceSwitchMode_CAS         Devm_Cards_Card_ServiceSwitch_ServiceSwitchMode = 2
)

// Enum value maps for Devm_Cards_Card_ServiceSwitch_ServiceSwitchMode.
var (
	Devm_Cards_Card_ServiceSwitch_ServiceSwitchMode_name = map[int32]string{
		0: "ServiceSwitchMode_P2MP",
		1: "ServiceSwitchMode_TIMEX_DELAY",
		2: "ServiceSwitchMode_CAS",
	}
	Devm_Cards_Card_ServiceSwitch_ServiceSwitchMode_value = map[string]int32{
		"ServiceSwitchMode_P2MP":        0,
		"ServiceSwitchMode_TIMEX_DELAY": 1,
		"ServiceSwitchMode_CAS":         2,
	}
)

func (x Devm_Cards_Card_ServiceSwitch_ServiceSwitchMode) Enum() *Devm_Cards_Card_ServiceSwitch_ServiceSwitchMode {
	p := new(Devm_Cards_Card_ServiceSwitch_ServiceSwitchMode)
	*p = x
	return p
}

func (x Devm_Cards_Card_ServiceSwitch_ServiceSwitchMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Cards_Card_ServiceSwitch_ServiceSwitchMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[149].Descriptor()
}

func (Devm_Cards_Card_ServiceSwitch_ServiceSwitchMode) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[149]
}

func (x Devm_Cards_Card_ServiceSwitch_ServiceSwitchMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Cards_Card_ServiceSwitch_ServiceSwitchMode.Descriptor instead.
func (Devm_Cards_Card_ServiceSwitch_ServiceSwitchMode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 8, 0, 8, 0}
}

type Devm_Ports_Port_AdminState int32

const (
	Devm_Ports_Port_AdminState_INACTIVE     Devm_Ports_Port_AdminState = 0
	Devm_Ports_Port_AdminState_ACTIVE       Devm_Ports_Port_AdminState = 1
	Devm_Ports_Port_AdminState_NOTSUPPORTED Devm_Ports_Port_AdminState = 2
)

// Enum value maps for Devm_Ports_Port_AdminState.
var (
	Devm_Ports_Port_AdminState_name = map[int32]string{
		0: "AdminState_INACTIVE",
		1: "AdminState_ACTIVE",
		2: "AdminState_NOTSUPPORTED",
	}
	Devm_Ports_Port_AdminState_value = map[string]int32{
		"AdminState_INACTIVE":     0,
		"AdminState_ACTIVE":       1,
		"AdminState_NOTSUPPORTED": 2,
	}
)

func (x Devm_Ports_Port_AdminState) Enum() *Devm_Ports_Port_AdminState {
	p := new(Devm_Ports_Port_AdminState)
	*p = x
	return p
}

func (x Devm_Ports_Port_AdminState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_AdminState) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[150].Descriptor()
}

func (Devm_Ports_Port_AdminState) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[150]
}

func (x Devm_Ports_Port_AdminState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_AdminState.Descriptor instead.
func (Devm_Ports_Port_AdminState) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 0}
}

type Devm_Ports_Port_Type int32

const (
	Devm_Ports_Port_Type_UNKNOWN     Devm_Ports_Port_Type = 0
	Devm_Ports_Port_Type_ETH         Devm_Ports_Port_Type = 1
	Devm_Ports_Port_Type_POS         Devm_Ports_Port_Type = 2
	Devm_Ports_Port_Type_CPOS        Devm_Ports_Port_Type = 3
	Devm_Ports_Port_Type_E1          Devm_Ports_Port_Type = 4
	Devm_Ports_Port_Type_GE          Devm_Ports_Port_Type = 5
	Devm_Ports_Port_Type_X_10GE      Devm_Ports_Port_Type = 6
	Devm_Ports_Port_Type_GF          Devm_Ports_Port_Type = 7
	Devm_Ports_Port_Type_X_10GF      Devm_Ports_Port_Type = 8
	Devm_Ports_Port_Type_X_40GF      Devm_Ports_Port_Type = 9
	Devm_Ports_Port_Type_X_10GFCOM   Devm_Ports_Port_Type = 10
	Devm_Ports_Port_Type_X_40GFSPLIT Devm_Ports_Port_Type = 11
	Devm_Ports_Port_Type_OTN         Devm_Ports_Port_Type = 12
	Devm_Ports_Port_Type_X_100GF     Devm_Ports_Port_Type = 13
	Devm_Ports_Port_Type_X_400GF     Devm_Ports_Port_Type = 14
	Devm_Ports_Port_Type_X_25GF      Devm_Ports_Port_Type = 15
	Devm_Ports_Port_Type_X_50GF      Devm_Ports_Port_Type = 16
	Devm_Ports_Port_Type_X_200GF     Devm_Ports_Port_Type = 17
	Devm_Ports_Port_Type_CELLULAR    Devm_Ports_Port_Type = 18
	Devm_Ports_Port_Type_FE          Devm_Ports_Port_Type = 19
	Devm_Ports_Port_Type_FLEXE       Devm_Ports_Port_Type = 20
	Devm_Ports_Port_Type_VSR         Devm_Ports_Port_Type = 21
)

// Enum value maps for Devm_Ports_Port_Type.
var (
	Devm_Ports_Port_Type_name = map[int32]string{
		0:  "Type_UNKNOWN",
		1:  "Type_ETH",
		2:  "Type_POS",
		3:  "Type_CPOS",
		4:  "Type_E1",
		5:  "Type_GE",
		6:  "Type_X_10GE",
		7:  "Type_GF",
		8:  "Type_X_10GF",
		9:  "Type_X_40GF",
		10: "Type_X_10GFCOM",
		11: "Type_X_40GFSPLIT",
		12: "Type_OTN",
		13: "Type_X_100GF",
		14: "Type_X_400GF",
		15: "Type_X_25GF",
		16: "Type_X_50GF",
		17: "Type_X_200GF",
		18: "Type_CELLULAR",
		19: "Type_FE",
		20: "Type_FLEXE",
		21: "Type_VSR",
	}
	Devm_Ports_Port_Type_value = map[string]int32{
		"Type_UNKNOWN":     0,
		"Type_ETH":         1,
		"Type_POS":         2,
		"Type_CPOS":        3,
		"Type_E1":          4,
		"Type_GE":          5,
		"Type_X_10GE":      6,
		"Type_GF":          7,
		"Type_X_10GF":      8,
		"Type_X_40GF":      9,
		"Type_X_10GFCOM":   10,
		"Type_X_40GFSPLIT": 11,
		"Type_OTN":         12,
		"Type_X_100GF":     13,
		"Type_X_400GF":     14,
		"Type_X_25GF":      15,
		"Type_X_50GF":      16,
		"Type_X_200GF":     17,
		"Type_CELLULAR":    18,
		"Type_FE":          19,
		"Type_FLEXE":       20,
		"Type_VSR":         21,
	}
)

func (x Devm_Ports_Port_Type) Enum() *Devm_Ports_Port_Type {
	p := new(Devm_Ports_Port_Type)
	*p = x
	return p
}

func (x Devm_Ports_Port_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[151].Descriptor()
}

func (Devm_Ports_Port_Type) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[151]
}

func (x Devm_Ports_Port_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_Type.Descriptor instead.
func (Devm_Ports_Port_Type) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 1}
}

type Devm_Ports_Port_HardType int32

const (
	Devm_Ports_Port_HardType_UNKNOWN          Devm_Ports_Port_HardType = 0
	Devm_Ports_Port_HardType_ETHX_MGEX_PORT   Devm_Ports_Port_HardType = 1
	Devm_Ports_Port_HardType_ETHX_10GFX_PORT  Devm_Ports_Port_HardType = 2
	Devm_Ports_Port_HardType_ETHX_25GFX_PORT  Devm_Ports_Port_HardType = 3
	Devm_Ports_Port_HardType_ETHX_40GFX_PORT  Devm_Ports_Port_HardType = 4
	Devm_Ports_Port_HardType_ETHX_50GFX_PORT  Devm_Ports_Port_HardType = 5
	Devm_Ports_Port_HardType_ETHX_100GFX_PORT Devm_Ports_Port_HardType = 6
	Devm_Ports_Port_HardType_ETHX_200GFX_PORT Devm_Ports_Port_HardType = 7
	Devm_Ports_Port_HardType_ETHX_400GFX_PORT Devm_Ports_Port_HardType = 8
	Devm_Ports_Port_HardType_ETHX_GEX_PORT    Devm_Ports_Port_HardType = 9
	Devm_Ports_Port_HardType_ETHX_GFX_PORT    Devm_Ports_Port_HardType = 10
	Devm_Ports_Port_HardType_CELLULARX_PORT   Devm_Ports_Port_HardType = 11
)

// Enum value maps for Devm_Ports_Port_HardType.
var (
	Devm_Ports_Port_HardType_name = map[int32]string{
		0:  "HardType_UNKNOWN",
		1:  "HardType_ETHX_MGEX_PORT",
		2:  "HardType_ETHX_10GFX_PORT",
		3:  "HardType_ETHX_25GFX_PORT",
		4:  "HardType_ETHX_40GFX_PORT",
		5:  "HardType_ETHX_50GFX_PORT",
		6:  "HardType_ETHX_100GFX_PORT",
		7:  "HardType_ETHX_200GFX_PORT",
		8:  "HardType_ETHX_400GFX_PORT",
		9:  "HardType_ETHX_GEX_PORT",
		10: "HardType_ETHX_GFX_PORT",
		11: "HardType_CELLULARX_PORT",
	}
	Devm_Ports_Port_HardType_value = map[string]int32{
		"HardType_UNKNOWN":          0,
		"HardType_ETHX_MGEX_PORT":   1,
		"HardType_ETHX_10GFX_PORT":  2,
		"HardType_ETHX_25GFX_PORT":  3,
		"HardType_ETHX_40GFX_PORT":  4,
		"HardType_ETHX_50GFX_PORT":  5,
		"HardType_ETHX_100GFX_PORT": 6,
		"HardType_ETHX_200GFX_PORT": 7,
		"HardType_ETHX_400GFX_PORT": 8,
		"HardType_ETHX_GEX_PORT":    9,
		"HardType_ETHX_GFX_PORT":    10,
		"HardType_CELLULARX_PORT":   11,
	}
)

func (x Devm_Ports_Port_HardType) Enum() *Devm_Ports_Port_HardType {
	p := new(Devm_Ports_Port_HardType)
	*p = x
	return p
}

func (x Devm_Ports_Port_HardType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_HardType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[152].Descriptor()
}

func (Devm_Ports_Port_HardType) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[152]
}

func (x Devm_Ports_Port_HardType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_HardType.Descriptor instead.
func (Devm_Ports_Port_HardType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 2}
}

type Devm_Ports_Port_LoopbackMode int32

const (
	Devm_Ports_Port_LoopbackMode_NOLOOPBACK     Devm_Ports_Port_LoopbackMode = 0
	Devm_Ports_Port_LoopbackMode_LOCALLOOPBACK  Devm_Ports_Port_LoopbackMode = 1
	Devm_Ports_Port_LoopbackMode_REMOTELOOPBACK Devm_Ports_Port_LoopbackMode = 2
	Devm_Ports_Port_LoopbackMode_MACLOOPBACK    Devm_Ports_Port_LoopbackMode = 3
)

// Enum value maps for Devm_Ports_Port_LoopbackMode.
var (
	Devm_Ports_Port_LoopbackMode_name = map[int32]string{
		0: "LoopbackMode_NOLOOPBACK",
		1: "LoopbackMode_LOCALLOOPBACK",
		2: "LoopbackMode_REMOTELOOPBACK",
		3: "LoopbackMode_MACLOOPBACK",
	}
	Devm_Ports_Port_LoopbackMode_value = map[string]int32{
		"LoopbackMode_NOLOOPBACK":     0,
		"LoopbackMode_LOCALLOOPBACK":  1,
		"LoopbackMode_REMOTELOOPBACK": 2,
		"LoopbackMode_MACLOOPBACK":    3,
	}
)

func (x Devm_Ports_Port_LoopbackMode) Enum() *Devm_Ports_Port_LoopbackMode {
	p := new(Devm_Ports_Port_LoopbackMode)
	*p = x
	return p
}

func (x Devm_Ports_Port_LoopbackMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_LoopbackMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[153].Descriptor()
}

func (Devm_Ports_Port_LoopbackMode) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[153]
}

func (x Devm_Ports_Port_LoopbackMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_LoopbackMode.Descriptor instead.
func (Devm_Ports_Port_LoopbackMode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 3}
}

type Devm_Ports_Port_MediumType int32

const (
	Devm_Ports_Port_MediumType_NOTSUPPORTED Devm_Ports_Port_MediumType = 0
	Devm_Ports_Port_MediumType_COPPER       Devm_Ports_Port_MediumType = 1
	Devm_Ports_Port_MediumType_FIBER        Devm_Ports_Port_MediumType = 2
)

// Enum value maps for Devm_Ports_Port_MediumType.
var (
	Devm_Ports_Port_MediumType_name = map[int32]string{
		0: "MediumType_NOTSUPPORTED",
		1: "MediumType_COPPER",
		2: "MediumType_FIBER",
	}
	Devm_Ports_Port_MediumType_value = map[string]int32{
		"MediumType_NOTSUPPORTED": 0,
		"MediumType_COPPER":       1,
		"MediumType_FIBER":        2,
	}
)

func (x Devm_Ports_Port_MediumType) Enum() *Devm_Ports_Port_MediumType {
	p := new(Devm_Ports_Port_MediumType)
	*p = x
	return p
}

func (x Devm_Ports_Port_MediumType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_MediumType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[154].Descriptor()
}

func (Devm_Ports_Port_MediumType) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[154]
}

func (x Devm_Ports_Port_MediumType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_MediumType.Descriptor instead.
func (Devm_Ports_Port_MediumType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 4}
}

type Devm_Ports_Port_Ethernet_Speed int32

const (
	Devm_Ports_Port_Ethernet_Speed_X_10M    Devm_Ports_Port_Ethernet_Speed = 0
	Devm_Ports_Port_Ethernet_Speed_X_100M   Devm_Ports_Port_Ethernet_Speed = 1
	Devm_Ports_Port_Ethernet_Speed_X_1000M  Devm_Ports_Port_Ethernet_Speed = 2
	Devm_Ports_Port_Ethernet_Speed_X_2500M  Devm_Ports_Port_Ethernet_Speed = 5
	Devm_Ports_Port_Ethernet_Speed_X_10G    Devm_Ports_Port_Ethernet_Speed = 6
	Devm_Ports_Port_Ethernet_Speed_X_40G    Devm_Ports_Port_Ethernet_Speed = 7
	Devm_Ports_Port_Ethernet_Speed_X_100G   Devm_Ports_Port_Ethernet_Speed = 8
	Devm_Ports_Port_Ethernet_Speed_AUTO     Devm_Ports_Port_Ethernet_Speed = 9
	Devm_Ports_Port_Ethernet_Speed_X_1G     Devm_Ports_Port_Ethernet_Speed = 10
	Devm_Ports_Port_Ethernet_Speed_X_2G     Devm_Ports_Port_Ethernet_Speed = 11
	Devm_Ports_Port_Ethernet_Speed_X_3G     Devm_Ports_Port_Ethernet_Speed = 12
	Devm_Ports_Port_Ethernet_Speed_X_4G     Devm_Ports_Port_Ethernet_Speed = 13
	Devm_Ports_Port_Ethernet_Speed_X_1X_25G Devm_Ports_Port_Ethernet_Speed = 14
	Devm_Ports_Port_Ethernet_Speed_X_2X_5G  Devm_Ports_Port_Ethernet_Speed = 15
	Devm_Ports_Port_Ethernet_Speed_X_3X_75G Devm_Ports_Port_Ethernet_Speed = 16
	Devm_Ports_Port_Ethernet_Speed_X_5G     Devm_Ports_Port_Ethernet_Speed = 17
	Devm_Ports_Port_Ethernet_Speed_X_15G    Devm_Ports_Port_Ethernet_Speed = 18
	Devm_Ports_Port_Ethernet_Speed_X_20G    Devm_Ports_Port_Ethernet_Speed = 19
	Devm_Ports_Port_Ethernet_Speed_X_25G    Devm_Ports_Port_Ethernet_Speed = 20
	Devm_Ports_Port_Ethernet_Speed_X_30G    Devm_Ports_Port_Ethernet_Speed = 21
	Devm_Ports_Port_Ethernet_Speed_X_35G    Devm_Ports_Port_Ethernet_Speed = 22
	Devm_Ports_Port_Ethernet_Speed_X_45G    Devm_Ports_Port_Ethernet_Speed = 24
	Devm_Ports_Port_Ethernet_Speed_X_50G    Devm_Ports_Port_Ethernet_Speed = 25
	Devm_Ports_Port_Ethernet_Speed_X_55G    Devm_Ports_Port_Ethernet_Speed = 26
	Devm_Ports_Port_Ethernet_Speed_X_60G    Devm_Ports_Port_Ethernet_Speed = 27
	Devm_Ports_Port_Ethernet_Speed_X_65G    Devm_Ports_Port_Ethernet_Speed = 28
	Devm_Ports_Port_Ethernet_Speed_X_70G    Devm_Ports_Port_Ethernet_Speed = 29
	Devm_Ports_Port_Ethernet_Speed_X_75G    Devm_Ports_Port_Ethernet_Speed = 30
	Devm_Ports_Port_Ethernet_Speed_X_80G    Devm_Ports_Port_Ethernet_Speed = 31
	Devm_Ports_Port_Ethernet_Speed_X_85G    Devm_Ports_Port_Ethernet_Speed = 32
	Devm_Ports_Port_Ethernet_Speed_X_90G    Devm_Ports_Port_Ethernet_Speed = 33
	Devm_Ports_Port_Ethernet_Speed_X_95G    Devm_Ports_Port_Ethernet_Speed = 34
	Devm_Ports_Port_Ethernet_Speed_X_0G     Devm_Ports_Port_Ethernet_Speed = 35
	Devm_Ports_Port_Ethernet_Speed_X_400G   Devm_Ports_Port_Ethernet_Speed = 36
	Devm_Ports_Port_Ethernet_Speed_X_200G   Devm_Ports_Port_Ethernet_Speed = 37
)

// Enum value maps for Devm_Ports_Port_Ethernet_Speed.
var (
	Devm_Ports_Port_Ethernet_Speed_name = map[int32]string{
		0:  "Speed_X_10M",
		1:  "Speed_X_100M",
		2:  "Speed_X_1000M",
		5:  "Speed_X_2500M",
		6:  "Speed_X_10G",
		7:  "Speed_X_40G",
		8:  "Speed_X_100G",
		9:  "Speed_AUTO",
		10: "Speed_X_1G",
		11: "Speed_X_2G",
		12: "Speed_X_3G",
		13: "Speed_X_4G",
		14: "Speed_X_1X_25G",
		15: "Speed_X_2X_5G",
		16: "Speed_X_3X_75G",
		17: "Speed_X_5G",
		18: "Speed_X_15G",
		19: "Speed_X_20G",
		20: "Speed_X_25G",
		21: "Speed_X_30G",
		22: "Speed_X_35G",
		24: "Speed_X_45G",
		25: "Speed_X_50G",
		26: "Speed_X_55G",
		27: "Speed_X_60G",
		28: "Speed_X_65G",
		29: "Speed_X_70G",
		30: "Speed_X_75G",
		31: "Speed_X_80G",
		32: "Speed_X_85G",
		33: "Speed_X_90G",
		34: "Speed_X_95G",
		35: "Speed_X_0G",
		36: "Speed_X_400G",
		37: "Speed_X_200G",
	}
	Devm_Ports_Port_Ethernet_Speed_value = map[string]int32{
		"Speed_X_10M":    0,
		"Speed_X_100M":   1,
		"Speed_X_1000M":  2,
		"Speed_X_2500M":  5,
		"Speed_X_10G":    6,
		"Speed_X_40G":    7,
		"Speed_X_100G":   8,
		"Speed_AUTO":     9,
		"Speed_X_1G":     10,
		"Speed_X_2G":     11,
		"Speed_X_3G":     12,
		"Speed_X_4G":     13,
		"Speed_X_1X_25G": 14,
		"Speed_X_2X_5G":  15,
		"Speed_X_3X_75G": 16,
		"Speed_X_5G":     17,
		"Speed_X_15G":    18,
		"Speed_X_20G":    19,
		"Speed_X_25G":    20,
		"Speed_X_30G":    21,
		"Speed_X_35G":    22,
		"Speed_X_45G":    24,
		"Speed_X_50G":    25,
		"Speed_X_55G":    26,
		"Speed_X_60G":    27,
		"Speed_X_65G":    28,
		"Speed_X_70G":    29,
		"Speed_X_75G":    30,
		"Speed_X_80G":    31,
		"Speed_X_85G":    32,
		"Speed_X_90G":    33,
		"Speed_X_95G":    34,
		"Speed_X_0G":     35,
		"Speed_X_400G":   36,
		"Speed_X_200G":   37,
	}
)

func (x Devm_Ports_Port_Ethernet_Speed) Enum() *Devm_Ports_Port_Ethernet_Speed {
	p := new(Devm_Ports_Port_Ethernet_Speed)
	*p = x
	return p
}

func (x Devm_Ports_Port_Ethernet_Speed) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_Ethernet_Speed) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[155].Descriptor()
}

func (Devm_Ports_Port_Ethernet_Speed) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[155]
}

func (x Devm_Ports_Port_Ethernet_Speed) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_Ethernet_Speed.Descriptor instead.
func (Devm_Ports_Port_Ethernet_Speed) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 0, 0}
}

type Devm_Ports_Port_Ethernet_Duplex int32

const (
	Devm_Ports_Port_Ethernet_Duplex_AUTO Devm_Ports_Port_Ethernet_Duplex = 0
	Devm_Ports_Port_Ethernet_Duplex_HALF Devm_Ports_Port_Ethernet_Duplex = 1
	Devm_Ports_Port_Ethernet_Duplex_FULL Devm_Ports_Port_Ethernet_Duplex = 2
)

// Enum value maps for Devm_Ports_Port_Ethernet_Duplex.
var (
	Devm_Ports_Port_Ethernet_Duplex_name = map[int32]string{
		0: "Duplex_AUTO",
		1: "Duplex_HALF",
		2: "Duplex_FULL",
	}
	Devm_Ports_Port_Ethernet_Duplex_value = map[string]int32{
		"Duplex_AUTO": 0,
		"Duplex_HALF": 1,
		"Duplex_FULL": 2,
	}
)

func (x Devm_Ports_Port_Ethernet_Duplex) Enum() *Devm_Ports_Port_Ethernet_Duplex {
	p := new(Devm_Ports_Port_Ethernet_Duplex)
	*p = x
	return p
}

func (x Devm_Ports_Port_Ethernet_Duplex) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_Ethernet_Duplex) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[156].Descriptor()
}

func (Devm_Ports_Port_Ethernet_Duplex) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[156]
}

func (x Devm_Ports_Port_Ethernet_Duplex) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_Ethernet_Duplex.Descriptor instead.
func (Devm_Ports_Port_Ethernet_Duplex) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 0, 1}
}

type Devm_Ports_Port_Ethernet_Negotiation int32

const (
	Devm_Ports_Port_Ethernet_Negotiation_DISABLED Devm_Ports_Port_Ethernet_Negotiation = 0
	Devm_Ports_Port_Ethernet_Negotiation_ENABLED  Devm_Ports_Port_Ethernet_Negotiation = 1
)

// Enum value maps for Devm_Ports_Port_Ethernet_Negotiation.
var (
	Devm_Ports_Port_Ethernet_Negotiation_name = map[int32]string{
		0: "Negotiation_DISABLED",
		1: "Negotiation_ENABLED",
	}
	Devm_Ports_Port_Ethernet_Negotiation_value = map[string]int32{
		"Negotiation_DISABLED": 0,
		"Negotiation_ENABLED":  1,
	}
)

func (x Devm_Ports_Port_Ethernet_Negotiation) Enum() *Devm_Ports_Port_Ethernet_Negotiation {
	p := new(Devm_Ports_Port_Ethernet_Negotiation)
	*p = x
	return p
}

func (x Devm_Ports_Port_Ethernet_Negotiation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_Ethernet_Negotiation) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[157].Descriptor()
}

func (Devm_Ports_Port_Ethernet_Negotiation) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[157]
}

func (x Devm_Ports_Port_Ethernet_Negotiation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_Ethernet_Negotiation.Descriptor instead.
func (Devm_Ports_Port_Ethernet_Negotiation) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 0, 2}
}

type Devm_Ports_Port_Ethernet_NegotiationMode int32

const (
	Devm_Ports_Port_Ethernet_NegotiationMode_SLAVE  Devm_Ports_Port_Ethernet_NegotiationMode = 0
	Devm_Ports_Port_Ethernet_NegotiationMode_NA     Devm_Ports_Port_Ethernet_NegotiationMode = 1
	Devm_Ports_Port_Ethernet_NegotiationMode_AUTO   Devm_Ports_Port_Ethernet_NegotiationMode = 2
	Devm_Ports_Port_Ethernet_NegotiationMode_MASTER Devm_Ports_Port_Ethernet_NegotiationMode = 3
)

// Enum value maps for Devm_Ports_Port_Ethernet_NegotiationMode.
var (
	Devm_Ports_Port_Ethernet_NegotiationMode_name = map[int32]string{
		0: "NegotiationMode_SLAVE",
		1: "NegotiationMode_NA",
		2: "NegotiationMode_AUTO",
		3: "NegotiationMode_MASTER",
	}
	Devm_Ports_Port_Ethernet_NegotiationMode_value = map[string]int32{
		"NegotiationMode_SLAVE":  0,
		"NegotiationMode_NA":     1,
		"NegotiationMode_AUTO":   2,
		"NegotiationMode_MASTER": 3,
	}
)

func (x Devm_Ports_Port_Ethernet_NegotiationMode) Enum() *Devm_Ports_Port_Ethernet_NegotiationMode {
	p := new(Devm_Ports_Port_Ethernet_NegotiationMode)
	*p = x
	return p
}

func (x Devm_Ports_Port_Ethernet_NegotiationMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_Ethernet_NegotiationMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[158].Descriptor()
}

func (Devm_Ports_Port_Ethernet_NegotiationMode) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[158]
}

func (x Devm_Ports_Port_Ethernet_NegotiationMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_Ethernet_NegotiationMode.Descriptor instead.
func (Devm_Ports_Port_Ethernet_NegotiationMode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 0, 3}
}

type Devm_Ports_Port_Ethernet_TransMode int32

const (
	Devm_Ports_Port_Ethernet_TransMode_LANX_MODE Devm_Ports_Port_Ethernet_TransMode = 0
	Devm_Ports_Port_Ethernet_TransMode_WANX_MODE Devm_Ports_Port_Ethernet_TransMode = 1
	Devm_Ports_Port_Ethernet_TransMode_OTNX_MODE Devm_Ports_Port_Ethernet_TransMode = 2
)

// Enum value maps for Devm_Ports_Port_Ethernet_TransMode.
var (
	Devm_Ports_Port_Ethernet_TransMode_name = map[int32]string{
		0: "TransMode_LANX_MODE",
		1: "TransMode_WANX_MODE",
		2: "TransMode_OTNX_MODE",
	}
	Devm_Ports_Port_Ethernet_TransMode_value = map[string]int32{
		"TransMode_LANX_MODE": 0,
		"TransMode_WANX_MODE": 1,
		"TransMode_OTNX_MODE": 2,
	}
)

func (x Devm_Ports_Port_Ethernet_TransMode) Enum() *Devm_Ports_Port_Ethernet_TransMode {
	p := new(Devm_Ports_Port_Ethernet_TransMode)
	*p = x
	return p
}

func (x Devm_Ports_Port_Ethernet_TransMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_Ethernet_TransMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[159].Descriptor()
}

func (Devm_Ports_Port_Ethernet_TransMode) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[159]
}

func (x Devm_Ports_Port_Ethernet_TransMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_Ethernet_TransMode.Descriptor instead.
func (Devm_Ports_Port_Ethernet_TransMode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 0, 4}
}

type Devm_Ports_Port_Ethernet_SpeedSwitchMode int32

const (
	Devm_Ports_Port_Ethernet_SpeedSwitchMode_MANUAL Devm_Ports_Port_Ethernet_SpeedSwitchMode = 0
	Devm_Ports_Port_Ethernet_SpeedSwitchMode_AUTO   Devm_Ports_Port_Ethernet_SpeedSwitchMode = 1
)

// Enum value maps for Devm_Ports_Port_Ethernet_SpeedSwitchMode.
var (
	Devm_Ports_Port_Ethernet_SpeedSwitchMode_name = map[int32]string{
		0: "SpeedSwitchMode_MANUAL",
		1: "SpeedSwitchMode_AUTO",
	}
	Devm_Ports_Port_Ethernet_SpeedSwitchMode_value = map[string]int32{
		"SpeedSwitchMode_MANUAL": 0,
		"SpeedSwitchMode_AUTO":   1,
	}
)

func (x Devm_Ports_Port_Ethernet_SpeedSwitchMode) Enum() *Devm_Ports_Port_Ethernet_SpeedSwitchMode {
	p := new(Devm_Ports_Port_Ethernet_SpeedSwitchMode)
	*p = x
	return p
}

func (x Devm_Ports_Port_Ethernet_SpeedSwitchMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_Ethernet_SpeedSwitchMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[160].Descriptor()
}

func (Devm_Ports_Port_Ethernet_SpeedSwitchMode) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[160]
}

func (x Devm_Ports_Port_Ethernet_SpeedSwitchMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_Ethernet_SpeedSwitchMode.Descriptor instead.
func (Devm_Ports_Port_Ethernet_SpeedSwitchMode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 0, 5}
}

type Devm_Ports_Port_Ethernet_BitError int32

const (
	Devm_Ports_Port_Ethernet_BitError_CRC    Devm_Ports_Port_Ethernet_BitError = 0
	Devm_Ports_Port_Ethernet_BitError_PREFEC Devm_Ports_Port_Ethernet_BitError = 1
)

// Enum value maps for Devm_Ports_Port_Ethernet_BitError.
var (
	Devm_Ports_Port_Ethernet_BitError_name = map[int32]string{
		0: "BitError_CRC",
		1: "BitError_PREFEC",
	}
	Devm_Ports_Port_Ethernet_BitError_value = map[string]int32{
		"BitError_CRC":    0,
		"BitError_PREFEC": 1,
	}
)

func (x Devm_Ports_Port_Ethernet_BitError) Enum() *Devm_Ports_Port_Ethernet_BitError {
	p := new(Devm_Ports_Port_Ethernet_BitError)
	*p = x
	return p
}

func (x Devm_Ports_Port_Ethernet_BitError) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_Ethernet_BitError) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[161].Descriptor()
}

func (Devm_Ports_Port_Ethernet_BitError) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[161]
}

func (x Devm_Ports_Port_Ethernet_BitError) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_Ethernet_BitError.Descriptor instead.
func (Devm_Ports_Port_Ethernet_BitError) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 0, 6}
}

type Devm_Ports_Port_Ethernet_TriggerTimeType int32

const (
	Devm_Ports_Port_Ethernet_TriggerTimeType_SECOND  Devm_Ports_Port_Ethernet_TriggerTimeType = 0
	Devm_Ports_Port_Ethernet_TriggerTimeType_X_200MS Devm_Ports_Port_Ethernet_TriggerTimeType = 1
)

// Enum value maps for Devm_Ports_Port_Ethernet_TriggerTimeType.
var (
	Devm_Ports_Port_Ethernet_TriggerTimeType_name = map[int32]string{
		0: "TriggerTimeType_SECOND",
		1: "TriggerTimeType_X_200MS",
	}
	Devm_Ports_Port_Ethernet_TriggerTimeType_value = map[string]int32{
		"TriggerTimeType_SECOND":  0,
		"TriggerTimeType_X_200MS": 1,
	}
)

func (x Devm_Ports_Port_Ethernet_TriggerTimeType) Enum() *Devm_Ports_Port_Ethernet_TriggerTimeType {
	p := new(Devm_Ports_Port_Ethernet_TriggerTimeType)
	*p = x
	return p
}

func (x Devm_Ports_Port_Ethernet_TriggerTimeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_Ethernet_TriggerTimeType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[162].Descriptor()
}

func (Devm_Ports_Port_Ethernet_TriggerTimeType) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[162]
}

func (x Devm_Ports_Port_Ethernet_TriggerTimeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_Ethernet_TriggerTimeType.Descriptor instead.
func (Devm_Ports_Port_Ethernet_TriggerTimeType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 0, 7}
}

type Devm_Ports_Port_Ethernet_TxPowerCfgType int32

const (
	Devm_Ports_Port_Ethernet_TxPowerCfgType_TXX_POWERX_TARGET Devm_Ports_Port_Ethernet_TxPowerCfgType = 0
	Devm_Ports_Port_Ethernet_TxPowerCfgType_ATTENUATION       Devm_Ports_Port_Ethernet_TxPowerCfgType = 1
)

// Enum value maps for Devm_Ports_Port_Ethernet_TxPowerCfgType.
var (
	Devm_Ports_Port_Ethernet_TxPowerCfgType_name = map[int32]string{
		0: "TxPowerCfgType_TXX_POWERX_TARGET",
		1: "TxPowerCfgType_ATTENUATION",
	}
	Devm_Ports_Port_Ethernet_TxPowerCfgType_value = map[string]int32{
		"TxPowerCfgType_TXX_POWERX_TARGET": 0,
		"TxPowerCfgType_ATTENUATION":       1,
	}
)

func (x Devm_Ports_Port_Ethernet_TxPowerCfgType) Enum() *Devm_Ports_Port_Ethernet_TxPowerCfgType {
	p := new(Devm_Ports_Port_Ethernet_TxPowerCfgType)
	*p = x
	return p
}

func (x Devm_Ports_Port_Ethernet_TxPowerCfgType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_Ethernet_TxPowerCfgType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[163].Descriptor()
}

func (Devm_Ports_Port_Ethernet_TxPowerCfgType) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[163]
}

func (x Devm_Ports_Port_Ethernet_TxPowerCfgType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_Ethernet_TxPowerCfgType.Descriptor instead.
func (Devm_Ports_Port_Ethernet_TxPowerCfgType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 0, 8}
}

type Devm_Ports_Port_Ethernet_FecMode int32

const (
	Devm_Ports_Port_Ethernet_FecMode_NONE           Devm_Ports_Port_Ethernet_FecMode = 0
	Devm_Ports_Port_Ethernet_FecMode_STANDARD       Devm_Ports_Port_Ethernet_FecMode = 1
	Devm_Ports_Port_Ethernet_FecMode_ENHANCED       Devm_Ports_Port_Ethernet_FecMode = 2
	Devm_Ports_Port_Ethernet_FecMode_ENHANCEDX_IX_7 Devm_Ports_Port_Ethernet_FecMode = 3
	Devm_Ports_Port_Ethernet_FecMode_ENHANCEDX_IX_4 Devm_Ports_Port_Ethernet_FecMode = 4
	Devm_Ports_Port_Ethernet_FecMode_LHAULX_SD      Devm_Ports_Port_Ethernet_FecMode = 5
	Devm_Ports_Port_Ethernet_FecMode_ENHANCEDX_PID  Devm_Ports_Port_Ethernet_FecMode = 8
	Devm_Ports_Port_Ethernet_FecMode_LHAULX_SDX_PID Devm_Ports_Port_Ethernet_FecMode = 9
)

// Enum value maps for Devm_Ports_Port_Ethernet_FecMode.
var (
	Devm_Ports_Port_Ethernet_FecMode_name = map[int32]string{
		0: "FecMode_NONE",
		1: "FecMode_STANDARD",
		2: "FecMode_ENHANCED",
		3: "FecMode_ENHANCEDX_IX_7",
		4: "FecMode_ENHANCEDX_IX_4",
		5: "FecMode_LHAULX_SD",
		8: "FecMode_ENHANCEDX_PID",
		9: "FecMode_LHAULX_SDX_PID",
	}
	Devm_Ports_Port_Ethernet_FecMode_value = map[string]int32{
		"FecMode_NONE":           0,
		"FecMode_STANDARD":       1,
		"FecMode_ENHANCED":       2,
		"FecMode_ENHANCEDX_IX_7": 3,
		"FecMode_ENHANCEDX_IX_4": 4,
		"FecMode_LHAULX_SD":      5,
		"FecMode_ENHANCEDX_PID":  8,
		"FecMode_LHAULX_SDX_PID": 9,
	}
)

func (x Devm_Ports_Port_Ethernet_FecMode) Enum() *Devm_Ports_Port_Ethernet_FecMode {
	p := new(Devm_Ports_Port_Ethernet_FecMode)
	*p = x
	return p
}

func (x Devm_Ports_Port_Ethernet_FecMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_Ethernet_FecMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[164].Descriptor()
}

func (Devm_Ports_Port_Ethernet_FecMode) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[164]
}

func (x Devm_Ports_Port_Ethernet_FecMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_Ethernet_FecMode.Descriptor instead.
func (Devm_Ports_Port_Ethernet_FecMode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 0, 9}
}

type Devm_Ports_Port_Ethernet_EthFecMode int32

const (
	Devm_Ports_Port_Ethernet_EthFecMode_DISABLE  Devm_Ports_Port_Ethernet_EthFecMode = 0
	Devm_Ports_Port_Ethernet_EthFecMode_STANDARD Devm_Ports_Port_Ethernet_EthFecMode = 1
	Devm_Ports_Port_Ethernet_EthFecMode_NONE     Devm_Ports_Port_Ethernet_EthFecMode = 2
)

// Enum value maps for Devm_Ports_Port_Ethernet_EthFecMode.
var (
	Devm_Ports_Port_Ethernet_EthFecMode_name = map[int32]string{
		0: "EthFecMode_DISABLE",
		1: "EthFecMode_STANDARD",
		2: "EthFecMode_NONE",
	}
	Devm_Ports_Port_Ethernet_EthFecMode_value = map[string]int32{
		"EthFecMode_DISABLE":  0,
		"EthFecMode_STANDARD": 1,
		"EthFecMode_NONE":     2,
	}
)

func (x Devm_Ports_Port_Ethernet_EthFecMode) Enum() *Devm_Ports_Port_Ethernet_EthFecMode {
	p := new(Devm_Ports_Port_Ethernet_EthFecMode)
	*p = x
	return p
}

func (x Devm_Ports_Port_Ethernet_EthFecMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_Ethernet_EthFecMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[165].Descriptor()
}

func (Devm_Ports_Port_Ethernet_EthFecMode) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[165]
}

func (x Devm_Ports_Port_Ethernet_EthFecMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_Ethernet_EthFecMode.Descriptor instead.
func (Devm_Ports_Port_Ethernet_EthFecMode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 0, 10}
}

type Devm_Ports_Port_Ethernet_Flowctl int32

const (
	Devm_Ports_Port_Ethernet_Flowctl_ALLX_DISABLED    Devm_Ports_Port_Ethernet_Flowctl = 0
	Devm_Ports_Port_Ethernet_Flowctl_RECEIVEX_ENABLED Devm_Ports_Port_Ethernet_Flowctl = 1
	Devm_Ports_Port_Ethernet_Flowctl_SENDX_ENABLED    Devm_Ports_Port_Ethernet_Flowctl = 2
	Devm_Ports_Port_Ethernet_Flowctl_ALLX_ENABLED     Devm_Ports_Port_Ethernet_Flowctl = 3
	Devm_Ports_Port_Ethernet_Flowctl_DEFAULTX_CONFIG  Devm_Ports_Port_Ethernet_Flowctl = 9
)

// Enum value maps for Devm_Ports_Port_Ethernet_Flowctl.
var (
	Devm_Ports_Port_Ethernet_Flowctl_name = map[int32]string{
		0: "Flowctl_ALLX_DISABLED",
		1: "Flowctl_RECEIVEX_ENABLED",
		2: "Flowctl_SENDX_ENABLED",
		3: "Flowctl_ALLX_ENABLED",
		9: "Flowctl_DEFAULTX_CONFIG",
	}
	Devm_Ports_Port_Ethernet_Flowctl_value = map[string]int32{
		"Flowctl_ALLX_DISABLED":    0,
		"Flowctl_RECEIVEX_ENABLED": 1,
		"Flowctl_SENDX_ENABLED":    2,
		"Flowctl_ALLX_ENABLED":     3,
		"Flowctl_DEFAULTX_CONFIG":  9,
	}
)

func (x Devm_Ports_Port_Ethernet_Flowctl) Enum() *Devm_Ports_Port_Ethernet_Flowctl {
	p := new(Devm_Ports_Port_Ethernet_Flowctl)
	*p = x
	return p
}

func (x Devm_Ports_Port_Ethernet_Flowctl) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_Ethernet_Flowctl) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[166].Descriptor()
}

func (Devm_Ports_Port_Ethernet_Flowctl) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[166]
}

func (x Devm_Ports_Port_Ethernet_Flowctl) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_Ethernet_Flowctl.Descriptor instead.
func (Devm_Ports_Port_Ethernet_Flowctl) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 0, 11}
}

type Devm_Ports_Port_Ethernet_GfMediaType int32

const (
	Devm_Ports_Port_Ethernet_GfMediaType_AUTO      Devm_Ports_Port_Ethernet_GfMediaType = 0
	Devm_Ports_Port_Ethernet_GfMediaType_FIBER1000 Devm_Ports_Port_Ethernet_GfMediaType = 1
	Devm_Ports_Port_Ethernet_GfMediaType_FIBER100  Devm_Ports_Port_Ethernet_GfMediaType = 2
	Devm_Ports_Port_Ethernet_GfMediaType_COPPER    Devm_Ports_Port_Ethernet_GfMediaType = 3
)

// Enum value maps for Devm_Ports_Port_Ethernet_GfMediaType.
var (
	Devm_Ports_Port_Ethernet_GfMediaType_name = map[int32]string{
		0: "GfMediaType_AUTO",
		1: "GfMediaType_FIBER1000",
		2: "GfMediaType_FIBER100",
		3: "GfMediaType_COPPER",
	}
	Devm_Ports_Port_Ethernet_GfMediaType_value = map[string]int32{
		"GfMediaType_AUTO":      0,
		"GfMediaType_FIBER1000": 1,
		"GfMediaType_FIBER100":  2,
		"GfMediaType_COPPER":    3,
	}
)

func (x Devm_Ports_Port_Ethernet_GfMediaType) Enum() *Devm_Ports_Port_Ethernet_GfMediaType {
	p := new(Devm_Ports_Port_Ethernet_GfMediaType)
	*p = x
	return p
}

func (x Devm_Ports_Port_Ethernet_GfMediaType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_Ethernet_GfMediaType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[167].Descriptor()
}

func (Devm_Ports_Port_Ethernet_GfMediaType) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[167]
}

func (x Devm_Ports_Port_Ethernet_GfMediaType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_Ethernet_GfMediaType.Descriptor instead.
func (Devm_Ports_Port_Ethernet_GfMediaType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 0, 12}
}

type Devm_Ports_Port_Ethernet_HoldUp int32

const (
	Devm_Ports_Port_Ethernet_HoldUp_DISABLED Devm_Ports_Port_Ethernet_HoldUp = 0
	Devm_Ports_Port_Ethernet_HoldUp_ENABLED  Devm_Ports_Port_Ethernet_HoldUp = 1
)

// Enum value maps for Devm_Ports_Port_Ethernet_HoldUp.
var (
	Devm_Ports_Port_Ethernet_HoldUp_name = map[int32]string{
		0: "HoldUp_DISABLED",
		1: "HoldUp_ENABLED",
	}
	Devm_Ports_Port_Ethernet_HoldUp_value = map[string]int32{
		"HoldUp_DISABLED": 0,
		"HoldUp_ENABLED":  1,
	}
)

func (x Devm_Ports_Port_Ethernet_HoldUp) Enum() *Devm_Ports_Port_Ethernet_HoldUp {
	p := new(Devm_Ports_Port_Ethernet_HoldUp)
	*p = x
	return p
}

func (x Devm_Ports_Port_Ethernet_HoldUp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_Ethernet_HoldUp) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[168].Descriptor()
}

func (Devm_Ports_Port_Ethernet_HoldUp) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[168]
}

func (x Devm_Ports_Port_Ethernet_HoldUp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_Ethernet_HoldUp.Descriptor instead.
func (Devm_Ports_Port_Ethernet_HoldUp) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 0, 13}
}

type Devm_Ports_Port_Ethernet_Txipg int32

const (
	Devm_Ports_Port_Ethernet_Txipg_SHRINK      Devm_Ports_Port_Ethernet_Txipg = 0
	Devm_Ports_Port_Ethernet_Txipg_NONX_SHRINK Devm_Ports_Port_Ethernet_Txipg = 1
)

// Enum value maps for Devm_Ports_Port_Ethernet_Txipg.
var (
	Devm_Ports_Port_Ethernet_Txipg_name = map[int32]string{
		0: "Txipg_SHRINK",
		1: "Txipg_NONX_SHRINK",
	}
	Devm_Ports_Port_Ethernet_Txipg_value = map[string]int32{
		"Txipg_SHRINK":      0,
		"Txipg_NONX_SHRINK": 1,
	}
)

func (x Devm_Ports_Port_Ethernet_Txipg) Enum() *Devm_Ports_Port_Ethernet_Txipg {
	p := new(Devm_Ports_Port_Ethernet_Txipg)
	*p = x
	return p
}

func (x Devm_Ports_Port_Ethernet_Txipg) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_Ethernet_Txipg) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[169].Descriptor()
}

func (Devm_Ports_Port_Ethernet_Txipg) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[169]
}

func (x Devm_Ports_Port_Ethernet_Txipg) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_Ethernet_Txipg.Descriptor instead.
func (Devm_Ports_Port_Ethernet_Txipg) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 0, 14}
}

type Devm_Ports_Port_Ethernet_SwitchSpeed int32

const (
	Devm_Ports_Port_Ethernet_SwitchSpeed_UNDO  Devm_Ports_Port_Ethernet_SwitchSpeed = 0
	Devm_Ports_Port_Ethernet_SwitchSpeed_X_1G  Devm_Ports_Port_Ethernet_SwitchSpeed = 1
	Devm_Ports_Port_Ethernet_SwitchSpeed_X_10G Devm_Ports_Port_Ethernet_SwitchSpeed = 10
	Devm_Ports_Port_Ethernet_SwitchSpeed_X_25G Devm_Ports_Port_Ethernet_SwitchSpeed = 25
)

// Enum value maps for Devm_Ports_Port_Ethernet_SwitchSpeed.
var (
	Devm_Ports_Port_Ethernet_SwitchSpeed_name = map[int32]string{
		0:  "SwitchSpeed_UNDO",
		1:  "SwitchSpeed_X_1G",
		10: "SwitchSpeed_X_10G",
		25: "SwitchSpeed_X_25G",
	}
	Devm_Ports_Port_Ethernet_SwitchSpeed_value = map[string]int32{
		"SwitchSpeed_UNDO":  0,
		"SwitchSpeed_X_1G":  1,
		"SwitchSpeed_X_10G": 10,
		"SwitchSpeed_X_25G": 25,
	}
)

func (x Devm_Ports_Port_Ethernet_SwitchSpeed) Enum() *Devm_Ports_Port_Ethernet_SwitchSpeed {
	p := new(Devm_Ports_Port_Ethernet_SwitchSpeed)
	*p = x
	return p
}

func (x Devm_Ports_Port_Ethernet_SwitchSpeed) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_Ethernet_SwitchSpeed) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[170].Descriptor()
}

func (Devm_Ports_Port_Ethernet_SwitchSpeed) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[170]
}

func (x Devm_Ports_Port_Ethernet_SwitchSpeed) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_Ethernet_SwitchSpeed.Descriptor instead.
func (Devm_Ports_Port_Ethernet_SwitchSpeed) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 0, 15}
}

type Devm_Ports_Port_Ethernet_PromiscuousMode int32

const (
	Devm_Ports_Port_Ethernet_PromiscuousMode_OFF Devm_Ports_Port_Ethernet_PromiscuousMode = 0
	Devm_Ports_Port_Ethernet_PromiscuousMode_ON  Devm_Ports_Port_Ethernet_PromiscuousMode = 1
)

// Enum value maps for Devm_Ports_Port_Ethernet_PromiscuousMode.
var (
	Devm_Ports_Port_Ethernet_PromiscuousMode_name = map[int32]string{
		0: "PromiscuousMode_OFF",
		1: "PromiscuousMode_ON",
	}
	Devm_Ports_Port_Ethernet_PromiscuousMode_value = map[string]int32{
		"PromiscuousMode_OFF": 0,
		"PromiscuousMode_ON":  1,
	}
)

func (x Devm_Ports_Port_Ethernet_PromiscuousMode) Enum() *Devm_Ports_Port_Ethernet_PromiscuousMode {
	p := new(Devm_Ports_Port_Ethernet_PromiscuousMode)
	*p = x
	return p
}

func (x Devm_Ports_Port_Ethernet_PromiscuousMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_Ethernet_PromiscuousMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[171].Descriptor()
}

func (Devm_Ports_Port_Ethernet_PromiscuousMode) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[171]
}

func (x Devm_Ports_Port_Ethernet_PromiscuousMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_Ethernet_PromiscuousMode.Descriptor instead.
func (Devm_Ports_Port_Ethernet_PromiscuousMode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 0, 16}
}

type Devm_Ports_Port_Ethernet_FlexphySpeed int32

const (
	Devm_Ports_Port_Ethernet_INVALID_ENUM_VALUE_FlexphySpeed Devm_Ports_Port_Ethernet_FlexphySpeed = 0
	Devm_Ports_Port_Ethernet_FlexphySpeed_X_50GE             Devm_Ports_Port_Ethernet_FlexphySpeed = 50
	Devm_Ports_Port_Ethernet_FlexphySpeed_X_100GE            Devm_Ports_Port_Ethernet_FlexphySpeed = 100
)

// Enum value maps for Devm_Ports_Port_Ethernet_FlexphySpeed.
var (
	Devm_Ports_Port_Ethernet_FlexphySpeed_name = map[int32]string{
		0:   "INVALID_ENUM_VALUE_FlexphySpeed",
		50:  "FlexphySpeed_X_50GE",
		100: "FlexphySpeed_X_100GE",
	}
	Devm_Ports_Port_Ethernet_FlexphySpeed_value = map[string]int32{
		"INVALID_ENUM_VALUE_FlexphySpeed": 0,
		"FlexphySpeed_X_50GE":             50,
		"FlexphySpeed_X_100GE":            100,
	}
)

func (x Devm_Ports_Port_Ethernet_FlexphySpeed) Enum() *Devm_Ports_Port_Ethernet_FlexphySpeed {
	p := new(Devm_Ports_Port_Ethernet_FlexphySpeed)
	*p = x
	return p
}

func (x Devm_Ports_Port_Ethernet_FlexphySpeed) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_Ethernet_FlexphySpeed) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[172].Descriptor()
}

func (Devm_Ports_Port_Ethernet_FlexphySpeed) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[172]
}

func (x Devm_Ports_Port_Ethernet_FlexphySpeed) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_Ethernet_FlexphySpeed.Descriptor instead.
func (Devm_Ports_Port_Ethernet_FlexphySpeed) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 0, 17}
}

type Devm_Ports_Port_Ethernet_MacItfMode int32

const (
	Devm_Ports_Port_Ethernet_MacItfMode_SGMII                                 Devm_Ports_Port_Ethernet_MacItfMode = 0
	Devm_Ports_Port_Ethernet_MacItfMode_X_1000BASEX_XX_AUTOX_NEGOTIATION      Devm_Ports_Port_Ethernet_MacItfMode = 1
	Devm_Ports_Port_Ethernet_MacItfMode_X_1000BASEX_XX_NOTX_AUTOX_NEGOTIATION Devm_Ports_Port_Ethernet_MacItfMode = 2
)

// Enum value maps for Devm_Ports_Port_Ethernet_MacItfMode.
var (
	Devm_Ports_Port_Ethernet_MacItfMode_name = map[int32]string{
		0: "MacItfMode_SGMII",
		1: "MacItfMode_X_1000BASEX_XX_AUTOX_NEGOTIATION",
		2: "MacItfMode_X_1000BASEX_XX_NOTX_AUTOX_NEGOTIATION",
	}
	Devm_Ports_Port_Ethernet_MacItfMode_value = map[string]int32{
		"MacItfMode_SGMII": 0,
		"MacItfMode_X_1000BASEX_XX_AUTOX_NEGOTIATION":      1,
		"MacItfMode_X_1000BASEX_XX_NOTX_AUTOX_NEGOTIATION": 2,
	}
)

func (x Devm_Ports_Port_Ethernet_MacItfMode) Enum() *Devm_Ports_Port_Ethernet_MacItfMode {
	p := new(Devm_Ports_Port_Ethernet_MacItfMode)
	*p = x
	return p
}

func (x Devm_Ports_Port_Ethernet_MacItfMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_Ethernet_MacItfMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[173].Descriptor()
}

func (Devm_Ports_Port_Ethernet_MacItfMode) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[173]
}

func (x Devm_Ports_Port_Ethernet_MacItfMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_Ethernet_MacItfMode.Descriptor instead.
func (Devm_Ports_Port_Ethernet_MacItfMode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 0, 18}
}

type Devm_Ports_Port_Ethernet_RemoteFault int32

const (
	Devm_Ports_Port_Ethernet_RemoteFault_DISABLE Devm_Ports_Port_Ethernet_RemoteFault = 0
	Devm_Ports_Port_Ethernet_RemoteFault_ENABLE  Devm_Ports_Port_Ethernet_RemoteFault = 1
)

// Enum value maps for Devm_Ports_Port_Ethernet_RemoteFault.
var (
	Devm_Ports_Port_Ethernet_RemoteFault_name = map[int32]string{
		0: "RemoteFault_DISABLE",
		1: "RemoteFault_ENABLE",
	}
	Devm_Ports_Port_Ethernet_RemoteFault_value = map[string]int32{
		"RemoteFault_DISABLE": 0,
		"RemoteFault_ENABLE":  1,
	}
)

func (x Devm_Ports_Port_Ethernet_RemoteFault) Enum() *Devm_Ports_Port_Ethernet_RemoteFault {
	p := new(Devm_Ports_Port_Ethernet_RemoteFault)
	*p = x
	return p
}

func (x Devm_Ports_Port_Ethernet_RemoteFault) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_Ethernet_RemoteFault) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[174].Descriptor()
}

func (Devm_Ports_Port_Ethernet_RemoteFault) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[174]
}

func (x Devm_Ports_Port_Ethernet_RemoteFault) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_Ethernet_RemoteFault.Descriptor instead.
func (Devm_Ports_Port_Ethernet_RemoteFault) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 0, 19}
}

type Devm_Ports_Port_Ethernet_LosTrapDownHold int32

const (
	Devm_Ports_Port_Ethernet_LosTrapDownHold_ENABLE  Devm_Ports_Port_Ethernet_LosTrapDownHold = 0
	Devm_Ports_Port_Ethernet_LosTrapDownHold_DISABLE Devm_Ports_Port_Ethernet_LosTrapDownHold = 1
)

// Enum value maps for Devm_Ports_Port_Ethernet_LosTrapDownHold.
var (
	Devm_Ports_Port_Ethernet_LosTrapDownHold_name = map[int32]string{
		0: "LosTrapDownHold_ENABLE",
		1: "LosTrapDownHold_DISABLE",
	}
	Devm_Ports_Port_Ethernet_LosTrapDownHold_value = map[string]int32{
		"LosTrapDownHold_ENABLE":  0,
		"LosTrapDownHold_DISABLE": 1,
	}
)

func (x Devm_Ports_Port_Ethernet_LosTrapDownHold) Enum() *Devm_Ports_Port_Ethernet_LosTrapDownHold {
	p := new(Devm_Ports_Port_Ethernet_LosTrapDownHold)
	*p = x
	return p
}

func (x Devm_Ports_Port_Ethernet_LosTrapDownHold) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_Ethernet_LosTrapDownHold) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[175].Descriptor()
}

func (Devm_Ports_Port_Ethernet_LosTrapDownHold) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[175]
}

func (x Devm_Ports_Port_Ethernet_LosTrapDownHold) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_Ethernet_LosTrapDownHold.Descriptor instead.
func (Devm_Ports_Port_Ethernet_LosTrapDownHold) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 0, 20}
}

type Devm_Ports_Port_Ethernet_DownFilter int32

const (
	Devm_Ports_Port_Ethernet_DownFilter_DISABLE Devm_Ports_Port_Ethernet_DownFilter = 0
	Devm_Ports_Port_Ethernet_DownFilter_ENABLE  Devm_Ports_Port_Ethernet_DownFilter = 1
)

// Enum value maps for Devm_Ports_Port_Ethernet_DownFilter.
var (
	Devm_Ports_Port_Ethernet_DownFilter_name = map[int32]string{
		0: "DownFilter_DISABLE",
		1: "DownFilter_ENABLE",
	}
	Devm_Ports_Port_Ethernet_DownFilter_value = map[string]int32{
		"DownFilter_DISABLE": 0,
		"DownFilter_ENABLE":  1,
	}
)

func (x Devm_Ports_Port_Ethernet_DownFilter) Enum() *Devm_Ports_Port_Ethernet_DownFilter {
	p := new(Devm_Ports_Port_Ethernet_DownFilter)
	*p = x
	return p
}

func (x Devm_Ports_Port_Ethernet_DownFilter) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_Ethernet_DownFilter) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[176].Descriptor()
}

func (Devm_Ports_Port_Ethernet_DownFilter) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[176]
}

func (x Devm_Ports_Port_Ethernet_DownFilter) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_Ethernet_DownFilter.Descriptor instead.
func (Devm_Ports_Port_Ethernet_DownFilter) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 0, 21}
}

type Devm_Ports_Port_Ethernet_LocalFaultStatus int32

const (
	Devm_Ports_Port_Ethernet_LocalFaultStatus_NORMAL Devm_Ports_Port_Ethernet_LocalFaultStatus = 0
	Devm_Ports_Port_Ethernet_LocalFaultStatus_FAULT  Devm_Ports_Port_Ethernet_LocalFaultStatus = 1
)

// Enum value maps for Devm_Ports_Port_Ethernet_LocalFaultStatus.
var (
	Devm_Ports_Port_Ethernet_LocalFaultStatus_name = map[int32]string{
		0: "LocalFaultStatus_NORMAL",
		1: "LocalFaultStatus_FAULT",
	}
	Devm_Ports_Port_Ethernet_LocalFaultStatus_value = map[string]int32{
		"LocalFaultStatus_NORMAL": 0,
		"LocalFaultStatus_FAULT":  1,
	}
)

func (x Devm_Ports_Port_Ethernet_LocalFaultStatus) Enum() *Devm_Ports_Port_Ethernet_LocalFaultStatus {
	p := new(Devm_Ports_Port_Ethernet_LocalFaultStatus)
	*p = x
	return p
}

func (x Devm_Ports_Port_Ethernet_LocalFaultStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_Ethernet_LocalFaultStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[177].Descriptor()
}

func (Devm_Ports_Port_Ethernet_LocalFaultStatus) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[177]
}

func (x Devm_Ports_Port_Ethernet_LocalFaultStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_Ethernet_LocalFaultStatus.Descriptor instead.
func (Devm_Ports_Port_Ethernet_LocalFaultStatus) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 0, 22}
}

type Devm_Ports_Port_Ethernet_RomoteFaultStatus int32

const (
	Devm_Ports_Port_Ethernet_RomoteFaultStatus_NORMAL Devm_Ports_Port_Ethernet_RomoteFaultStatus = 0
	Devm_Ports_Port_Ethernet_RomoteFaultStatus_FAULT  Devm_Ports_Port_Ethernet_RomoteFaultStatus = 1
)

// Enum value maps for Devm_Ports_Port_Ethernet_RomoteFaultStatus.
var (
	Devm_Ports_Port_Ethernet_RomoteFaultStatus_name = map[int32]string{
		0: "RomoteFaultStatus_NORMAL",
		1: "RomoteFaultStatus_FAULT",
	}
	Devm_Ports_Port_Ethernet_RomoteFaultStatus_value = map[string]int32{
		"RomoteFaultStatus_NORMAL": 0,
		"RomoteFaultStatus_FAULT":  1,
	}
)

func (x Devm_Ports_Port_Ethernet_RomoteFaultStatus) Enum() *Devm_Ports_Port_Ethernet_RomoteFaultStatus {
	p := new(Devm_Ports_Port_Ethernet_RomoteFaultStatus)
	*p = x
	return p
}

func (x Devm_Ports_Port_Ethernet_RomoteFaultStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_Ethernet_RomoteFaultStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[178].Descriptor()
}

func (Devm_Ports_Port_Ethernet_RomoteFaultStatus) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[178]
}

func (x Devm_Ports_Port_Ethernet_RomoteFaultStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_Ethernet_RomoteFaultStatus.Descriptor instead.
func (Devm_Ports_Port_Ethernet_RomoteFaultStatus) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 0, 23}
}

type Devm_Ports_Port_Ethernet_DuplexAuto int32

const (
	Devm_Ports_Port_Ethernet_DuplexAuto_AUTO Devm_Ports_Port_Ethernet_DuplexAuto = 0
	Devm_Ports_Port_Ethernet_DuplexAuto_HALF Devm_Ports_Port_Ethernet_DuplexAuto = 1
	Devm_Ports_Port_Ethernet_DuplexAuto_FULL Devm_Ports_Port_Ethernet_DuplexAuto = 2
)

// Enum value maps for Devm_Ports_Port_Ethernet_DuplexAuto.
var (
	Devm_Ports_Port_Ethernet_DuplexAuto_name = map[int32]string{
		0: "DuplexAuto_AUTO",
		1: "DuplexAuto_HALF",
		2: "DuplexAuto_FULL",
	}
	Devm_Ports_Port_Ethernet_DuplexAuto_value = map[string]int32{
		"DuplexAuto_AUTO": 0,
		"DuplexAuto_HALF": 1,
		"DuplexAuto_FULL": 2,
	}
)

func (x Devm_Ports_Port_Ethernet_DuplexAuto) Enum() *Devm_Ports_Port_Ethernet_DuplexAuto {
	p := new(Devm_Ports_Port_Ethernet_DuplexAuto)
	*p = x
	return p
}

func (x Devm_Ports_Port_Ethernet_DuplexAuto) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_Ethernet_DuplexAuto) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[179].Descriptor()
}

func (Devm_Ports_Port_Ethernet_DuplexAuto) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[179]
}

func (x Devm_Ports_Port_Ethernet_DuplexAuto) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_Ethernet_DuplexAuto.Descriptor instead.
func (Devm_Ports_Port_Ethernet_DuplexAuto) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 0, 24}
}

type Devm_Ports_Port_Ethernet_ComboMode int32

const (
	Devm_Ports_Port_Ethernet_INVALID_ENUM_VALUE_ComboMode Devm_Ports_Port_Ethernet_ComboMode = 0
	Devm_Ports_Port_Ethernet_ComboMode_AUTO               Devm_Ports_Port_Ethernet_ComboMode = 1
	Devm_Ports_Port_Ethernet_ComboMode_COPPER             Devm_Ports_Port_Ethernet_ComboMode = 2
	Devm_Ports_Port_Ethernet_ComboMode_FIBER              Devm_Ports_Port_Ethernet_ComboMode = 3
)

// Enum value maps for Devm_Ports_Port_Ethernet_ComboMode.
var (
	Devm_Ports_Port_Ethernet_ComboMode_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_ComboMode",
		1: "ComboMode_AUTO",
		2: "ComboMode_COPPER",
		3: "ComboMode_FIBER",
	}
	Devm_Ports_Port_Ethernet_ComboMode_value = map[string]int32{
		"INVALID_ENUM_VALUE_ComboMode": 0,
		"ComboMode_AUTO":               1,
		"ComboMode_COPPER":             2,
		"ComboMode_FIBER":              3,
	}
)

func (x Devm_Ports_Port_Ethernet_ComboMode) Enum() *Devm_Ports_Port_Ethernet_ComboMode {
	p := new(Devm_Ports_Port_Ethernet_ComboMode)
	*p = x
	return p
}

func (x Devm_Ports_Port_Ethernet_ComboMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_Ethernet_ComboMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[180].Descriptor()
}

func (Devm_Ports_Port_Ethernet_ComboMode) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[180]
}

func (x Devm_Ports_Port_Ethernet_ComboMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_Ethernet_ComboMode.Descriptor instead.
func (Devm_Ports_Port_Ethernet_ComboMode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 0, 25}
}

type Devm_Ports_Port_Ethernet_FaultDetect int32

const (
	Devm_Ports_Port_Ethernet_FaultDetect_ENABLE  Devm_Ports_Port_Ethernet_FaultDetect = 0
	Devm_Ports_Port_Ethernet_FaultDetect_DISABLE Devm_Ports_Port_Ethernet_FaultDetect = 1
)

// Enum value maps for Devm_Ports_Port_Ethernet_FaultDetect.
var (
	Devm_Ports_Port_Ethernet_FaultDetect_name = map[int32]string{
		0: "FaultDetect_ENABLE",
		1: "FaultDetect_DISABLE",
	}
	Devm_Ports_Port_Ethernet_FaultDetect_value = map[string]int32{
		"FaultDetect_ENABLE":  0,
		"FaultDetect_DISABLE": 1,
	}
)

func (x Devm_Ports_Port_Ethernet_FaultDetect) Enum() *Devm_Ports_Port_Ethernet_FaultDetect {
	p := new(Devm_Ports_Port_Ethernet_FaultDetect)
	*p = x
	return p
}

func (x Devm_Ports_Port_Ethernet_FaultDetect) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_Ethernet_FaultDetect) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[181].Descriptor()
}

func (Devm_Ports_Port_Ethernet_FaultDetect) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[181]
}

func (x Devm_Ports_Port_Ethernet_FaultDetect) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_Ethernet_FaultDetect.Descriptor instead.
func (Devm_Ports_Port_Ethernet_FaultDetect) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 0, 26}
}

type Devm_Ports_Port_Ethernet_StatisticsIncludeInterframe int32

const (
	Devm_Ports_Port_Ethernet_StatisticsIncludeInterframe_ENABLE  Devm_Ports_Port_Ethernet_StatisticsIncludeInterframe = 0
	Devm_Ports_Port_Ethernet_StatisticsIncludeInterframe_DISABLE Devm_Ports_Port_Ethernet_StatisticsIncludeInterframe = 1
)

// Enum value maps for Devm_Ports_Port_Ethernet_StatisticsIncludeInterframe.
var (
	Devm_Ports_Port_Ethernet_StatisticsIncludeInterframe_name = map[int32]string{
		0: "StatisticsIncludeInterframe_ENABLE",
		1: "StatisticsIncludeInterframe_DISABLE",
	}
	Devm_Ports_Port_Ethernet_StatisticsIncludeInterframe_value = map[string]int32{
		"StatisticsIncludeInterframe_ENABLE":  0,
		"StatisticsIncludeInterframe_DISABLE": 1,
	}
)

func (x Devm_Ports_Port_Ethernet_StatisticsIncludeInterframe) Enum() *Devm_Ports_Port_Ethernet_StatisticsIncludeInterframe {
	p := new(Devm_Ports_Port_Ethernet_StatisticsIncludeInterframe)
	*p = x
	return p
}

func (x Devm_Ports_Port_Ethernet_StatisticsIncludeInterframe) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_Ethernet_StatisticsIncludeInterframe) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[182].Descriptor()
}

func (Devm_Ports_Port_Ethernet_StatisticsIncludeInterframe) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[182]
}

func (x Devm_Ports_Port_Ethernet_StatisticsIncludeInterframe) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_Ethernet_StatisticsIncludeInterframe.Descriptor instead.
func (Devm_Ports_Port_Ethernet_StatisticsIncludeInterframe) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 0, 27}
}

type Devm_Ports_Port_Ethernet_LinkFlapProtection int32

const (
	Devm_Ports_Port_Ethernet_LinkFlapProtection_ENABLE  Devm_Ports_Port_Ethernet_LinkFlapProtection = 0
	Devm_Ports_Port_Ethernet_LinkFlapProtection_DISABLE Devm_Ports_Port_Ethernet_LinkFlapProtection = 1
)

// Enum value maps for Devm_Ports_Port_Ethernet_LinkFlapProtection.
var (
	Devm_Ports_Port_Ethernet_LinkFlapProtection_name = map[int32]string{
		0: "LinkFlapProtection_ENABLE",
		1: "LinkFlapProtection_DISABLE",
	}
	Devm_Ports_Port_Ethernet_LinkFlapProtection_value = map[string]int32{
		"LinkFlapProtection_ENABLE":  0,
		"LinkFlapProtection_DISABLE": 1,
	}
)

func (x Devm_Ports_Port_Ethernet_LinkFlapProtection) Enum() *Devm_Ports_Port_Ethernet_LinkFlapProtection {
	p := new(Devm_Ports_Port_Ethernet_LinkFlapProtection)
	*p = x
	return p
}

func (x Devm_Ports_Port_Ethernet_LinkFlapProtection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_Ethernet_LinkFlapProtection) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[183].Descriptor()
}

func (Devm_Ports_Port_Ethernet_LinkFlapProtection) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[183]
}

func (x Devm_Ports_Port_Ethernet_LinkFlapProtection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_Ethernet_LinkFlapProtection.Descriptor instead.
func (Devm_Ports_Port_Ethernet_LinkFlapProtection) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 0, 28}
}

type Devm_Ports_Port_Ethernet_SpeedAutos int32

const (
	Devm_Ports_Port_Ethernet_SpeedAutos_DEFAULT Devm_Ports_Port_Ethernet_SpeedAutos = 0
	Devm_Ports_Port_Ethernet_SpeedAutos_X_1000M Devm_Ports_Port_Ethernet_SpeedAutos = 4
	Devm_Ports_Port_Ethernet_SpeedAutos_X_100M  Devm_Ports_Port_Ethernet_SpeedAutos = 18
	Devm_Ports_Port_Ethernet_SpeedAutos_X_10M   Devm_Ports_Port_Ethernet_SpeedAutos = 8193
)

// Enum value maps for Devm_Ports_Port_Ethernet_SpeedAutos.
var (
	Devm_Ports_Port_Ethernet_SpeedAutos_name = map[int32]string{
		0:    "SpeedAutos_DEFAULT",
		4:    "SpeedAutos_X_1000M",
		18:   "SpeedAutos_X_100M",
		8193: "SpeedAutos_X_10M",
	}
	Devm_Ports_Port_Ethernet_SpeedAutos_value = map[string]int32{
		"SpeedAutos_DEFAULT": 0,
		"SpeedAutos_X_1000M": 4,
		"SpeedAutos_X_100M":  18,
		"SpeedAutos_X_10M":   8193,
	}
)

func (x Devm_Ports_Port_Ethernet_SpeedAutos) Enum() *Devm_Ports_Port_Ethernet_SpeedAutos {
	p := new(Devm_Ports_Port_Ethernet_SpeedAutos)
	*p = x
	return p
}

func (x Devm_Ports_Port_Ethernet_SpeedAutos) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_Ethernet_SpeedAutos) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[184].Descriptor()
}

func (Devm_Ports_Port_Ethernet_SpeedAutos) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[184]
}

func (x Devm_Ports_Port_Ethernet_SpeedAutos) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_Ethernet_SpeedAutos.Descriptor instead.
func (Devm_Ports_Port_Ethernet_SpeedAutos) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 0, 29}
}

type Devm_Ports_Port_Ethernet_Combo int32

const (
	Devm_Ports_Port_Ethernet_INVALID_ENUM_VALUE_Combo Devm_Ports_Port_Ethernet_Combo = 0
	Devm_Ports_Port_Ethernet_Combo_AUTO               Devm_Ports_Port_Ethernet_Combo = 1
	Devm_Ports_Port_Ethernet_Combo_COPPER             Devm_Ports_Port_Ethernet_Combo = 2
	Devm_Ports_Port_Ethernet_Combo_FIBER              Devm_Ports_Port_Ethernet_Combo = 3
)

// Enum value maps for Devm_Ports_Port_Ethernet_Combo.
var (
	Devm_Ports_Port_Ethernet_Combo_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Combo",
		1: "Combo_AUTO",
		2: "Combo_COPPER",
		3: "Combo_FIBER",
	}
	Devm_Ports_Port_Ethernet_Combo_value = map[string]int32{
		"INVALID_ENUM_VALUE_Combo": 0,
		"Combo_AUTO":               1,
		"Combo_COPPER":             2,
		"Combo_FIBER":              3,
	}
)

func (x Devm_Ports_Port_Ethernet_Combo) Enum() *Devm_Ports_Port_Ethernet_Combo {
	p := new(Devm_Ports_Port_Ethernet_Combo)
	*p = x
	return p
}

func (x Devm_Ports_Port_Ethernet_Combo) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_Ethernet_Combo) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[185].Descriptor()
}

func (Devm_Ports_Port_Ethernet_Combo) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[185]
}

func (x Devm_Ports_Port_Ethernet_Combo) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_Ethernet_Combo.Descriptor instead.
func (Devm_Ports_Port_Ethernet_Combo) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 0, 30}
}

type Devm_Ports_Port_Ethernet_Eee int32

const (
	Devm_Ports_Port_Ethernet_Eee_ENABLE  Devm_Ports_Port_Ethernet_Eee = 0
	Devm_Ports_Port_Ethernet_Eee_DISABLE Devm_Ports_Port_Ethernet_Eee = 1
)

// Enum value maps for Devm_Ports_Port_Ethernet_Eee.
var (
	Devm_Ports_Port_Ethernet_Eee_name = map[int32]string{
		0: "Eee_ENABLE",
		1: "Eee_DISABLE",
	}
	Devm_Ports_Port_Ethernet_Eee_value = map[string]int32{
		"Eee_ENABLE":  0,
		"Eee_DISABLE": 1,
	}
)

func (x Devm_Ports_Port_Ethernet_Eee) Enum() *Devm_Ports_Port_Ethernet_Eee {
	p := new(Devm_Ports_Port_Ethernet_Eee)
	*p = x
	return p
}

func (x Devm_Ports_Port_Ethernet_Eee) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_Ethernet_Eee) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[186].Descriptor()
}

func (Devm_Ports_Port_Ethernet_Eee) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[186]
}

func (x Devm_Ports_Port_Ethernet_Eee) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_Ethernet_Eee.Descriptor instead.
func (Devm_Ports_Port_Ethernet_Eee) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 0, 31}
}

type Devm_Ports_Port_Ethernet_EthWanAttr_FrameFormat int32

const (
	Devm_Ports_Port_Ethernet_EthWanAttr_FrameFormat_SDH   Devm_Ports_Port_Ethernet_EthWanAttr_FrameFormat = 0
	Devm_Ports_Port_Ethernet_EthWanAttr_FrameFormat_SONET Devm_Ports_Port_Ethernet_EthWanAttr_FrameFormat = 1
)

// Enum value maps for Devm_Ports_Port_Ethernet_EthWanAttr_FrameFormat.
var (
	Devm_Ports_Port_Ethernet_EthWanAttr_FrameFormat_name = map[int32]string{
		0: "FrameFormat_SDH",
		1: "FrameFormat_SONET",
	}
	Devm_Ports_Port_Ethernet_EthWanAttr_FrameFormat_value = map[string]int32{
		"FrameFormat_SDH":   0,
		"FrameFormat_SONET": 1,
	}
)

func (x Devm_Ports_Port_Ethernet_EthWanAttr_FrameFormat) Enum() *Devm_Ports_Port_Ethernet_EthWanAttr_FrameFormat {
	p := new(Devm_Ports_Port_Ethernet_EthWanAttr_FrameFormat)
	*p = x
	return p
}

func (x Devm_Ports_Port_Ethernet_EthWanAttr_FrameFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_Ethernet_EthWanAttr_FrameFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[187].Descriptor()
}

func (Devm_Ports_Port_Ethernet_EthWanAttr_FrameFormat) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[187]
}

func (x Devm_Ports_Port_Ethernet_EthWanAttr_FrameFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_Ethernet_EthWanAttr_FrameFormat.Descriptor instead.
func (Devm_Ports_Port_Ethernet_EthWanAttr_FrameFormat) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 0, 0, 0}
}

type Devm_Ports_Port_Ethernet_EthWanAttr_J0Mode int32

const (
	Devm_Ports_Port_Ethernet_EthWanAttr_INVALID_ENUM_VALUE_J0Mode       Devm_Ports_Port_Ethernet_EthWanAttr_J0Mode = 0
	Devm_Ports_Port_Ethernet_EthWanAttr_J0Mode_X_1BYTE                  Devm_Ports_Port_Ethernet_EthWanAttr_J0Mode = 1
	Devm_Ports_Port_Ethernet_EthWanAttr_J0Mode_X_16BYTE                 Devm_Ports_Port_Ethernet_EthWanAttr_J0Mode = 16
	Devm_Ports_Port_Ethernet_EthWanAttr_J0Mode_X_64BYTEX_ORX_NULLX_MODE Devm_Ports_Port_Ethernet_EthWanAttr_J0Mode = 64
)

// Enum value maps for Devm_Ports_Port_Ethernet_EthWanAttr_J0Mode.
var (
	Devm_Ports_Port_Ethernet_EthWanAttr_J0Mode_name = map[int32]string{
		0:  "INVALID_ENUM_VALUE_J0Mode",
		1:  "J0Mode_X_1BYTE",
		16: "J0Mode_X_16BYTE",
		64: "J0Mode_X_64BYTEX_ORX_NULLX_MODE",
	}
	Devm_Ports_Port_Ethernet_EthWanAttr_J0Mode_value = map[string]int32{
		"INVALID_ENUM_VALUE_J0Mode":       0,
		"J0Mode_X_1BYTE":                  1,
		"J0Mode_X_16BYTE":                 16,
		"J0Mode_X_64BYTEX_ORX_NULLX_MODE": 64,
	}
)

func (x Devm_Ports_Port_Ethernet_EthWanAttr_J0Mode) Enum() *Devm_Ports_Port_Ethernet_EthWanAttr_J0Mode {
	p := new(Devm_Ports_Port_Ethernet_EthWanAttr_J0Mode)
	*p = x
	return p
}

func (x Devm_Ports_Port_Ethernet_EthWanAttr_J0Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_Ethernet_EthWanAttr_J0Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[188].Descriptor()
}

func (Devm_Ports_Port_Ethernet_EthWanAttr_J0Mode) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[188]
}

func (x Devm_Ports_Port_Ethernet_EthWanAttr_J0Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_Ethernet_EthWanAttr_J0Mode.Descriptor instead.
func (Devm_Ports_Port_Ethernet_EthWanAttr_J0Mode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 0, 0, 1}
}

type Devm_Ports_Port_Ethernet_EthWanAttr_J1Mode int32

const (
	Devm_Ports_Port_Ethernet_EthWanAttr_INVALID_ENUM_VALUE_J1Mode       Devm_Ports_Port_Ethernet_EthWanAttr_J1Mode = 0
	Devm_Ports_Port_Ethernet_EthWanAttr_J1Mode_X_1BYTE                  Devm_Ports_Port_Ethernet_EthWanAttr_J1Mode = 1
	Devm_Ports_Port_Ethernet_EthWanAttr_J1Mode_X_16BYTE                 Devm_Ports_Port_Ethernet_EthWanAttr_J1Mode = 16
	Devm_Ports_Port_Ethernet_EthWanAttr_J1Mode_X_64BYTEX_ORX_NULLX_MODE Devm_Ports_Port_Ethernet_EthWanAttr_J1Mode = 64
)

// Enum value maps for Devm_Ports_Port_Ethernet_EthWanAttr_J1Mode.
var (
	Devm_Ports_Port_Ethernet_EthWanAttr_J1Mode_name = map[int32]string{
		0:  "INVALID_ENUM_VALUE_J1Mode",
		1:  "J1Mode_X_1BYTE",
		16: "J1Mode_X_16BYTE",
		64: "J1Mode_X_64BYTEX_ORX_NULLX_MODE",
	}
	Devm_Ports_Port_Ethernet_EthWanAttr_J1Mode_value = map[string]int32{
		"INVALID_ENUM_VALUE_J1Mode":       0,
		"J1Mode_X_1BYTE":                  1,
		"J1Mode_X_16BYTE":                 16,
		"J1Mode_X_64BYTEX_ORX_NULLX_MODE": 64,
	}
)

func (x Devm_Ports_Port_Ethernet_EthWanAttr_J1Mode) Enum() *Devm_Ports_Port_Ethernet_EthWanAttr_J1Mode {
	p := new(Devm_Ports_Port_Ethernet_EthWanAttr_J1Mode)
	*p = x
	return p
}

func (x Devm_Ports_Port_Ethernet_EthWanAttr_J1Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_Ethernet_EthWanAttr_J1Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[189].Descriptor()
}

func (Devm_Ports_Port_Ethernet_EthWanAttr_J1Mode) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[189]
}

func (x Devm_Ports_Port_Ethernet_EthWanAttr_J1Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_Ethernet_EthWanAttr_J1Mode.Descriptor instead.
func (Devm_Ports_Port_Ethernet_EthWanAttr_J1Mode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 0, 0, 2}
}

type Devm_Ports_Port_Ethernet_EthWanAttr_Clock int32

const (
	Devm_Ports_Port_Ethernet_EthWanAttr_Clock_MASTER Devm_Ports_Port_Ethernet_EthWanAttr_Clock = 0
	Devm_Ports_Port_Ethernet_EthWanAttr_Clock_SLAVE  Devm_Ports_Port_Ethernet_EthWanAttr_Clock = 1
)

// Enum value maps for Devm_Ports_Port_Ethernet_EthWanAttr_Clock.
var (
	Devm_Ports_Port_Ethernet_EthWanAttr_Clock_name = map[int32]string{
		0: "Clock_MASTER",
		1: "Clock_SLAVE",
	}
	Devm_Ports_Port_Ethernet_EthWanAttr_Clock_value = map[string]int32{
		"Clock_MASTER": 0,
		"Clock_SLAVE":  1,
	}
)

func (x Devm_Ports_Port_Ethernet_EthWanAttr_Clock) Enum() *Devm_Ports_Port_Ethernet_EthWanAttr_Clock {
	p := new(Devm_Ports_Port_Ethernet_EthWanAttr_Clock)
	*p = x
	return p
}

func (x Devm_Ports_Port_Ethernet_EthWanAttr_Clock) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_Ethernet_EthWanAttr_Clock) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[190].Descriptor()
}

func (Devm_Ports_Port_Ethernet_EthWanAttr_Clock) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[190]
}

func (x Devm_Ports_Port_Ethernet_EthWanAttr_Clock) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_Ethernet_EthWanAttr_Clock.Descriptor instead.
func (Devm_Ports_Port_Ethernet_EthWanAttr_Clock) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 0, 0, 3}
}

type Devm_Ports_Port_Ethernet_EthWanAttr_Scramble int32

const (
	Devm_Ports_Port_Ethernet_EthWanAttr_Scramble_DISABLED Devm_Ports_Port_Ethernet_EthWanAttr_Scramble = 0
	Devm_Ports_Port_Ethernet_EthWanAttr_Scramble_ENABLED  Devm_Ports_Port_Ethernet_EthWanAttr_Scramble = 3
)

// Enum value maps for Devm_Ports_Port_Ethernet_EthWanAttr_Scramble.
var (
	Devm_Ports_Port_Ethernet_EthWanAttr_Scramble_name = map[int32]string{
		0: "Scramble_DISABLED",
		3: "Scramble_ENABLED",
	}
	Devm_Ports_Port_Ethernet_EthWanAttr_Scramble_value = map[string]int32{
		"Scramble_DISABLED": 0,
		"Scramble_ENABLED":  3,
	}
)

func (x Devm_Ports_Port_Ethernet_EthWanAttr_Scramble) Enum() *Devm_Ports_Port_Ethernet_EthWanAttr_Scramble {
	p := new(Devm_Ports_Port_Ethernet_EthWanAttr_Scramble)
	*p = x
	return p
}

func (x Devm_Ports_Port_Ethernet_EthWanAttr_Scramble) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_Ethernet_EthWanAttr_Scramble) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[191].Descriptor()
}

func (Devm_Ports_Port_Ethernet_EthWanAttr_Scramble) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[191]
}

func (x Devm_Ports_Port_Ethernet_EthWanAttr_Scramble) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_Ethernet_EthWanAttr_Scramble.Descriptor instead.
func (Devm_Ports_Port_Ethernet_EthWanAttr_Scramble) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 0, 0, 4}
}

type Devm_Ports_Port_Ethernet_EthWanAttr_RxJ0Mode int32

const (
	Devm_Ports_Port_Ethernet_EthWanAttr_INVALID_ENUM_VALUE_RxJ0Mode       Devm_Ports_Port_Ethernet_EthWanAttr_RxJ0Mode = 0
	Devm_Ports_Port_Ethernet_EthWanAttr_RxJ0Mode_X_1BYTE                  Devm_Ports_Port_Ethernet_EthWanAttr_RxJ0Mode = 1
	Devm_Ports_Port_Ethernet_EthWanAttr_RxJ0Mode_X_16BYTE                 Devm_Ports_Port_Ethernet_EthWanAttr_RxJ0Mode = 16
	Devm_Ports_Port_Ethernet_EthWanAttr_RxJ0Mode_X_64BYTEX_ORX_NULLX_MODE Devm_Ports_Port_Ethernet_EthWanAttr_RxJ0Mode = 64
	Devm_Ports_Port_Ethernet_EthWanAttr_RxJ0Mode_PEER                     Devm_Ports_Port_Ethernet_EthWanAttr_RxJ0Mode = 128
)

// Enum value maps for Devm_Ports_Port_Ethernet_EthWanAttr_RxJ0Mode.
var (
	Devm_Ports_Port_Ethernet_EthWanAttr_RxJ0Mode_name = map[int32]string{
		0:   "INVALID_ENUM_VALUE_RxJ0Mode",
		1:   "RxJ0Mode_X_1BYTE",
		16:  "RxJ0Mode_X_16BYTE",
		64:  "RxJ0Mode_X_64BYTEX_ORX_NULLX_MODE",
		128: "RxJ0Mode_PEER",
	}
	Devm_Ports_Port_Ethernet_EthWanAttr_RxJ0Mode_value = map[string]int32{
		"INVALID_ENUM_VALUE_RxJ0Mode":       0,
		"RxJ0Mode_X_1BYTE":                  1,
		"RxJ0Mode_X_16BYTE":                 16,
		"RxJ0Mode_X_64BYTEX_ORX_NULLX_MODE": 64,
		"RxJ0Mode_PEER":                     128,
	}
)

func (x Devm_Ports_Port_Ethernet_EthWanAttr_RxJ0Mode) Enum() *Devm_Ports_Port_Ethernet_EthWanAttr_RxJ0Mode {
	p := new(Devm_Ports_Port_Ethernet_EthWanAttr_RxJ0Mode)
	*p = x
	return p
}

func (x Devm_Ports_Port_Ethernet_EthWanAttr_RxJ0Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_Ethernet_EthWanAttr_RxJ0Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[192].Descriptor()
}

func (Devm_Ports_Port_Ethernet_EthWanAttr_RxJ0Mode) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[192]
}

func (x Devm_Ports_Port_Ethernet_EthWanAttr_RxJ0Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_Ethernet_EthWanAttr_RxJ0Mode.Descriptor instead.
func (Devm_Ports_Port_Ethernet_EthWanAttr_RxJ0Mode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 0, 0, 5}
}

type Devm_Ports_Port_Ethernet_EthWanAttr_RxJ1Mode int32

const (
	Devm_Ports_Port_Ethernet_EthWanAttr_INVALID_ENUM_VALUE_RxJ1Mode       Devm_Ports_Port_Ethernet_EthWanAttr_RxJ1Mode = 0
	Devm_Ports_Port_Ethernet_EthWanAttr_RxJ1Mode_X_1BYTE                  Devm_Ports_Port_Ethernet_EthWanAttr_RxJ1Mode = 1
	Devm_Ports_Port_Ethernet_EthWanAttr_RxJ1Mode_X_16BYTE                 Devm_Ports_Port_Ethernet_EthWanAttr_RxJ1Mode = 16
	Devm_Ports_Port_Ethernet_EthWanAttr_RxJ1Mode_X_64BYTEX_ORX_NULLX_MODE Devm_Ports_Port_Ethernet_EthWanAttr_RxJ1Mode = 64
	Devm_Ports_Port_Ethernet_EthWanAttr_RxJ1Mode_PEER                     Devm_Ports_Port_Ethernet_EthWanAttr_RxJ1Mode = 128
)

// Enum value maps for Devm_Ports_Port_Ethernet_EthWanAttr_RxJ1Mode.
var (
	Devm_Ports_Port_Ethernet_EthWanAttr_RxJ1Mode_name = map[int32]string{
		0:   "INVALID_ENUM_VALUE_RxJ1Mode",
		1:   "RxJ1Mode_X_1BYTE",
		16:  "RxJ1Mode_X_16BYTE",
		64:  "RxJ1Mode_X_64BYTEX_ORX_NULLX_MODE",
		128: "RxJ1Mode_PEER",
	}
	Devm_Ports_Port_Ethernet_EthWanAttr_RxJ1Mode_value = map[string]int32{
		"INVALID_ENUM_VALUE_RxJ1Mode":       0,
		"RxJ1Mode_X_1BYTE":                  1,
		"RxJ1Mode_X_16BYTE":                 16,
		"RxJ1Mode_X_64BYTEX_ORX_NULLX_MODE": 64,
		"RxJ1Mode_PEER":                     128,
	}
)

func (x Devm_Ports_Port_Ethernet_EthWanAttr_RxJ1Mode) Enum() *Devm_Ports_Port_Ethernet_EthWanAttr_RxJ1Mode {
	p := new(Devm_Ports_Port_Ethernet_EthWanAttr_RxJ1Mode)
	*p = x
	return p
}

func (x Devm_Ports_Port_Ethernet_EthWanAttr_RxJ1Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_Ethernet_EthWanAttr_RxJ1Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[193].Descriptor()
}

func (Devm_Ports_Port_Ethernet_EthWanAttr_RxJ1Mode) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[193]
}

func (x Devm_Ports_Port_Ethernet_EthWanAttr_RxJ1Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_Ethernet_EthWanAttr_RxJ1Mode.Descriptor instead.
func (Devm_Ports_Port_Ethernet_EthWanAttr_RxJ1Mode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 0, 0, 6}
}

type Devm_Ports_Port_Ethernet_NegotiationCompatibleMode_NegotiationCompatibleMode6 int32

const (
	Devm_Ports_Port_Ethernet_NegotiationCompatibleMode_NegotiationCompatibleMode6_ENABLE  Devm_Ports_Port_Ethernet_NegotiationCompatibleMode_NegotiationCompatibleMode6 = 0
	Devm_Ports_Port_Ethernet_NegotiationCompatibleMode_NegotiationCompatibleMode6_DISABLE Devm_Ports_Port_Ethernet_NegotiationCompatibleMode_NegotiationCompatibleMode6 = 1
)

// Enum value maps for Devm_Ports_Port_Ethernet_NegotiationCompatibleMode_NegotiationCompatibleMode6.
var (
	Devm_Ports_Port_Ethernet_NegotiationCompatibleMode_NegotiationCompatibleMode6_name = map[int32]string{
		0: "NegotiationCompatibleMode6_ENABLE",
		1: "NegotiationCompatibleMode6_DISABLE",
	}
	Devm_Ports_Port_Ethernet_NegotiationCompatibleMode_NegotiationCompatibleMode6_value = map[string]int32{
		"NegotiationCompatibleMode6_ENABLE":  0,
		"NegotiationCompatibleMode6_DISABLE": 1,
	}
)

func (x Devm_Ports_Port_Ethernet_NegotiationCompatibleMode_NegotiationCompatibleMode6) Enum() *Devm_Ports_Port_Ethernet_NegotiationCompatibleMode_NegotiationCompatibleMode6 {
	p := new(Devm_Ports_Port_Ethernet_NegotiationCompatibleMode_NegotiationCompatibleMode6)
	*p = x
	return p
}

func (x Devm_Ports_Port_Ethernet_NegotiationCompatibleMode_NegotiationCompatibleMode6) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_Ethernet_NegotiationCompatibleMode_NegotiationCompatibleMode6) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[194].Descriptor()
}

func (Devm_Ports_Port_Ethernet_NegotiationCompatibleMode_NegotiationCompatibleMode6) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[194]
}

func (x Devm_Ports_Port_Ethernet_NegotiationCompatibleMode_NegotiationCompatibleMode6) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_Ethernet_NegotiationCompatibleMode_NegotiationCompatibleMode6.Descriptor instead.
func (Devm_Ports_Port_Ethernet_NegotiationCompatibleMode_NegotiationCompatibleMode6) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 0, 2, 0}
}

type Devm_Ports_Port_Ethernet_LocalLoopbackResult_Result int32

const (
	Devm_Ports_Port_Ethernet_LocalLoopbackResult_Result_SUCCESS           Devm_Ports_Port_Ethernet_LocalLoopbackResult_Result = 0
	Devm_Ports_Port_Ethernet_LocalLoopbackResult_Result_TESTX_ERROR       Devm_Ports_Port_Ethernet_LocalLoopbackResult_Result = 1
	Devm_Ports_Port_Ethernet_LocalLoopbackResult_Result_NOX_TEST          Devm_Ports_Port_Ethernet_LocalLoopbackResult_Result = 2
	Devm_Ports_Port_Ethernet_LocalLoopbackResult_Result_TESTX_CLASHES     Devm_Ports_Port_Ethernet_LocalLoopbackResult_Result = 3
	Devm_Ports_Port_Ethernet_LocalLoopbackResult_Result_TESTX_NOX_SUPPORT Devm_Ports_Port_Ethernet_LocalLoopbackResult_Result = 4
)

// Enum value maps for Devm_Ports_Port_Ethernet_LocalLoopbackResult_Result.
var (
	Devm_Ports_Port_Ethernet_LocalLoopbackResult_Result_name = map[int32]string{
		0: "Result_SUCCESS",
		1: "Result_TESTX_ERROR",
		2: "Result_NOX_TEST",
		3: "Result_TESTX_CLASHES",
		4: "Result_TESTX_NOX_SUPPORT",
	}
	Devm_Ports_Port_Ethernet_LocalLoopbackResult_Result_value = map[string]int32{
		"Result_SUCCESS":           0,
		"Result_TESTX_ERROR":       1,
		"Result_NOX_TEST":          2,
		"Result_TESTX_CLASHES":     3,
		"Result_TESTX_NOX_SUPPORT": 4,
	}
)

func (x Devm_Ports_Port_Ethernet_LocalLoopbackResult_Result) Enum() *Devm_Ports_Port_Ethernet_LocalLoopbackResult_Result {
	p := new(Devm_Ports_Port_Ethernet_LocalLoopbackResult_Result)
	*p = x
	return p
}

func (x Devm_Ports_Port_Ethernet_LocalLoopbackResult_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_Ethernet_LocalLoopbackResult_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[195].Descriptor()
}

func (Devm_Ports_Port_Ethernet_LocalLoopbackResult_Result) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[195]
}

func (x Devm_Ports_Port_Ethernet_LocalLoopbackResult_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_Ethernet_LocalLoopbackResult_Result.Descriptor instead.
func (Devm_Ports_Port_Ethernet_LocalLoopbackResult_Result) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 0, 3, 0}
}

type Devm_Ports_Port_Ethernet_LocalLoopbackResult_LinkStatus int32

const (
	Devm_Ports_Port_Ethernet_LocalLoopbackResult_LinkStatus_DOWN Devm_Ports_Port_Ethernet_LocalLoopbackResult_LinkStatus = 0
	Devm_Ports_Port_Ethernet_LocalLoopbackResult_LinkStatus_UP   Devm_Ports_Port_Ethernet_LocalLoopbackResult_LinkStatus = 1
)

// Enum value maps for Devm_Ports_Port_Ethernet_LocalLoopbackResult_LinkStatus.
var (
	Devm_Ports_Port_Ethernet_LocalLoopbackResult_LinkStatus_name = map[int32]string{
		0: "LinkStatus_DOWN",
		1: "LinkStatus_UP",
	}
	Devm_Ports_Port_Ethernet_LocalLoopbackResult_LinkStatus_value = map[string]int32{
		"LinkStatus_DOWN": 0,
		"LinkStatus_UP":   1,
	}
)

func (x Devm_Ports_Port_Ethernet_LocalLoopbackResult_LinkStatus) Enum() *Devm_Ports_Port_Ethernet_LocalLoopbackResult_LinkStatus {
	p := new(Devm_Ports_Port_Ethernet_LocalLoopbackResult_LinkStatus)
	*p = x
	return p
}

func (x Devm_Ports_Port_Ethernet_LocalLoopbackResult_LinkStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_Ethernet_LocalLoopbackResult_LinkStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[196].Descriptor()
}

func (Devm_Ports_Port_Ethernet_LocalLoopbackResult_LinkStatus) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[196]
}

func (x Devm_Ports_Port_Ethernet_LocalLoopbackResult_LinkStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_Ethernet_LocalLoopbackResult_LinkStatus.Descriptor instead.
func (Devm_Ports_Port_Ethernet_LocalLoopbackResult_LinkStatus) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 0, 3, 1}
}

type Devm_Ports_Port_Laser_AutoShutEnable int32

const (
	Devm_Ports_Port_Laser_AutoShutEnable_DISABLE Devm_Ports_Port_Laser_AutoShutEnable = 0
	Devm_Ports_Port_Laser_AutoShutEnable_ENABLE  Devm_Ports_Port_Laser_AutoShutEnable = 1
)

// Enum value maps for Devm_Ports_Port_Laser_AutoShutEnable.
var (
	Devm_Ports_Port_Laser_AutoShutEnable_name = map[int32]string{
		0: "AutoShutEnable_DISABLE",
		1: "AutoShutEnable_ENABLE",
	}
	Devm_Ports_Port_Laser_AutoShutEnable_value = map[string]int32{
		"AutoShutEnable_DISABLE": 0,
		"AutoShutEnable_ENABLE":  1,
	}
)

func (x Devm_Ports_Port_Laser_AutoShutEnable) Enum() *Devm_Ports_Port_Laser_AutoShutEnable {
	p := new(Devm_Ports_Port_Laser_AutoShutEnable)
	*p = x
	return p
}

func (x Devm_Ports_Port_Laser_AutoShutEnable) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_Laser_AutoShutEnable) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[197].Descriptor()
}

func (Devm_Ports_Port_Laser_AutoShutEnable) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[197]
}

func (x Devm_Ports_Port_Laser_AutoShutEnable) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_Laser_AutoShutEnable.Descriptor instead.
func (Devm_Ports_Port_Laser_AutoShutEnable) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 1, 0}
}

type Devm_Ports_Port_Laser_Status int32

const (
	Devm_Ports_Port_Laser_Status_ON      Devm_Ports_Port_Laser_Status = 0
	Devm_Ports_Port_Laser_Status_OFF     Devm_Ports_Port_Laser_Status = 1
	Devm_Ports_Port_Laser_Status_OFFLINE Devm_Ports_Port_Laser_Status = 2
)

// Enum value maps for Devm_Ports_Port_Laser_Status.
var (
	Devm_Ports_Port_Laser_Status_name = map[int32]string{
		0: "Status_ON",
		1: "Status_OFF",
		2: "Status_OFFLINE",
	}
	Devm_Ports_Port_Laser_Status_value = map[string]int32{
		"Status_ON":      0,
		"Status_OFF":     1,
		"Status_OFFLINE": 2,
	}
)

func (x Devm_Ports_Port_Laser_Status) Enum() *Devm_Ports_Port_Laser_Status {
	p := new(Devm_Ports_Port_Laser_Status)
	*p = x
	return p
}

func (x Devm_Ports_Port_Laser_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_Laser_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[198].Descriptor()
}

func (Devm_Ports_Port_Laser_Status) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[198]
}

func (x Devm_Ports_Port_Laser_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_Laser_Status.Descriptor instead.
func (Devm_Ports_Port_Laser_Status) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 1, 1}
}

type Devm_Ports_Port_OpticalModule_TransMode int32

const (
	Devm_Ports_Port_OpticalModule_TransMode_UNKNOWN      Devm_Ports_Port_OpticalModule_TransMode = 0
	Devm_Ports_Port_OpticalModule_TransMode_SINGLEX_MODE Devm_Ports_Port_OpticalModule_TransMode = 1
	Devm_Ports_Port_OpticalModule_TransMode_MULTIX_MODE  Devm_Ports_Port_OpticalModule_TransMode = 2
	Devm_Ports_Port_OpticalModule_TransMode_COPPERX_MODE Devm_Ports_Port_OpticalModule_TransMode = 3
)

// Enum value maps for Devm_Ports_Port_OpticalModule_TransMode.
var (
	Devm_Ports_Port_OpticalModule_TransMode_name = map[int32]string{
		0: "TransMode_UNKNOWN",
		1: "TransMode_SINGLEX_MODE",
		2: "TransMode_MULTIX_MODE",
		3: "TransMode_COPPERX_MODE",
	}
	Devm_Ports_Port_OpticalModule_TransMode_value = map[string]int32{
		"TransMode_UNKNOWN":      0,
		"TransMode_SINGLEX_MODE": 1,
		"TransMode_MULTIX_MODE":  2,
		"TransMode_COPPERX_MODE": 3,
	}
)

func (x Devm_Ports_Port_OpticalModule_TransMode) Enum() *Devm_Ports_Port_OpticalModule_TransMode {
	p := new(Devm_Ports_Port_OpticalModule_TransMode)
	*p = x
	return p
}

func (x Devm_Ports_Port_OpticalModule_TransMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_OpticalModule_TransMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[199].Descriptor()
}

func (Devm_Ports_Port_OpticalModule_TransMode) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[199]
}

func (x Devm_Ports_Port_OpticalModule_TransMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_OpticalModule_TransMode.Descriptor instead.
func (Devm_Ports_Port_OpticalModule_TransMode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 2, 0}
}

type Devm_Ports_Port_OpticalModule_Type int32

const (
	Devm_Ports_Port_OpticalModule_Type_UNKNOWN             Devm_Ports_Port_OpticalModule_Type = 0
	Devm_Ports_Port_OpticalModule_Type_SC                  Devm_Ports_Port_OpticalModule_Type = 1
	Devm_Ports_Port_OpticalModule_Type_GBIC                Devm_Ports_Port_OpticalModule_Type = 2
	Devm_Ports_Port_OpticalModule_Type_SFP                 Devm_Ports_Port_OpticalModule_Type = 3
	Devm_Ports_Port_OpticalModule_Type_ESFP                Devm_Ports_Port_OpticalModule_Type = 4
	Devm_Ports_Port_OpticalModule_Type_COPPER              Devm_Ports_Port_OpticalModule_Type = 5
	Devm_Ports_Port_OpticalModule_Type_XFP                 Devm_Ports_Port_OpticalModule_Type = 6
	Devm_Ports_Port_OpticalModule_Type_XENPAK              Devm_Ports_Port_OpticalModule_Type = 7
	Devm_Ports_Port_OpticalModule_Type_TRANSPONDER         Devm_Ports_Port_OpticalModule_Type = 8
	Devm_Ports_Port_OpticalModule_Type_CFP                 Devm_Ports_Port_OpticalModule_Type = 9
	Devm_Ports_Port_OpticalModule_Type_SMB                 Devm_Ports_Port_OpticalModule_Type = 10
	Devm_Ports_Port_OpticalModule_Type_SFPX_PLUS           Devm_Ports_Port_OpticalModule_Type = 11
	Devm_Ports_Port_OpticalModule_Type_CXP                 Devm_Ports_Port_OpticalModule_Type = 12
	Devm_Ports_Port_OpticalModule_Type_QSFP                Devm_Ports_Port_OpticalModule_Type = 13
	Devm_Ports_Port_OpticalModule_Type_QSFPX_PLUS          Devm_Ports_Port_OpticalModule_Type = 14
	Devm_Ports_Port_OpticalModule_Type_CFP2                Devm_Ports_Port_OpticalModule_Type = 15
	Devm_Ports_Port_OpticalModule_Type_DWDMSFP             Devm_Ports_Port_OpticalModule_Type = 16
	Devm_Ports_Port_OpticalModule_Type_MSA100GLH           Devm_Ports_Port_OpticalModule_Type = 17
	Devm_Ports_Port_OpticalModule_Type_GPS                 Devm_Ports_Port_OpticalModule_Type = 18
	Devm_Ports_Port_OpticalModule_Type_CSFP                Devm_Ports_Port_OpticalModule_Type = 19
	Devm_Ports_Port_OpticalModule_Type_CFP4                Devm_Ports_Port_OpticalModule_Type = 20
	Devm_Ports_Port_OpticalModule_Type_QSFP28              Devm_Ports_Port_OpticalModule_Type = 21
	Devm_Ports_Port_OpticalModule_Type_SFPX_ANDX_SFPX_PLUS Devm_Ports_Port_OpticalModule_Type = 22
	Devm_Ports_Port_OpticalModule_Type_CFP8                Devm_Ports_Port_OpticalModule_Type = 23
	Devm_Ports_Port_OpticalModule_Type_SFP28               Devm_Ports_Port_OpticalModule_Type = 24
	Devm_Ports_Port_OpticalModule_Type_QSFPX_DD            Devm_Ports_Port_OpticalModule_Type = 25
	Devm_Ports_Port_OpticalModule_Type_GPONSFP             Devm_Ports_Port_OpticalModule_Type = 26
	Devm_Ports_Port_OpticalModule_Type_CFP2DCO             Devm_Ports_Port_OpticalModule_Type = 27
	Devm_Ports_Port_OpticalModule_Type_SFP56               Devm_Ports_Port_OpticalModule_Type = 28
	Devm_Ports_Port_OpticalModule_Type_QSFP56              Devm_Ports_Port_OpticalModule_Type = 29
	Devm_Ports_Port_OpticalModule_Type_OA                  Devm_Ports_Port_OpticalModule_Type = 30
)

// Enum value maps for Devm_Ports_Port_OpticalModule_Type.
var (
	Devm_Ports_Port_OpticalModule_Type_name = map[int32]string{
		0:  "Type_UNKNOWN",
		1:  "Type_SC",
		2:  "Type_GBIC",
		3:  "Type_SFP",
		4:  "Type_ESFP",
		5:  "Type_COPPER",
		6:  "Type_XFP",
		7:  "Type_XENPAK",
		8:  "Type_TRANSPONDER",
		9:  "Type_CFP",
		10: "Type_SMB",
		11: "Type_SFPX_PLUS",
		12: "Type_CXP",
		13: "Type_QSFP",
		14: "Type_QSFPX_PLUS",
		15: "Type_CFP2",
		16: "Type_DWDMSFP",
		17: "Type_MSA100GLH",
		18: "Type_GPS",
		19: "Type_CSFP",
		20: "Type_CFP4",
		21: "Type_QSFP28",
		22: "Type_SFPX_ANDX_SFPX_PLUS",
		23: "Type_CFP8",
		24: "Type_SFP28",
		25: "Type_QSFPX_DD",
		26: "Type_GPONSFP",
		27: "Type_CFP2DCO",
		28: "Type_SFP56",
		29: "Type_QSFP56",
		30: "Type_OA",
	}
	Devm_Ports_Port_OpticalModule_Type_value = map[string]int32{
		"Type_UNKNOWN":             0,
		"Type_SC":                  1,
		"Type_GBIC":                2,
		"Type_SFP":                 3,
		"Type_ESFP":                4,
		"Type_COPPER":              5,
		"Type_XFP":                 6,
		"Type_XENPAK":              7,
		"Type_TRANSPONDER":         8,
		"Type_CFP":                 9,
		"Type_SMB":                 10,
		"Type_SFPX_PLUS":           11,
		"Type_CXP":                 12,
		"Type_QSFP":                13,
		"Type_QSFPX_PLUS":          14,
		"Type_CFP2":                15,
		"Type_DWDMSFP":             16,
		"Type_MSA100GLH":           17,
		"Type_GPS":                 18,
		"Type_CSFP":                19,
		"Type_CFP4":                20,
		"Type_QSFP28":              21,
		"Type_SFPX_ANDX_SFPX_PLUS": 22,
		"Type_CFP8":                23,
		"Type_SFP28":               24,
		"Type_QSFPX_DD":            25,
		"Type_GPONSFP":             26,
		"Type_CFP2DCO":             27,
		"Type_SFP56":               28,
		"Type_QSFP56":              29,
		"Type_OA":                  30,
	}
)

func (x Devm_Ports_Port_OpticalModule_Type) Enum() *Devm_Ports_Port_OpticalModule_Type {
	p := new(Devm_Ports_Port_OpticalModule_Type)
	*p = x
	return p
}

func (x Devm_Ports_Port_OpticalModule_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_OpticalModule_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[200].Descriptor()
}

func (Devm_Ports_Port_OpticalModule_Type) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[200]
}

func (x Devm_Ports_Port_OpticalModule_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_OpticalModule_Type.Descriptor instead.
func (Devm_Ports_Port_OpticalModule_Type) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 2, 1}
}

type Devm_Ports_Port_OpticalModule_FiberType int32

const (
	Devm_Ports_Port_OpticalModule_FiberType_UNKNOWN                     Devm_Ports_Port_OpticalModule_FiberType = 0
	Devm_Ports_Port_OpticalModule_FiberType_SC                          Devm_Ports_Port_OpticalModule_FiberType = 1
	Devm_Ports_Port_OpticalModule_FiberType_STYLEX_1X_COPPERX_CONNECTOR Devm_Ports_Port_OpticalModule_FiberType = 2
	Devm_Ports_Port_OpticalModule_FiberType_STYLEX_2X_COPPERX_CONNECTOR Devm_Ports_Port_OpticalModule_FiberType = 3
	Devm_Ports_Port_OpticalModule_FiberType_BNCX_TNC                    Devm_Ports_Port_OpticalModule_FiberType = 4
	Devm_Ports_Port_OpticalModule_FiberType_COAXIALX_HEADERS            Devm_Ports_Port_OpticalModule_FiberType = 5
	Devm_Ports_Port_OpticalModule_FiberType_FIBERX_JACK                 Devm_Ports_Port_OpticalModule_FiberType = 6
	Devm_Ports_Port_OpticalModule_FiberType_LC                          Devm_Ports_Port_OpticalModule_FiberType = 7
	Devm_Ports_Port_OpticalModule_FiberType_MTX_RJ                      Devm_Ports_Port_OpticalModule_FiberType = 8
	Devm_Ports_Port_OpticalModule_FiberType_MU                          Devm_Ports_Port_OpticalModule_FiberType = 9
	Devm_Ports_Port_OpticalModule_FiberType_SG                          Devm_Ports_Port_OpticalModule_FiberType = 10
	Devm_Ports_Port_OpticalModule_FiberType_OPTICALX_PIGTAIL            Devm_Ports_Port_OpticalModule_FiberType = 11
	Devm_Ports_Port_OpticalModule_FiberType_HSSDCII                     Devm_Ports_Port_OpticalModule_FiberType = 12
	Devm_Ports_Port_OpticalModule_FiberType_COPPERX_PIGTAIL             Devm_Ports_Port_OpticalModule_FiberType = 13
	Devm_Ports_Port_OpticalModule_FiberType_MPO                         Devm_Ports_Port_OpticalModule_FiberType = 14
	Devm_Ports_Port_OpticalModule_FiberType_NA                          Devm_Ports_Port_OpticalModule_FiberType = 15
	Devm_Ports_Port_OpticalModule_FiberType_RJ45                        Devm_Ports_Port_OpticalModule_FiberType = 16
	Devm_Ports_Port_OpticalModule_FiberType_MPOX_1X12                   Devm_Ports_Port_OpticalModule_FiberType = 17
	Devm_Ports_Port_OpticalModule_FiberType_MPOX_2X16                   Devm_Ports_Port_OpticalModule_FiberType = 18
	Devm_Ports_Port_OpticalModule_FiberType_NOX_SEPARABLE               Devm_Ports_Port_OpticalModule_FiberType = 19
	Devm_Ports_Port_OpticalModule_FiberType_MXCX_2X16                   Devm_Ports_Port_OpticalModule_FiberType = 20
	Devm_Ports_Port_OpticalModule_FiberType_CSX_OPTICAL                 Devm_Ports_Port_OpticalModule_FiberType = 21
	Devm_Ports_Port_OpticalModule_FiberType_SNX_OPTICAL                 Devm_Ports_Port_OpticalModule_FiberType = 22
	Devm_Ports_Port_OpticalModule_FiberType_MPOX_2X12                   Devm_Ports_Port_OpticalModule_FiberType = 23
	Devm_Ports_Port_OpticalModule_FiberType_MPOX_1X16                   Devm_Ports_Port_OpticalModule_FiberType = 24
	Devm_Ports_Port_OpticalModule_FiberType_ANGLEDX_LC                  Devm_Ports_Port_OpticalModule_FiberType = 25
)

// Enum value maps for Devm_Ports_Port_OpticalModule_FiberType.
var (
	Devm_Ports_Port_OpticalModule_FiberType_name = map[int32]string{
		0:  "FiberType_UNKNOWN",
		1:  "FiberType_SC",
		2:  "FiberType_STYLEX_1X_COPPERX_CONNECTOR",
		3:  "FiberType_STYLEX_2X_COPPERX_CONNECTOR",
		4:  "FiberType_BNCX_TNC",
		5:  "FiberType_COAXIALX_HEADERS",
		6:  "FiberType_FIBERX_JACK",
		7:  "FiberType_LC",
		8:  "FiberType_MTX_RJ",
		9:  "FiberType_MU",
		10: "FiberType_SG",
		11: "FiberType_OPTICALX_PIGTAIL",
		12: "FiberType_HSSDCII",
		13: "FiberType_COPPERX_PIGTAIL",
		14: "FiberType_MPO",
		15: "FiberType_NA",
		16: "FiberType_RJ45",
		17: "FiberType_MPOX_1X12",
		18: "FiberType_MPOX_2X16",
		19: "FiberType_NOX_SEPARABLE",
		20: "FiberType_MXCX_2X16",
		21: "FiberType_CSX_OPTICAL",
		22: "FiberType_SNX_OPTICAL",
		23: "FiberType_MPOX_2X12",
		24: "FiberType_MPOX_1X16",
		25: "FiberType_ANGLEDX_LC",
	}
	Devm_Ports_Port_OpticalModule_FiberType_value = map[string]int32{
		"FiberType_UNKNOWN":                     0,
		"FiberType_SC":                          1,
		"FiberType_STYLEX_1X_COPPERX_CONNECTOR": 2,
		"FiberType_STYLEX_2X_COPPERX_CONNECTOR": 3,
		"FiberType_BNCX_TNC":                    4,
		"FiberType_COAXIALX_HEADERS":            5,
		"FiberType_FIBERX_JACK":                 6,
		"FiberType_LC":                          7,
		"FiberType_MTX_RJ":                      8,
		"FiberType_MU":                          9,
		"FiberType_SG":                          10,
		"FiberType_OPTICALX_PIGTAIL":            11,
		"FiberType_HSSDCII":                     12,
		"FiberType_COPPERX_PIGTAIL":             13,
		"FiberType_MPO":                         14,
		"FiberType_NA":                          15,
		"FiberType_RJ45":                        16,
		"FiberType_MPOX_1X12":                   17,
		"FiberType_MPOX_2X16":                   18,
		"FiberType_NOX_SEPARABLE":               19,
		"FiberType_MXCX_2X16":                   20,
		"FiberType_CSX_OPTICAL":                 21,
		"FiberType_SNX_OPTICAL":                 22,
		"FiberType_MPOX_2X12":                   23,
		"FiberType_MPOX_1X16":                   24,
		"FiberType_ANGLEDX_LC":                  25,
	}
)

func (x Devm_Ports_Port_OpticalModule_FiberType) Enum() *Devm_Ports_Port_OpticalModule_FiberType {
	p := new(Devm_Ports_Port_OpticalModule_FiberType)
	*p = x
	return p
}

func (x Devm_Ports_Port_OpticalModule_FiberType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_OpticalModule_FiberType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[201].Descriptor()
}

func (Devm_Ports_Port_OpticalModule_FiberType) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[201]
}

func (x Devm_Ports_Port_OpticalModule_FiberType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_OpticalModule_FiberType.Descriptor instead.
func (Devm_Ports_Port_OpticalModule_FiberType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 2, 2}
}

type Devm_Ports_Port_OpticalModule_Tunable int32

const (
	Devm_Ports_Port_OpticalModule_INVALID_ENUM_VALUE_Tunable Devm_Ports_Port_OpticalModule_Tunable = 0
	Devm_Ports_Port_OpticalModule_Tunable_NOTX_SUPPORTED     Devm_Ports_Port_OpticalModule_Tunable = 1
	Devm_Ports_Port_OpticalModule_Tunable_NOTX_TUNABLE       Devm_Ports_Port_OpticalModule_Tunable = 2
	Devm_Ports_Port_OpticalModule_Tunable_TUNABLE            Devm_Ports_Port_OpticalModule_Tunable = 3
	Devm_Ports_Port_OpticalModule_Tunable_SUPPORTED          Devm_Ports_Port_OpticalModule_Tunable = 4
)

// Enum value maps for Devm_Ports_Port_OpticalModule_Tunable.
var (
	Devm_Ports_Port_OpticalModule_Tunable_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Tunable",
		1: "Tunable_NOTX_SUPPORTED",
		2: "Tunable_NOTX_TUNABLE",
		3: "Tunable_TUNABLE",
		4: "Tunable_SUPPORTED",
	}
	Devm_Ports_Port_OpticalModule_Tunable_value = map[string]int32{
		"INVALID_ENUM_VALUE_Tunable": 0,
		"Tunable_NOTX_SUPPORTED":     1,
		"Tunable_NOTX_TUNABLE":       2,
		"Tunable_TUNABLE":            3,
		"Tunable_SUPPORTED":          4,
	}
)

func (x Devm_Ports_Port_OpticalModule_Tunable) Enum() *Devm_Ports_Port_OpticalModule_Tunable {
	p := new(Devm_Ports_Port_OpticalModule_Tunable)
	*p = x
	return p
}

func (x Devm_Ports_Port_OpticalModule_Tunable) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_OpticalModule_Tunable) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[202].Descriptor()
}

func (Devm_Ports_Port_OpticalModule_Tunable) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[202]
}

func (x Devm_Ports_Port_OpticalModule_Tunable) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_OpticalModule_Tunable.Descriptor instead.
func (Devm_Ports_Port_OpticalModule_Tunable) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 2, 3}
}

type Devm_Ports_Port_OpticalModule_DirectionType int32

const (
	Devm_Ports_Port_OpticalModule_INVALID_ENUM_VALUE_DirectionType                    Devm_Ports_Port_OpticalModule_DirectionType = 0
	Devm_Ports_Port_OpticalModule_DirectionType_NOTX_SUPPORTED                        Devm_Ports_Port_OpticalModule_DirectionType = 1
	Devm_Ports_Port_OpticalModule_DirectionType_DUALX_FIBERX_BIDIRECTION              Devm_Ports_Port_OpticalModule_DirectionType = 2
	Devm_Ports_Port_OpticalModule_DirectionType_SINGLEX_FIBERX_BIDIRECTIONAL          Devm_Ports_Port_OpticalModule_DirectionType = 3
	Devm_Ports_Port_OpticalModule_DirectionType_DUALX_FIBERX_TWOX_PORTX_BIDIRECTIONAL Devm_Ports_Port_OpticalModule_DirectionType = 4
)

// Enum value maps for Devm_Ports_Port_OpticalModule_DirectionType.
var (
	Devm_Ports_Port_OpticalModule_DirectionType_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_DirectionType",
		1: "DirectionType_NOTX_SUPPORTED",
		2: "DirectionType_DUALX_FIBERX_BIDIRECTION",
		3: "DirectionType_SINGLEX_FIBERX_BIDIRECTIONAL",
		4: "DirectionType_DUALX_FIBERX_TWOX_PORTX_BIDIRECTIONAL",
	}
	Devm_Ports_Port_OpticalModule_DirectionType_value = map[string]int32{
		"INVALID_ENUM_VALUE_DirectionType":                    0,
		"DirectionType_NOTX_SUPPORTED":                        1,
		"DirectionType_DUALX_FIBERX_BIDIRECTION":              2,
		"DirectionType_SINGLEX_FIBERX_BIDIRECTIONAL":          3,
		"DirectionType_DUALX_FIBERX_TWOX_PORTX_BIDIRECTIONAL": 4,
	}
)

func (x Devm_Ports_Port_OpticalModule_DirectionType) Enum() *Devm_Ports_Port_OpticalModule_DirectionType {
	p := new(Devm_Ports_Port_OpticalModule_DirectionType)
	*p = x
	return p
}

func (x Devm_Ports_Port_OpticalModule_DirectionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_OpticalModule_DirectionType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[203].Descriptor()
}

func (Devm_Ports_Port_OpticalModule_DirectionType) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[203]
}

func (x Devm_Ports_Port_OpticalModule_DirectionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_OpticalModule_DirectionType.Descriptor instead.
func (Devm_Ports_Port_OpticalModule_DirectionType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 2, 4}
}

type Devm_Ports_Port_OpticalModule_WaveModulationMode int32

const (
	Devm_Ports_Port_OpticalModule_WaveModulationMode_DQPSK Devm_Ports_Port_OpticalModule_WaveModulationMode = 0
	Devm_Ports_Port_OpticalModule_WaveModulationMode_QPSK  Devm_Ports_Port_OpticalModule_WaveModulationMode = 1
)

// Enum value maps for Devm_Ports_Port_OpticalModule_WaveModulationMode.
var (
	Devm_Ports_Port_OpticalModule_WaveModulationMode_name = map[int32]string{
		0: "WaveModulationMode_DQPSK",
		1: "WaveModulationMode_QPSK",
	}
	Devm_Ports_Port_OpticalModule_WaveModulationMode_value = map[string]int32{
		"WaveModulationMode_DQPSK": 0,
		"WaveModulationMode_QPSK":  1,
	}
)

func (x Devm_Ports_Port_OpticalModule_WaveModulationMode) Enum() *Devm_Ports_Port_OpticalModule_WaveModulationMode {
	p := new(Devm_Ports_Port_OpticalModule_WaveModulationMode)
	*p = x
	return p
}

func (x Devm_Ports_Port_OpticalModule_WaveModulationMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_OpticalModule_WaveModulationMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[204].Descriptor()
}

func (Devm_Ports_Port_OpticalModule_WaveModulationMode) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[204]
}

func (x Devm_Ports_Port_OpticalModule_WaveModulationMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_OpticalModule_WaveModulationMode.Descriptor instead.
func (Devm_Ports_Port_OpticalModule_WaveModulationMode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 2, 5}
}

type Devm_Ports_Port_OpticalModule_WavelengthChannelNumber int32

const (
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_196X_10THZX_1528X_773NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 0
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_196X_05THZX_1529X_163NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 1
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_196X_00THZX_1529X_553NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 2
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_195X_95THZX_1529X_944NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 3
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_195X_90THZX_1530X_334NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 4
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_195X_85THZX_1530X_725NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 5
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_195X_80THZX_1531X_116NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 6
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_195X_75THZX_1531X_507NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 7
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_195X_70THZX_1531X_898NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 8
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_195X_65THZX_1532X_290NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 9
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_195X_60THZX_1532X_681NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 10
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_195X_55THZX_1533X_073NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 11
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_195X_50THZX_1533X_465NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 12
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_195X_45THZX_1533X_858NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 13
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_195X_40THZX_1534X_250NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 14
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_195X_35THZX_1534X_643NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 15
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_195X_30THZX_1535X_036NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 16
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_195X_25THZX_1535X_429NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 17
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_195X_20THZX_1535X_822NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 18
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_195X_15THZX_1536X_216NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 19
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_195X_10THZX_1536X_609NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 20
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_195X_05THZX_1537X_003NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 21
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_195X_00THZX_1537X_397NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 22
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_194X_95THZX_1537X_792NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 23
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_194X_90THZX_1538X_186NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 24
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_194X_85THZX_1538X_581NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 25
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_194X_80THZX_1538X_976NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 26
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_194X_75THZX_1539X_371NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 27
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_194X_70THZX_1539X_766NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 28
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_194X_65THZX_1540X_162NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 29
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_194X_60THZX_1540X_557NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 30
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_194X_55THZX_1540X_953NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 31
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_194X_50THZX_1541X_349NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 32
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_194X_45THZX_1541X_746NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 33
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_194X_40THZX_1542X_142NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 34
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_194X_35THZX_1542X_539NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 35
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_194X_30THZX_1542X_936NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 36
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_194X_25THZX_1543X_333NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 37
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_194X_20THZX_1543X_730NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 38
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_194X_15THZX_1544X_128NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 39
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_194X_10THZX_1544X_526NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 40
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_194X_05THZX_1544X_924NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 41
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_194X_00THZX_1545X_322NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 42
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_193X_95THZX_1545X_720NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 43
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_193X_90THZX_1546X_119NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 44
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_193X_85THZX_1546X_518NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 45
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_193X_80THZX_1546X_917NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 46
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_193X_75THZX_1547X_316NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 47
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_193X_70THZX_1547X_715NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 48
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_193X_65THZX_1548X_115NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 49
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_193X_60THZX_1548X_515NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 50
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_193X_55THZX_1548X_915NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 51
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_193X_50THZX_1549X_315NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 52
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_193X_45THZX_1549X_715NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 53
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_193X_40THZX_1550X_116NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 54
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_193X_35THZX_1550X_517NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 55
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_193X_30THZX_1550X_918NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 56
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_193X_25THZX_1551X_319NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 57
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_193X_20THZX_1551X_721NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 58
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_193X_15THZX_1552X_122NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 59
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_193X_10THZX_1552X_524NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 60
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_193X_05THZX_1552X_926NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 61
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_193X_00THZX_1553X_329NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 62
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_192X_95THZX_1553X_731NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 63
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_192X_90THZX_1554X_134NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 64
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_192X_85THZX_1554X_537NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 65
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_192X_80THZX_1554X_940NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 66
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_192X_75THZX_1555X_343NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 67
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_192X_70THZX_1555X_747NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 68
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_192X_65THZX_1556X_151NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 69
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_192X_60THZX_1556X_555NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 70
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_192X_55THZX_1556X_959NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 71
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_192X_50THZX_1557X_363NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 72
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_192X_45THZX_1557X_768NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 73
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_192X_40THZX_1558X_173NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 74
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_192X_35THZX_1558X_578NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 75
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_192X_30THZX_1558X_983NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 76
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_192X_25THZX_1559X_389NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 77
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_192X_20THZX_1559X_794NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 78
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_192X_15THZX_1560X_200NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 79
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_192X_10THZX_1560X_606NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 80
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_192X_05THZX_1561X_013NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 81
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_192X_00THZX_1561X_419NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 82
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_191X_95THZX_1561X_826NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 83
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_191X_90THZX_1562X_233NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 84
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_191X_85THZX_1562X_640NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 85
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_191X_80THZX_1563X_047NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 86
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_191X_75THZX_1563X_455NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 87
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_191X_70THZX_1563X_863NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 88
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_191X_65THZX_1564X_271NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 89
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_191X_60THZX_1564X_679NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 90
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_191X_55THZX_1565X_087NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 91
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_191X_50THZX_1565X_496NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 92
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_191X_45THZX_1565X_905NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 93
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_191X_40THZX_1566X_314NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 94
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_191X_35THZX_1566X_723NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 95
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_191X_30THZX_1567X_133NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 96
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_191X_25THZX_1567X_542NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 97
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_191X_20THZX_1567X_952NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 98
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_191X_15THZX_1568X_362NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumber = 99
)

// Enum value maps for Devm_Ports_Port_OpticalModule_WavelengthChannelNumber.
var (
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_name = map[int32]string{
		0:  "WavelengthChannelNumber_X_196X_10THZX_1528X_773NM",
		1:  "WavelengthChannelNumber_X_196X_05THZX_1529X_163NM",
		2:  "WavelengthChannelNumber_X_196X_00THZX_1529X_553NM",
		3:  "WavelengthChannelNumber_X_195X_95THZX_1529X_944NM",
		4:  "WavelengthChannelNumber_X_195X_90THZX_1530X_334NM",
		5:  "WavelengthChannelNumber_X_195X_85THZX_1530X_725NM",
		6:  "WavelengthChannelNumber_X_195X_80THZX_1531X_116NM",
		7:  "WavelengthChannelNumber_X_195X_75THZX_1531X_507NM",
		8:  "WavelengthChannelNumber_X_195X_70THZX_1531X_898NM",
		9:  "WavelengthChannelNumber_X_195X_65THZX_1532X_290NM",
		10: "WavelengthChannelNumber_X_195X_60THZX_1532X_681NM",
		11: "WavelengthChannelNumber_X_195X_55THZX_1533X_073NM",
		12: "WavelengthChannelNumber_X_195X_50THZX_1533X_465NM",
		13: "WavelengthChannelNumber_X_195X_45THZX_1533X_858NM",
		14: "WavelengthChannelNumber_X_195X_40THZX_1534X_250NM",
		15: "WavelengthChannelNumber_X_195X_35THZX_1534X_643NM",
		16: "WavelengthChannelNumber_X_195X_30THZX_1535X_036NM",
		17: "WavelengthChannelNumber_X_195X_25THZX_1535X_429NM",
		18: "WavelengthChannelNumber_X_195X_20THZX_1535X_822NM",
		19: "WavelengthChannelNumber_X_195X_15THZX_1536X_216NM",
		20: "WavelengthChannelNumber_X_195X_10THZX_1536X_609NM",
		21: "WavelengthChannelNumber_X_195X_05THZX_1537X_003NM",
		22: "WavelengthChannelNumber_X_195X_00THZX_1537X_397NM",
		23: "WavelengthChannelNumber_X_194X_95THZX_1537X_792NM",
		24: "WavelengthChannelNumber_X_194X_90THZX_1538X_186NM",
		25: "WavelengthChannelNumber_X_194X_85THZX_1538X_581NM",
		26: "WavelengthChannelNumber_X_194X_80THZX_1538X_976NM",
		27: "WavelengthChannelNumber_X_194X_75THZX_1539X_371NM",
		28: "WavelengthChannelNumber_X_194X_70THZX_1539X_766NM",
		29: "WavelengthChannelNumber_X_194X_65THZX_1540X_162NM",
		30: "WavelengthChannelNumber_X_194X_60THZX_1540X_557NM",
		31: "WavelengthChannelNumber_X_194X_55THZX_1540X_953NM",
		32: "WavelengthChannelNumber_X_194X_50THZX_1541X_349NM",
		33: "WavelengthChannelNumber_X_194X_45THZX_1541X_746NM",
		34: "WavelengthChannelNumber_X_194X_40THZX_1542X_142NM",
		35: "WavelengthChannelNumber_X_194X_35THZX_1542X_539NM",
		36: "WavelengthChannelNumber_X_194X_30THZX_1542X_936NM",
		37: "WavelengthChannelNumber_X_194X_25THZX_1543X_333NM",
		38: "WavelengthChannelNumber_X_194X_20THZX_1543X_730NM",
		39: "WavelengthChannelNumber_X_194X_15THZX_1544X_128NM",
		40: "WavelengthChannelNumber_X_194X_10THZX_1544X_526NM",
		41: "WavelengthChannelNumber_X_194X_05THZX_1544X_924NM",
		42: "WavelengthChannelNumber_X_194X_00THZX_1545X_322NM",
		43: "WavelengthChannelNumber_X_193X_95THZX_1545X_720NM",
		44: "WavelengthChannelNumber_X_193X_90THZX_1546X_119NM",
		45: "WavelengthChannelNumber_X_193X_85THZX_1546X_518NM",
		46: "WavelengthChannelNumber_X_193X_80THZX_1546X_917NM",
		47: "WavelengthChannelNumber_X_193X_75THZX_1547X_316NM",
		48: "WavelengthChannelNumber_X_193X_70THZX_1547X_715NM",
		49: "WavelengthChannelNumber_X_193X_65THZX_1548X_115NM",
		50: "WavelengthChannelNumber_X_193X_60THZX_1548X_515NM",
		51: "WavelengthChannelNumber_X_193X_55THZX_1548X_915NM",
		52: "WavelengthChannelNumber_X_193X_50THZX_1549X_315NM",
		53: "WavelengthChannelNumber_X_193X_45THZX_1549X_715NM",
		54: "WavelengthChannelNumber_X_193X_40THZX_1550X_116NM",
		55: "WavelengthChannelNumber_X_193X_35THZX_1550X_517NM",
		56: "WavelengthChannelNumber_X_193X_30THZX_1550X_918NM",
		57: "WavelengthChannelNumber_X_193X_25THZX_1551X_319NM",
		58: "WavelengthChannelNumber_X_193X_20THZX_1551X_721NM",
		59: "WavelengthChannelNumber_X_193X_15THZX_1552X_122NM",
		60: "WavelengthChannelNumber_X_193X_10THZX_1552X_524NM",
		61: "WavelengthChannelNumber_X_193X_05THZX_1552X_926NM",
		62: "WavelengthChannelNumber_X_193X_00THZX_1553X_329NM",
		63: "WavelengthChannelNumber_X_192X_95THZX_1553X_731NM",
		64: "WavelengthChannelNumber_X_192X_90THZX_1554X_134NM",
		65: "WavelengthChannelNumber_X_192X_85THZX_1554X_537NM",
		66: "WavelengthChannelNumber_X_192X_80THZX_1554X_940NM",
		67: "WavelengthChannelNumber_X_192X_75THZX_1555X_343NM",
		68: "WavelengthChannelNumber_X_192X_70THZX_1555X_747NM",
		69: "WavelengthChannelNumber_X_192X_65THZX_1556X_151NM",
		70: "WavelengthChannelNumber_X_192X_60THZX_1556X_555NM",
		71: "WavelengthChannelNumber_X_192X_55THZX_1556X_959NM",
		72: "WavelengthChannelNumber_X_192X_50THZX_1557X_363NM",
		73: "WavelengthChannelNumber_X_192X_45THZX_1557X_768NM",
		74: "WavelengthChannelNumber_X_192X_40THZX_1558X_173NM",
		75: "WavelengthChannelNumber_X_192X_35THZX_1558X_578NM",
		76: "WavelengthChannelNumber_X_192X_30THZX_1558X_983NM",
		77: "WavelengthChannelNumber_X_192X_25THZX_1559X_389NM",
		78: "WavelengthChannelNumber_X_192X_20THZX_1559X_794NM",
		79: "WavelengthChannelNumber_X_192X_15THZX_1560X_200NM",
		80: "WavelengthChannelNumber_X_192X_10THZX_1560X_606NM",
		81: "WavelengthChannelNumber_X_192X_05THZX_1561X_013NM",
		82: "WavelengthChannelNumber_X_192X_00THZX_1561X_419NM",
		83: "WavelengthChannelNumber_X_191X_95THZX_1561X_826NM",
		84: "WavelengthChannelNumber_X_191X_90THZX_1562X_233NM",
		85: "WavelengthChannelNumber_X_191X_85THZX_1562X_640NM",
		86: "WavelengthChannelNumber_X_191X_80THZX_1563X_047NM",
		87: "WavelengthChannelNumber_X_191X_75THZX_1563X_455NM",
		88: "WavelengthChannelNumber_X_191X_70THZX_1563X_863NM",
		89: "WavelengthChannelNumber_X_191X_65THZX_1564X_271NM",
		90: "WavelengthChannelNumber_X_191X_60THZX_1564X_679NM",
		91: "WavelengthChannelNumber_X_191X_55THZX_1565X_087NM",
		92: "WavelengthChannelNumber_X_191X_50THZX_1565X_496NM",
		93: "WavelengthChannelNumber_X_191X_45THZX_1565X_905NM",
		94: "WavelengthChannelNumber_X_191X_40THZX_1566X_314NM",
		95: "WavelengthChannelNumber_X_191X_35THZX_1566X_723NM",
		96: "WavelengthChannelNumber_X_191X_30THZX_1567X_133NM",
		97: "WavelengthChannelNumber_X_191X_25THZX_1567X_542NM",
		98: "WavelengthChannelNumber_X_191X_20THZX_1567X_952NM",
		99: "WavelengthChannelNumber_X_191X_15THZX_1568X_362NM",
	}
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_value = map[string]int32{
		"WavelengthChannelNumber_X_196X_10THZX_1528X_773NM": 0,
		"WavelengthChannelNumber_X_196X_05THZX_1529X_163NM": 1,
		"WavelengthChannelNumber_X_196X_00THZX_1529X_553NM": 2,
		"WavelengthChannelNumber_X_195X_95THZX_1529X_944NM": 3,
		"WavelengthChannelNumber_X_195X_90THZX_1530X_334NM": 4,
		"WavelengthChannelNumber_X_195X_85THZX_1530X_725NM": 5,
		"WavelengthChannelNumber_X_195X_80THZX_1531X_116NM": 6,
		"WavelengthChannelNumber_X_195X_75THZX_1531X_507NM": 7,
		"WavelengthChannelNumber_X_195X_70THZX_1531X_898NM": 8,
		"WavelengthChannelNumber_X_195X_65THZX_1532X_290NM": 9,
		"WavelengthChannelNumber_X_195X_60THZX_1532X_681NM": 10,
		"WavelengthChannelNumber_X_195X_55THZX_1533X_073NM": 11,
		"WavelengthChannelNumber_X_195X_50THZX_1533X_465NM": 12,
		"WavelengthChannelNumber_X_195X_45THZX_1533X_858NM": 13,
		"WavelengthChannelNumber_X_195X_40THZX_1534X_250NM": 14,
		"WavelengthChannelNumber_X_195X_35THZX_1534X_643NM": 15,
		"WavelengthChannelNumber_X_195X_30THZX_1535X_036NM": 16,
		"WavelengthChannelNumber_X_195X_25THZX_1535X_429NM": 17,
		"WavelengthChannelNumber_X_195X_20THZX_1535X_822NM": 18,
		"WavelengthChannelNumber_X_195X_15THZX_1536X_216NM": 19,
		"WavelengthChannelNumber_X_195X_10THZX_1536X_609NM": 20,
		"WavelengthChannelNumber_X_195X_05THZX_1537X_003NM": 21,
		"WavelengthChannelNumber_X_195X_00THZX_1537X_397NM": 22,
		"WavelengthChannelNumber_X_194X_95THZX_1537X_792NM": 23,
		"WavelengthChannelNumber_X_194X_90THZX_1538X_186NM": 24,
		"WavelengthChannelNumber_X_194X_85THZX_1538X_581NM": 25,
		"WavelengthChannelNumber_X_194X_80THZX_1538X_976NM": 26,
		"WavelengthChannelNumber_X_194X_75THZX_1539X_371NM": 27,
		"WavelengthChannelNumber_X_194X_70THZX_1539X_766NM": 28,
		"WavelengthChannelNumber_X_194X_65THZX_1540X_162NM": 29,
		"WavelengthChannelNumber_X_194X_60THZX_1540X_557NM": 30,
		"WavelengthChannelNumber_X_194X_55THZX_1540X_953NM": 31,
		"WavelengthChannelNumber_X_194X_50THZX_1541X_349NM": 32,
		"WavelengthChannelNumber_X_194X_45THZX_1541X_746NM": 33,
		"WavelengthChannelNumber_X_194X_40THZX_1542X_142NM": 34,
		"WavelengthChannelNumber_X_194X_35THZX_1542X_539NM": 35,
		"WavelengthChannelNumber_X_194X_30THZX_1542X_936NM": 36,
		"WavelengthChannelNumber_X_194X_25THZX_1543X_333NM": 37,
		"WavelengthChannelNumber_X_194X_20THZX_1543X_730NM": 38,
		"WavelengthChannelNumber_X_194X_15THZX_1544X_128NM": 39,
		"WavelengthChannelNumber_X_194X_10THZX_1544X_526NM": 40,
		"WavelengthChannelNumber_X_194X_05THZX_1544X_924NM": 41,
		"WavelengthChannelNumber_X_194X_00THZX_1545X_322NM": 42,
		"WavelengthChannelNumber_X_193X_95THZX_1545X_720NM": 43,
		"WavelengthChannelNumber_X_193X_90THZX_1546X_119NM": 44,
		"WavelengthChannelNumber_X_193X_85THZX_1546X_518NM": 45,
		"WavelengthChannelNumber_X_193X_80THZX_1546X_917NM": 46,
		"WavelengthChannelNumber_X_193X_75THZX_1547X_316NM": 47,
		"WavelengthChannelNumber_X_193X_70THZX_1547X_715NM": 48,
		"WavelengthChannelNumber_X_193X_65THZX_1548X_115NM": 49,
		"WavelengthChannelNumber_X_193X_60THZX_1548X_515NM": 50,
		"WavelengthChannelNumber_X_193X_55THZX_1548X_915NM": 51,
		"WavelengthChannelNumber_X_193X_50THZX_1549X_315NM": 52,
		"WavelengthChannelNumber_X_193X_45THZX_1549X_715NM": 53,
		"WavelengthChannelNumber_X_193X_40THZX_1550X_116NM": 54,
		"WavelengthChannelNumber_X_193X_35THZX_1550X_517NM": 55,
		"WavelengthChannelNumber_X_193X_30THZX_1550X_918NM": 56,
		"WavelengthChannelNumber_X_193X_25THZX_1551X_319NM": 57,
		"WavelengthChannelNumber_X_193X_20THZX_1551X_721NM": 58,
		"WavelengthChannelNumber_X_193X_15THZX_1552X_122NM": 59,
		"WavelengthChannelNumber_X_193X_10THZX_1552X_524NM": 60,
		"WavelengthChannelNumber_X_193X_05THZX_1552X_926NM": 61,
		"WavelengthChannelNumber_X_193X_00THZX_1553X_329NM": 62,
		"WavelengthChannelNumber_X_192X_95THZX_1553X_731NM": 63,
		"WavelengthChannelNumber_X_192X_90THZX_1554X_134NM": 64,
		"WavelengthChannelNumber_X_192X_85THZX_1554X_537NM": 65,
		"WavelengthChannelNumber_X_192X_80THZX_1554X_940NM": 66,
		"WavelengthChannelNumber_X_192X_75THZX_1555X_343NM": 67,
		"WavelengthChannelNumber_X_192X_70THZX_1555X_747NM": 68,
		"WavelengthChannelNumber_X_192X_65THZX_1556X_151NM": 69,
		"WavelengthChannelNumber_X_192X_60THZX_1556X_555NM": 70,
		"WavelengthChannelNumber_X_192X_55THZX_1556X_959NM": 71,
		"WavelengthChannelNumber_X_192X_50THZX_1557X_363NM": 72,
		"WavelengthChannelNumber_X_192X_45THZX_1557X_768NM": 73,
		"WavelengthChannelNumber_X_192X_40THZX_1558X_173NM": 74,
		"WavelengthChannelNumber_X_192X_35THZX_1558X_578NM": 75,
		"WavelengthChannelNumber_X_192X_30THZX_1558X_983NM": 76,
		"WavelengthChannelNumber_X_192X_25THZX_1559X_389NM": 77,
		"WavelengthChannelNumber_X_192X_20THZX_1559X_794NM": 78,
		"WavelengthChannelNumber_X_192X_15THZX_1560X_200NM": 79,
		"WavelengthChannelNumber_X_192X_10THZX_1560X_606NM": 80,
		"WavelengthChannelNumber_X_192X_05THZX_1561X_013NM": 81,
		"WavelengthChannelNumber_X_192X_00THZX_1561X_419NM": 82,
		"WavelengthChannelNumber_X_191X_95THZX_1561X_826NM": 83,
		"WavelengthChannelNumber_X_191X_90THZX_1562X_233NM": 84,
		"WavelengthChannelNumber_X_191X_85THZX_1562X_640NM": 85,
		"WavelengthChannelNumber_X_191X_80THZX_1563X_047NM": 86,
		"WavelengthChannelNumber_X_191X_75THZX_1563X_455NM": 87,
		"WavelengthChannelNumber_X_191X_70THZX_1563X_863NM": 88,
		"WavelengthChannelNumber_X_191X_65THZX_1564X_271NM": 89,
		"WavelengthChannelNumber_X_191X_60THZX_1564X_679NM": 90,
		"WavelengthChannelNumber_X_191X_55THZX_1565X_087NM": 91,
		"WavelengthChannelNumber_X_191X_50THZX_1565X_496NM": 92,
		"WavelengthChannelNumber_X_191X_45THZX_1565X_905NM": 93,
		"WavelengthChannelNumber_X_191X_40THZX_1566X_314NM": 94,
		"WavelengthChannelNumber_X_191X_35THZX_1566X_723NM": 95,
		"WavelengthChannelNumber_X_191X_30THZX_1567X_133NM": 96,
		"WavelengthChannelNumber_X_191X_25THZX_1567X_542NM": 97,
		"WavelengthChannelNumber_X_191X_20THZX_1567X_952NM": 98,
		"WavelengthChannelNumber_X_191X_15THZX_1568X_362NM": 99,
	}
)

func (x Devm_Ports_Port_OpticalModule_WavelengthChannelNumber) Enum() *Devm_Ports_Port_OpticalModule_WavelengthChannelNumber {
	p := new(Devm_Ports_Port_OpticalModule_WavelengthChannelNumber)
	*p = x
	return p
}

func (x Devm_Ports_Port_OpticalModule_WavelengthChannelNumber) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_OpticalModule_WavelengthChannelNumber) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[205].Descriptor()
}

func (Devm_Ports_Port_OpticalModule_WavelengthChannelNumber) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[205]
}

func (x Devm_Ports_Port_OpticalModule_WavelengthChannelNumber) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_OpticalModule_WavelengthChannelNumber.Descriptor instead.
func (Devm_Ports_Port_OpticalModule_WavelengthChannelNumber) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 2, 6}
}

type Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus int32

const (
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_196X_10THZX_1528X_773NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 0
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_196X_05THZX_1529X_163NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 1
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_196X_00THZX_1529X_553NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 2
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_195X_95THZX_1529X_944NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 3
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_195X_90THZX_1530X_334NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 4
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_195X_85THZX_1530X_725NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 5
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_195X_80THZX_1531X_116NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 6
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_195X_75THZX_1531X_507NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 7
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_195X_70THZX_1531X_898NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 8
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_195X_65THZX_1532X_290NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 9
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_195X_60THZX_1532X_681NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 10
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_195X_55THZX_1533X_073NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 11
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_195X_50THZX_1533X_465NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 12
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_195X_45THZX_1533X_858NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 13
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_195X_40THZX_1534X_250NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 14
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_195X_35THZX_1534X_643NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 15
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_195X_30THZX_1535X_036NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 16
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_195X_25THZX_1535X_429NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 17
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_195X_20THZX_1535X_822NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 18
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_195X_15THZX_1536X_216NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 19
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_195X_10THZX_1536X_609NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 20
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_195X_05THZX_1537X_003NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 21
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_195X_00THZX_1537X_397NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 22
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_194X_95THZX_1537X_792NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 23
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_194X_90THZX_1538X_186NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 24
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_194X_85THZX_1538X_581NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 25
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_194X_80THZX_1538X_976NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 26
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_194X_75THZX_1539X_371NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 27
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_194X_70THZX_1539X_766NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 28
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_194X_65THZX_1540X_162NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 29
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_194X_60THZX_1540X_557NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 30
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_194X_55THZX_1540X_953NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 31
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_194X_50THZX_1541X_349NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 32
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_194X_45THZX_1541X_746NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 33
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_194X_40THZX_1542X_142NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 34
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_194X_35THZX_1542X_539NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 35
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_194X_30THZX_1542X_936NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 36
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_194X_25THZX_1543X_333NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 37
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_194X_20THZX_1543X_730NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 38
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_194X_15THZX_1544X_128NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 39
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_194X_10THZX_1544X_526NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 40
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_194X_05THZX_1544X_924NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 41
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_194X_00THZX_1545X_322NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 42
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_193X_95THZX_1545X_720NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 43
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_193X_90THZX_1546X_119NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 44
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_193X_85THZX_1546X_518NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 45
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_193X_80THZX_1546X_917NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 46
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_193X_75THZX_1547X_316NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 47
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_193X_70THZX_1547X_715NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 48
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_193X_65THZX_1548X_115NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 49
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_193X_60THZX_1548X_515NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 50
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_193X_55THZX_1548X_915NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 51
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_193X_50THZX_1549X_315NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 52
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_193X_45THZX_1549X_715NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 53
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_193X_40THZX_1550X_116NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 54
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_193X_35THZX_1550X_517NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 55
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_193X_30THZX_1550X_918NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 56
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_193X_25THZX_1551X_319NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 57
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_193X_20THZX_1551X_721NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 58
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_193X_15THZX_1552X_122NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 59
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_193X_10THZX_1552X_524NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 60
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_193X_05THZX_1552X_926NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 61
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_193X_00THZX_1553X_329NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 62
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_192X_95THZX_1553X_731NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 63
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_192X_90THZX_1554X_134NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 64
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_192X_85THZX_1554X_537NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 65
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_192X_80THZX_1554X_940NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 66
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_192X_75THZX_1555X_343NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 67
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_192X_70THZX_1555X_747NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 68
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_192X_65THZX_1556X_151NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 69
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_192X_60THZX_1556X_555NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 70
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_192X_55THZX_1556X_959NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 71
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_192X_50THZX_1557X_363NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 72
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_192X_45THZX_1557X_768NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 73
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_192X_40THZX_1558X_173NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 74
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_192X_35THZX_1558X_578NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 75
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_192X_30THZX_1558X_983NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 76
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_192X_25THZX_1559X_389NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 77
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_192X_20THZX_1559X_794NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 78
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_192X_15THZX_1560X_200NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 79
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_192X_10THZX_1560X_606NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 80
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_192X_05THZX_1561X_013NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 81
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_192X_00THZX_1561X_419NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 82
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_191X_95THZX_1561X_826NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 83
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_191X_90THZX_1562X_233NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 84
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_191X_85THZX_1562X_640NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 85
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_191X_80THZX_1563X_047NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 86
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_191X_75THZX_1563X_455NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 87
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_191X_70THZX_1563X_863NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 88
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_191X_65THZX_1564X_271NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 89
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_191X_60THZX_1564X_679NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 90
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_191X_55THZX_1565X_087NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 91
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_191X_50THZX_1565X_496NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 92
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_191X_45THZX_1565X_905NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 93
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_191X_40THZX_1566X_314NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 94
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_191X_35THZX_1566X_723NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 95
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_191X_30THZX_1567X_133NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 96
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_191X_25THZX_1567X_542NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 97
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_191X_20THZX_1567X_952NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 98
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_191X_15THZX_1568X_362NM Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus = 99
)

// Enum value maps for Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus.
var (
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_name = map[int32]string{
		0:  "WavelengthChannelNumberStatus_X_196X_10THZX_1528X_773NM",
		1:  "WavelengthChannelNumberStatus_X_196X_05THZX_1529X_163NM",
		2:  "WavelengthChannelNumberStatus_X_196X_00THZX_1529X_553NM",
		3:  "WavelengthChannelNumberStatus_X_195X_95THZX_1529X_944NM",
		4:  "WavelengthChannelNumberStatus_X_195X_90THZX_1530X_334NM",
		5:  "WavelengthChannelNumberStatus_X_195X_85THZX_1530X_725NM",
		6:  "WavelengthChannelNumberStatus_X_195X_80THZX_1531X_116NM",
		7:  "WavelengthChannelNumberStatus_X_195X_75THZX_1531X_507NM",
		8:  "WavelengthChannelNumberStatus_X_195X_70THZX_1531X_898NM",
		9:  "WavelengthChannelNumberStatus_X_195X_65THZX_1532X_290NM",
		10: "WavelengthChannelNumberStatus_X_195X_60THZX_1532X_681NM",
		11: "WavelengthChannelNumberStatus_X_195X_55THZX_1533X_073NM",
		12: "WavelengthChannelNumberStatus_X_195X_50THZX_1533X_465NM",
		13: "WavelengthChannelNumberStatus_X_195X_45THZX_1533X_858NM",
		14: "WavelengthChannelNumberStatus_X_195X_40THZX_1534X_250NM",
		15: "WavelengthChannelNumberStatus_X_195X_35THZX_1534X_643NM",
		16: "WavelengthChannelNumberStatus_X_195X_30THZX_1535X_036NM",
		17: "WavelengthChannelNumberStatus_X_195X_25THZX_1535X_429NM",
		18: "WavelengthChannelNumberStatus_X_195X_20THZX_1535X_822NM",
		19: "WavelengthChannelNumberStatus_X_195X_15THZX_1536X_216NM",
		20: "WavelengthChannelNumberStatus_X_195X_10THZX_1536X_609NM",
		21: "WavelengthChannelNumberStatus_X_195X_05THZX_1537X_003NM",
		22: "WavelengthChannelNumberStatus_X_195X_00THZX_1537X_397NM",
		23: "WavelengthChannelNumberStatus_X_194X_95THZX_1537X_792NM",
		24: "WavelengthChannelNumberStatus_X_194X_90THZX_1538X_186NM",
		25: "WavelengthChannelNumberStatus_X_194X_85THZX_1538X_581NM",
		26: "WavelengthChannelNumberStatus_X_194X_80THZX_1538X_976NM",
		27: "WavelengthChannelNumberStatus_X_194X_75THZX_1539X_371NM",
		28: "WavelengthChannelNumberStatus_X_194X_70THZX_1539X_766NM",
		29: "WavelengthChannelNumberStatus_X_194X_65THZX_1540X_162NM",
		30: "WavelengthChannelNumberStatus_X_194X_60THZX_1540X_557NM",
		31: "WavelengthChannelNumberStatus_X_194X_55THZX_1540X_953NM",
		32: "WavelengthChannelNumberStatus_X_194X_50THZX_1541X_349NM",
		33: "WavelengthChannelNumberStatus_X_194X_45THZX_1541X_746NM",
		34: "WavelengthChannelNumberStatus_X_194X_40THZX_1542X_142NM",
		35: "WavelengthChannelNumberStatus_X_194X_35THZX_1542X_539NM",
		36: "WavelengthChannelNumberStatus_X_194X_30THZX_1542X_936NM",
		37: "WavelengthChannelNumberStatus_X_194X_25THZX_1543X_333NM",
		38: "WavelengthChannelNumberStatus_X_194X_20THZX_1543X_730NM",
		39: "WavelengthChannelNumberStatus_X_194X_15THZX_1544X_128NM",
		40: "WavelengthChannelNumberStatus_X_194X_10THZX_1544X_526NM",
		41: "WavelengthChannelNumberStatus_X_194X_05THZX_1544X_924NM",
		42: "WavelengthChannelNumberStatus_X_194X_00THZX_1545X_322NM",
		43: "WavelengthChannelNumberStatus_X_193X_95THZX_1545X_720NM",
		44: "WavelengthChannelNumberStatus_X_193X_90THZX_1546X_119NM",
		45: "WavelengthChannelNumberStatus_X_193X_85THZX_1546X_518NM",
		46: "WavelengthChannelNumberStatus_X_193X_80THZX_1546X_917NM",
		47: "WavelengthChannelNumberStatus_X_193X_75THZX_1547X_316NM",
		48: "WavelengthChannelNumberStatus_X_193X_70THZX_1547X_715NM",
		49: "WavelengthChannelNumberStatus_X_193X_65THZX_1548X_115NM",
		50: "WavelengthChannelNumberStatus_X_193X_60THZX_1548X_515NM",
		51: "WavelengthChannelNumberStatus_X_193X_55THZX_1548X_915NM",
		52: "WavelengthChannelNumberStatus_X_193X_50THZX_1549X_315NM",
		53: "WavelengthChannelNumberStatus_X_193X_45THZX_1549X_715NM",
		54: "WavelengthChannelNumberStatus_X_193X_40THZX_1550X_116NM",
		55: "WavelengthChannelNumberStatus_X_193X_35THZX_1550X_517NM",
		56: "WavelengthChannelNumberStatus_X_193X_30THZX_1550X_918NM",
		57: "WavelengthChannelNumberStatus_X_193X_25THZX_1551X_319NM",
		58: "WavelengthChannelNumberStatus_X_193X_20THZX_1551X_721NM",
		59: "WavelengthChannelNumberStatus_X_193X_15THZX_1552X_122NM",
		60: "WavelengthChannelNumberStatus_X_193X_10THZX_1552X_524NM",
		61: "WavelengthChannelNumberStatus_X_193X_05THZX_1552X_926NM",
		62: "WavelengthChannelNumberStatus_X_193X_00THZX_1553X_329NM",
		63: "WavelengthChannelNumberStatus_X_192X_95THZX_1553X_731NM",
		64: "WavelengthChannelNumberStatus_X_192X_90THZX_1554X_134NM",
		65: "WavelengthChannelNumberStatus_X_192X_85THZX_1554X_537NM",
		66: "WavelengthChannelNumberStatus_X_192X_80THZX_1554X_940NM",
		67: "WavelengthChannelNumberStatus_X_192X_75THZX_1555X_343NM",
		68: "WavelengthChannelNumberStatus_X_192X_70THZX_1555X_747NM",
		69: "WavelengthChannelNumberStatus_X_192X_65THZX_1556X_151NM",
		70: "WavelengthChannelNumberStatus_X_192X_60THZX_1556X_555NM",
		71: "WavelengthChannelNumberStatus_X_192X_55THZX_1556X_959NM",
		72: "WavelengthChannelNumberStatus_X_192X_50THZX_1557X_363NM",
		73: "WavelengthChannelNumberStatus_X_192X_45THZX_1557X_768NM",
		74: "WavelengthChannelNumberStatus_X_192X_40THZX_1558X_173NM",
		75: "WavelengthChannelNumberStatus_X_192X_35THZX_1558X_578NM",
		76: "WavelengthChannelNumberStatus_X_192X_30THZX_1558X_983NM",
		77: "WavelengthChannelNumberStatus_X_192X_25THZX_1559X_389NM",
		78: "WavelengthChannelNumberStatus_X_192X_20THZX_1559X_794NM",
		79: "WavelengthChannelNumberStatus_X_192X_15THZX_1560X_200NM",
		80: "WavelengthChannelNumberStatus_X_192X_10THZX_1560X_606NM",
		81: "WavelengthChannelNumberStatus_X_192X_05THZX_1561X_013NM",
		82: "WavelengthChannelNumberStatus_X_192X_00THZX_1561X_419NM",
		83: "WavelengthChannelNumberStatus_X_191X_95THZX_1561X_826NM",
		84: "WavelengthChannelNumberStatus_X_191X_90THZX_1562X_233NM",
		85: "WavelengthChannelNumberStatus_X_191X_85THZX_1562X_640NM",
		86: "WavelengthChannelNumberStatus_X_191X_80THZX_1563X_047NM",
		87: "WavelengthChannelNumberStatus_X_191X_75THZX_1563X_455NM",
		88: "WavelengthChannelNumberStatus_X_191X_70THZX_1563X_863NM",
		89: "WavelengthChannelNumberStatus_X_191X_65THZX_1564X_271NM",
		90: "WavelengthChannelNumberStatus_X_191X_60THZX_1564X_679NM",
		91: "WavelengthChannelNumberStatus_X_191X_55THZX_1565X_087NM",
		92: "WavelengthChannelNumberStatus_X_191X_50THZX_1565X_496NM",
		93: "WavelengthChannelNumberStatus_X_191X_45THZX_1565X_905NM",
		94: "WavelengthChannelNumberStatus_X_191X_40THZX_1566X_314NM",
		95: "WavelengthChannelNumberStatus_X_191X_35THZX_1566X_723NM",
		96: "WavelengthChannelNumberStatus_X_191X_30THZX_1567X_133NM",
		97: "WavelengthChannelNumberStatus_X_191X_25THZX_1567X_542NM",
		98: "WavelengthChannelNumberStatus_X_191X_20THZX_1567X_952NM",
		99: "WavelengthChannelNumberStatus_X_191X_15THZX_1568X_362NM",
	}
	Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_value = map[string]int32{
		"WavelengthChannelNumberStatus_X_196X_10THZX_1528X_773NM": 0,
		"WavelengthChannelNumberStatus_X_196X_05THZX_1529X_163NM": 1,
		"WavelengthChannelNumberStatus_X_196X_00THZX_1529X_553NM": 2,
		"WavelengthChannelNumberStatus_X_195X_95THZX_1529X_944NM": 3,
		"WavelengthChannelNumberStatus_X_195X_90THZX_1530X_334NM": 4,
		"WavelengthChannelNumberStatus_X_195X_85THZX_1530X_725NM": 5,
		"WavelengthChannelNumberStatus_X_195X_80THZX_1531X_116NM": 6,
		"WavelengthChannelNumberStatus_X_195X_75THZX_1531X_507NM": 7,
		"WavelengthChannelNumberStatus_X_195X_70THZX_1531X_898NM": 8,
		"WavelengthChannelNumberStatus_X_195X_65THZX_1532X_290NM": 9,
		"WavelengthChannelNumberStatus_X_195X_60THZX_1532X_681NM": 10,
		"WavelengthChannelNumberStatus_X_195X_55THZX_1533X_073NM": 11,
		"WavelengthChannelNumberStatus_X_195X_50THZX_1533X_465NM": 12,
		"WavelengthChannelNumberStatus_X_195X_45THZX_1533X_858NM": 13,
		"WavelengthChannelNumberStatus_X_195X_40THZX_1534X_250NM": 14,
		"WavelengthChannelNumberStatus_X_195X_35THZX_1534X_643NM": 15,
		"WavelengthChannelNumberStatus_X_195X_30THZX_1535X_036NM": 16,
		"WavelengthChannelNumberStatus_X_195X_25THZX_1535X_429NM": 17,
		"WavelengthChannelNumberStatus_X_195X_20THZX_1535X_822NM": 18,
		"WavelengthChannelNumberStatus_X_195X_15THZX_1536X_216NM": 19,
		"WavelengthChannelNumberStatus_X_195X_10THZX_1536X_609NM": 20,
		"WavelengthChannelNumberStatus_X_195X_05THZX_1537X_003NM": 21,
		"WavelengthChannelNumberStatus_X_195X_00THZX_1537X_397NM": 22,
		"WavelengthChannelNumberStatus_X_194X_95THZX_1537X_792NM": 23,
		"WavelengthChannelNumberStatus_X_194X_90THZX_1538X_186NM": 24,
		"WavelengthChannelNumberStatus_X_194X_85THZX_1538X_581NM": 25,
		"WavelengthChannelNumberStatus_X_194X_80THZX_1538X_976NM": 26,
		"WavelengthChannelNumberStatus_X_194X_75THZX_1539X_371NM": 27,
		"WavelengthChannelNumberStatus_X_194X_70THZX_1539X_766NM": 28,
		"WavelengthChannelNumberStatus_X_194X_65THZX_1540X_162NM": 29,
		"WavelengthChannelNumberStatus_X_194X_60THZX_1540X_557NM": 30,
		"WavelengthChannelNumberStatus_X_194X_55THZX_1540X_953NM": 31,
		"WavelengthChannelNumberStatus_X_194X_50THZX_1541X_349NM": 32,
		"WavelengthChannelNumberStatus_X_194X_45THZX_1541X_746NM": 33,
		"WavelengthChannelNumberStatus_X_194X_40THZX_1542X_142NM": 34,
		"WavelengthChannelNumberStatus_X_194X_35THZX_1542X_539NM": 35,
		"WavelengthChannelNumberStatus_X_194X_30THZX_1542X_936NM": 36,
		"WavelengthChannelNumberStatus_X_194X_25THZX_1543X_333NM": 37,
		"WavelengthChannelNumberStatus_X_194X_20THZX_1543X_730NM": 38,
		"WavelengthChannelNumberStatus_X_194X_15THZX_1544X_128NM": 39,
		"WavelengthChannelNumberStatus_X_194X_10THZX_1544X_526NM": 40,
		"WavelengthChannelNumberStatus_X_194X_05THZX_1544X_924NM": 41,
		"WavelengthChannelNumberStatus_X_194X_00THZX_1545X_322NM": 42,
		"WavelengthChannelNumberStatus_X_193X_95THZX_1545X_720NM": 43,
		"WavelengthChannelNumberStatus_X_193X_90THZX_1546X_119NM": 44,
		"WavelengthChannelNumberStatus_X_193X_85THZX_1546X_518NM": 45,
		"WavelengthChannelNumberStatus_X_193X_80THZX_1546X_917NM": 46,
		"WavelengthChannelNumberStatus_X_193X_75THZX_1547X_316NM": 47,
		"WavelengthChannelNumberStatus_X_193X_70THZX_1547X_715NM": 48,
		"WavelengthChannelNumberStatus_X_193X_65THZX_1548X_115NM": 49,
		"WavelengthChannelNumberStatus_X_193X_60THZX_1548X_515NM": 50,
		"WavelengthChannelNumberStatus_X_193X_55THZX_1548X_915NM": 51,
		"WavelengthChannelNumberStatus_X_193X_50THZX_1549X_315NM": 52,
		"WavelengthChannelNumberStatus_X_193X_45THZX_1549X_715NM": 53,
		"WavelengthChannelNumberStatus_X_193X_40THZX_1550X_116NM": 54,
		"WavelengthChannelNumberStatus_X_193X_35THZX_1550X_517NM": 55,
		"WavelengthChannelNumberStatus_X_193X_30THZX_1550X_918NM": 56,
		"WavelengthChannelNumberStatus_X_193X_25THZX_1551X_319NM": 57,
		"WavelengthChannelNumberStatus_X_193X_20THZX_1551X_721NM": 58,
		"WavelengthChannelNumberStatus_X_193X_15THZX_1552X_122NM": 59,
		"WavelengthChannelNumberStatus_X_193X_10THZX_1552X_524NM": 60,
		"WavelengthChannelNumberStatus_X_193X_05THZX_1552X_926NM": 61,
		"WavelengthChannelNumberStatus_X_193X_00THZX_1553X_329NM": 62,
		"WavelengthChannelNumberStatus_X_192X_95THZX_1553X_731NM": 63,
		"WavelengthChannelNumberStatus_X_192X_90THZX_1554X_134NM": 64,
		"WavelengthChannelNumberStatus_X_192X_85THZX_1554X_537NM": 65,
		"WavelengthChannelNumberStatus_X_192X_80THZX_1554X_940NM": 66,
		"WavelengthChannelNumberStatus_X_192X_75THZX_1555X_343NM": 67,
		"WavelengthChannelNumberStatus_X_192X_70THZX_1555X_747NM": 68,
		"WavelengthChannelNumberStatus_X_192X_65THZX_1556X_151NM": 69,
		"WavelengthChannelNumberStatus_X_192X_60THZX_1556X_555NM": 70,
		"WavelengthChannelNumberStatus_X_192X_55THZX_1556X_959NM": 71,
		"WavelengthChannelNumberStatus_X_192X_50THZX_1557X_363NM": 72,
		"WavelengthChannelNumberStatus_X_192X_45THZX_1557X_768NM": 73,
		"WavelengthChannelNumberStatus_X_192X_40THZX_1558X_173NM": 74,
		"WavelengthChannelNumberStatus_X_192X_35THZX_1558X_578NM": 75,
		"WavelengthChannelNumberStatus_X_192X_30THZX_1558X_983NM": 76,
		"WavelengthChannelNumberStatus_X_192X_25THZX_1559X_389NM": 77,
		"WavelengthChannelNumberStatus_X_192X_20THZX_1559X_794NM": 78,
		"WavelengthChannelNumberStatus_X_192X_15THZX_1560X_200NM": 79,
		"WavelengthChannelNumberStatus_X_192X_10THZX_1560X_606NM": 80,
		"WavelengthChannelNumberStatus_X_192X_05THZX_1561X_013NM": 81,
		"WavelengthChannelNumberStatus_X_192X_00THZX_1561X_419NM": 82,
		"WavelengthChannelNumberStatus_X_191X_95THZX_1561X_826NM": 83,
		"WavelengthChannelNumberStatus_X_191X_90THZX_1562X_233NM": 84,
		"WavelengthChannelNumberStatus_X_191X_85THZX_1562X_640NM": 85,
		"WavelengthChannelNumberStatus_X_191X_80THZX_1563X_047NM": 86,
		"WavelengthChannelNumberStatus_X_191X_75THZX_1563X_455NM": 87,
		"WavelengthChannelNumberStatus_X_191X_70THZX_1563X_863NM": 88,
		"WavelengthChannelNumberStatus_X_191X_65THZX_1564X_271NM": 89,
		"WavelengthChannelNumberStatus_X_191X_60THZX_1564X_679NM": 90,
		"WavelengthChannelNumberStatus_X_191X_55THZX_1565X_087NM": 91,
		"WavelengthChannelNumberStatus_X_191X_50THZX_1565X_496NM": 92,
		"WavelengthChannelNumberStatus_X_191X_45THZX_1565X_905NM": 93,
		"WavelengthChannelNumberStatus_X_191X_40THZX_1566X_314NM": 94,
		"WavelengthChannelNumberStatus_X_191X_35THZX_1566X_723NM": 95,
		"WavelengthChannelNumberStatus_X_191X_30THZX_1567X_133NM": 96,
		"WavelengthChannelNumberStatus_X_191X_25THZX_1567X_542NM": 97,
		"WavelengthChannelNumberStatus_X_191X_20THZX_1567X_952NM": 98,
		"WavelengthChannelNumberStatus_X_191X_15THZX_1568X_362NM": 99,
	}
)

func (x Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus) Enum() *Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus {
	p := new(Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus)
	*p = x
	return p
}

func (x Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[206].Descriptor()
}

func (Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[206]
}

func (x Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus.Descriptor instead.
func (Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 2, 7}
}

type Devm_Ports_Port_OpticalModule_PowerLowProtection int32

const (
	Devm_Ports_Port_OpticalModule_PowerLowProtection_ENABLE  Devm_Ports_Port_OpticalModule_PowerLowProtection = 0
	Devm_Ports_Port_OpticalModule_PowerLowProtection_DISABLE Devm_Ports_Port_OpticalModule_PowerLowProtection = 1
)

// Enum value maps for Devm_Ports_Port_OpticalModule_PowerLowProtection.
var (
	Devm_Ports_Port_OpticalModule_PowerLowProtection_name = map[int32]string{
		0: "PowerLowProtection_ENABLE",
		1: "PowerLowProtection_DISABLE",
	}
	Devm_Ports_Port_OpticalModule_PowerLowProtection_value = map[string]int32{
		"PowerLowProtection_ENABLE":  0,
		"PowerLowProtection_DISABLE": 1,
	}
)

func (x Devm_Ports_Port_OpticalModule_PowerLowProtection) Enum() *Devm_Ports_Port_OpticalModule_PowerLowProtection {
	p := new(Devm_Ports_Port_OpticalModule_PowerLowProtection)
	*p = x
	return p
}

func (x Devm_Ports_Port_OpticalModule_PowerLowProtection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_OpticalModule_PowerLowProtection) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[207].Descriptor()
}

func (Devm_Ports_Port_OpticalModule_PowerLowProtection) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[207]
}

func (x Devm_Ports_Port_OpticalModule_PowerLowProtection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_OpticalModule_PowerLowProtection.Descriptor instead.
func (Devm_Ports_Port_OpticalModule_PowerLowProtection) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 2, 8}
}

type Devm_Ports_Port_OpticalModule_SingleFiber int32

const (
	Devm_Ports_Port_OpticalModule_SingleFiber_ENABLE  Devm_Ports_Port_OpticalModule_SingleFiber = 0
	Devm_Ports_Port_OpticalModule_SingleFiber_DISABLE Devm_Ports_Port_OpticalModule_SingleFiber = 1
)

// Enum value maps for Devm_Ports_Port_OpticalModule_SingleFiber.
var (
	Devm_Ports_Port_OpticalModule_SingleFiber_name = map[int32]string{
		0: "SingleFiber_ENABLE",
		1: "SingleFiber_DISABLE",
	}
	Devm_Ports_Port_OpticalModule_SingleFiber_value = map[string]int32{
		"SingleFiber_ENABLE":  0,
		"SingleFiber_DISABLE": 1,
	}
)

func (x Devm_Ports_Port_OpticalModule_SingleFiber) Enum() *Devm_Ports_Port_OpticalModule_SingleFiber {
	p := new(Devm_Ports_Port_OpticalModule_SingleFiber)
	*p = x
	return p
}

func (x Devm_Ports_Port_OpticalModule_SingleFiber) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_OpticalModule_SingleFiber) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[208].Descriptor()
}

func (Devm_Ports_Port_OpticalModule_SingleFiber) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[208]
}

func (x Devm_Ports_Port_OpticalModule_SingleFiber) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_OpticalModule_SingleFiber.Descriptor instead.
func (Devm_Ports_Port_OpticalModule_SingleFiber) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 2, 9}
}

type Devm_Ports_Port_OpticalModule_SingleFiberRx int32

const (
	Devm_Ports_Port_OpticalModule_SingleFiberRx_ENABLE  Devm_Ports_Port_OpticalModule_SingleFiberRx = 0
	Devm_Ports_Port_OpticalModule_SingleFiberRx_DISABLE Devm_Ports_Port_OpticalModule_SingleFiberRx = 1
)

// Enum value maps for Devm_Ports_Port_OpticalModule_SingleFiberRx.
var (
	Devm_Ports_Port_OpticalModule_SingleFiberRx_name = map[int32]string{
		0: "SingleFiberRx_ENABLE",
		1: "SingleFiberRx_DISABLE",
	}
	Devm_Ports_Port_OpticalModule_SingleFiberRx_value = map[string]int32{
		"SingleFiberRx_ENABLE":  0,
		"SingleFiberRx_DISABLE": 1,
	}
)

func (x Devm_Ports_Port_OpticalModule_SingleFiberRx) Enum() *Devm_Ports_Port_OpticalModule_SingleFiberRx {
	p := new(Devm_Ports_Port_OpticalModule_SingleFiberRx)
	*p = x
	return p
}

func (x Devm_Ports_Port_OpticalModule_SingleFiberRx) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_OpticalModule_SingleFiberRx) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[209].Descriptor()
}

func (Devm_Ports_Port_OpticalModule_SingleFiberRx) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[209]
}

func (x Devm_Ports_Port_OpticalModule_SingleFiberRx) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_OpticalModule_SingleFiberRx.Descriptor instead.
func (Devm_Ports_Port_OpticalModule_SingleFiberRx) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 2, 10}
}

type Devm_Ports_Port_OpticalModule_TransceiverMediumType int32

const (
	Devm_Ports_Port_OpticalModule_TransceiverMediumType_SFPX_1000BASEX_X         Devm_Ports_Port_OpticalModule_TransceiverMediumType = 0
	Devm_Ports_Port_OpticalModule_TransceiverMediumType_SFPX_1000BASEX_T         Devm_Ports_Port_OpticalModule_TransceiverMediumType = 1
	Devm_Ports_Port_OpticalModule_TransceiverMediumType_SFPX_10GBASEX_FIBER      Devm_Ports_Port_OpticalModule_TransceiverMediumType = 2
	Devm_Ports_Port_OpticalModule_TransceiverMediumType_SFPX_10GBASEX_COPPER     Devm_Ports_Port_OpticalModule_TransceiverMediumType = 3
	Devm_Ports_Port_OpticalModule_TransceiverMediumType_QSFPX_40GBASEX_FIBER     Devm_Ports_Port_OpticalModule_TransceiverMediumType = 4
	Devm_Ports_Port_OpticalModule_TransceiverMediumType_QSFPX_40GBASEX_COPPER    Devm_Ports_Port_OpticalModule_TransceiverMediumType = 5
	Devm_Ports_Port_OpticalModule_TransceiverMediumType_SFPX_100BASEX_FIBER      Devm_Ports_Port_OpticalModule_TransceiverMediumType = 7
	Devm_Ports_Port_OpticalModule_TransceiverMediumType_SFP28X_25GBASEX_FIBER    Devm_Ports_Port_OpticalModule_TransceiverMediumType = 11
	Devm_Ports_Port_OpticalModule_TransceiverMediumType_SFP28X_25GBASEX_COPPER   Devm_Ports_Port_OpticalModule_TransceiverMediumType = 12
	Devm_Ports_Port_OpticalModule_TransceiverMediumType_QSFP28X_100GX_FIBER      Devm_Ports_Port_OpticalModule_TransceiverMediumType = 13
	Devm_Ports_Port_OpticalModule_TransceiverMediumType_QSFP28X_100GX_COPPER     Devm_Ports_Port_OpticalModule_TransceiverMediumType = 14
	Devm_Ports_Port_OpticalModule_TransceiverMediumType_SFPX_10GBASEX_DWDM       Devm_Ports_Port_OpticalModule_TransceiverMediumType = 34
	Devm_Ports_Port_OpticalModule_TransceiverMediumType_QSFP28X_100GBASEX_DWDM   Devm_Ports_Port_OpticalModule_TransceiverMediumType = 35
	Devm_Ports_Port_OpticalModule_TransceiverMediumType_SFP56X_50GX_FIBER        Devm_Ports_Port_OpticalModule_TransceiverMediumType = 36
	Devm_Ports_Port_OpticalModule_TransceiverMediumType_SFP56X_50GX_COPPER       Devm_Ports_Port_OpticalModule_TransceiverMediumType = 37
	Devm_Ports_Port_OpticalModule_TransceiverMediumType_QSFP56X_200GBASEX_FIBER  Devm_Ports_Port_OpticalModule_TransceiverMediumType = 38
	Devm_Ports_Port_OpticalModule_TransceiverMediumType_QSFP56X_200GBASEX_COPPER Devm_Ports_Port_OpticalModule_TransceiverMediumType = 39
	Devm_Ports_Port_OpticalModule_TransceiverMediumType_QSFPDDX_400GBASEX_FIBER  Devm_Ports_Port_OpticalModule_TransceiverMediumType = 40
	Devm_Ports_Port_OpticalModule_TransceiverMediumType_QSFPDDX_400GBASEX_COPPER Devm_Ports_Port_OpticalModule_TransceiverMediumType = 41
	Devm_Ports_Port_OpticalModule_TransceiverMediumType_QSFP28X_50GBASEX_COPPER  Devm_Ports_Port_OpticalModule_TransceiverMediumType = 48
	Devm_Ports_Port_OpticalModule_TransceiverMediumType_UNKNOWN                  Devm_Ports_Port_OpticalModule_TransceiverMediumType = 255
)

// Enum value maps for Devm_Ports_Port_OpticalModule_TransceiverMediumType.
var (
	Devm_Ports_Port_OpticalModule_TransceiverMediumType_name = map[int32]string{
		0:   "TransceiverMediumType_SFPX_1000BASEX_X",
		1:   "TransceiverMediumType_SFPX_1000BASEX_T",
		2:   "TransceiverMediumType_SFPX_10GBASEX_FIBER",
		3:   "TransceiverMediumType_SFPX_10GBASEX_COPPER",
		4:   "TransceiverMediumType_QSFPX_40GBASEX_FIBER",
		5:   "TransceiverMediumType_QSFPX_40GBASEX_COPPER",
		7:   "TransceiverMediumType_SFPX_100BASEX_FIBER",
		11:  "TransceiverMediumType_SFP28X_25GBASEX_FIBER",
		12:  "TransceiverMediumType_SFP28X_25GBASEX_COPPER",
		13:  "TransceiverMediumType_QSFP28X_100GX_FIBER",
		14:  "TransceiverMediumType_QSFP28X_100GX_COPPER",
		34:  "TransceiverMediumType_SFPX_10GBASEX_DWDM",
		35:  "TransceiverMediumType_QSFP28X_100GBASEX_DWDM",
		36:  "TransceiverMediumType_SFP56X_50GX_FIBER",
		37:  "TransceiverMediumType_SFP56X_50GX_COPPER",
		38:  "TransceiverMediumType_QSFP56X_200GBASEX_FIBER",
		39:  "TransceiverMediumType_QSFP56X_200GBASEX_COPPER",
		40:  "TransceiverMediumType_QSFPDDX_400GBASEX_FIBER",
		41:  "TransceiverMediumType_QSFPDDX_400GBASEX_COPPER",
		48:  "TransceiverMediumType_QSFP28X_50GBASEX_COPPER",
		255: "TransceiverMediumType_UNKNOWN",
	}
	Devm_Ports_Port_OpticalModule_TransceiverMediumType_value = map[string]int32{
		"TransceiverMediumType_SFPX_1000BASEX_X":         0,
		"TransceiverMediumType_SFPX_1000BASEX_T":         1,
		"TransceiverMediumType_SFPX_10GBASEX_FIBER":      2,
		"TransceiverMediumType_SFPX_10GBASEX_COPPER":     3,
		"TransceiverMediumType_QSFPX_40GBASEX_FIBER":     4,
		"TransceiverMediumType_QSFPX_40GBASEX_COPPER":    5,
		"TransceiverMediumType_SFPX_100BASEX_FIBER":      7,
		"TransceiverMediumType_SFP28X_25GBASEX_FIBER":    11,
		"TransceiverMediumType_SFP28X_25GBASEX_COPPER":   12,
		"TransceiverMediumType_QSFP28X_100GX_FIBER":      13,
		"TransceiverMediumType_QSFP28X_100GX_COPPER":     14,
		"TransceiverMediumType_SFPX_10GBASEX_DWDM":       34,
		"TransceiverMediumType_QSFP28X_100GBASEX_DWDM":   35,
		"TransceiverMediumType_SFP56X_50GX_FIBER":        36,
		"TransceiverMediumType_SFP56X_50GX_COPPER":       37,
		"TransceiverMediumType_QSFP56X_200GBASEX_FIBER":  38,
		"TransceiverMediumType_QSFP56X_200GBASEX_COPPER": 39,
		"TransceiverMediumType_QSFPDDX_400GBASEX_FIBER":  40,
		"TransceiverMediumType_QSFPDDX_400GBASEX_COPPER": 41,
		"TransceiverMediumType_QSFP28X_50GBASEX_COPPER":  48,
		"TransceiverMediumType_UNKNOWN":                  255,
	}
)

func (x Devm_Ports_Port_OpticalModule_TransceiverMediumType) Enum() *Devm_Ports_Port_OpticalModule_TransceiverMediumType {
	p := new(Devm_Ports_Port_OpticalModule_TransceiverMediumType)
	*p = x
	return p
}

func (x Devm_Ports_Port_OpticalModule_TransceiverMediumType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_OpticalModule_TransceiverMediumType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[210].Descriptor()
}

func (Devm_Ports_Port_OpticalModule_TransceiverMediumType) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[210]
}

func (x Devm_Ports_Port_OpticalModule_TransceiverMediumType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_OpticalModule_TransceiverMediumType.Descriptor instead.
func (Devm_Ports_Port_OpticalModule_TransceiverMediumType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 2, 11}
}

type Devm_Ports_Port_OpticalModule_GainMode int32

const (
	Devm_Ports_Port_OpticalModule_INVALID_ENUM_VALUE_GainMode Devm_Ports_Port_OpticalModule_GainMode = 0
	Devm_Ports_Port_OpticalModule_GainMode_AGC                Devm_Ports_Port_OpticalModule_GainMode = 1
	Devm_Ports_Port_OpticalModule_GainMode_APC                Devm_Ports_Port_OpticalModule_GainMode = 2
)

// Enum value maps for Devm_Ports_Port_OpticalModule_GainMode.
var (
	Devm_Ports_Port_OpticalModule_GainMode_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_GainMode",
		1: "GainMode_AGC",
		2: "GainMode_APC",
	}
	Devm_Ports_Port_OpticalModule_GainMode_value = map[string]int32{
		"INVALID_ENUM_VALUE_GainMode": 0,
		"GainMode_AGC":                1,
		"GainMode_APC":                2,
	}
)

func (x Devm_Ports_Port_OpticalModule_GainMode) Enum() *Devm_Ports_Port_OpticalModule_GainMode {
	p := new(Devm_Ports_Port_OpticalModule_GainMode)
	*p = x
	return p
}

func (x Devm_Ports_Port_OpticalModule_GainMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_OpticalModule_GainMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[211].Descriptor()
}

func (Devm_Ports_Port_OpticalModule_GainMode) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[211]
}

func (x Devm_Ports_Port_OpticalModule_GainMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_OpticalModule_GainMode.Descriptor instead.
func (Devm_Ports_Port_OpticalModule_GainMode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 2, 12}
}

type Devm_Ports_Port_OpticalModule_OpticalMode int32

const (
	Devm_Ports_Port_OpticalModule_INVALID_ENUM_VALUE_OpticalMode Devm_Ports_Port_OpticalModule_OpticalMode = 0
	Devm_Ports_Port_OpticalModule_OpticalMode_HSEN               Devm_Ports_Port_OpticalModule_OpticalMode = 2
	Devm_Ports_Port_OpticalModule_OpticalMode_OSNR               Devm_Ports_Port_OpticalModule_OpticalMode = 3
)

// Enum value maps for Devm_Ports_Port_OpticalModule_OpticalMode.
var (
	Devm_Ports_Port_OpticalModule_OpticalMode_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_OpticalMode",
		2: "OpticalMode_HSEN",
		3: "OpticalMode_OSNR",
	}
	Devm_Ports_Port_OpticalModule_OpticalMode_value = map[string]int32{
		"INVALID_ENUM_VALUE_OpticalMode": 0,
		"OpticalMode_HSEN":               2,
		"OpticalMode_OSNR":               3,
	}
)

func (x Devm_Ports_Port_OpticalModule_OpticalMode) Enum() *Devm_Ports_Port_OpticalModule_OpticalMode {
	p := new(Devm_Ports_Port_OpticalModule_OpticalMode)
	*p = x
	return p
}

func (x Devm_Ports_Port_OpticalModule_OpticalMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_OpticalModule_OpticalMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[212].Descriptor()
}

func (Devm_Ports_Port_OpticalModule_OpticalMode) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[212]
}

func (x Devm_Ports_Port_OpticalModule_OpticalMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_OpticalModule_OpticalMode.Descriptor instead.
func (Devm_Ports_Port_OpticalModule_OpticalMode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 2, 13}
}

type Devm_Ports_Port_OpticalModule_GainModeSts int32

const (
	Devm_Ports_Port_OpticalModule_INVALID_ENUM_VALUE_GainModeSts Devm_Ports_Port_OpticalModule_GainModeSts = 0
	Devm_Ports_Port_OpticalModule_GainModeSts_AGC                Devm_Ports_Port_OpticalModule_GainModeSts = 1
	Devm_Ports_Port_OpticalModule_GainModeSts_APC                Devm_Ports_Port_OpticalModule_GainModeSts = 2
)

// Enum value maps for Devm_Ports_Port_OpticalModule_GainModeSts.
var (
	Devm_Ports_Port_OpticalModule_GainModeSts_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_GainModeSts",
		1: "GainModeSts_AGC",
		2: "GainModeSts_APC",
	}
	Devm_Ports_Port_OpticalModule_GainModeSts_value = map[string]int32{
		"INVALID_ENUM_VALUE_GainModeSts": 0,
		"GainModeSts_AGC":                1,
		"GainModeSts_APC":                2,
	}
)

func (x Devm_Ports_Port_OpticalModule_GainModeSts) Enum() *Devm_Ports_Port_OpticalModule_GainModeSts {
	p := new(Devm_Ports_Port_OpticalModule_GainModeSts)
	*p = x
	return p
}

func (x Devm_Ports_Port_OpticalModule_GainModeSts) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_OpticalModule_GainModeSts) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[213].Descriptor()
}

func (Devm_Ports_Port_OpticalModule_GainModeSts) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[213]
}

func (x Devm_Ports_Port_OpticalModule_GainModeSts) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_OpticalModule_GainModeSts.Descriptor instead.
func (Devm_Ports_Port_OpticalModule_GainModeSts) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 2, 14}
}

type Devm_Ports_Port_OpticalModule_OpticalModeStatus int32

const (
	Devm_Ports_Port_OpticalModule_INVALID_ENUM_VALUE_OpticalModeStatus Devm_Ports_Port_OpticalModule_OpticalModeStatus = 0
	Devm_Ports_Port_OpticalModule_OpticalModeStatus_HSEN               Devm_Ports_Port_OpticalModule_OpticalModeStatus = 2
	Devm_Ports_Port_OpticalModule_OpticalModeStatus_OSNR               Devm_Ports_Port_OpticalModule_OpticalModeStatus = 3
)

// Enum value maps for Devm_Ports_Port_OpticalModule_OpticalModeStatus.
var (
	Devm_Ports_Port_OpticalModule_OpticalModeStatus_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_OpticalModeStatus",
		2: "OpticalModeStatus_HSEN",
		3: "OpticalModeStatus_OSNR",
	}
	Devm_Ports_Port_OpticalModule_OpticalModeStatus_value = map[string]int32{
		"INVALID_ENUM_VALUE_OpticalModeStatus": 0,
		"OpticalModeStatus_HSEN":               2,
		"OpticalModeStatus_OSNR":               3,
	}
)

func (x Devm_Ports_Port_OpticalModule_OpticalModeStatus) Enum() *Devm_Ports_Port_OpticalModule_OpticalModeStatus {
	p := new(Devm_Ports_Port_OpticalModule_OpticalModeStatus)
	*p = x
	return p
}

func (x Devm_Ports_Port_OpticalModule_OpticalModeStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_OpticalModule_OpticalModeStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[214].Descriptor()
}

func (Devm_Ports_Port_OpticalModule_OpticalModeStatus) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[214]
}

func (x Devm_Ports_Port_OpticalModule_OpticalModeStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_OpticalModule_OpticalModeStatus.Descriptor instead.
func (Devm_Ports_Port_OpticalModule_OpticalModeStatus) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 2, 15}
}

type Devm_Ports_Port_OpticalModule_CertifiedState int32

const (
	Devm_Ports_Port_OpticalModule_CertifiedState_CERTIFIED      Devm_Ports_Port_OpticalModule_CertifiedState = 0
	Devm_Ports_Port_OpticalModule_CertifiedState_NONX_CERTIFIED Devm_Ports_Port_OpticalModule_CertifiedState = 1
)

// Enum value maps for Devm_Ports_Port_OpticalModule_CertifiedState.
var (
	Devm_Ports_Port_OpticalModule_CertifiedState_name = map[int32]string{
		0: "CertifiedState_CERTIFIED",
		1: "CertifiedState_NONX_CERTIFIED",
	}
	Devm_Ports_Port_OpticalModule_CertifiedState_value = map[string]int32{
		"CertifiedState_CERTIFIED":      0,
		"CertifiedState_NONX_CERTIFIED": 1,
	}
)

func (x Devm_Ports_Port_OpticalModule_CertifiedState) Enum() *Devm_Ports_Port_OpticalModule_CertifiedState {
	p := new(Devm_Ports_Port_OpticalModule_CertifiedState)
	*p = x
	return p
}

func (x Devm_Ports_Port_OpticalModule_CertifiedState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_OpticalModule_CertifiedState) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[215].Descriptor()
}

func (Devm_Ports_Port_OpticalModule_CertifiedState) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[215]
}

func (x Devm_Ports_Port_OpticalModule_CertifiedState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_OpticalModule_CertifiedState.Descriptor instead.
func (Devm_Ports_Port_OpticalModule_CertifiedState) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 2, 16}
}

type Devm_Ports_Port_OpticalModule_IsSupportDdm int32

const (
	Devm_Ports_Port_OpticalModule_IsSupportDdm_NONX_SUPPORT Devm_Ports_Port_OpticalModule_IsSupportDdm = 0
	Devm_Ports_Port_OpticalModule_IsSupportDdm_SUPPORT      Devm_Ports_Port_OpticalModule_IsSupportDdm = 1
)

// Enum value maps for Devm_Ports_Port_OpticalModule_IsSupportDdm.
var (
	Devm_Ports_Port_OpticalModule_IsSupportDdm_name = map[int32]string{
		0: "IsSupportDdm_NONX_SUPPORT",
		1: "IsSupportDdm_SUPPORT",
	}
	Devm_Ports_Port_OpticalModule_IsSupportDdm_value = map[string]int32{
		"IsSupportDdm_NONX_SUPPORT": 0,
		"IsSupportDdm_SUPPORT":      1,
	}
)

func (x Devm_Ports_Port_OpticalModule_IsSupportDdm) Enum() *Devm_Ports_Port_OpticalModule_IsSupportDdm {
	p := new(Devm_Ports_Port_OpticalModule_IsSupportDdm)
	*p = x
	return p
}

func (x Devm_Ports_Port_OpticalModule_IsSupportDdm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_OpticalModule_IsSupportDdm) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[216].Descriptor()
}

func (Devm_Ports_Port_OpticalModule_IsSupportDdm) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[216]
}

func (x Devm_Ports_Port_OpticalModule_IsSupportDdm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_OpticalModule_IsSupportDdm.Descriptor instead.
func (Devm_Ports_Port_OpticalModule_IsSupportDdm) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 2, 17}
}

type Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown_AlarmType int32

const (
	Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown_AlarmType_AUAIS  Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown_AlarmType = 0
	Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown_AlarmType_B3TCA  Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown_AlarmType = 1
	Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown_AlarmType_LAIS   Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown_AlarmType = 2
	Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown_AlarmType_LOF    Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown_AlarmType = 3
	Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown_AlarmType_LOM    Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown_AlarmType = 4
	Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown_AlarmType_LOP    Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown_AlarmType = 5
	Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown_AlarmType_LOS    Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown_AlarmType = 6
	Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown_AlarmType_LRDI   Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown_AlarmType = 7
	Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown_AlarmType_LREI   Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown_AlarmType = 8
	Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown_AlarmType_OOF    Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown_AlarmType = 9
	Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown_AlarmType_PAIS   Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown_AlarmType = 10
	Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown_AlarmType_PRDI   Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown_AlarmType = 11
	Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown_AlarmType_PREI   Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown_AlarmType = 12
	Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown_AlarmType_PPLM   Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown_AlarmType = 13
	Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown_AlarmType_RDOOL  Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown_AlarmType = 14
	Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown_AlarmType_RROOL  Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown_AlarmType = 15
	Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown_AlarmType_SDBERE Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown_AlarmType = 16
	Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown_AlarmType_SFBERE Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown_AlarmType = 17
	Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown_AlarmType_TROOL  Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown_AlarmType = 18
	Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown_AlarmType_PUNEQ  Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown_AlarmType = 19
	Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown_AlarmType_LCD    Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown_AlarmType = 20
	Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown_AlarmType_WLNK   Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown_AlarmType = 21
	Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown_AlarmType_B1TCA  Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown_AlarmType = 40
	Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown_AlarmType_B2TCA  Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown_AlarmType = 41
)

// Enum value maps for Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown_AlarmType.
var (
	Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown_AlarmType_name = map[int32]string{
		0:  "AlarmType_AUAIS",
		1:  "AlarmType_B3TCA",
		2:  "AlarmType_LAIS",
		3:  "AlarmType_LOF",
		4:  "AlarmType_LOM",
		5:  "AlarmType_LOP",
		6:  "AlarmType_LOS",
		7:  "AlarmType_LRDI",
		8:  "AlarmType_LREI",
		9:  "AlarmType_OOF",
		10: "AlarmType_PAIS",
		11: "AlarmType_PRDI",
		12: "AlarmType_PREI",
		13: "AlarmType_PPLM",
		14: "AlarmType_RDOOL",
		15: "AlarmType_RROOL",
		16: "AlarmType_SDBERE",
		17: "AlarmType_SFBERE",
		18: "AlarmType_TROOL",
		19: "AlarmType_PUNEQ",
		20: "AlarmType_LCD",
		21: "AlarmType_WLNK",
		40: "AlarmType_B1TCA",
		41: "AlarmType_B2TCA",
	}
	Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown_AlarmType_value = map[string]int32{
		"AlarmType_AUAIS":  0,
		"AlarmType_B3TCA":  1,
		"AlarmType_LAIS":   2,
		"AlarmType_LOF":    3,
		"AlarmType_LOM":    4,
		"AlarmType_LOP":    5,
		"AlarmType_LOS":    6,
		"AlarmType_LRDI":   7,
		"AlarmType_LREI":   8,
		"AlarmType_OOF":    9,
		"AlarmType_PAIS":   10,
		"AlarmType_PRDI":   11,
		"AlarmType_PREI":   12,
		"AlarmType_PPLM":   13,
		"AlarmType_RDOOL":  14,
		"AlarmType_RROOL":  15,
		"AlarmType_SDBERE": 16,
		"AlarmType_SFBERE": 17,
		"AlarmType_TROOL":  18,
		"AlarmType_PUNEQ":  19,
		"AlarmType_LCD":    20,
		"AlarmType_WLNK":   21,
		"AlarmType_B1TCA":  40,
		"AlarmType_B2TCA":  41,
	}
)

func (x Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown_AlarmType) Enum() *Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown_AlarmType {
	p := new(Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown_AlarmType)
	*p = x
	return p
}

func (x Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown_AlarmType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown_AlarmType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[217].Descriptor()
}

func (Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown_AlarmType) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[217]
}

func (x Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown_AlarmType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown_AlarmType.Descriptor instead.
func (Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown_AlarmType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 3, 0, 0, 0}
}

type Devm_Ports_Port_Pos_FrameFormat int32

const (
	Devm_Ports_Port_Pos_FrameFormat_SDH   Devm_Ports_Port_Pos_FrameFormat = 0
	Devm_Ports_Port_Pos_FrameFormat_SONET Devm_Ports_Port_Pos_FrameFormat = 1
)

// Enum value maps for Devm_Ports_Port_Pos_FrameFormat.
var (
	Devm_Ports_Port_Pos_FrameFormat_name = map[int32]string{
		0: "FrameFormat_SDH",
		1: "FrameFormat_SONET",
	}
	Devm_Ports_Port_Pos_FrameFormat_value = map[string]int32{
		"FrameFormat_SDH":   0,
		"FrameFormat_SONET": 1,
	}
)

func (x Devm_Ports_Port_Pos_FrameFormat) Enum() *Devm_Ports_Port_Pos_FrameFormat {
	p := new(Devm_Ports_Port_Pos_FrameFormat)
	*p = x
	return p
}

func (x Devm_Ports_Port_Pos_FrameFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_Pos_FrameFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[218].Descriptor()
}

func (Devm_Ports_Port_Pos_FrameFormat) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[218]
}

func (x Devm_Ports_Port_Pos_FrameFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_Pos_FrameFormat.Descriptor instead.
func (Devm_Ports_Port_Pos_FrameFormat) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 4, 0}
}

type Devm_Ports_Port_Pos_Crc int32

const (
	Devm_Ports_Port_Pos_Crc_X_16BIT Devm_Ports_Port_Pos_Crc = 0
	Devm_Ports_Port_Pos_Crc_X_32BIT Devm_Ports_Port_Pos_Crc = 1
)

// Enum value maps for Devm_Ports_Port_Pos_Crc.
var (
	Devm_Ports_Port_Pos_Crc_name = map[int32]string{
		0: "Crc_X_16BIT",
		1: "Crc_X_32BIT",
	}
	Devm_Ports_Port_Pos_Crc_value = map[string]int32{
		"Crc_X_16BIT": 0,
		"Crc_X_32BIT": 1,
	}
)

func (x Devm_Ports_Port_Pos_Crc) Enum() *Devm_Ports_Port_Pos_Crc {
	p := new(Devm_Ports_Port_Pos_Crc)
	*p = x
	return p
}

func (x Devm_Ports_Port_Pos_Crc) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_Pos_Crc) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[219].Descriptor()
}

func (Devm_Ports_Port_Pos_Crc) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[219]
}

func (x Devm_Ports_Port_Pos_Crc) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_Pos_Crc.Descriptor instead.
func (Devm_Ports_Port_Pos_Crc) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 4, 1}
}

type Devm_Ports_Port_Pos_HoldUp int32

const (
	Devm_Ports_Port_Pos_HoldUp_DISABLED Devm_Ports_Port_Pos_HoldUp = 0
	Devm_Ports_Port_Pos_HoldUp_ENABLED  Devm_Ports_Port_Pos_HoldUp = 1
)

// Enum value maps for Devm_Ports_Port_Pos_HoldUp.
var (
	Devm_Ports_Port_Pos_HoldUp_name = map[int32]string{
		0: "HoldUp_DISABLED",
		1: "HoldUp_ENABLED",
	}
	Devm_Ports_Port_Pos_HoldUp_value = map[string]int32{
		"HoldUp_DISABLED": 0,
		"HoldUp_ENABLED":  1,
	}
)

func (x Devm_Ports_Port_Pos_HoldUp) Enum() *Devm_Ports_Port_Pos_HoldUp {
	p := new(Devm_Ports_Port_Pos_HoldUp)
	*p = x
	return p
}

func (x Devm_Ports_Port_Pos_HoldUp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_Pos_HoldUp) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[220].Descriptor()
}

func (Devm_Ports_Port_Pos_HoldUp) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[220]
}

func (x Devm_Ports_Port_Pos_HoldUp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_Pos_HoldUp.Descriptor instead.
func (Devm_Ports_Port_Pos_HoldUp) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 4, 2}
}

type Devm_Ports_Port_Pos_Speed int32

const (
	Devm_Ports_Port_Pos_Speed_UNDO   Devm_Ports_Port_Pos_Speed = 0
	Devm_Ports_Port_Pos_Speed_X_155M Devm_Ports_Port_Pos_Speed = 1
	Devm_Ports_Port_Pos_Speed_X_622M Devm_Ports_Port_Pos_Speed = 2
)

// Enum value maps for Devm_Ports_Port_Pos_Speed.
var (
	Devm_Ports_Port_Pos_Speed_name = map[int32]string{
		0: "Speed_UNDO",
		1: "Speed_X_155M",
		2: "Speed_X_622M",
	}
	Devm_Ports_Port_Pos_Speed_value = map[string]int32{
		"Speed_UNDO":   0,
		"Speed_X_155M": 1,
		"Speed_X_622M": 2,
	}
)

func (x Devm_Ports_Port_Pos_Speed) Enum() *Devm_Ports_Port_Pos_Speed {
	p := new(Devm_Ports_Port_Pos_Speed)
	*p = x
	return p
}

func (x Devm_Ports_Port_Pos_Speed) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_Pos_Speed) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[221].Descriptor()
}

func (Devm_Ports_Port_Pos_Speed) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[221]
}

func (x Devm_Ports_Port_Pos_Speed) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_Pos_Speed.Descriptor instead.
func (Devm_Ports_Port_Pos_Speed) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 4, 3}
}

type Devm_Ports_Port_Pos_J0Mode int32

const (
	Devm_Ports_Port_Pos_INVALID_ENUM_VALUE_J0Mode       Devm_Ports_Port_Pos_J0Mode = 0
	Devm_Ports_Port_Pos_J0Mode_X_1BYTE                  Devm_Ports_Port_Pos_J0Mode = 1
	Devm_Ports_Port_Pos_J0Mode_X_16BYTE                 Devm_Ports_Port_Pos_J0Mode = 16
	Devm_Ports_Port_Pos_J0Mode_X_64BYTEX_ORX_NULLX_MODE Devm_Ports_Port_Pos_J0Mode = 64
	Devm_Ports_Port_Pos_J0Mode_PEER                     Devm_Ports_Port_Pos_J0Mode = 128
)

// Enum value maps for Devm_Ports_Port_Pos_J0Mode.
var (
	Devm_Ports_Port_Pos_J0Mode_name = map[int32]string{
		0:   "INVALID_ENUM_VALUE_J0Mode",
		1:   "J0Mode_X_1BYTE",
		16:  "J0Mode_X_16BYTE",
		64:  "J0Mode_X_64BYTEX_ORX_NULLX_MODE",
		128: "J0Mode_PEER",
	}
	Devm_Ports_Port_Pos_J0Mode_value = map[string]int32{
		"INVALID_ENUM_VALUE_J0Mode":       0,
		"J0Mode_X_1BYTE":                  1,
		"J0Mode_X_16BYTE":                 16,
		"J0Mode_X_64BYTEX_ORX_NULLX_MODE": 64,
		"J0Mode_PEER":                     128,
	}
)

func (x Devm_Ports_Port_Pos_J0Mode) Enum() *Devm_Ports_Port_Pos_J0Mode {
	p := new(Devm_Ports_Port_Pos_J0Mode)
	*p = x
	return p
}

func (x Devm_Ports_Port_Pos_J0Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_Pos_J0Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[222].Descriptor()
}

func (Devm_Ports_Port_Pos_J0Mode) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[222]
}

func (x Devm_Ports_Port_Pos_J0Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_Pos_J0Mode.Descriptor instead.
func (Devm_Ports_Port_Pos_J0Mode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 4, 4}
}

type Devm_Ports_Port_Pos_J1Mode int32

const (
	Devm_Ports_Port_Pos_INVALID_ENUM_VALUE_J1Mode       Devm_Ports_Port_Pos_J1Mode = 0
	Devm_Ports_Port_Pos_J1Mode_X_1BYTE                  Devm_Ports_Port_Pos_J1Mode = 1
	Devm_Ports_Port_Pos_J1Mode_X_16BYTE                 Devm_Ports_Port_Pos_J1Mode = 16
	Devm_Ports_Port_Pos_J1Mode_X_64BYTEX_ORX_NULLX_MODE Devm_Ports_Port_Pos_J1Mode = 64
	Devm_Ports_Port_Pos_J1Mode_PEER                     Devm_Ports_Port_Pos_J1Mode = 128
)

// Enum value maps for Devm_Ports_Port_Pos_J1Mode.
var (
	Devm_Ports_Port_Pos_J1Mode_name = map[int32]string{
		0:   "INVALID_ENUM_VALUE_J1Mode",
		1:   "J1Mode_X_1BYTE",
		16:  "J1Mode_X_16BYTE",
		64:  "J1Mode_X_64BYTEX_ORX_NULLX_MODE",
		128: "J1Mode_PEER",
	}
	Devm_Ports_Port_Pos_J1Mode_value = map[string]int32{
		"INVALID_ENUM_VALUE_J1Mode":       0,
		"J1Mode_X_1BYTE":                  1,
		"J1Mode_X_16BYTE":                 16,
		"J1Mode_X_64BYTEX_ORX_NULLX_MODE": 64,
		"J1Mode_PEER":                     128,
	}
)

func (x Devm_Ports_Port_Pos_J1Mode) Enum() *Devm_Ports_Port_Pos_J1Mode {
	p := new(Devm_Ports_Port_Pos_J1Mode)
	*p = x
	return p
}

func (x Devm_Ports_Port_Pos_J1Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_Pos_J1Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[223].Descriptor()
}

func (Devm_Ports_Port_Pos_J1Mode) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[223]
}

func (x Devm_Ports_Port_Pos_J1Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_Pos_J1Mode.Descriptor instead.
func (Devm_Ports_Port_Pos_J1Mode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 4, 5}
}

type Devm_Ports_Port_Pos_Clock int32

const (
	Devm_Ports_Port_Pos_Clock_MASTER Devm_Ports_Port_Pos_Clock = 0
	Devm_Ports_Port_Pos_Clock_SLAVE  Devm_Ports_Port_Pos_Clock = 1
)

// Enum value maps for Devm_Ports_Port_Pos_Clock.
var (
	Devm_Ports_Port_Pos_Clock_name = map[int32]string{
		0: "Clock_MASTER",
		1: "Clock_SLAVE",
	}
	Devm_Ports_Port_Pos_Clock_value = map[string]int32{
		"Clock_MASTER": 0,
		"Clock_SLAVE":  1,
	}
)

func (x Devm_Ports_Port_Pos_Clock) Enum() *Devm_Ports_Port_Pos_Clock {
	p := new(Devm_Ports_Port_Pos_Clock)
	*p = x
	return p
}

func (x Devm_Ports_Port_Pos_Clock) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_Pos_Clock) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[224].Descriptor()
}

func (Devm_Ports_Port_Pos_Clock) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[224]
}

func (x Devm_Ports_Port_Pos_Clock) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_Pos_Clock.Descriptor instead.
func (Devm_Ports_Port_Pos_Clock) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 4, 6}
}

type Devm_Ports_Port_Pos_Scramble int32

const (
	Devm_Ports_Port_Pos_Scramble_DISABLED Devm_Ports_Port_Pos_Scramble = 0
	Devm_Ports_Port_Pos_Scramble_ENABLED  Devm_Ports_Port_Pos_Scramble = 3
)

// Enum value maps for Devm_Ports_Port_Pos_Scramble.
var (
	Devm_Ports_Port_Pos_Scramble_name = map[int32]string{
		0: "Scramble_DISABLED",
		3: "Scramble_ENABLED",
	}
	Devm_Ports_Port_Pos_Scramble_value = map[string]int32{
		"Scramble_DISABLED": 0,
		"Scramble_ENABLED":  3,
	}
)

func (x Devm_Ports_Port_Pos_Scramble) Enum() *Devm_Ports_Port_Pos_Scramble {
	p := new(Devm_Ports_Port_Pos_Scramble)
	*p = x
	return p
}

func (x Devm_Ports_Port_Pos_Scramble) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_Pos_Scramble) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[225].Descriptor()
}

func (Devm_Ports_Port_Pos_Scramble) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[225]
}

func (x Devm_Ports_Port_Pos_Scramble) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_Pos_Scramble.Descriptor instead.
func (Devm_Ports_Port_Pos_Scramble) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 4, 7}
}

type Devm_Ports_Port_Pos_RxJ0Mode int32

const (
	Devm_Ports_Port_Pos_INVALID_ENUM_VALUE_RxJ0Mode       Devm_Ports_Port_Pos_RxJ0Mode = 0
	Devm_Ports_Port_Pos_RxJ0Mode_X_1BYTE                  Devm_Ports_Port_Pos_RxJ0Mode = 1
	Devm_Ports_Port_Pos_RxJ0Mode_X_16BYTE                 Devm_Ports_Port_Pos_RxJ0Mode = 16
	Devm_Ports_Port_Pos_RxJ0Mode_X_64BYTEX_ORX_NULLX_MODE Devm_Ports_Port_Pos_RxJ0Mode = 64
	Devm_Ports_Port_Pos_RxJ0Mode_PEER                     Devm_Ports_Port_Pos_RxJ0Mode = 128
)

// Enum value maps for Devm_Ports_Port_Pos_RxJ0Mode.
var (
	Devm_Ports_Port_Pos_RxJ0Mode_name = map[int32]string{
		0:   "INVALID_ENUM_VALUE_RxJ0Mode",
		1:   "RxJ0Mode_X_1BYTE",
		16:  "RxJ0Mode_X_16BYTE",
		64:  "RxJ0Mode_X_64BYTEX_ORX_NULLX_MODE",
		128: "RxJ0Mode_PEER",
	}
	Devm_Ports_Port_Pos_RxJ0Mode_value = map[string]int32{
		"INVALID_ENUM_VALUE_RxJ0Mode":       0,
		"RxJ0Mode_X_1BYTE":                  1,
		"RxJ0Mode_X_16BYTE":                 16,
		"RxJ0Mode_X_64BYTEX_ORX_NULLX_MODE": 64,
		"RxJ0Mode_PEER":                     128,
	}
)

func (x Devm_Ports_Port_Pos_RxJ0Mode) Enum() *Devm_Ports_Port_Pos_RxJ0Mode {
	p := new(Devm_Ports_Port_Pos_RxJ0Mode)
	*p = x
	return p
}

func (x Devm_Ports_Port_Pos_RxJ0Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_Pos_RxJ0Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[226].Descriptor()
}

func (Devm_Ports_Port_Pos_RxJ0Mode) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[226]
}

func (x Devm_Ports_Port_Pos_RxJ0Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_Pos_RxJ0Mode.Descriptor instead.
func (Devm_Ports_Port_Pos_RxJ0Mode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 4, 8}
}

type Devm_Ports_Port_Pos_RxJ1Mode int32

const (
	Devm_Ports_Port_Pos_INVALID_ENUM_VALUE_RxJ1Mode       Devm_Ports_Port_Pos_RxJ1Mode = 0
	Devm_Ports_Port_Pos_RxJ1Mode_X_1BYTE                  Devm_Ports_Port_Pos_RxJ1Mode = 1
	Devm_Ports_Port_Pos_RxJ1Mode_X_16BYTE                 Devm_Ports_Port_Pos_RxJ1Mode = 16
	Devm_Ports_Port_Pos_RxJ1Mode_X_64BYTEX_ORX_NULLX_MODE Devm_Ports_Port_Pos_RxJ1Mode = 64
	Devm_Ports_Port_Pos_RxJ1Mode_PEER                     Devm_Ports_Port_Pos_RxJ1Mode = 128
)

// Enum value maps for Devm_Ports_Port_Pos_RxJ1Mode.
var (
	Devm_Ports_Port_Pos_RxJ1Mode_name = map[int32]string{
		0:   "INVALID_ENUM_VALUE_RxJ1Mode",
		1:   "RxJ1Mode_X_1BYTE",
		16:  "RxJ1Mode_X_16BYTE",
		64:  "RxJ1Mode_X_64BYTEX_ORX_NULLX_MODE",
		128: "RxJ1Mode_PEER",
	}
	Devm_Ports_Port_Pos_RxJ1Mode_value = map[string]int32{
		"INVALID_ENUM_VALUE_RxJ1Mode":       0,
		"RxJ1Mode_X_1BYTE":                  1,
		"RxJ1Mode_X_16BYTE":                 16,
		"RxJ1Mode_X_64BYTEX_ORX_NULLX_MODE": 64,
		"RxJ1Mode_PEER":                     128,
	}
)

func (x Devm_Ports_Port_Pos_RxJ1Mode) Enum() *Devm_Ports_Port_Pos_RxJ1Mode {
	p := new(Devm_Ports_Port_Pos_RxJ1Mode)
	*p = x
	return p
}

func (x Devm_Ports_Port_Pos_RxJ1Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_Pos_RxJ1Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[227].Descriptor()
}

func (Devm_Ports_Port_Pos_RxJ1Mode) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[227]
}

func (x Devm_Ports_Port_Pos_RxJ1Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_Pos_RxJ1Mode.Descriptor instead.
func (Devm_Ports_Port_Pos_RxJ1Mode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 4, 9}
}

type Devm_Ports_Port_Atm_HoldUp int32

const (
	Devm_Ports_Port_Atm_HoldUp_DISABLED Devm_Ports_Port_Atm_HoldUp = 0
	Devm_Ports_Port_Atm_HoldUp_ENABLED  Devm_Ports_Port_Atm_HoldUp = 1
)

// Enum value maps for Devm_Ports_Port_Atm_HoldUp.
var (
	Devm_Ports_Port_Atm_HoldUp_name = map[int32]string{
		0: "HoldUp_DISABLED",
		1: "HoldUp_ENABLED",
	}
	Devm_Ports_Port_Atm_HoldUp_value = map[string]int32{
		"HoldUp_DISABLED": 0,
		"HoldUp_ENABLED":  1,
	}
)

func (x Devm_Ports_Port_Atm_HoldUp) Enum() *Devm_Ports_Port_Atm_HoldUp {
	p := new(Devm_Ports_Port_Atm_HoldUp)
	*p = x
	return p
}

func (x Devm_Ports_Port_Atm_HoldUp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_Atm_HoldUp) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[228].Descriptor()
}

func (Devm_Ports_Port_Atm_HoldUp) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[228]
}

func (x Devm_Ports_Port_Atm_HoldUp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_Atm_HoldUp.Descriptor instead.
func (Devm_Ports_Port_Atm_HoldUp) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 5, 0}
}

type Devm_Ports_Port_Atm_J0Mode int32

const (
	Devm_Ports_Port_Atm_INVALID_ENUM_VALUE_J0Mode Devm_Ports_Port_Atm_J0Mode = 0
	Devm_Ports_Port_Atm_J0Mode_X_16BYTE           Devm_Ports_Port_Atm_J0Mode = 16
	Devm_Ports_Port_Atm_J0Mode_PEER               Devm_Ports_Port_Atm_J0Mode = 128
)

// Enum value maps for Devm_Ports_Port_Atm_J0Mode.
var (
	Devm_Ports_Port_Atm_J0Mode_name = map[int32]string{
		0:   "INVALID_ENUM_VALUE_J0Mode",
		16:  "J0Mode_X_16BYTE",
		128: "J0Mode_PEER",
	}
	Devm_Ports_Port_Atm_J0Mode_value = map[string]int32{
		"INVALID_ENUM_VALUE_J0Mode": 0,
		"J0Mode_X_16BYTE":           16,
		"J0Mode_PEER":               128,
	}
)

func (x Devm_Ports_Port_Atm_J0Mode) Enum() *Devm_Ports_Port_Atm_J0Mode {
	p := new(Devm_Ports_Port_Atm_J0Mode)
	*p = x
	return p
}

func (x Devm_Ports_Port_Atm_J0Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_Atm_J0Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[229].Descriptor()
}

func (Devm_Ports_Port_Atm_J0Mode) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[229]
}

func (x Devm_Ports_Port_Atm_J0Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_Atm_J0Mode.Descriptor instead.
func (Devm_Ports_Port_Atm_J0Mode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 5, 1}
}

type Devm_Ports_Port_Atm_J1Mode int32

const (
	Devm_Ports_Port_Atm_INVALID_ENUM_VALUE_J1Mode       Devm_Ports_Port_Atm_J1Mode = 0
	Devm_Ports_Port_Atm_J1Mode_X_16BYTE                 Devm_Ports_Port_Atm_J1Mode = 16
	Devm_Ports_Port_Atm_J1Mode_X_64BYTEX_ORX_NULLX_MODE Devm_Ports_Port_Atm_J1Mode = 64
	Devm_Ports_Port_Atm_J1Mode_PEER                     Devm_Ports_Port_Atm_J1Mode = 128
)

// Enum value maps for Devm_Ports_Port_Atm_J1Mode.
var (
	Devm_Ports_Port_Atm_J1Mode_name = map[int32]string{
		0:   "INVALID_ENUM_VALUE_J1Mode",
		16:  "J1Mode_X_16BYTE",
		64:  "J1Mode_X_64BYTEX_ORX_NULLX_MODE",
		128: "J1Mode_PEER",
	}
	Devm_Ports_Port_Atm_J1Mode_value = map[string]int32{
		"INVALID_ENUM_VALUE_J1Mode":       0,
		"J1Mode_X_16BYTE":                 16,
		"J1Mode_X_64BYTEX_ORX_NULLX_MODE": 64,
		"J1Mode_PEER":                     128,
	}
)

func (x Devm_Ports_Port_Atm_J1Mode) Enum() *Devm_Ports_Port_Atm_J1Mode {
	p := new(Devm_Ports_Port_Atm_J1Mode)
	*p = x
	return p
}

func (x Devm_Ports_Port_Atm_J1Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_Atm_J1Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[230].Descriptor()
}

func (Devm_Ports_Port_Atm_J1Mode) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[230]
}

func (x Devm_Ports_Port_Atm_J1Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_Atm_J1Mode.Descriptor instead.
func (Devm_Ports_Port_Atm_J1Mode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 5, 2}
}

type Devm_Ports_Port_Atm_Clock int32

const (
	Devm_Ports_Port_Atm_Clock_MASTER Devm_Ports_Port_Atm_Clock = 0
	Devm_Ports_Port_Atm_Clock_SLAVE  Devm_Ports_Port_Atm_Clock = 1
)

// Enum value maps for Devm_Ports_Port_Atm_Clock.
var (
	Devm_Ports_Port_Atm_Clock_name = map[int32]string{
		0: "Clock_MASTER",
		1: "Clock_SLAVE",
	}
	Devm_Ports_Port_Atm_Clock_value = map[string]int32{
		"Clock_MASTER": 0,
		"Clock_SLAVE":  1,
	}
)

func (x Devm_Ports_Port_Atm_Clock) Enum() *Devm_Ports_Port_Atm_Clock {
	p := new(Devm_Ports_Port_Atm_Clock)
	*p = x
	return p
}

func (x Devm_Ports_Port_Atm_Clock) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_Atm_Clock) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[231].Descriptor()
}

func (Devm_Ports_Port_Atm_Clock) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[231]
}

func (x Devm_Ports_Port_Atm_Clock) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_Atm_Clock.Descriptor instead.
func (Devm_Ports_Port_Atm_Clock) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 5, 3}
}

type Devm_Ports_Port_Atm_Scramble int32

const (
	Devm_Ports_Port_Atm_Scramble_DISABLED Devm_Ports_Port_Atm_Scramble = 0
	Devm_Ports_Port_Atm_Scramble_ENABLED  Devm_Ports_Port_Atm_Scramble = 3
)

// Enum value maps for Devm_Ports_Port_Atm_Scramble.
var (
	Devm_Ports_Port_Atm_Scramble_name = map[int32]string{
		0: "Scramble_DISABLED",
		3: "Scramble_ENABLED",
	}
	Devm_Ports_Port_Atm_Scramble_value = map[string]int32{
		"Scramble_DISABLED": 0,
		"Scramble_ENABLED":  3,
	}
)

func (x Devm_Ports_Port_Atm_Scramble) Enum() *Devm_Ports_Port_Atm_Scramble {
	p := new(Devm_Ports_Port_Atm_Scramble)
	*p = x
	return p
}

func (x Devm_Ports_Port_Atm_Scramble) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_Atm_Scramble) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[232].Descriptor()
}

func (Devm_Ports_Port_Atm_Scramble) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[232]
}

func (x Devm_Ports_Port_Atm_Scramble) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_Atm_Scramble.Descriptor instead.
func (Devm_Ports_Port_Atm_Scramble) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 5, 4}
}

type Devm_Ports_Port_Atm_FlagSpacePadding int32

const (
	Devm_Ports_Port_Atm_FlagSpacePadding_DISABLE Devm_Ports_Port_Atm_FlagSpacePadding = 0
	Devm_Ports_Port_Atm_FlagSpacePadding_ENABLE  Devm_Ports_Port_Atm_FlagSpacePadding = 1
)

// Enum value maps for Devm_Ports_Port_Atm_FlagSpacePadding.
var (
	Devm_Ports_Port_Atm_FlagSpacePadding_name = map[int32]string{
		0: "FlagSpacePadding_DISABLE",
		1: "FlagSpacePadding_ENABLE",
	}
	Devm_Ports_Port_Atm_FlagSpacePadding_value = map[string]int32{
		"FlagSpacePadding_DISABLE": 0,
		"FlagSpacePadding_ENABLE":  1,
	}
)

func (x Devm_Ports_Port_Atm_FlagSpacePadding) Enum() *Devm_Ports_Port_Atm_FlagSpacePadding {
	p := new(Devm_Ports_Port_Atm_FlagSpacePadding)
	*p = x
	return p
}

func (x Devm_Ports_Port_Atm_FlagSpacePadding) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_Atm_FlagSpacePadding) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[233].Descriptor()
}

func (Devm_Ports_Port_Atm_FlagSpacePadding) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[233]
}

func (x Devm_Ports_Port_Atm_FlagSpacePadding) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_Atm_FlagSpacePadding.Descriptor instead.
func (Devm_Ports_Port_Atm_FlagSpacePadding) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 5, 5}
}

type Devm_Ports_Port_Atm_RxJ0Mode int32

const (
	Devm_Ports_Port_Atm_INVALID_ENUM_VALUE_RxJ0Mode Devm_Ports_Port_Atm_RxJ0Mode = 0
	Devm_Ports_Port_Atm_RxJ0Mode_X_16BYTE           Devm_Ports_Port_Atm_RxJ0Mode = 16
	Devm_Ports_Port_Atm_RxJ0Mode_PEER               Devm_Ports_Port_Atm_RxJ0Mode = 128
)

// Enum value maps for Devm_Ports_Port_Atm_RxJ0Mode.
var (
	Devm_Ports_Port_Atm_RxJ0Mode_name = map[int32]string{
		0:   "INVALID_ENUM_VALUE_RxJ0Mode",
		16:  "RxJ0Mode_X_16BYTE",
		128: "RxJ0Mode_PEER",
	}
	Devm_Ports_Port_Atm_RxJ0Mode_value = map[string]int32{
		"INVALID_ENUM_VALUE_RxJ0Mode": 0,
		"RxJ0Mode_X_16BYTE":           16,
		"RxJ0Mode_PEER":               128,
	}
)

func (x Devm_Ports_Port_Atm_RxJ0Mode) Enum() *Devm_Ports_Port_Atm_RxJ0Mode {
	p := new(Devm_Ports_Port_Atm_RxJ0Mode)
	*p = x
	return p
}

func (x Devm_Ports_Port_Atm_RxJ0Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_Atm_RxJ0Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[234].Descriptor()
}

func (Devm_Ports_Port_Atm_RxJ0Mode) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[234]
}

func (x Devm_Ports_Port_Atm_RxJ0Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_Atm_RxJ0Mode.Descriptor instead.
func (Devm_Ports_Port_Atm_RxJ0Mode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 5, 6}
}

type Devm_Ports_Port_Atm_RxJ1Mode int32

const (
	Devm_Ports_Port_Atm_INVALID_ENUM_VALUE_RxJ1Mode       Devm_Ports_Port_Atm_RxJ1Mode = 0
	Devm_Ports_Port_Atm_RxJ1Mode_X_16BYTE                 Devm_Ports_Port_Atm_RxJ1Mode = 16
	Devm_Ports_Port_Atm_RxJ1Mode_X_64BYTEX_ORX_NULLX_MODE Devm_Ports_Port_Atm_RxJ1Mode = 64
	Devm_Ports_Port_Atm_RxJ1Mode_PEER                     Devm_Ports_Port_Atm_RxJ1Mode = 128
)

// Enum value maps for Devm_Ports_Port_Atm_RxJ1Mode.
var (
	Devm_Ports_Port_Atm_RxJ1Mode_name = map[int32]string{
		0:   "INVALID_ENUM_VALUE_RxJ1Mode",
		16:  "RxJ1Mode_X_16BYTE",
		64:  "RxJ1Mode_X_64BYTEX_ORX_NULLX_MODE",
		128: "RxJ1Mode_PEER",
	}
	Devm_Ports_Port_Atm_RxJ1Mode_value = map[string]int32{
		"INVALID_ENUM_VALUE_RxJ1Mode":       0,
		"RxJ1Mode_X_16BYTE":                 16,
		"RxJ1Mode_X_64BYTEX_ORX_NULLX_MODE": 64,
		"RxJ1Mode_PEER":                     128,
	}
)

func (x Devm_Ports_Port_Atm_RxJ1Mode) Enum() *Devm_Ports_Port_Atm_RxJ1Mode {
	p := new(Devm_Ports_Port_Atm_RxJ1Mode)
	*p = x
	return p
}

func (x Devm_Ports_Port_Atm_RxJ1Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_Atm_RxJ1Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[235].Descriptor()
}

func (Devm_Ports_Port_Atm_RxJ1Mode) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[235]
}

func (x Devm_Ports_Port_Atm_RxJ1Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_Atm_RxJ1Mode.Descriptor instead.
func (Devm_Ports_Port_Atm_RxJ1Mode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 5, 7}
}

type Devm_Ports_Port_Cpos_MappingMode int32

const (
	Devm_Ports_Port_Cpos_MappingMode_HX_MODE Devm_Ports_Port_Cpos_MappingMode = 0
	Devm_Ports_Port_Cpos_MappingMode_AX_MODE Devm_Ports_Port_Cpos_MappingMode = 1
	Devm_Ports_Port_Cpos_MappingMode_LX_MODE Devm_Ports_Port_Cpos_MappingMode = 2
)

// Enum value maps for Devm_Ports_Port_Cpos_MappingMode.
var (
	Devm_Ports_Port_Cpos_MappingMode_name = map[int32]string{
		0: "MappingMode_HX_MODE",
		1: "MappingMode_AX_MODE",
		2: "MappingMode_LX_MODE",
	}
	Devm_Ports_Port_Cpos_MappingMode_value = map[string]int32{
		"MappingMode_HX_MODE": 0,
		"MappingMode_AX_MODE": 1,
		"MappingMode_LX_MODE": 2,
	}
)

func (x Devm_Ports_Port_Cpos_MappingMode) Enum() *Devm_Ports_Port_Cpos_MappingMode {
	p := new(Devm_Ports_Port_Cpos_MappingMode)
	*p = x
	return p
}

func (x Devm_Ports_Port_Cpos_MappingMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_Cpos_MappingMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[236].Descriptor()
}

func (Devm_Ports_Port_Cpos_MappingMode) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[236]
}

func (x Devm_Ports_Port_Cpos_MappingMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_Cpos_MappingMode.Descriptor instead.
func (Devm_Ports_Port_Cpos_MappingMode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 6, 0}
}

type Devm_Ports_Port_Cpos_FrameFormat int32

const (
	Devm_Ports_Port_Cpos_FrameFormat_SDH   Devm_Ports_Port_Cpos_FrameFormat = 0
	Devm_Ports_Port_Cpos_FrameFormat_SONET Devm_Ports_Port_Cpos_FrameFormat = 1
)

// Enum value maps for Devm_Ports_Port_Cpos_FrameFormat.
var (
	Devm_Ports_Port_Cpos_FrameFormat_name = map[int32]string{
		0: "FrameFormat_SDH",
		1: "FrameFormat_SONET",
	}
	Devm_Ports_Port_Cpos_FrameFormat_value = map[string]int32{
		"FrameFormat_SDH":   0,
		"FrameFormat_SONET": 1,
	}
)

func (x Devm_Ports_Port_Cpos_FrameFormat) Enum() *Devm_Ports_Port_Cpos_FrameFormat {
	p := new(Devm_Ports_Port_Cpos_FrameFormat)
	*p = x
	return p
}

func (x Devm_Ports_Port_Cpos_FrameFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_Cpos_FrameFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[237].Descriptor()
}

func (Devm_Ports_Port_Cpos_FrameFormat) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[237]
}

func (x Devm_Ports_Port_Cpos_FrameFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_Cpos_FrameFormat.Descriptor instead.
func (Devm_Ports_Port_Cpos_FrameFormat) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 6, 1}
}

type Devm_Ports_Port_Cpos_Multiplex int32

const (
	Devm_Ports_Port_Cpos_Multiplex_AUX_4 Devm_Ports_Port_Cpos_Multiplex = 0
	Devm_Ports_Port_Cpos_Multiplex_AUX_3 Devm_Ports_Port_Cpos_Multiplex = 1
)

// Enum value maps for Devm_Ports_Port_Cpos_Multiplex.
var (
	Devm_Ports_Port_Cpos_Multiplex_name = map[int32]string{
		0: "Multiplex_AUX_4",
		1: "Multiplex_AUX_3",
	}
	Devm_Ports_Port_Cpos_Multiplex_value = map[string]int32{
		"Multiplex_AUX_4": 0,
		"Multiplex_AUX_3": 1,
	}
)

func (x Devm_Ports_Port_Cpos_Multiplex) Enum() *Devm_Ports_Port_Cpos_Multiplex {
	p := new(Devm_Ports_Port_Cpos_Multiplex)
	*p = x
	return p
}

func (x Devm_Ports_Port_Cpos_Multiplex) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_Cpos_Multiplex) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[238].Descriptor()
}

func (Devm_Ports_Port_Cpos_Multiplex) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[238]
}

func (x Devm_Ports_Port_Cpos_Multiplex) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_Cpos_Multiplex.Descriptor instead.
func (Devm_Ports_Port_Cpos_Multiplex) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 6, 2}
}

type Devm_Ports_Port_Cpos_HoldUp int32

const (
	Devm_Ports_Port_Cpos_HoldUp_DISABLED Devm_Ports_Port_Cpos_HoldUp = 0
	Devm_Ports_Port_Cpos_HoldUp_ENABLED  Devm_Ports_Port_Cpos_HoldUp = 1
)

// Enum value maps for Devm_Ports_Port_Cpos_HoldUp.
var (
	Devm_Ports_Port_Cpos_HoldUp_name = map[int32]string{
		0: "HoldUp_DISABLED",
		1: "HoldUp_ENABLED",
	}
	Devm_Ports_Port_Cpos_HoldUp_value = map[string]int32{
		"HoldUp_DISABLED": 0,
		"HoldUp_ENABLED":  1,
	}
)

func (x Devm_Ports_Port_Cpos_HoldUp) Enum() *Devm_Ports_Port_Cpos_HoldUp {
	p := new(Devm_Ports_Port_Cpos_HoldUp)
	*p = x
	return p
}

func (x Devm_Ports_Port_Cpos_HoldUp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_Cpos_HoldUp) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[239].Descriptor()
}

func (Devm_Ports_Port_Cpos_HoldUp) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[239]
}

func (x Devm_Ports_Port_Cpos_HoldUp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_Cpos_HoldUp.Descriptor instead.
func (Devm_Ports_Port_Cpos_HoldUp) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 6, 3}
}

type Devm_Ports_Port_Cpos_HpMappingMode int32

const (
	Devm_Ports_Port_Cpos_HpMappingMode_VC12 Devm_Ports_Port_Cpos_HpMappingMode = 0
	Devm_Ports_Port_Cpos_HpMappingMode_VC4  Devm_Ports_Port_Cpos_HpMappingMode = 1
)

// Enum value maps for Devm_Ports_Port_Cpos_HpMappingMode.
var (
	Devm_Ports_Port_Cpos_HpMappingMode_name = map[int32]string{
		0: "HpMappingMode_VC12",
		1: "HpMappingMode_VC4",
	}
	Devm_Ports_Port_Cpos_HpMappingMode_value = map[string]int32{
		"HpMappingMode_VC12": 0,
		"HpMappingMode_VC4":  1,
	}
)

func (x Devm_Ports_Port_Cpos_HpMappingMode) Enum() *Devm_Ports_Port_Cpos_HpMappingMode {
	p := new(Devm_Ports_Port_Cpos_HpMappingMode)
	*p = x
	return p
}

func (x Devm_Ports_Port_Cpos_HpMappingMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_Cpos_HpMappingMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[240].Descriptor()
}

func (Devm_Ports_Port_Cpos_HpMappingMode) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[240]
}

func (x Devm_Ports_Port_Cpos_HpMappingMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_Cpos_HpMappingMode.Descriptor instead.
func (Devm_Ports_Port_Cpos_HpMappingMode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 6, 4}
}

type Devm_Ports_Port_Cpos_AisFlag int32

const (
	Devm_Ports_Port_Cpos_AisFlag_DISABLE Devm_Ports_Port_Cpos_AisFlag = 0
	Devm_Ports_Port_Cpos_AisFlag_ENABLE  Devm_Ports_Port_Cpos_AisFlag = 1
)

// Enum value maps for Devm_Ports_Port_Cpos_AisFlag.
var (
	Devm_Ports_Port_Cpos_AisFlag_name = map[int32]string{
		0: "AisFlag_DISABLE",
		1: "AisFlag_ENABLE",
	}
	Devm_Ports_Port_Cpos_AisFlag_value = map[string]int32{
		"AisFlag_DISABLE": 0,
		"AisFlag_ENABLE":  1,
	}
)

func (x Devm_Ports_Port_Cpos_AisFlag) Enum() *Devm_Ports_Port_Cpos_AisFlag {
	p := new(Devm_Ports_Port_Cpos_AisFlag)
	*p = x
	return p
}

func (x Devm_Ports_Port_Cpos_AisFlag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_Cpos_AisFlag) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[241].Descriptor()
}

func (Devm_Ports_Port_Cpos_AisFlag) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[241]
}

func (x Devm_Ports_Port_Cpos_AisFlag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_Cpos_AisFlag.Descriptor instead.
func (Devm_Ports_Port_Cpos_AisFlag) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 6, 5}
}

type Devm_Ports_Port_Cpos_TuaisFlag int32

const (
	Devm_Ports_Port_Cpos_TuaisFlag_DISABLE Devm_Ports_Port_Cpos_TuaisFlag = 0
	Devm_Ports_Port_Cpos_TuaisFlag_ENABLE  Devm_Ports_Port_Cpos_TuaisFlag = 1
)

// Enum value maps for Devm_Ports_Port_Cpos_TuaisFlag.
var (
	Devm_Ports_Port_Cpos_TuaisFlag_name = map[int32]string{
		0: "TuaisFlag_DISABLE",
		1: "TuaisFlag_ENABLE",
	}
	Devm_Ports_Port_Cpos_TuaisFlag_value = map[string]int32{
		"TuaisFlag_DISABLE": 0,
		"TuaisFlag_ENABLE":  1,
	}
)

func (x Devm_Ports_Port_Cpos_TuaisFlag) Enum() *Devm_Ports_Port_Cpos_TuaisFlag {
	p := new(Devm_Ports_Port_Cpos_TuaisFlag)
	*p = x
	return p
}

func (x Devm_Ports_Port_Cpos_TuaisFlag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_Cpos_TuaisFlag) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[242].Descriptor()
}

func (Devm_Ports_Port_Cpos_TuaisFlag) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[242]
}

func (x Devm_Ports_Port_Cpos_TuaisFlag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_Cpos_TuaisFlag.Descriptor instead.
func (Devm_Ports_Port_Cpos_TuaisFlag) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 6, 6}
}

type Devm_Ports_Port_Cpos_J0Mode int32

const (
	Devm_Ports_Port_Cpos_J0Mode_SDH   Devm_Ports_Port_Cpos_J0Mode = 0
	Devm_Ports_Port_Cpos_J0Mode_SONET Devm_Ports_Port_Cpos_J0Mode = 1
)

// Enum value maps for Devm_Ports_Port_Cpos_J0Mode.
var (
	Devm_Ports_Port_Cpos_J0Mode_name = map[int32]string{
		0: "J0Mode_SDH",
		1: "J0Mode_SONET",
	}
	Devm_Ports_Port_Cpos_J0Mode_value = map[string]int32{
		"J0Mode_SDH":   0,
		"J0Mode_SONET": 1,
	}
)

func (x Devm_Ports_Port_Cpos_J0Mode) Enum() *Devm_Ports_Port_Cpos_J0Mode {
	p := new(Devm_Ports_Port_Cpos_J0Mode)
	*p = x
	return p
}

func (x Devm_Ports_Port_Cpos_J0Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_Cpos_J0Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[243].Descriptor()
}

func (Devm_Ports_Port_Cpos_J0Mode) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[243]
}

func (x Devm_Ports_Port_Cpos_J0Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_Cpos_J0Mode.Descriptor instead.
func (Devm_Ports_Port_Cpos_J0Mode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 6, 7}
}

type Devm_Ports_Port_Cpos_J1Mode int32

const (
	Devm_Ports_Port_Cpos_INVALID_ENUM_VALUE_J1Mode       Devm_Ports_Port_Cpos_J1Mode = 0
	Devm_Ports_Port_Cpos_J1Mode_X_1BYTE                  Devm_Ports_Port_Cpos_J1Mode = 1
	Devm_Ports_Port_Cpos_J1Mode_X_16BYTE                 Devm_Ports_Port_Cpos_J1Mode = 16
	Devm_Ports_Port_Cpos_J1Mode_X_64BYTEX_ORX_NULLX_MODE Devm_Ports_Port_Cpos_J1Mode = 64
)

// Enum value maps for Devm_Ports_Port_Cpos_J1Mode.
var (
	Devm_Ports_Port_Cpos_J1Mode_name = map[int32]string{
		0:  "INVALID_ENUM_VALUE_J1Mode",
		1:  "J1Mode_X_1BYTE",
		16: "J1Mode_X_16BYTE",
		64: "J1Mode_X_64BYTEX_ORX_NULLX_MODE",
	}
	Devm_Ports_Port_Cpos_J1Mode_value = map[string]int32{
		"INVALID_ENUM_VALUE_J1Mode":       0,
		"J1Mode_X_1BYTE":                  1,
		"J1Mode_X_16BYTE":                 16,
		"J1Mode_X_64BYTEX_ORX_NULLX_MODE": 64,
	}
)

func (x Devm_Ports_Port_Cpos_J1Mode) Enum() *Devm_Ports_Port_Cpos_J1Mode {
	p := new(Devm_Ports_Port_Cpos_J1Mode)
	*p = x
	return p
}

func (x Devm_Ports_Port_Cpos_J1Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_Cpos_J1Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[244].Descriptor()
}

func (Devm_Ports_Port_Cpos_J1Mode) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[244]
}

func (x Devm_Ports_Port_Cpos_J1Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_Cpos_J1Mode.Descriptor instead.
func (Devm_Ports_Port_Cpos_J1Mode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 6, 8}
}

type Devm_Ports_Port_Cpos_Clock int32

const (
	Devm_Ports_Port_Cpos_Clock_MASTER Devm_Ports_Port_Cpos_Clock = 0
	Devm_Ports_Port_Cpos_Clock_SLAVE  Devm_Ports_Port_Cpos_Clock = 1
)

// Enum value maps for Devm_Ports_Port_Cpos_Clock.
var (
	Devm_Ports_Port_Cpos_Clock_name = map[int32]string{
		0: "Clock_MASTER",
		1: "Clock_SLAVE",
	}
	Devm_Ports_Port_Cpos_Clock_value = map[string]int32{
		"Clock_MASTER": 0,
		"Clock_SLAVE":  1,
	}
)

func (x Devm_Ports_Port_Cpos_Clock) Enum() *Devm_Ports_Port_Cpos_Clock {
	p := new(Devm_Ports_Port_Cpos_Clock)
	*p = x
	return p
}

func (x Devm_Ports_Port_Cpos_Clock) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_Cpos_Clock) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[245].Descriptor()
}

func (Devm_Ports_Port_Cpos_Clock) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[245]
}

func (x Devm_Ports_Port_Cpos_Clock) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_Cpos_Clock.Descriptor instead.
func (Devm_Ports_Port_Cpos_Clock) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 6, 9}
}

type Devm_Ports_Port_Cpos_FlagSpacePadding int32

const (
	Devm_Ports_Port_Cpos_FlagSpacePadding_DISABLE Devm_Ports_Port_Cpos_FlagSpacePadding = 0
	Devm_Ports_Port_Cpos_FlagSpacePadding_ENABLE  Devm_Ports_Port_Cpos_FlagSpacePadding = 1
)

// Enum value maps for Devm_Ports_Port_Cpos_FlagSpacePadding.
var (
	Devm_Ports_Port_Cpos_FlagSpacePadding_name = map[int32]string{
		0: "FlagSpacePadding_DISABLE",
		1: "FlagSpacePadding_ENABLE",
	}
	Devm_Ports_Port_Cpos_FlagSpacePadding_value = map[string]int32{
		"FlagSpacePadding_DISABLE": 0,
		"FlagSpacePadding_ENABLE":  1,
	}
)

func (x Devm_Ports_Port_Cpos_FlagSpacePadding) Enum() *Devm_Ports_Port_Cpos_FlagSpacePadding {
	p := new(Devm_Ports_Port_Cpos_FlagSpacePadding)
	*p = x
	return p
}

func (x Devm_Ports_Port_Cpos_FlagSpacePadding) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_Cpos_FlagSpacePadding) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[246].Descriptor()
}

func (Devm_Ports_Port_Cpos_FlagSpacePadding) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[246]
}

func (x Devm_Ports_Port_Cpos_FlagSpacePadding) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_Cpos_FlagSpacePadding.Descriptor instead.
func (Devm_Ports_Port_Cpos_FlagSpacePadding) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 6, 10}
}

type Devm_Ports_Port_Cpos_E1T1S_E1T1_WorkMode int32

const (
	Devm_Ports_Port_Cpos_E1T1S_E1T1_WorkMode_FRAMED   Devm_Ports_Port_Cpos_E1T1S_E1T1_WorkMode = 0
	Devm_Ports_Port_Cpos_E1T1S_E1T1_WorkMode_UNFRAMED Devm_Ports_Port_Cpos_E1T1S_E1T1_WorkMode = 1
)

// Enum value maps for Devm_Ports_Port_Cpos_E1T1S_E1T1_WorkMode.
var (
	Devm_Ports_Port_Cpos_E1T1S_E1T1_WorkMode_name = map[int32]string{
		0: "WorkMode_FRAMED",
		1: "WorkMode_UNFRAMED",
	}
	Devm_Ports_Port_Cpos_E1T1S_E1T1_WorkMode_value = map[string]int32{
		"WorkMode_FRAMED":   0,
		"WorkMode_UNFRAMED": 1,
	}
)

func (x Devm_Ports_Port_Cpos_E1T1S_E1T1_WorkMode) Enum() *Devm_Ports_Port_Cpos_E1T1S_E1T1_WorkMode {
	p := new(Devm_Ports_Port_Cpos_E1T1S_E1T1_WorkMode)
	*p = x
	return p
}

func (x Devm_Ports_Port_Cpos_E1T1S_E1T1_WorkMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_Cpos_E1T1S_E1T1_WorkMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[247].Descriptor()
}

func (Devm_Ports_Port_Cpos_E1T1S_E1T1_WorkMode) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[247]
}

func (x Devm_Ports_Port_Cpos_E1T1S_E1T1_WorkMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_Cpos_E1T1S_E1T1_WorkMode.Descriptor instead.
func (Devm_Ports_Port_Cpos_E1T1S_E1T1_WorkMode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 6, 0, 0, 0}
}

type Devm_Ports_Port_Cpos_E1T1S_E1T1_Clock int32

const (
	Devm_Ports_Port_Cpos_E1T1S_E1T1_Clock_MASTER Devm_Ports_Port_Cpos_E1T1S_E1T1_Clock = 0
	Devm_Ports_Port_Cpos_E1T1S_E1T1_Clock_SLAVE  Devm_Ports_Port_Cpos_E1T1S_E1T1_Clock = 1
	Devm_Ports_Port_Cpos_E1T1S_E1T1_Clock_DOMAIN Devm_Ports_Port_Cpos_E1T1S_E1T1_Clock = 2
)

// Enum value maps for Devm_Ports_Port_Cpos_E1T1S_E1T1_Clock.
var (
	Devm_Ports_Port_Cpos_E1T1S_E1T1_Clock_name = map[int32]string{
		0: "Clock_MASTER",
		1: "Clock_SLAVE",
		2: "Clock_DOMAIN",
	}
	Devm_Ports_Port_Cpos_E1T1S_E1T1_Clock_value = map[string]int32{
		"Clock_MASTER": 0,
		"Clock_SLAVE":  1,
		"Clock_DOMAIN": 2,
	}
)

func (x Devm_Ports_Port_Cpos_E1T1S_E1T1_Clock) Enum() *Devm_Ports_Port_Cpos_E1T1S_E1T1_Clock {
	p := new(Devm_Ports_Port_Cpos_E1T1S_E1T1_Clock)
	*p = x
	return p
}

func (x Devm_Ports_Port_Cpos_E1T1S_E1T1_Clock) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_Cpos_E1T1S_E1T1_Clock) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[248].Descriptor()
}

func (Devm_Ports_Port_Cpos_E1T1S_E1T1_Clock) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[248]
}

func (x Devm_Ports_Port_Cpos_E1T1S_E1T1_Clock) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_Cpos_E1T1S_E1T1_Clock.Descriptor instead.
func (Devm_Ports_Port_Cpos_E1T1S_E1T1_Clock) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 6, 0, 0, 1}
}

type Devm_Ports_Port_Cpos_E1T1S_E1T1_FrameFormat int32

const (
	Devm_Ports_Port_Cpos_E1T1S_E1T1_FrameFormat_NOX_CRC4 Devm_Ports_Port_Cpos_E1T1S_E1T1_FrameFormat = 0
	Devm_Ports_Port_Cpos_E1T1S_E1T1_FrameFormat_CRC4     Devm_Ports_Port_Cpos_E1T1S_E1T1_FrameFormat = 1
)

// Enum value maps for Devm_Ports_Port_Cpos_E1T1S_E1T1_FrameFormat.
var (
	Devm_Ports_Port_Cpos_E1T1S_E1T1_FrameFormat_name = map[int32]string{
		0: "FrameFormat_NOX_CRC4",
		1: "FrameFormat_CRC4",
	}
	Devm_Ports_Port_Cpos_E1T1S_E1T1_FrameFormat_value = map[string]int32{
		"FrameFormat_NOX_CRC4": 0,
		"FrameFormat_CRC4":     1,
	}
)

func (x Devm_Ports_Port_Cpos_E1T1S_E1T1_FrameFormat) Enum() *Devm_Ports_Port_Cpos_E1T1S_E1T1_FrameFormat {
	p := new(Devm_Ports_Port_Cpos_E1T1S_E1T1_FrameFormat)
	*p = x
	return p
}

func (x Devm_Ports_Port_Cpos_E1T1S_E1T1_FrameFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_Cpos_E1T1S_E1T1_FrameFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[249].Descriptor()
}

func (Devm_Ports_Port_Cpos_E1T1S_E1T1_FrameFormat) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[249]
}

func (x Devm_Ports_Port_Cpos_E1T1S_E1T1_FrameFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_Cpos_E1T1S_E1T1_FrameFormat.Descriptor instead.
func (Devm_Ports_Port_Cpos_E1T1S_E1T1_FrameFormat) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 6, 0, 0, 2}
}

type Devm_Ports_Port_Cpos_E1T1S_E1T1_Loopback int32

const (
	Devm_Ports_Port_Cpos_E1T1S_E1T1_Loopback_NONE   Devm_Ports_Port_Cpos_E1T1S_E1T1_Loopback = 0
	Devm_Ports_Port_Cpos_E1T1S_E1T1_Loopback_LOCAL  Devm_Ports_Port_Cpos_E1T1S_E1T1_Loopback = 1
	Devm_Ports_Port_Cpos_E1T1S_E1T1_Loopback_REMOTE Devm_Ports_Port_Cpos_E1T1S_E1T1_Loopback = 2
)

// Enum value maps for Devm_Ports_Port_Cpos_E1T1S_E1T1_Loopback.
var (
	Devm_Ports_Port_Cpos_E1T1S_E1T1_Loopback_name = map[int32]string{
		0: "Loopback_NONE",
		1: "Loopback_LOCAL",
		2: "Loopback_REMOTE",
	}
	Devm_Ports_Port_Cpos_E1T1S_E1T1_Loopback_value = map[string]int32{
		"Loopback_NONE":   0,
		"Loopback_LOCAL":  1,
		"Loopback_REMOTE": 2,
	}
)

func (x Devm_Ports_Port_Cpos_E1T1S_E1T1_Loopback) Enum() *Devm_Ports_Port_Cpos_E1T1S_E1T1_Loopback {
	p := new(Devm_Ports_Port_Cpos_E1T1S_E1T1_Loopback)
	*p = x
	return p
}

func (x Devm_Ports_Port_Cpos_E1T1S_E1T1_Loopback) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_Cpos_E1T1S_E1T1_Loopback) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[250].Descriptor()
}

func (Devm_Ports_Port_Cpos_E1T1S_E1T1_Loopback) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[250]
}

func (x Devm_Ports_Port_Cpos_E1T1S_E1T1_Loopback) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_Cpos_E1T1S_E1T1_Loopback.Descriptor instead.
func (Devm_Ports_Port_Cpos_E1T1S_E1T1_Loopback) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 6, 0, 0, 3}
}

type Devm_Ports_Port_PhySerial_Baudrate int32

const (
	Devm_Ports_Port_PhySerial_Baudrate_X_600BIT   Devm_Ports_Port_PhySerial_Baudrate = 0
	Devm_Ports_Port_PhySerial_Baudrate_X_1200BIT  Devm_Ports_Port_PhySerial_Baudrate = 1
	Devm_Ports_Port_PhySerial_Baudrate_X_2400BIT  Devm_Ports_Port_PhySerial_Baudrate = 2
	Devm_Ports_Port_PhySerial_Baudrate_X_4800BIT  Devm_Ports_Port_PhySerial_Baudrate = 3
	Devm_Ports_Port_PhySerial_Baudrate_X_9600BIT  Devm_Ports_Port_PhySerial_Baudrate = 4
	Devm_Ports_Port_PhySerial_Baudrate_X_19200BIT Devm_Ports_Port_PhySerial_Baudrate = 5
	Devm_Ports_Port_PhySerial_Baudrate_X_38400BIT Devm_Ports_Port_PhySerial_Baudrate = 6
	Devm_Ports_Port_PhySerial_Baudrate_X_48000BIT Devm_Ports_Port_PhySerial_Baudrate = 7
	Devm_Ports_Port_PhySerial_Baudrate_X_64KBIT   Devm_Ports_Port_PhySerial_Baudrate = 8
	Devm_Ports_Port_PhySerial_Baudrate_X_128KBIT  Devm_Ports_Port_PhySerial_Baudrate = 9
	Devm_Ports_Port_PhySerial_Baudrate_X_192KBIT  Devm_Ports_Port_PhySerial_Baudrate = 10
	Devm_Ports_Port_PhySerial_Baudrate_X_256KBIT  Devm_Ports_Port_PhySerial_Baudrate = 11
	Devm_Ports_Port_PhySerial_Baudrate_X_320KBIT  Devm_Ports_Port_PhySerial_Baudrate = 12
	Devm_Ports_Port_PhySerial_Baudrate_X_384KBIT  Devm_Ports_Port_PhySerial_Baudrate = 13
	Devm_Ports_Port_PhySerial_Baudrate_X_448KBIT  Devm_Ports_Port_PhySerial_Baudrate = 14
	Devm_Ports_Port_PhySerial_Baudrate_X_512KBIT  Devm_Ports_Port_PhySerial_Baudrate = 15
	Devm_Ports_Port_PhySerial_Baudrate_X_576KBIT  Devm_Ports_Port_PhySerial_Baudrate = 16
	Devm_Ports_Port_PhySerial_Baudrate_X_640KBIT  Devm_Ports_Port_PhySerial_Baudrate = 17
	Devm_Ports_Port_PhySerial_Baudrate_X_704KBIT  Devm_Ports_Port_PhySerial_Baudrate = 18
	Devm_Ports_Port_PhySerial_Baudrate_X_768KBIT  Devm_Ports_Port_PhySerial_Baudrate = 19
	Devm_Ports_Port_PhySerial_Baudrate_X_832KBIT  Devm_Ports_Port_PhySerial_Baudrate = 20
	Devm_Ports_Port_PhySerial_Baudrate_X_896KBIT  Devm_Ports_Port_PhySerial_Baudrate = 21
	Devm_Ports_Port_PhySerial_Baudrate_X_960KBIT  Devm_Ports_Port_PhySerial_Baudrate = 22
	Devm_Ports_Port_PhySerial_Baudrate_X_1024KBIT Devm_Ports_Port_PhySerial_Baudrate = 23
	Devm_Ports_Port_PhySerial_Baudrate_X_1088KBIT Devm_Ports_Port_PhySerial_Baudrate = 24
	Devm_Ports_Port_PhySerial_Baudrate_X_1152KBIT Devm_Ports_Port_PhySerial_Baudrate = 25
	Devm_Ports_Port_PhySerial_Baudrate_X_1216KBIT Devm_Ports_Port_PhySerial_Baudrate = 26
	Devm_Ports_Port_PhySerial_Baudrate_X_1280KBIT Devm_Ports_Port_PhySerial_Baudrate = 27
	Devm_Ports_Port_PhySerial_Baudrate_X_1344KBIT Devm_Ports_Port_PhySerial_Baudrate = 28
	Devm_Ports_Port_PhySerial_Baudrate_X_1408KBIT Devm_Ports_Port_PhySerial_Baudrate = 29
	Devm_Ports_Port_PhySerial_Baudrate_X_1472KBIT Devm_Ports_Port_PhySerial_Baudrate = 30
	Devm_Ports_Port_PhySerial_Baudrate_X_1536KBIT Devm_Ports_Port_PhySerial_Baudrate = 31
	Devm_Ports_Port_PhySerial_Baudrate_X_1600KBIT Devm_Ports_Port_PhySerial_Baudrate = 32
	Devm_Ports_Port_PhySerial_Baudrate_X_1664KBIT Devm_Ports_Port_PhySerial_Baudrate = 33
	Devm_Ports_Port_PhySerial_Baudrate_X_1728KBIT Devm_Ports_Port_PhySerial_Baudrate = 34
	Devm_Ports_Port_PhySerial_Baudrate_X_1792KBIT Devm_Ports_Port_PhySerial_Baudrate = 35
	Devm_Ports_Port_PhySerial_Baudrate_X_1856KBIT Devm_Ports_Port_PhySerial_Baudrate = 36
	Devm_Ports_Port_PhySerial_Baudrate_X_1920KBIT Devm_Ports_Port_PhySerial_Baudrate = 37
	Devm_Ports_Port_PhySerial_Baudrate_X_1984KBIT Devm_Ports_Port_PhySerial_Baudrate = 38
)

// Enum value maps for Devm_Ports_Port_PhySerial_Baudrate.
var (
	Devm_Ports_Port_PhySerial_Baudrate_name = map[int32]string{
		0:  "Baudrate_X_600BIT",
		1:  "Baudrate_X_1200BIT",
		2:  "Baudrate_X_2400BIT",
		3:  "Baudrate_X_4800BIT",
		4:  "Baudrate_X_9600BIT",
		5:  "Baudrate_X_19200BIT",
		6:  "Baudrate_X_38400BIT",
		7:  "Baudrate_X_48000BIT",
		8:  "Baudrate_X_64KBIT",
		9:  "Baudrate_X_128KBIT",
		10: "Baudrate_X_192KBIT",
		11: "Baudrate_X_256KBIT",
		12: "Baudrate_X_320KBIT",
		13: "Baudrate_X_384KBIT",
		14: "Baudrate_X_448KBIT",
		15: "Baudrate_X_512KBIT",
		16: "Baudrate_X_576KBIT",
		17: "Baudrate_X_640KBIT",
		18: "Baudrate_X_704KBIT",
		19: "Baudrate_X_768KBIT",
		20: "Baudrate_X_832KBIT",
		21: "Baudrate_X_896KBIT",
		22: "Baudrate_X_960KBIT",
		23: "Baudrate_X_1024KBIT",
		24: "Baudrate_X_1088KBIT",
		25: "Baudrate_X_1152KBIT",
		26: "Baudrate_X_1216KBIT",
		27: "Baudrate_X_1280KBIT",
		28: "Baudrate_X_1344KBIT",
		29: "Baudrate_X_1408KBIT",
		30: "Baudrate_X_1472KBIT",
		31: "Baudrate_X_1536KBIT",
		32: "Baudrate_X_1600KBIT",
		33: "Baudrate_X_1664KBIT",
		34: "Baudrate_X_1728KBIT",
		35: "Baudrate_X_1792KBIT",
		36: "Baudrate_X_1856KBIT",
		37: "Baudrate_X_1920KBIT",
		38: "Baudrate_X_1984KBIT",
	}
	Devm_Ports_Port_PhySerial_Baudrate_value = map[string]int32{
		"Baudrate_X_600BIT":   0,
		"Baudrate_X_1200BIT":  1,
		"Baudrate_X_2400BIT":  2,
		"Baudrate_X_4800BIT":  3,
		"Baudrate_X_9600BIT":  4,
		"Baudrate_X_19200BIT": 5,
		"Baudrate_X_38400BIT": 6,
		"Baudrate_X_48000BIT": 7,
		"Baudrate_X_64KBIT":   8,
		"Baudrate_X_128KBIT":  9,
		"Baudrate_X_192KBIT":  10,
		"Baudrate_X_256KBIT":  11,
		"Baudrate_X_320KBIT":  12,
		"Baudrate_X_384KBIT":  13,
		"Baudrate_X_448KBIT":  14,
		"Baudrate_X_512KBIT":  15,
		"Baudrate_X_576KBIT":  16,
		"Baudrate_X_640KBIT":  17,
		"Baudrate_X_704KBIT":  18,
		"Baudrate_X_768KBIT":  19,
		"Baudrate_X_832KBIT":  20,
		"Baudrate_X_896KBIT":  21,
		"Baudrate_X_960KBIT":  22,
		"Baudrate_X_1024KBIT": 23,
		"Baudrate_X_1088KBIT": 24,
		"Baudrate_X_1152KBIT": 25,
		"Baudrate_X_1216KBIT": 26,
		"Baudrate_X_1280KBIT": 27,
		"Baudrate_X_1344KBIT": 28,
		"Baudrate_X_1408KBIT": 29,
		"Baudrate_X_1472KBIT": 30,
		"Baudrate_X_1536KBIT": 31,
		"Baudrate_X_1600KBIT": 32,
		"Baudrate_X_1664KBIT": 33,
		"Baudrate_X_1728KBIT": 34,
		"Baudrate_X_1792KBIT": 35,
		"Baudrate_X_1856KBIT": 36,
		"Baudrate_X_1920KBIT": 37,
		"Baudrate_X_1984KBIT": 38,
	}
)

func (x Devm_Ports_Port_PhySerial_Baudrate) Enum() *Devm_Ports_Port_PhySerial_Baudrate {
	p := new(Devm_Ports_Port_PhySerial_Baudrate)
	*p = x
	return p
}

func (x Devm_Ports_Port_PhySerial_Baudrate) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_PhySerial_Baudrate) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[251].Descriptor()
}

func (Devm_Ports_Port_PhySerial_Baudrate) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[251]
}

func (x Devm_Ports_Port_PhySerial_Baudrate) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_PhySerial_Baudrate.Descriptor instead.
func (Devm_Ports_Port_PhySerial_Baudrate) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 9, 0}
}

type Devm_Ports_Port_PhySerial_ClockSourceMode int32

const (
	Devm_Ports_Port_PhySerial_ClockSourceMode_INTERNAL Devm_Ports_Port_PhySerial_ClockSourceMode = 0
	Devm_Ports_Port_PhySerial_ClockSourceMode_EXTERNAL Devm_Ports_Port_PhySerial_ClockSourceMode = 1
	Devm_Ports_Port_PhySerial_ClockSourceMode_SLAVE    Devm_Ports_Port_PhySerial_ClockSourceMode = 2
)

// Enum value maps for Devm_Ports_Port_PhySerial_ClockSourceMode.
var (
	Devm_Ports_Port_PhySerial_ClockSourceMode_name = map[int32]string{
		0: "ClockSourceMode_INTERNAL",
		1: "ClockSourceMode_EXTERNAL",
		2: "ClockSourceMode_SLAVE",
	}
	Devm_Ports_Port_PhySerial_ClockSourceMode_value = map[string]int32{
		"ClockSourceMode_INTERNAL": 0,
		"ClockSourceMode_EXTERNAL": 1,
		"ClockSourceMode_SLAVE":    2,
	}
)

func (x Devm_Ports_Port_PhySerial_ClockSourceMode) Enum() *Devm_Ports_Port_PhySerial_ClockSourceMode {
	p := new(Devm_Ports_Port_PhySerial_ClockSourceMode)
	*p = x
	return p
}

func (x Devm_Ports_Port_PhySerial_ClockSourceMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_PhySerial_ClockSourceMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[252].Descriptor()
}

func (Devm_Ports_Port_PhySerial_ClockSourceMode) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[252]
}

func (x Devm_Ports_Port_PhySerial_ClockSourceMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_PhySerial_ClockSourceMode.Descriptor instead.
func (Devm_Ports_Port_PhySerial_ClockSourceMode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 9, 1}
}

type Devm_Ports_Port_PhySerial_MuxProtocol int32

const (
	Devm_Ports_Port_PhySerial_MuxProtocol_SX_BITX_LOOPBACK Devm_Ports_Port_PhySerial_MuxProtocol = 0
	Devm_Ports_Port_PhySerial_MuxProtocol_SX_BITX_0        Devm_Ports_Port_PhySerial_MuxProtocol = 1
	Devm_Ports_Port_PhySerial_MuxProtocol_SX_BITX_1        Devm_Ports_Port_PhySerial_MuxProtocol = 2
)

// Enum value maps for Devm_Ports_Port_PhySerial_MuxProtocol.
var (
	Devm_Ports_Port_PhySerial_MuxProtocol_name = map[int32]string{
		0: "MuxProtocol_SX_BITX_LOOPBACK",
		1: "MuxProtocol_SX_BITX_0",
		2: "MuxProtocol_SX_BITX_1",
	}
	Devm_Ports_Port_PhySerial_MuxProtocol_value = map[string]int32{
		"MuxProtocol_SX_BITX_LOOPBACK": 0,
		"MuxProtocol_SX_BITX_0":        1,
		"MuxProtocol_SX_BITX_1":        2,
	}
)

func (x Devm_Ports_Port_PhySerial_MuxProtocol) Enum() *Devm_Ports_Port_PhySerial_MuxProtocol {
	p := new(Devm_Ports_Port_PhySerial_MuxProtocol)
	*p = x
	return p
}

func (x Devm_Ports_Port_PhySerial_MuxProtocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_PhySerial_MuxProtocol) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[253].Descriptor()
}

func (Devm_Ports_Port_PhySerial_MuxProtocol) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[253]
}

func (x Devm_Ports_Port_PhySerial_MuxProtocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_PhySerial_MuxProtocol.Descriptor instead.
func (Devm_Ports_Port_PhySerial_MuxProtocol) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 9, 2}
}

type Devm_Ports_Port_PhySerial_Parity int32

const (
	Devm_Ports_Port_PhySerial_Parity_NONE Devm_Ports_Port_PhySerial_Parity = 0
	Devm_Ports_Port_PhySerial_Parity_EVEN Devm_Ports_Port_PhySerial_Parity = 1
	Devm_Ports_Port_PhySerial_Parity_ODD  Devm_Ports_Port_PhySerial_Parity = 2
)

// Enum value maps for Devm_Ports_Port_PhySerial_Parity.
var (
	Devm_Ports_Port_PhySerial_Parity_name = map[int32]string{
		0: "Parity_NONE",
		1: "Parity_EVEN",
		2: "Parity_ODD",
	}
	Devm_Ports_Port_PhySerial_Parity_value = map[string]int32{
		"Parity_NONE": 0,
		"Parity_EVEN": 1,
		"Parity_ODD":  2,
	}
)

func (x Devm_Ports_Port_PhySerial_Parity) Enum() *Devm_Ports_Port_PhySerial_Parity {
	p := new(Devm_Ports_Port_PhySerial_Parity)
	*p = x
	return p
}

func (x Devm_Ports_Port_PhySerial_Parity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_PhySerial_Parity) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[254].Descriptor()
}

func (Devm_Ports_Port_PhySerial_Parity) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[254]
}

func (x Devm_Ports_Port_PhySerial_Parity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_PhySerial_Parity.Descriptor instead.
func (Devm_Ports_Port_PhySerial_Parity) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 9, 3}
}

type Devm_Ports_Port_PhySerial_PhaseClockSend int32

const (
	Devm_Ports_Port_PhySerial_PhaseClockSend_INX_PHASE      Devm_Ports_Port_PhySerial_PhaseClockSend = 0
	Devm_Ports_Port_PhySerial_PhaseClockSend_INVERSEX_PHASE Devm_Ports_Port_PhySerial_PhaseClockSend = 1
)

// Enum value maps for Devm_Ports_Port_PhySerial_PhaseClockSend.
var (
	Devm_Ports_Port_PhySerial_PhaseClockSend_name = map[int32]string{
		0: "PhaseClockSend_INX_PHASE",
		1: "PhaseClockSend_INVERSEX_PHASE",
	}
	Devm_Ports_Port_PhySerial_PhaseClockSend_value = map[string]int32{
		"PhaseClockSend_INX_PHASE":      0,
		"PhaseClockSend_INVERSEX_PHASE": 1,
	}
)

func (x Devm_Ports_Port_PhySerial_PhaseClockSend) Enum() *Devm_Ports_Port_PhySerial_PhaseClockSend {
	p := new(Devm_Ports_Port_PhySerial_PhaseClockSend)
	*p = x
	return p
}

func (x Devm_Ports_Port_PhySerial_PhaseClockSend) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_PhySerial_PhaseClockSend) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[255].Descriptor()
}

func (Devm_Ports_Port_PhySerial_PhaseClockSend) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[255]
}

func (x Devm_Ports_Port_PhySerial_PhaseClockSend) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_PhySerial_PhaseClockSend.Descriptor instead.
func (Devm_Ports_Port_PhySerial_PhaseClockSend) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 9, 4}
}

type Devm_Ports_Port_PhySerial_PhaseClockRec int32

const (
	Devm_Ports_Port_PhySerial_PhaseClockRec_INX_PHASE      Devm_Ports_Port_PhySerial_PhaseClockRec = 0
	Devm_Ports_Port_PhySerial_PhaseClockRec_INVERSEX_PHASE Devm_Ports_Port_PhySerial_PhaseClockRec = 1
)

// Enum value maps for Devm_Ports_Port_PhySerial_PhaseClockRec.
var (
	Devm_Ports_Port_PhySerial_PhaseClockRec_name = map[int32]string{
		0: "PhaseClockRec_INX_PHASE",
		1: "PhaseClockRec_INVERSEX_PHASE",
	}
	Devm_Ports_Port_PhySerial_PhaseClockRec_value = map[string]int32{
		"PhaseClockRec_INX_PHASE":      0,
		"PhaseClockRec_INVERSEX_PHASE": 1,
	}
)

func (x Devm_Ports_Port_PhySerial_PhaseClockRec) Enum() *Devm_Ports_Port_PhySerial_PhaseClockRec {
	p := new(Devm_Ports_Port_PhySerial_PhaseClockRec)
	*p = x
	return p
}

func (x Devm_Ports_Port_PhySerial_PhaseClockRec) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_PhySerial_PhaseClockRec) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[256].Descriptor()
}

func (Devm_Ports_Port_PhySerial_PhaseClockRec) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[256]
}

func (x Devm_Ports_Port_PhySerial_PhaseClockRec) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_PhySerial_PhaseClockRec.Descriptor instead.
func (Devm_Ports_Port_PhySerial_PhaseClockRec) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 9, 5}
}

type Devm_Ports_Port_PhySerial_PhysicalMode int32

const (
	Devm_Ports_Port_PhySerial_PhysicalMode_ASYNC Devm_Ports_Port_PhySerial_PhysicalMode = 0
	Devm_Ports_Port_PhySerial_PhysicalMode_SYNC  Devm_Ports_Port_PhySerial_PhysicalMode = 1
)

// Enum value maps for Devm_Ports_Port_PhySerial_PhysicalMode.
var (
	Devm_Ports_Port_PhySerial_PhysicalMode_name = map[int32]string{
		0: "PhysicalMode_ASYNC",
		1: "PhysicalMode_SYNC",
	}
	Devm_Ports_Port_PhySerial_PhysicalMode_value = map[string]int32{
		"PhysicalMode_ASYNC": 0,
		"PhysicalMode_SYNC":  1,
	}
)

func (x Devm_Ports_Port_PhySerial_PhysicalMode) Enum() *Devm_Ports_Port_PhySerial_PhysicalMode {
	p := new(Devm_Ports_Port_PhySerial_PhysicalMode)
	*p = x
	return p
}

func (x Devm_Ports_Port_PhySerial_PhysicalMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_PhySerial_PhysicalMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[257].Descriptor()
}

func (Devm_Ports_Port_PhySerial_PhysicalMode) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[257]
}

func (x Devm_Ports_Port_PhySerial_PhysicalMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_PhySerial_PhysicalMode.Descriptor instead.
func (Devm_Ports_Port_PhySerial_PhysicalMode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 9, 6}
}

type Devm_Ports_Port_PhySerial_PortMode int32

const (
	Devm_Ports_Port_PhySerial_PortMode_RSX_232 Devm_Ports_Port_PhySerial_PortMode = 0
	Devm_Ports_Port_PhySerial_PortMode_RSX_485 Devm_Ports_Port_PhySerial_PortMode = 1
	Devm_Ports_Port_PhySerial_PortMode_RSX_422 Devm_Ports_Port_PhySerial_PortMode = 2
	Devm_Ports_Port_PhySerial_PortMode_VX_24   Devm_Ports_Port_PhySerial_PortMode = 3
	Devm_Ports_Port_PhySerial_PortMode_XX_21   Devm_Ports_Port_PhySerial_PortMode = 4
	Devm_Ports_Port_PhySerial_PortMode_VX_35   Devm_Ports_Port_PhySerial_PortMode = 5
	Devm_Ports_Port_PhySerial_PortMode_EM      Devm_Ports_Port_PhySerial_PortMode = 6
	Devm_Ports_Port_PhySerial_PortMode_FXS     Devm_Ports_Port_PhySerial_PortMode = 7
	Devm_Ports_Port_PhySerial_PortMode_FXO     Devm_Ports_Port_PhySerial_PortMode = 8
	Devm_Ports_Port_PhySerial_PortMode_C3794   Devm_Ports_Port_PhySerial_PortMode = 10
	Devm_Ports_Port_PhySerial_PortMode_CODIR   Devm_Ports_Port_PhySerial_PortMode = 11
)

// Enum value maps for Devm_Ports_Port_PhySerial_PortMode.
var (
	Devm_Ports_Port_PhySerial_PortMode_name = map[int32]string{
		0:  "PortMode_RSX_232",
		1:  "PortMode_RSX_485",
		2:  "PortMode_RSX_422",
		3:  "PortMode_VX_24",
		4:  "PortMode_XX_21",
		5:  "PortMode_VX_35",
		6:  "PortMode_EM",
		7:  "PortMode_FXS",
		8:  "PortMode_FXO",
		10: "PortMode_C3794",
		11: "PortMode_CODIR",
	}
	Devm_Ports_Port_PhySerial_PortMode_value = map[string]int32{
		"PortMode_RSX_232": 0,
		"PortMode_RSX_485": 1,
		"PortMode_RSX_422": 2,
		"PortMode_VX_24":   3,
		"PortMode_XX_21":   4,
		"PortMode_VX_35":   5,
		"PortMode_EM":      6,
		"PortMode_FXS":     7,
		"PortMode_FXO":     8,
		"PortMode_C3794":   10,
		"PortMode_CODIR":   11,
	}
)

func (x Devm_Ports_Port_PhySerial_PortMode) Enum() *Devm_Ports_Port_PhySerial_PortMode {
	p := new(Devm_Ports_Port_PhySerial_PortMode)
	*p = x
	return p
}

func (x Devm_Ports_Port_PhySerial_PortMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_PhySerial_PortMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[258].Descriptor()
}

func (Devm_Ports_Port_PhySerial_PortMode) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[258]
}

func (x Devm_Ports_Port_PhySerial_PortMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_PhySerial_PortMode.Descriptor instead.
func (Devm_Ports_Port_PhySerial_PortMode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 9, 7}
}

type Devm_Ports_Port_PhySerial_WorkMode int32

const (
	Devm_Ports_Port_PhySerial_WorkMode_DCE Devm_Ports_Port_PhySerial_WorkMode = 0
	Devm_Ports_Port_PhySerial_WorkMode_DTE Devm_Ports_Port_PhySerial_WorkMode = 1
)

// Enum value maps for Devm_Ports_Port_PhySerial_WorkMode.
var (
	Devm_Ports_Port_PhySerial_WorkMode_name = map[int32]string{
		0: "WorkMode_DCE",
		1: "WorkMode_DTE",
	}
	Devm_Ports_Port_PhySerial_WorkMode_value = map[string]int32{
		"WorkMode_DCE": 0,
		"WorkMode_DTE": 1,
	}
)

func (x Devm_Ports_Port_PhySerial_WorkMode) Enum() *Devm_Ports_Port_PhySerial_WorkMode {
	p := new(Devm_Ports_Port_PhySerial_WorkMode)
	*p = x
	return p
}

func (x Devm_Ports_Port_PhySerial_WorkMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_PhySerial_WorkMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[259].Descriptor()
}

func (Devm_Ports_Port_PhySerial_WorkMode) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[259]
}

func (x Devm_Ports_Port_PhySerial_WorkMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_PhySerial_WorkMode.Descriptor instead.
func (Devm_Ports_Port_PhySerial_WorkMode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 9, 8}
}

type Devm_Ports_Port_PhySerial_PhaseMode int32

const (
	Devm_Ports_Port_PhySerial_PhaseMode_SEQUENCE Devm_Ports_Port_PhySerial_PhaseMode = 0
	Devm_Ports_Port_PhySerial_PhaseMode_INTERVAL Devm_Ports_Port_PhySerial_PhaseMode = 1
)

// Enum value maps for Devm_Ports_Port_PhySerial_PhaseMode.
var (
	Devm_Ports_Port_PhySerial_PhaseMode_name = map[int32]string{
		0: "PhaseMode_SEQUENCE",
		1: "PhaseMode_INTERVAL",
	}
	Devm_Ports_Port_PhySerial_PhaseMode_value = map[string]int32{
		"PhaseMode_SEQUENCE": 0,
		"PhaseMode_INTERVAL": 1,
	}
)

func (x Devm_Ports_Port_PhySerial_PhaseMode) Enum() *Devm_Ports_Port_PhySerial_PhaseMode {
	p := new(Devm_Ports_Port_PhySerial_PhaseMode)
	*p = x
	return p
}

func (x Devm_Ports_Port_PhySerial_PhaseMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_PhySerial_PhaseMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[260].Descriptor()
}

func (Devm_Ports_Port_PhySerial_PhaseMode) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[260]
}

func (x Devm_Ports_Port_PhySerial_PhaseMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_PhySerial_PhaseMode.Descriptor instead.
func (Devm_Ports_Port_PhySerial_PhaseMode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 9, 9}
}

type Devm_Ports_Port_PhySerial_DetectDsrSignal int32

const (
	Devm_Ports_Port_PhySerial_DetectDsrSignal_DETECT   Devm_Ports_Port_PhySerial_DetectDsrSignal = 0
	Devm_Ports_Port_PhySerial_DetectDsrSignal_NODETECT Devm_Ports_Port_PhySerial_DetectDsrSignal = 1
)

// Enum value maps for Devm_Ports_Port_PhySerial_DetectDsrSignal.
var (
	Devm_Ports_Port_PhySerial_DetectDsrSignal_name = map[int32]string{
		0: "DetectDsrSignal_DETECT",
		1: "DetectDsrSignal_NODETECT",
	}
	Devm_Ports_Port_PhySerial_DetectDsrSignal_value = map[string]int32{
		"DetectDsrSignal_DETECT":   0,
		"DetectDsrSignal_NODETECT": 1,
	}
)

func (x Devm_Ports_Port_PhySerial_DetectDsrSignal) Enum() *Devm_Ports_Port_PhySerial_DetectDsrSignal {
	p := new(Devm_Ports_Port_PhySerial_DetectDsrSignal)
	*p = x
	return p
}

func (x Devm_Ports_Port_PhySerial_DetectDsrSignal) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_PhySerial_DetectDsrSignal) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[261].Descriptor()
}

func (Devm_Ports_Port_PhySerial_DetectDsrSignal) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[261]
}

func (x Devm_Ports_Port_PhySerial_DetectDsrSignal) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_PhySerial_DetectDsrSignal.Descriptor instead.
func (Devm_Ports_Port_PhySerial_DetectDsrSignal) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 9, 10}
}

type Devm_Ports_Port_PhySerial_DetectDtrSignal int32

const (
	Devm_Ports_Port_PhySerial_DetectDtrSignal_DETECT   Devm_Ports_Port_PhySerial_DetectDtrSignal = 0
	Devm_Ports_Port_PhySerial_DetectDtrSignal_NODETECT Devm_Ports_Port_PhySerial_DetectDtrSignal = 1
)

// Enum value maps for Devm_Ports_Port_PhySerial_DetectDtrSignal.
var (
	Devm_Ports_Port_PhySerial_DetectDtrSignal_name = map[int32]string{
		0: "DetectDtrSignal_DETECT",
		1: "DetectDtrSignal_NODETECT",
	}
	Devm_Ports_Port_PhySerial_DetectDtrSignal_value = map[string]int32{
		"DetectDtrSignal_DETECT":   0,
		"DetectDtrSignal_NODETECT": 1,
	}
)

func (x Devm_Ports_Port_PhySerial_DetectDtrSignal) Enum() *Devm_Ports_Port_PhySerial_DetectDtrSignal {
	p := new(Devm_Ports_Port_PhySerial_DetectDtrSignal)
	*p = x
	return p
}

func (x Devm_Ports_Port_PhySerial_DetectDtrSignal) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_PhySerial_DetectDtrSignal) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[262].Descriptor()
}

func (Devm_Ports_Port_PhySerial_DetectDtrSignal) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[262]
}

func (x Devm_Ports_Port_PhySerial_DetectDtrSignal) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_PhySerial_DetectDtrSignal.Descriptor instead.
func (Devm_Ports_Port_PhySerial_DetectDtrSignal) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 9, 11}
}

type Devm_Ports_Port_PhySerial_DetectDcdSignal int32

const (
	Devm_Ports_Port_PhySerial_DetectDcdSignal_DETECT   Devm_Ports_Port_PhySerial_DetectDcdSignal = 0
	Devm_Ports_Port_PhySerial_DetectDcdSignal_NODETECT Devm_Ports_Port_PhySerial_DetectDcdSignal = 1
)

// Enum value maps for Devm_Ports_Port_PhySerial_DetectDcdSignal.
var (
	Devm_Ports_Port_PhySerial_DetectDcdSignal_name = map[int32]string{
		0: "DetectDcdSignal_DETECT",
		1: "DetectDcdSignal_NODETECT",
	}
	Devm_Ports_Port_PhySerial_DetectDcdSignal_value = map[string]int32{
		"DetectDcdSignal_DETECT":   0,
		"DetectDcdSignal_NODETECT": 1,
	}
)

func (x Devm_Ports_Port_PhySerial_DetectDcdSignal) Enum() *Devm_Ports_Port_PhySerial_DetectDcdSignal {
	p := new(Devm_Ports_Port_PhySerial_DetectDcdSignal)
	*p = x
	return p
}

func (x Devm_Ports_Port_PhySerial_DetectDcdSignal) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_PhySerial_DetectDcdSignal) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[263].Descriptor()
}

func (Devm_Ports_Port_PhySerial_DetectDcdSignal) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[263]
}

func (x Devm_Ports_Port_PhySerial_DetectDcdSignal) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_PhySerial_DetectDcdSignal.Descriptor instead.
func (Devm_Ports_Port_PhySerial_DetectDcdSignal) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 9, 12}
}

type Devm_Ports_Port_PhySerial_DetectCtsSignal int32

const (
	Devm_Ports_Port_PhySerial_DetectCtsSignal_DETECT   Devm_Ports_Port_PhySerial_DetectCtsSignal = 0
	Devm_Ports_Port_PhySerial_DetectCtsSignal_NODETECT Devm_Ports_Port_PhySerial_DetectCtsSignal = 1
)

// Enum value maps for Devm_Ports_Port_PhySerial_DetectCtsSignal.
var (
	Devm_Ports_Port_PhySerial_DetectCtsSignal_name = map[int32]string{
		0: "DetectCtsSignal_DETECT",
		1: "DetectCtsSignal_NODETECT",
	}
	Devm_Ports_Port_PhySerial_DetectCtsSignal_value = map[string]int32{
		"DetectCtsSignal_DETECT":   0,
		"DetectCtsSignal_NODETECT": 1,
	}
)

func (x Devm_Ports_Port_PhySerial_DetectCtsSignal) Enum() *Devm_Ports_Port_PhySerial_DetectCtsSignal {
	p := new(Devm_Ports_Port_PhySerial_DetectCtsSignal)
	*p = x
	return p
}

func (x Devm_Ports_Port_PhySerial_DetectCtsSignal) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_PhySerial_DetectCtsSignal) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[264].Descriptor()
}

func (Devm_Ports_Port_PhySerial_DetectCtsSignal) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[264]
}

func (x Devm_Ports_Port_PhySerial_DetectCtsSignal) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_PhySerial_DetectCtsSignal.Descriptor instead.
func (Devm_Ports_Port_PhySerial_DetectCtsSignal) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 9, 13}
}

type Devm_Ports_Port_PhySerial_DetectRtsSignal int32

const (
	Devm_Ports_Port_PhySerial_DetectRtsSignal_DETECT   Devm_Ports_Port_PhySerial_DetectRtsSignal = 0
	Devm_Ports_Port_PhySerial_DetectRtsSignal_NODETECT Devm_Ports_Port_PhySerial_DetectRtsSignal = 1
)

// Enum value maps for Devm_Ports_Port_PhySerial_DetectRtsSignal.
var (
	Devm_Ports_Port_PhySerial_DetectRtsSignal_name = map[int32]string{
		0: "DetectRtsSignal_DETECT",
		1: "DetectRtsSignal_NODETECT",
	}
	Devm_Ports_Port_PhySerial_DetectRtsSignal_value = map[string]int32{
		"DetectRtsSignal_DETECT":   0,
		"DetectRtsSignal_NODETECT": 1,
	}
)

func (x Devm_Ports_Port_PhySerial_DetectRtsSignal) Enum() *Devm_Ports_Port_PhySerial_DetectRtsSignal {
	p := new(Devm_Ports_Port_PhySerial_DetectRtsSignal)
	*p = x
	return p
}

func (x Devm_Ports_Port_PhySerial_DetectRtsSignal) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_PhySerial_DetectRtsSignal) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[265].Descriptor()
}

func (Devm_Ports_Port_PhySerial_DetectRtsSignal) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[265]
}

func (x Devm_Ports_Port_PhySerial_DetectRtsSignal) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_PhySerial_DetectRtsSignal.Descriptor instead.
func (Devm_Ports_Port_PhySerial_DetectRtsSignal) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 9, 14}
}

type Devm_Ports_Port_PhyVoice_PcmLawVaule int32

const (
	Devm_Ports_Port_PhyVoice_PcmLawVaule_AX_LAW Devm_Ports_Port_PhyVoice_PcmLawVaule = 0
	Devm_Ports_Port_PhyVoice_PcmLawVaule_UX_LAW Devm_Ports_Port_PhyVoice_PcmLawVaule = 1
)

// Enum value maps for Devm_Ports_Port_PhyVoice_PcmLawVaule.
var (
	Devm_Ports_Port_PhyVoice_PcmLawVaule_name = map[int32]string{
		0: "PcmLawVaule_AX_LAW",
		1: "PcmLawVaule_UX_LAW",
	}
	Devm_Ports_Port_PhyVoice_PcmLawVaule_value = map[string]int32{
		"PcmLawVaule_AX_LAW": 0,
		"PcmLawVaule_UX_LAW": 1,
	}
)

func (x Devm_Ports_Port_PhyVoice_PcmLawVaule) Enum() *Devm_Ports_Port_PhyVoice_PcmLawVaule {
	p := new(Devm_Ports_Port_PhyVoice_PcmLawVaule)
	*p = x
	return p
}

func (x Devm_Ports_Port_PhyVoice_PcmLawVaule) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_PhyVoice_PcmLawVaule) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[266].Descriptor()
}

func (Devm_Ports_Port_PhyVoice_PcmLawVaule) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[266]
}

func (x Devm_Ports_Port_PhyVoice_PcmLawVaule) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_PhyVoice_PcmLawVaule.Descriptor instead.
func (Devm_Ports_Port_PhyVoice_PcmLawVaule) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 10, 0}
}

type Devm_Ports_Port_PhyVoice_ChannelAssociatedSignallingEnable int32

const (
	Devm_Ports_Port_PhyVoice_ChannelAssociatedSignallingEnable_DISABLE Devm_Ports_Port_PhyVoice_ChannelAssociatedSignallingEnable = 0
	Devm_Ports_Port_PhyVoice_ChannelAssociatedSignallingEnable_ENABLE  Devm_Ports_Port_PhyVoice_ChannelAssociatedSignallingEnable = 1
)

// Enum value maps for Devm_Ports_Port_PhyVoice_ChannelAssociatedSignallingEnable.
var (
	Devm_Ports_Port_PhyVoice_ChannelAssociatedSignallingEnable_name = map[int32]string{
		0: "ChannelAssociatedSignallingEnable_DISABLE",
		1: "ChannelAssociatedSignallingEnable_ENABLE",
	}
	Devm_Ports_Port_PhyVoice_ChannelAssociatedSignallingEnable_value = map[string]int32{
		"ChannelAssociatedSignallingEnable_DISABLE": 0,
		"ChannelAssociatedSignallingEnable_ENABLE":  1,
	}
)

func (x Devm_Ports_Port_PhyVoice_ChannelAssociatedSignallingEnable) Enum() *Devm_Ports_Port_PhyVoice_ChannelAssociatedSignallingEnable {
	p := new(Devm_Ports_Port_PhyVoice_ChannelAssociatedSignallingEnable)
	*p = x
	return p
}

func (x Devm_Ports_Port_PhyVoice_ChannelAssociatedSignallingEnable) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_PhyVoice_ChannelAssociatedSignallingEnable) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[267].Descriptor()
}

func (Devm_Ports_Port_PhyVoice_ChannelAssociatedSignallingEnable) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[267]
}

func (x Devm_Ports_Port_PhyVoice_ChannelAssociatedSignallingEnable) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_PhyVoice_ChannelAssociatedSignallingEnable.Descriptor instead.
func (Devm_Ports_Port_PhyVoice_ChannelAssociatedSignallingEnable) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 10, 1}
}

type Devm_Ports_Port_PhyVoice_Fxo_DcImped int32

const (
	Devm_Ports_Port_PhyVoice_Fxo_DcImped_X_50OHM  Devm_Ports_Port_PhyVoice_Fxo_DcImped = 0
	Devm_Ports_Port_PhyVoice_Fxo_DcImped_X_800OHM Devm_Ports_Port_PhyVoice_Fxo_DcImped = 1
)

// Enum value maps for Devm_Ports_Port_PhyVoice_Fxo_DcImped.
var (
	Devm_Ports_Port_PhyVoice_Fxo_DcImped_name = map[int32]string{
		0: "DcImped_X_50OHM",
		1: "DcImped_X_800OHM",
	}
	Devm_Ports_Port_PhyVoice_Fxo_DcImped_value = map[string]int32{
		"DcImped_X_50OHM":  0,
		"DcImped_X_800OHM": 1,
	}
)

func (x Devm_Ports_Port_PhyVoice_Fxo_DcImped) Enum() *Devm_Ports_Port_PhyVoice_Fxo_DcImped {
	p := new(Devm_Ports_Port_PhyVoice_Fxo_DcImped)
	*p = x
	return p
}

func (x Devm_Ports_Port_PhyVoice_Fxo_DcImped) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_PhyVoice_Fxo_DcImped) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[268].Descriptor()
}

func (Devm_Ports_Port_PhyVoice_Fxo_DcImped) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[268]
}

func (x Devm_Ports_Port_PhyVoice_Fxo_DcImped) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_PhyVoice_Fxo_DcImped.Descriptor instead.
func (Devm_Ports_Port_PhyVoice_Fxo_DcImped) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 10, 0, 0}
}

type Devm_Ports_Port_PhyVoice_Fxo_AcImped int32

const (
	Devm_Ports_Port_PhyVoice_Fxo_AcImped_X_600OHM          Devm_Ports_Port_PhyVoice_Fxo_AcImped = 0
	Devm_Ports_Port_PhyVoice_Fxo_AcImped_X_900OHM          Devm_Ports_Port_PhyVoice_Fxo_AcImped = 1
	Devm_Ports_Port_PhyVoice_Fxo_AcImped_X_270OHM          Devm_Ports_Port_PhyVoice_Fxo_AcImped = 2
	Devm_Ports_Port_PhyVoice_Fxo_AcImped_X_220OHM          Devm_Ports_Port_PhyVoice_Fxo_AcImped = 3
	Devm_Ports_Port_PhyVoice_Fxo_AcImped_X_370OHMX_620OHM  Devm_Ports_Port_PhyVoice_Fxo_AcImped = 4
	Devm_Ports_Port_PhyVoice_Fxo_AcImped_X_320OHM          Devm_Ports_Port_PhyVoice_Fxo_AcImped = 5
	Devm_Ports_Port_PhyVoice_Fxo_AcImped_X_370OHMX_820OHM  Devm_Ports_Port_PhyVoice_Fxo_AcImped = 6
	Devm_Ports_Port_PhyVoice_Fxo_AcImped_X_275OHM          Devm_Ports_Port_PhyVoice_Fxo_AcImped = 7
	Devm_Ports_Port_PhyVoice_Fxo_AcImped_X_20OHM           Devm_Ports_Port_PhyVoice_Fxo_AcImped = 8
	Devm_Ports_Port_PhyVoice_Fxo_AcImped_X_350OHM          Devm_Ports_Port_PhyVoice_Fxo_AcImped = 9
	Devm_Ports_Port_PhyVoice_Fxo_AcImped_X_200OHM          Devm_Ports_Port_PhyVoice_Fxo_AcImped = 10
	Devm_Ports_Port_PhyVoice_Fxo_AcImped_X_600OHMX_2X_16UF Devm_Ports_Port_PhyVoice_Fxo_AcImped = 11
	Devm_Ports_Port_PhyVoice_Fxo_AcImped_X_900OHMX_1UF     Devm_Ports_Port_PhyVoice_Fxo_AcImped = 12
	Devm_Ports_Port_PhyVoice_Fxo_AcImped_X_900OHMX_2X_16UF Devm_Ports_Port_PhyVoice_Fxo_AcImped = 13
	Devm_Ports_Port_PhyVoice_Fxo_AcImped_X_600OHMX_1UF     Devm_Ports_Port_PhyVoice_Fxo_AcImped = 14
	Devm_Ports_Port_PhyVoice_Fxo_AcImped_GLOBALX_IMPEDANCE Devm_Ports_Port_PhyVoice_Fxo_AcImped = 15
)

// Enum value maps for Devm_Ports_Port_PhyVoice_Fxo_AcImped.
var (
	Devm_Ports_Port_PhyVoice_Fxo_AcImped_name = map[int32]string{
		0:  "AcImped_X_600OHM",
		1:  "AcImped_X_900OHM",
		2:  "AcImped_X_270OHM",
		3:  "AcImped_X_220OHM",
		4:  "AcImped_X_370OHMX_620OHM",
		5:  "AcImped_X_320OHM",
		6:  "AcImped_X_370OHMX_820OHM",
		7:  "AcImped_X_275OHM",
		8:  "AcImped_X_20OHM",
		9:  "AcImped_X_350OHM",
		10: "AcImped_X_200OHM",
		11: "AcImped_X_600OHMX_2X_16UF",
		12: "AcImped_X_900OHMX_1UF",
		13: "AcImped_X_900OHMX_2X_16UF",
		14: "AcImped_X_600OHMX_1UF",
		15: "AcImped_GLOBALX_IMPEDANCE",
	}
	Devm_Ports_Port_PhyVoice_Fxo_AcImped_value = map[string]int32{
		"AcImped_X_600OHM":          0,
		"AcImped_X_900OHM":          1,
		"AcImped_X_270OHM":          2,
		"AcImped_X_220OHM":          3,
		"AcImped_X_370OHMX_620OHM":  4,
		"AcImped_X_320OHM":          5,
		"AcImped_X_370OHMX_820OHM":  6,
		"AcImped_X_275OHM":          7,
		"AcImped_X_20OHM":           8,
		"AcImped_X_350OHM":          9,
		"AcImped_X_200OHM":          10,
		"AcImped_X_600OHMX_2X_16UF": 11,
		"AcImped_X_900OHMX_1UF":     12,
		"AcImped_X_900OHMX_2X_16UF": 13,
		"AcImped_X_600OHMX_1UF":     14,
		"AcImped_GLOBALX_IMPEDANCE": 15,
	}
)

func (x Devm_Ports_Port_PhyVoice_Fxo_AcImped) Enum() *Devm_Ports_Port_PhyVoice_Fxo_AcImped {
	p := new(Devm_Ports_Port_PhyVoice_Fxo_AcImped)
	*p = x
	return p
}

func (x Devm_Ports_Port_PhyVoice_Fxo_AcImped) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_PhyVoice_Fxo_AcImped) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[269].Descriptor()
}

func (Devm_Ports_Port_PhyVoice_Fxo_AcImped) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[269]
}

func (x Devm_Ports_Port_PhyVoice_Fxo_AcImped) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_PhyVoice_Fxo_AcImped.Descriptor instead.
func (Devm_Ports_Port_PhyVoice_Fxo_AcImped) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 10, 0, 1}
}

type Devm_Ports_Port_PhyVoice_Fxo_RingMinDur int32

const (
	Devm_Ports_Port_PhyVoice_Fxo_RingMinDur_X_100MS  Devm_Ports_Port_PhyVoice_Fxo_RingMinDur = 0
	Devm_Ports_Port_PhyVoice_Fxo_RingMinDur_X_150MS  Devm_Ports_Port_PhyVoice_Fxo_RingMinDur = 1
	Devm_Ports_Port_PhyVoice_Fxo_RingMinDur_X_200MS  Devm_Ports_Port_PhyVoice_Fxo_RingMinDur = 2
	Devm_Ports_Port_PhyVoice_Fxo_RingMinDur_X_256MS  Devm_Ports_Port_PhyVoice_Fxo_RingMinDur = 3
	Devm_Ports_Port_PhyVoice_Fxo_RingMinDur_X_384MS  Devm_Ports_Port_PhyVoice_Fxo_RingMinDur = 4
	Devm_Ports_Port_PhyVoice_Fxo_RingMinDur_X_512MS  Devm_Ports_Port_PhyVoice_Fxo_RingMinDur = 5
	Devm_Ports_Port_PhyVoice_Fxo_RingMinDur_X_640MS  Devm_Ports_Port_PhyVoice_Fxo_RingMinDur = 6
	Devm_Ports_Port_PhyVoice_Fxo_RingMinDur_X_1024MS Devm_Ports_Port_PhyVoice_Fxo_RingMinDur = 7
)

// Enum value maps for Devm_Ports_Port_PhyVoice_Fxo_RingMinDur.
var (
	Devm_Ports_Port_PhyVoice_Fxo_RingMinDur_name = map[int32]string{
		0: "RingMinDur_X_100MS",
		1: "RingMinDur_X_150MS",
		2: "RingMinDur_X_200MS",
		3: "RingMinDur_X_256MS",
		4: "RingMinDur_X_384MS",
		5: "RingMinDur_X_512MS",
		6: "RingMinDur_X_640MS",
		7: "RingMinDur_X_1024MS",
	}
	Devm_Ports_Port_PhyVoice_Fxo_RingMinDur_value = map[string]int32{
		"RingMinDur_X_100MS":  0,
		"RingMinDur_X_150MS":  1,
		"RingMinDur_X_200MS":  2,
		"RingMinDur_X_256MS":  3,
		"RingMinDur_X_384MS":  4,
		"RingMinDur_X_512MS":  5,
		"RingMinDur_X_640MS":  6,
		"RingMinDur_X_1024MS": 7,
	}
)

func (x Devm_Ports_Port_PhyVoice_Fxo_RingMinDur) Enum() *Devm_Ports_Port_PhyVoice_Fxo_RingMinDur {
	p := new(Devm_Ports_Port_PhyVoice_Fxo_RingMinDur)
	*p = x
	return p
}

func (x Devm_Ports_Port_PhyVoice_Fxo_RingMinDur) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_PhyVoice_Fxo_RingMinDur) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[270].Descriptor()
}

func (Devm_Ports_Port_PhyVoice_Fxo_RingMinDur) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[270]
}

func (x Devm_Ports_Port_PhyVoice_Fxo_RingMinDur) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_PhyVoice_Fxo_RingMinDur.Descriptor instead.
func (Devm_Ports_Port_PhyVoice_Fxo_RingMinDur) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 10, 0, 2}
}

type Devm_Ports_Port_PhyVoice_Fxo_RingMaxInter int32

const (
	Devm_Ports_Port_PhyVoice_Fxo_RingMaxInter_NOTX_USE Devm_Ports_Port_PhyVoice_Fxo_RingMaxInter = 0
	Devm_Ports_Port_PhyVoice_Fxo_RingMaxInter_X_128MS  Devm_Ports_Port_PhyVoice_Fxo_RingMaxInter = 1
	Devm_Ports_Port_PhyVoice_Fxo_RingMaxInter_X_256MS  Devm_Ports_Port_PhyVoice_Fxo_RingMaxInter = 2
	Devm_Ports_Port_PhyVoice_Fxo_RingMaxInter_X_284MS  Devm_Ports_Port_PhyVoice_Fxo_RingMaxInter = 3
	Devm_Ports_Port_PhyVoice_Fxo_RingMaxInter_X_512MS  Devm_Ports_Port_PhyVoice_Fxo_RingMaxInter = 4
	Devm_Ports_Port_PhyVoice_Fxo_RingMaxInter_X_640MS  Devm_Ports_Port_PhyVoice_Fxo_RingMaxInter = 5
	Devm_Ports_Port_PhyVoice_Fxo_RingMaxInter_X_768MS  Devm_Ports_Port_PhyVoice_Fxo_RingMaxInter = 6
	Devm_Ports_Port_PhyVoice_Fxo_RingMaxInter_X_896MS  Devm_Ports_Port_PhyVoice_Fxo_RingMaxInter = 7
	Devm_Ports_Port_PhyVoice_Fxo_RingMaxInter_X_1024MS Devm_Ports_Port_PhyVoice_Fxo_RingMaxInter = 8
	Devm_Ports_Port_PhyVoice_Fxo_RingMaxInter_X_1152MS Devm_Ports_Port_PhyVoice_Fxo_RingMaxInter = 9
	Devm_Ports_Port_PhyVoice_Fxo_RingMaxInter_X_1280MS Devm_Ports_Port_PhyVoice_Fxo_RingMaxInter = 10
	Devm_Ports_Port_PhyVoice_Fxo_RingMaxInter_X_1408MS Devm_Ports_Port_PhyVoice_Fxo_RingMaxInter = 11
	Devm_Ports_Port_PhyVoice_Fxo_RingMaxInter_X_1536MS Devm_Ports_Port_PhyVoice_Fxo_RingMaxInter = 12
	Devm_Ports_Port_PhyVoice_Fxo_RingMaxInter_X_1664MS Devm_Ports_Port_PhyVoice_Fxo_RingMaxInter = 13
	Devm_Ports_Port_PhyVoice_Fxo_RingMaxInter_X_1792MS Devm_Ports_Port_PhyVoice_Fxo_RingMaxInter = 14
	Devm_Ports_Port_PhyVoice_Fxo_RingMaxInter_X_1920MS Devm_Ports_Port_PhyVoice_Fxo_RingMaxInter = 15
)

// Enum value maps for Devm_Ports_Port_PhyVoice_Fxo_RingMaxInter.
var (
	Devm_Ports_Port_PhyVoice_Fxo_RingMaxInter_name = map[int32]string{
		0:  "RingMaxInter_NOTX_USE",
		1:  "RingMaxInter_X_128MS",
		2:  "RingMaxInter_X_256MS",
		3:  "RingMaxInter_X_284MS",
		4:  "RingMaxInter_X_512MS",
		5:  "RingMaxInter_X_640MS",
		6:  "RingMaxInter_X_768MS",
		7:  "RingMaxInter_X_896MS",
		8:  "RingMaxInter_X_1024MS",
		9:  "RingMaxInter_X_1152MS",
		10: "RingMaxInter_X_1280MS",
		11: "RingMaxInter_X_1408MS",
		12: "RingMaxInter_X_1536MS",
		13: "RingMaxInter_X_1664MS",
		14: "RingMaxInter_X_1792MS",
		15: "RingMaxInter_X_1920MS",
	}
	Devm_Ports_Port_PhyVoice_Fxo_RingMaxInter_value = map[string]int32{
		"RingMaxInter_NOTX_USE": 0,
		"RingMaxInter_X_128MS":  1,
		"RingMaxInter_X_256MS":  2,
		"RingMaxInter_X_284MS":  3,
		"RingMaxInter_X_512MS":  4,
		"RingMaxInter_X_640MS":  5,
		"RingMaxInter_X_768MS":  6,
		"RingMaxInter_X_896MS":  7,
		"RingMaxInter_X_1024MS": 8,
		"RingMaxInter_X_1152MS": 9,
		"RingMaxInter_X_1280MS": 10,
		"RingMaxInter_X_1408MS": 11,
		"RingMaxInter_X_1536MS": 12,
		"RingMaxInter_X_1664MS": 13,
		"RingMaxInter_X_1792MS": 14,
		"RingMaxInter_X_1920MS": 15,
	}
)

func (x Devm_Ports_Port_PhyVoice_Fxo_RingMaxInter) Enum() *Devm_Ports_Port_PhyVoice_Fxo_RingMaxInter {
	p := new(Devm_Ports_Port_PhyVoice_Fxo_RingMaxInter)
	*p = x
	return p
}

func (x Devm_Ports_Port_PhyVoice_Fxo_RingMaxInter) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_PhyVoice_Fxo_RingMaxInter) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[271].Descriptor()
}

func (Devm_Ports_Port_PhyVoice_Fxo_RingMaxInter) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[271]
}

func (x Devm_Ports_Port_PhyVoice_Fxo_RingMaxInter) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_PhyVoice_Fxo_RingMaxInter.Descriptor instead.
func (Devm_Ports_Port_PhyVoice_Fxo_RingMaxInter) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 10, 0, 3}
}

type Devm_Ports_Port_PhyVoice_Fxo_RingFrequence int32

const (
	Devm_Ports_Port_PhyVoice_Fxo_RingFrequence_X_16HZ Devm_Ports_Port_PhyVoice_Fxo_RingFrequence = 0
	Devm_Ports_Port_PhyVoice_Fxo_RingFrequence_X_25HZ Devm_Ports_Port_PhyVoice_Fxo_RingFrequence = 1
	Devm_Ports_Port_PhyVoice_Fxo_RingFrequence_X_50HZ Devm_Ports_Port_PhyVoice_Fxo_RingFrequence = 2
)

// Enum value maps for Devm_Ports_Port_PhyVoice_Fxo_RingFrequence.
var (
	Devm_Ports_Port_PhyVoice_Fxo_RingFrequence_name = map[int32]string{
		0: "RingFrequence_X_16HZ",
		1: "RingFrequence_X_25HZ",
		2: "RingFrequence_X_50HZ",
	}
	Devm_Ports_Port_PhyVoice_Fxo_RingFrequence_value = map[string]int32{
		"RingFrequence_X_16HZ": 0,
		"RingFrequence_X_25HZ": 1,
		"RingFrequence_X_50HZ": 2,
	}
)

func (x Devm_Ports_Port_PhyVoice_Fxo_RingFrequence) Enum() *Devm_Ports_Port_PhyVoice_Fxo_RingFrequence {
	p := new(Devm_Ports_Port_PhyVoice_Fxo_RingFrequence)
	*p = x
	return p
}

func (x Devm_Ports_Port_PhyVoice_Fxo_RingFrequence) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_PhyVoice_Fxo_RingFrequence) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[272].Descriptor()
}

func (Devm_Ports_Port_PhyVoice_Fxo_RingFrequence) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[272]
}

func (x Devm_Ports_Port_PhyVoice_Fxo_RingFrequence) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_PhyVoice_Fxo_RingFrequence.Descriptor instead.
func (Devm_Ports_Port_PhyVoice_Fxo_RingFrequence) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 10, 0, 4}
}

type Devm_Ports_Port_PhyVoice_Fxo_RingAcAmpli int32

const (
	Devm_Ports_Port_PhyVoice_Fxo_RingAcAmpli_X_74V Devm_Ports_Port_PhyVoice_Fxo_RingAcAmpli = 0
	Devm_Ports_Port_PhyVoice_Fxo_RingAcAmpli_X_65V Devm_Ports_Port_PhyVoice_Fxo_RingAcAmpli = 1
	Devm_Ports_Port_PhyVoice_Fxo_RingAcAmpli_X_50V Devm_Ports_Port_PhyVoice_Fxo_RingAcAmpli = 2
)

// Enum value maps for Devm_Ports_Port_PhyVoice_Fxo_RingAcAmpli.
var (
	Devm_Ports_Port_PhyVoice_Fxo_RingAcAmpli_name = map[int32]string{
		0: "RingAcAmpli_X_74V",
		1: "RingAcAmpli_X_65V",
		2: "RingAcAmpli_X_50V",
	}
	Devm_Ports_Port_PhyVoice_Fxo_RingAcAmpli_value = map[string]int32{
		"RingAcAmpli_X_74V": 0,
		"RingAcAmpli_X_65V": 1,
		"RingAcAmpli_X_50V": 2,
	}
)

func (x Devm_Ports_Port_PhyVoice_Fxo_RingAcAmpli) Enum() *Devm_Ports_Port_PhyVoice_Fxo_RingAcAmpli {
	p := new(Devm_Ports_Port_PhyVoice_Fxo_RingAcAmpli)
	*p = x
	return p
}

func (x Devm_Ports_Port_PhyVoice_Fxo_RingAcAmpli) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_PhyVoice_Fxo_RingAcAmpli) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[273].Descriptor()
}

func (Devm_Ports_Port_PhyVoice_Fxo_RingAcAmpli) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[273]
}

func (x Devm_Ports_Port_PhyVoice_Fxo_RingAcAmpli) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_PhyVoice_Fxo_RingAcAmpli.Descriptor instead.
func (Devm_Ports_Port_PhyVoice_Fxo_RingAcAmpli) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 10, 0, 5}
}

type Devm_Ports_Port_PhyVoice_Fxs_FxsCurrent int32

const (
	Devm_Ports_Port_PhyVoice_Fxs_FxsCurrent_X_16MA Devm_Ports_Port_PhyVoice_Fxs_FxsCurrent = 0
	Devm_Ports_Port_PhyVoice_Fxs_FxsCurrent_X_20MA Devm_Ports_Port_PhyVoice_Fxs_FxsCurrent = 1
)

// Enum value maps for Devm_Ports_Port_PhyVoice_Fxs_FxsCurrent.
var (
	Devm_Ports_Port_PhyVoice_Fxs_FxsCurrent_name = map[int32]string{
		0: "FxsCurrent_X_16MA",
		1: "FxsCurrent_X_20MA",
	}
	Devm_Ports_Port_PhyVoice_Fxs_FxsCurrent_value = map[string]int32{
		"FxsCurrent_X_16MA": 0,
		"FxsCurrent_X_20MA": 1,
	}
)

func (x Devm_Ports_Port_PhyVoice_Fxs_FxsCurrent) Enum() *Devm_Ports_Port_PhyVoice_Fxs_FxsCurrent {
	p := new(Devm_Ports_Port_PhyVoice_Fxs_FxsCurrent)
	*p = x
	return p
}

func (x Devm_Ports_Port_PhyVoice_Fxs_FxsCurrent) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_PhyVoice_Fxs_FxsCurrent) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[274].Descriptor()
}

func (Devm_Ports_Port_PhyVoice_Fxs_FxsCurrent) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[274]
}

func (x Devm_Ports_Port_PhyVoice_Fxs_FxsCurrent) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_PhyVoice_Fxs_FxsCurrent.Descriptor instead.
func (Devm_Ports_Port_PhyVoice_Fxs_FxsCurrent) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 10, 1, 0}
}

type Devm_Ports_Port_PhyVoice_Fxs_FxsHotlineEn int32

const (
	Devm_Ports_Port_PhyVoice_Fxs_FxsHotlineEn_DISABLE Devm_Ports_Port_PhyVoice_Fxs_FxsHotlineEn = 0
	Devm_Ports_Port_PhyVoice_Fxs_FxsHotlineEn_ENABLE  Devm_Ports_Port_PhyVoice_Fxs_FxsHotlineEn = 1
)

// Enum value maps for Devm_Ports_Port_PhyVoice_Fxs_FxsHotlineEn.
var (
	Devm_Ports_Port_PhyVoice_Fxs_FxsHotlineEn_name = map[int32]string{
		0: "FxsHotlineEn_DISABLE",
		1: "FxsHotlineEn_ENABLE",
	}
	Devm_Ports_Port_PhyVoice_Fxs_FxsHotlineEn_value = map[string]int32{
		"FxsHotlineEn_DISABLE": 0,
		"FxsHotlineEn_ENABLE":  1,
	}
)

func (x Devm_Ports_Port_PhyVoice_Fxs_FxsHotlineEn) Enum() *Devm_Ports_Port_PhyVoice_Fxs_FxsHotlineEn {
	p := new(Devm_Ports_Port_PhyVoice_Fxs_FxsHotlineEn)
	*p = x
	return p
}

func (x Devm_Ports_Port_PhyVoice_Fxs_FxsHotlineEn) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_PhyVoice_Fxs_FxsHotlineEn) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[275].Descriptor()
}

func (Devm_Ports_Port_PhyVoice_Fxs_FxsHotlineEn) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[275]
}

func (x Devm_Ports_Port_PhyVoice_Fxs_FxsHotlineEn) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_PhyVoice_Fxs_FxsHotlineEn.Descriptor instead.
func (Devm_Ports_Port_PhyVoice_Fxs_FxsHotlineEn) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 10, 1, 1}
}

type Devm_Ports_Port_PhyVoice_Fxs_FxsDcImped int32

const (
	Devm_Ports_Port_PhyVoice_Fxs_FxsDcImped_X_600OHM          Devm_Ports_Port_PhyVoice_Fxs_FxsDcImped = 0
	Devm_Ports_Port_PhyVoice_Fxs_FxsDcImped_X_900OHM          Devm_Ports_Port_PhyVoice_Fxs_FxsDcImped = 1
	Devm_Ports_Port_PhyVoice_Fxs_FxsDcImped_X_270OHM          Devm_Ports_Port_PhyVoice_Fxs_FxsDcImped = 2
	Devm_Ports_Port_PhyVoice_Fxs_FxsDcImped_X_220OHM          Devm_Ports_Port_PhyVoice_Fxs_FxsDcImped = 3
	Devm_Ports_Port_PhyVoice_Fxs_FxsDcImped_X_370OHMX_620OHM  Devm_Ports_Port_PhyVoice_Fxs_FxsDcImped = 4
	Devm_Ports_Port_PhyVoice_Fxs_FxsDcImped_X_320OHM          Devm_Ports_Port_PhyVoice_Fxs_FxsDcImped = 5
	Devm_Ports_Port_PhyVoice_Fxs_FxsDcImped_X_370OHMX_820OHM  Devm_Ports_Port_PhyVoice_Fxs_FxsDcImped = 6
	Devm_Ports_Port_PhyVoice_Fxs_FxsDcImped_X_275OHM          Devm_Ports_Port_PhyVoice_Fxs_FxsDcImped = 7
	Devm_Ports_Port_PhyVoice_Fxs_FxsDcImped_X_20OHM           Devm_Ports_Port_PhyVoice_Fxs_FxsDcImped = 8
	Devm_Ports_Port_PhyVoice_Fxs_FxsDcImped_X_350OHM          Devm_Ports_Port_PhyVoice_Fxs_FxsDcImped = 9
	Devm_Ports_Port_PhyVoice_Fxs_FxsDcImped_X_200OHM          Devm_Ports_Port_PhyVoice_Fxs_FxsDcImped = 10
	Devm_Ports_Port_PhyVoice_Fxs_FxsDcImped_X_600OHMX_2X_16UF Devm_Ports_Port_PhyVoice_Fxs_FxsDcImped = 11
	Devm_Ports_Port_PhyVoice_Fxs_FxsDcImped_X_900OHMX_1UF     Devm_Ports_Port_PhyVoice_Fxs_FxsDcImped = 12
	Devm_Ports_Port_PhyVoice_Fxs_FxsDcImped_X_900OHMX_2X_16UF Devm_Ports_Port_PhyVoice_Fxs_FxsDcImped = 13
	Devm_Ports_Port_PhyVoice_Fxs_FxsDcImped_X_600OHMX_1UF     Devm_Ports_Port_PhyVoice_Fxs_FxsDcImped = 14
	Devm_Ports_Port_PhyVoice_Fxs_FxsDcImped_GLOBALX_IMPEDANCE Devm_Ports_Port_PhyVoice_Fxs_FxsDcImped = 15
)

// Enum value maps for Devm_Ports_Port_PhyVoice_Fxs_FxsDcImped.
var (
	Devm_Ports_Port_PhyVoice_Fxs_FxsDcImped_name = map[int32]string{
		0:  "FxsDcImped_X_600OHM",
		1:  "FxsDcImped_X_900OHM",
		2:  "FxsDcImped_X_270OHM",
		3:  "FxsDcImped_X_220OHM",
		4:  "FxsDcImped_X_370OHMX_620OHM",
		5:  "FxsDcImped_X_320OHM",
		6:  "FxsDcImped_X_370OHMX_820OHM",
		7:  "FxsDcImped_X_275OHM",
		8:  "FxsDcImped_X_20OHM",
		9:  "FxsDcImped_X_350OHM",
		10: "FxsDcImped_X_200OHM",
		11: "FxsDcImped_X_600OHMX_2X_16UF",
		12: "FxsDcImped_X_900OHMX_1UF",
		13: "FxsDcImped_X_900OHMX_2X_16UF",
		14: "FxsDcImped_X_600OHMX_1UF",
		15: "FxsDcImped_GLOBALX_IMPEDANCE",
	}
	Devm_Ports_Port_PhyVoice_Fxs_FxsDcImped_value = map[string]int32{
		"FxsDcImped_X_600OHM":          0,
		"FxsDcImped_X_900OHM":          1,
		"FxsDcImped_X_270OHM":          2,
		"FxsDcImped_X_220OHM":          3,
		"FxsDcImped_X_370OHMX_620OHM":  4,
		"FxsDcImped_X_320OHM":          5,
		"FxsDcImped_X_370OHMX_820OHM":  6,
		"FxsDcImped_X_275OHM":          7,
		"FxsDcImped_X_20OHM":           8,
		"FxsDcImped_X_350OHM":          9,
		"FxsDcImped_X_200OHM":          10,
		"FxsDcImped_X_600OHMX_2X_16UF": 11,
		"FxsDcImped_X_900OHMX_1UF":     12,
		"FxsDcImped_X_900OHMX_2X_16UF": 13,
		"FxsDcImped_X_600OHMX_1UF":     14,
		"FxsDcImped_GLOBALX_IMPEDANCE": 15,
	}
)

func (x Devm_Ports_Port_PhyVoice_Fxs_FxsDcImped) Enum() *Devm_Ports_Port_PhyVoice_Fxs_FxsDcImped {
	p := new(Devm_Ports_Port_PhyVoice_Fxs_FxsDcImped)
	*p = x
	return p
}

func (x Devm_Ports_Port_PhyVoice_Fxs_FxsDcImped) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_PhyVoice_Fxs_FxsDcImped) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[276].Descriptor()
}

func (Devm_Ports_Port_PhyVoice_Fxs_FxsDcImped) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[276]
}

func (x Devm_Ports_Port_PhyVoice_Fxs_FxsDcImped) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_PhyVoice_Fxs_FxsDcImped.Descriptor instead.
func (Devm_Ports_Port_PhyVoice_Fxs_FxsDcImped) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 10, 1, 2}
}

type Devm_Ports_Port_PhyVoice_Em_EmuserlineMode int32

const (
	Devm_Ports_Port_PhyVoice_Em_EmuserlineMode_X_2WIRE Devm_Ports_Port_PhyVoice_Em_EmuserlineMode = 0
	Devm_Ports_Port_PhyVoice_Em_EmuserlineMode_X_4WIRE Devm_Ports_Port_PhyVoice_Em_EmuserlineMode = 1
)

// Enum value maps for Devm_Ports_Port_PhyVoice_Em_EmuserlineMode.
var (
	Devm_Ports_Port_PhyVoice_Em_EmuserlineMode_name = map[int32]string{
		0: "EmuserlineMode_X_2WIRE",
		1: "EmuserlineMode_X_4WIRE",
	}
	Devm_Ports_Port_PhyVoice_Em_EmuserlineMode_value = map[string]int32{
		"EmuserlineMode_X_2WIRE": 0,
		"EmuserlineMode_X_4WIRE": 1,
	}
)

func (x Devm_Ports_Port_PhyVoice_Em_EmuserlineMode) Enum() *Devm_Ports_Port_PhyVoice_Em_EmuserlineMode {
	p := new(Devm_Ports_Port_PhyVoice_Em_EmuserlineMode)
	*p = x
	return p
}

func (x Devm_Ports_Port_PhyVoice_Em_EmuserlineMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_PhyVoice_Em_EmuserlineMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[277].Descriptor()
}

func (Devm_Ports_Port_PhyVoice_Em_EmuserlineMode) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[277]
}

func (x Devm_Ports_Port_PhyVoice_Em_EmuserlineMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_PhyVoice_Em_EmuserlineMode.Descriptor instead.
func (Devm_Ports_Port_PhyVoice_Em_EmuserlineMode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 10, 2, 0}
}

type Devm_Ports_Port_PhyVoice_Em_EmuserlineStat int32

const (
	Devm_Ports_Port_PhyVoice_Em_EmuserlineStat_X_2WIRE Devm_Ports_Port_PhyVoice_Em_EmuserlineStat = 0
	Devm_Ports_Port_PhyVoice_Em_EmuserlineStat_X_4WIRE Devm_Ports_Port_PhyVoice_Em_EmuserlineStat = 1
)

// Enum value maps for Devm_Ports_Port_PhyVoice_Em_EmuserlineStat.
var (
	Devm_Ports_Port_PhyVoice_Em_EmuserlineStat_name = map[int32]string{
		0: "EmuserlineStat_X_2WIRE",
		1: "EmuserlineStat_X_4WIRE",
	}
	Devm_Ports_Port_PhyVoice_Em_EmuserlineStat_value = map[string]int32{
		"EmuserlineStat_X_2WIRE": 0,
		"EmuserlineStat_X_4WIRE": 1,
	}
)

func (x Devm_Ports_Port_PhyVoice_Em_EmuserlineStat) Enum() *Devm_Ports_Port_PhyVoice_Em_EmuserlineStat {
	p := new(Devm_Ports_Port_PhyVoice_Em_EmuserlineStat)
	*p = x
	return p
}

func (x Devm_Ports_Port_PhyVoice_Em_EmuserlineStat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_PhyVoice_Em_EmuserlineStat) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[278].Descriptor()
}

func (Devm_Ports_Port_PhyVoice_Em_EmuserlineStat) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[278]
}

func (x Devm_Ports_Port_PhyVoice_Em_EmuserlineStat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_PhyVoice_Em_EmuserlineStat.Descriptor instead.
func (Devm_Ports_Port_PhyVoice_Em_EmuserlineStat) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 10, 2, 1}
}

type Devm_Ports_Port_E1T1_WorkMode int32

const (
	Devm_Ports_Port_E1T1_WorkMode_FRAMED   Devm_Ports_Port_E1T1_WorkMode = 0
	Devm_Ports_Port_E1T1_WorkMode_UNFRAMED Devm_Ports_Port_E1T1_WorkMode = 1
)

// Enum value maps for Devm_Ports_Port_E1T1_WorkMode.
var (
	Devm_Ports_Port_E1T1_WorkMode_name = map[int32]string{
		0: "WorkMode_FRAMED",
		1: "WorkMode_UNFRAMED",
	}
	Devm_Ports_Port_E1T1_WorkMode_value = map[string]int32{
		"WorkMode_FRAMED":   0,
		"WorkMode_UNFRAMED": 1,
	}
)

func (x Devm_Ports_Port_E1T1_WorkMode) Enum() *Devm_Ports_Port_E1T1_WorkMode {
	p := new(Devm_Ports_Port_E1T1_WorkMode)
	*p = x
	return p
}

func (x Devm_Ports_Port_E1T1_WorkMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_E1T1_WorkMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[279].Descriptor()
}

func (Devm_Ports_Port_E1T1_WorkMode) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[279]
}

func (x Devm_Ports_Port_E1T1_WorkMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_E1T1_WorkMode.Descriptor instead.
func (Devm_Ports_Port_E1T1_WorkMode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 11, 0}
}

type Devm_Ports_Port_E1T1_FrameFormat int32

const (
	Devm_Ports_Port_E1T1_FrameFormat_NOX_CRC4 Devm_Ports_Port_E1T1_FrameFormat = 0
	Devm_Ports_Port_E1T1_FrameFormat_CRC4     Devm_Ports_Port_E1T1_FrameFormat = 1
)

// Enum value maps for Devm_Ports_Port_E1T1_FrameFormat.
var (
	Devm_Ports_Port_E1T1_FrameFormat_name = map[int32]string{
		0: "FrameFormat_NOX_CRC4",
		1: "FrameFormat_CRC4",
	}
	Devm_Ports_Port_E1T1_FrameFormat_value = map[string]int32{
		"FrameFormat_NOX_CRC4": 0,
		"FrameFormat_CRC4":     1,
	}
)

func (x Devm_Ports_Port_E1T1_FrameFormat) Enum() *Devm_Ports_Port_E1T1_FrameFormat {
	p := new(Devm_Ports_Port_E1T1_FrameFormat)
	*p = x
	return p
}

func (x Devm_Ports_Port_E1T1_FrameFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_E1T1_FrameFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[280].Descriptor()
}

func (Devm_Ports_Port_E1T1_FrameFormat) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[280]
}

func (x Devm_Ports_Port_E1T1_FrameFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_E1T1_FrameFormat.Descriptor instead.
func (Devm_Ports_Port_E1T1_FrameFormat) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 11, 1}
}

type Devm_Ports_Port_E1T1_Clock int32

const (
	Devm_Ports_Port_E1T1_Clock_MASTER Devm_Ports_Port_E1T1_Clock = 0
	Devm_Ports_Port_E1T1_Clock_SLAVE  Devm_Ports_Port_E1T1_Clock = 1
)

// Enum value maps for Devm_Ports_Port_E1T1_Clock.
var (
	Devm_Ports_Port_E1T1_Clock_name = map[int32]string{
		0: "Clock_MASTER",
		1: "Clock_SLAVE",
	}
	Devm_Ports_Port_E1T1_Clock_value = map[string]int32{
		"Clock_MASTER": 0,
		"Clock_SLAVE":  1,
	}
)

func (x Devm_Ports_Port_E1T1_Clock) Enum() *Devm_Ports_Port_E1T1_Clock {
	p := new(Devm_Ports_Port_E1T1_Clock)
	*p = x
	return p
}

func (x Devm_Ports_Port_E1T1_Clock) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_E1T1_Clock) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[281].Descriptor()
}

func (Devm_Ports_Port_E1T1_Clock) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[281]
}

func (x Devm_Ports_Port_E1T1_Clock) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_E1T1_Clock.Descriptor instead.
func (Devm_Ports_Port_E1T1_Clock) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 11, 2}
}

type Devm_Ports_Port_E1T1_Code int32

const (
	Devm_Ports_Port_E1T1_Code_HDB3 Devm_Ports_Port_E1T1_Code = 0
	Devm_Ports_Port_E1T1_Code_AMI  Devm_Ports_Port_E1T1_Code = 1
)

// Enum value maps for Devm_Ports_Port_E1T1_Code.
var (
	Devm_Ports_Port_E1T1_Code_name = map[int32]string{
		0: "Code_HDB3",
		1: "Code_AMI",
	}
	Devm_Ports_Port_E1T1_Code_value = map[string]int32{
		"Code_HDB3": 0,
		"Code_AMI":  1,
	}
)

func (x Devm_Ports_Port_E1T1_Code) Enum() *Devm_Ports_Port_E1T1_Code {
	p := new(Devm_Ports_Port_E1T1_Code)
	*p = x
	return p
}

func (x Devm_Ports_Port_E1T1_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_E1T1_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[282].Descriptor()
}

func (Devm_Ports_Port_E1T1_Code) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[282]
}

func (x Devm_Ports_Port_E1T1_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_E1T1_Code.Descriptor instead.
func (Devm_Ports_Port_E1T1_Code) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 11, 3}
}

type Devm_Ports_Port_E3T3_WorkMode int32

const (
	Devm_Ports_Port_E3T3_WorkMode_FRAMED   Devm_Ports_Port_E3T3_WorkMode = 0
	Devm_Ports_Port_E3T3_WorkMode_UNFRAMED Devm_Ports_Port_E3T3_WorkMode = 1
)

// Enum value maps for Devm_Ports_Port_E3T3_WorkMode.
var (
	Devm_Ports_Port_E3T3_WorkMode_name = map[int32]string{
		0: "WorkMode_FRAMED",
		1: "WorkMode_UNFRAMED",
	}
	Devm_Ports_Port_E3T3_WorkMode_value = map[string]int32{
		"WorkMode_FRAMED":   0,
		"WorkMode_UNFRAMED": 1,
	}
)

func (x Devm_Ports_Port_E3T3_WorkMode) Enum() *Devm_Ports_Port_E3T3_WorkMode {
	p := new(Devm_Ports_Port_E3T3_WorkMode)
	*p = x
	return p
}

func (x Devm_Ports_Port_E3T3_WorkMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_E3T3_WorkMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[283].Descriptor()
}

func (Devm_Ports_Port_E3T3_WorkMode) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[283]
}

func (x Devm_Ports_Port_E3T3_WorkMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_E3T3_WorkMode.Descriptor instead.
func (Devm_Ports_Port_E3T3_WorkMode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 12, 0}
}

type Devm_Ports_Port_E3T3_Clock int32

const (
	Devm_Ports_Port_E3T3_Clock_MASTER Devm_Ports_Port_E3T3_Clock = 0
	Devm_Ports_Port_E3T3_Clock_SLAVE  Devm_Ports_Port_E3T3_Clock = 1
)

// Enum value maps for Devm_Ports_Port_E3T3_Clock.
var (
	Devm_Ports_Port_E3T3_Clock_name = map[int32]string{
		0: "Clock_MASTER",
		1: "Clock_SLAVE",
	}
	Devm_Ports_Port_E3T3_Clock_value = map[string]int32{
		"Clock_MASTER": 0,
		"Clock_SLAVE":  1,
	}
)

func (x Devm_Ports_Port_E3T3_Clock) Enum() *Devm_Ports_Port_E3T3_Clock {
	p := new(Devm_Ports_Port_E3T3_Clock)
	*p = x
	return p
}

func (x Devm_Ports_Port_E3T3_Clock) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_E3T3_Clock) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[284].Descriptor()
}

func (Devm_Ports_Port_E3T3_Clock) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[284]
}

func (x Devm_Ports_Port_E3T3_Clock) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_E3T3_Clock.Descriptor instead.
func (Devm_Ports_Port_E3T3_Clock) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 12, 1}
}

type Devm_Ports_Port_E3T3_FrameFormat int32

const (
	Devm_Ports_Port_E3T3_FrameFormat_GX_751 Devm_Ports_Port_E3T3_FrameFormat = 0
	Devm_Ports_Port_E3T3_FrameFormat_NONE   Devm_Ports_Port_E3T3_FrameFormat = 1
)

// Enum value maps for Devm_Ports_Port_E3T3_FrameFormat.
var (
	Devm_Ports_Port_E3T3_FrameFormat_name = map[int32]string{
		0: "FrameFormat_GX_751",
		1: "FrameFormat_NONE",
	}
	Devm_Ports_Port_E3T3_FrameFormat_value = map[string]int32{
		"FrameFormat_GX_751": 0,
		"FrameFormat_NONE":   1,
	}
)

func (x Devm_Ports_Port_E3T3_FrameFormat) Enum() *Devm_Ports_Port_E3T3_FrameFormat {
	p := new(Devm_Ports_Port_E3T3_FrameFormat)
	*p = x
	return p
}

func (x Devm_Ports_Port_E3T3_FrameFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_E3T3_FrameFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[285].Descriptor()
}

func (Devm_Ports_Port_E3T3_FrameFormat) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[285]
}

func (x Devm_Ports_Port_E3T3_FrameFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_E3T3_FrameFormat.Descriptor instead.
func (Devm_Ports_Port_E3T3_FrameFormat) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 12, 2}
}

type Devm_Ports_Port_E3T3_E3T3Flag int32

const (
	Devm_Ports_Port_E3T3_E3T3Flag_E3 Devm_Ports_Port_E3T3_E3T3Flag = 0
	Devm_Ports_Port_E3T3_E3T3Flag_T3 Devm_Ports_Port_E3T3_E3T3Flag = 1
)

// Enum value maps for Devm_Ports_Port_E3T3_E3T3Flag.
var (
	Devm_Ports_Port_E3T3_E3T3Flag_name = map[int32]string{
		0: "E3T3Flag_E3",
		1: "E3T3Flag_T3",
	}
	Devm_Ports_Port_E3T3_E3T3Flag_value = map[string]int32{
		"E3T3Flag_E3": 0,
		"E3T3Flag_T3": 1,
	}
)

func (x Devm_Ports_Port_E3T3_E3T3Flag) Enum() *Devm_Ports_Port_E3T3_E3T3Flag {
	p := new(Devm_Ports_Port_E3T3_E3T3Flag)
	*p = x
	return p
}

func (x Devm_Ports_Port_E3T3_E3T3Flag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Ports_Port_E3T3_E3T3Flag) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[286].Descriptor()
}

func (Devm_Ports_Port_E3T3_E3T3Flag) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[286]
}

func (x Devm_Ports_Port_E3T3_E3T3Flag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Ports_Port_E3T3_E3T3Flag.Descriptor instead.
func (Devm_Ports_Port_E3T3_E3T3Flag) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 12, 3}
}

type Devm_LogicPorts_LogicPort_PortType int32

const (
	Devm_LogicPorts_LogicPort_PortType_UNKNOWN     Devm_LogicPorts_LogicPort_PortType = 0
	Devm_LogicPorts_LogicPort_PortType_ETH         Devm_LogicPorts_LogicPort_PortType = 1
	Devm_LogicPorts_LogicPort_PortType_POS         Devm_LogicPorts_LogicPort_PortType = 2
	Devm_LogicPorts_LogicPort_PortType_CPOS        Devm_LogicPorts_LogicPort_PortType = 3
	Devm_LogicPorts_LogicPort_PortType_E1          Devm_LogicPorts_LogicPort_PortType = 4
	Devm_LogicPorts_LogicPort_PortType_GE          Devm_LogicPorts_LogicPort_PortType = 5
	Devm_LogicPorts_LogicPort_PortType_X_10GE      Devm_LogicPorts_LogicPort_PortType = 6
	Devm_LogicPorts_LogicPort_PortType_GF          Devm_LogicPorts_LogicPort_PortType = 7
	Devm_LogicPorts_LogicPort_PortType_X_10GF      Devm_LogicPorts_LogicPort_PortType = 8
	Devm_LogicPorts_LogicPort_PortType_X_40GF      Devm_LogicPorts_LogicPort_PortType = 9
	Devm_LogicPorts_LogicPort_PortType_X_10GFCOM   Devm_LogicPorts_LogicPort_PortType = 10
	Devm_LogicPorts_LogicPort_PortType_X_40GFSPLIT Devm_LogicPorts_LogicPort_PortType = 11
	Devm_LogicPorts_LogicPort_PortType_OTN         Devm_LogicPorts_LogicPort_PortType = 12
	Devm_LogicPorts_LogicPort_PortType_X_100GF     Devm_LogicPorts_LogicPort_PortType = 13
	Devm_LogicPorts_LogicPort_PortType_X_400GF     Devm_LogicPorts_LogicPort_PortType = 14
	Devm_LogicPorts_LogicPort_PortType_X_25GF      Devm_LogicPorts_LogicPort_PortType = 15
	Devm_LogicPorts_LogicPort_PortType_X_50GF      Devm_LogicPorts_LogicPort_PortType = 16
	Devm_LogicPorts_LogicPort_PortType_X_200GF     Devm_LogicPorts_LogicPort_PortType = 17
	Devm_LogicPorts_LogicPort_PortType_CELLULAR    Devm_LogicPorts_LogicPort_PortType = 18
	Devm_LogicPorts_LogicPort_PortType_FE          Devm_LogicPorts_LogicPort_PortType = 19
	Devm_LogicPorts_LogicPort_PortType_FLEXE       Devm_LogicPorts_LogicPort_PortType = 20
	Devm_LogicPorts_LogicPort_PortType_VSR         Devm_LogicPorts_LogicPort_PortType = 21
)

// Enum value maps for Devm_LogicPorts_LogicPort_PortType.
var (
	Devm_LogicPorts_LogicPort_PortType_name = map[int32]string{
		0:  "PortType_UNKNOWN",
		1:  "PortType_ETH",
		2:  "PortType_POS",
		3:  "PortType_CPOS",
		4:  "PortType_E1",
		5:  "PortType_GE",
		6:  "PortType_X_10GE",
		7:  "PortType_GF",
		8:  "PortType_X_10GF",
		9:  "PortType_X_40GF",
		10: "PortType_X_10GFCOM",
		11: "PortType_X_40GFSPLIT",
		12: "PortType_OTN",
		13: "PortType_X_100GF",
		14: "PortType_X_400GF",
		15: "PortType_X_25GF",
		16: "PortType_X_50GF",
		17: "PortType_X_200GF",
		18: "PortType_CELLULAR",
		19: "PortType_FE",
		20: "PortType_FLEXE",
		21: "PortType_VSR",
	}
	Devm_LogicPorts_LogicPort_PortType_value = map[string]int32{
		"PortType_UNKNOWN":     0,
		"PortType_ETH":         1,
		"PortType_POS":         2,
		"PortType_CPOS":        3,
		"PortType_E1":          4,
		"PortType_GE":          5,
		"PortType_X_10GE":      6,
		"PortType_GF":          7,
		"PortType_X_10GF":      8,
		"PortType_X_40GF":      9,
		"PortType_X_10GFCOM":   10,
		"PortType_X_40GFSPLIT": 11,
		"PortType_OTN":         12,
		"PortType_X_100GF":     13,
		"PortType_X_400GF":     14,
		"PortType_X_25GF":      15,
		"PortType_X_50GF":      16,
		"PortType_X_200GF":     17,
		"PortType_CELLULAR":    18,
		"PortType_FE":          19,
		"PortType_FLEXE":       20,
		"PortType_VSR":         21,
	}
)

func (x Devm_LogicPorts_LogicPort_PortType) Enum() *Devm_LogicPorts_LogicPort_PortType {
	p := new(Devm_LogicPorts_LogicPort_PortType)
	*p = x
	return p
}

func (x Devm_LogicPorts_LogicPort_PortType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_LogicPorts_LogicPort_PortType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[287].Descriptor()
}

func (Devm_LogicPorts_LogicPort_PortType) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[287]
}

func (x Devm_LogicPorts_LogicPort_PortType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_LogicPorts_LogicPort_PortType.Descriptor instead.
func (Devm_LogicPorts_LogicPort_PortType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 11, 0, 0}
}

type Devm_LogicPorts_LogicPort_AdminState int32

const (
	Devm_LogicPorts_LogicPort_AdminState_INACTIVE     Devm_LogicPorts_LogicPort_AdminState = 0
	Devm_LogicPorts_LogicPort_AdminState_ACTIVE       Devm_LogicPorts_LogicPort_AdminState = 1
	Devm_LogicPorts_LogicPort_AdminState_NOTSUPPORTED Devm_LogicPorts_LogicPort_AdminState = 2
)

// Enum value maps for Devm_LogicPorts_LogicPort_AdminState.
var (
	Devm_LogicPorts_LogicPort_AdminState_name = map[int32]string{
		0: "AdminState_INACTIVE",
		1: "AdminState_ACTIVE",
		2: "AdminState_NOTSUPPORTED",
	}
	Devm_LogicPorts_LogicPort_AdminState_value = map[string]int32{
		"AdminState_INACTIVE":     0,
		"AdminState_ACTIVE":       1,
		"AdminState_NOTSUPPORTED": 2,
	}
)

func (x Devm_LogicPorts_LogicPort_AdminState) Enum() *Devm_LogicPorts_LogicPort_AdminState {
	p := new(Devm_LogicPorts_LogicPort_AdminState)
	*p = x
	return p
}

func (x Devm_LogicPorts_LogicPort_AdminState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_LogicPorts_LogicPort_AdminState) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[288].Descriptor()
}

func (Devm_LogicPorts_LogicPort_AdminState) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[288]
}

func (x Devm_LogicPorts_LogicPort_AdminState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_LogicPorts_LogicPort_AdminState.Descriptor instead.
func (Devm_LogicPorts_LogicPort_AdminState) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 11, 0, 1}
}

type Devm_LogicPorts_LogicPort_HardType int32

const (
	Devm_LogicPorts_LogicPort_HardType_UNKNOWN          Devm_LogicPorts_LogicPort_HardType = 0
	Devm_LogicPorts_LogicPort_HardType_ETHX_MGEX_PORT   Devm_LogicPorts_LogicPort_HardType = 1
	Devm_LogicPorts_LogicPort_HardType_ETHX_10GFX_PORT  Devm_LogicPorts_LogicPort_HardType = 2
	Devm_LogicPorts_LogicPort_HardType_ETHX_25GFX_PORT  Devm_LogicPorts_LogicPort_HardType = 3
	Devm_LogicPorts_LogicPort_HardType_ETHX_40GFX_PORT  Devm_LogicPorts_LogicPort_HardType = 4
	Devm_LogicPorts_LogicPort_HardType_ETHX_50GFX_PORT  Devm_LogicPorts_LogicPort_HardType = 5
	Devm_LogicPorts_LogicPort_HardType_ETHX_100GFX_PORT Devm_LogicPorts_LogicPort_HardType = 6
	Devm_LogicPorts_LogicPort_HardType_ETHX_200GFX_PORT Devm_LogicPorts_LogicPort_HardType = 7
	Devm_LogicPorts_LogicPort_HardType_ETHX_400GFX_PORT Devm_LogicPorts_LogicPort_HardType = 8
	Devm_LogicPorts_LogicPort_HardType_ETHX_GEX_PORT    Devm_LogicPorts_LogicPort_HardType = 9
	Devm_LogicPorts_LogicPort_HardType_ETHX_GFX_PORT    Devm_LogicPorts_LogicPort_HardType = 10
	Devm_LogicPorts_LogicPort_HardType_CELLULARX_PORT   Devm_LogicPorts_LogicPort_HardType = 11
)

// Enum value maps for Devm_LogicPorts_LogicPort_HardType.
var (
	Devm_LogicPorts_LogicPort_HardType_name = map[int32]string{
		0:  "HardType_UNKNOWN",
		1:  "HardType_ETHX_MGEX_PORT",
		2:  "HardType_ETHX_10GFX_PORT",
		3:  "HardType_ETHX_25GFX_PORT",
		4:  "HardType_ETHX_40GFX_PORT",
		5:  "HardType_ETHX_50GFX_PORT",
		6:  "HardType_ETHX_100GFX_PORT",
		7:  "HardType_ETHX_200GFX_PORT",
		8:  "HardType_ETHX_400GFX_PORT",
		9:  "HardType_ETHX_GEX_PORT",
		10: "HardType_ETHX_GFX_PORT",
		11: "HardType_CELLULARX_PORT",
	}
	Devm_LogicPorts_LogicPort_HardType_value = map[string]int32{
		"HardType_UNKNOWN":          0,
		"HardType_ETHX_MGEX_PORT":   1,
		"HardType_ETHX_10GFX_PORT":  2,
		"HardType_ETHX_25GFX_PORT":  3,
		"HardType_ETHX_40GFX_PORT":  4,
		"HardType_ETHX_50GFX_PORT":  5,
		"HardType_ETHX_100GFX_PORT": 6,
		"HardType_ETHX_200GFX_PORT": 7,
		"HardType_ETHX_400GFX_PORT": 8,
		"HardType_ETHX_GEX_PORT":    9,
		"HardType_ETHX_GFX_PORT":    10,
		"HardType_CELLULARX_PORT":   11,
	}
)

func (x Devm_LogicPorts_LogicPort_HardType) Enum() *Devm_LogicPorts_LogicPort_HardType {
	p := new(Devm_LogicPorts_LogicPort_HardType)
	*p = x
	return p
}

func (x Devm_LogicPorts_LogicPort_HardType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_LogicPorts_LogicPort_HardType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[289].Descriptor()
}

func (Devm_LogicPorts_LogicPort_HardType) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[289]
}

func (x Devm_LogicPorts_LogicPort_HardType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_LogicPorts_LogicPort_HardType.Descriptor instead.
func (Devm_LogicPorts_LogicPort_HardType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 11, 0, 2}
}

type Devm_LogicPorts_LogicPort_Level int32

const (
	Devm_LogicPorts_LogicPort_INVALID_ENUM_VALUE_Level Devm_LogicPorts_LogicPort_Level = 0
	Devm_LogicPorts_LogicPort_Level_GE                 Devm_LogicPorts_LogicPort_Level = 1
)

// Enum value maps for Devm_LogicPorts_LogicPort_Level.
var (
	Devm_LogicPorts_LogicPort_Level_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Level",
		1: "Level_GE",
	}
	Devm_LogicPorts_LogicPort_Level_value = map[string]int32{
		"INVALID_ENUM_VALUE_Level": 0,
		"Level_GE":                 1,
	}
)

func (x Devm_LogicPorts_LogicPort_Level) Enum() *Devm_LogicPorts_LogicPort_Level {
	p := new(Devm_LogicPorts_LogicPort_Level)
	*p = x
	return p
}

func (x Devm_LogicPorts_LogicPort_Level) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_LogicPorts_LogicPort_Level) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[290].Descriptor()
}

func (Devm_LogicPorts_LogicPort_Level) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[290]
}

func (x Devm_LogicPorts_LogicPort_Level) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_LogicPorts_LogicPort_Level.Descriptor instead.
func (Devm_LogicPorts_LogicPort_Level) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 11, 0, 3}
}

type Devm_EntityClasses_EntityClass_ClassName int32

const (
	Devm_EntityClasses_EntityClass_ClassName_OTHER       Devm_EntityClasses_EntityClass_ClassName = 0
	Devm_EntityClasses_EntityClass_ClassName_CHASSIS     Devm_EntityClasses_EntityClass_ClassName = 1
	Devm_EntityClasses_EntityClass_ClassName_MPUMODULE   Devm_EntityClasses_EntityClass_ClassName = 4
	Devm_EntityClasses_EntityClass_ClassName_LPUMODULE   Devm_EntityClasses_EntityClass_ClassName = 5
	Devm_EntityClasses_EntityClass_ClassName_SFUMODULE   Devm_EntityClasses_EntityClass_ClassName = 6
	Devm_EntityClasses_EntityClass_ClassName_CLOCKMODULE Devm_EntityClasses_EntityClass_ClassName = 7
	Devm_EntityClasses_EntityClass_ClassName_CARDMODULE  Devm_EntityClasses_EntityClass_ClassName = 9
	Devm_EntityClasses_EntityClass_ClassName_PORT        Devm_EntityClasses_EntityClass_ClassName = 10
	Devm_EntityClasses_EntityClass_ClassName_FAN         Devm_EntityClasses_EntityClass_ClassName = 16
	Devm_EntityClasses_EntityClass_ClassName_POWERSUPPLY Devm_EntityClasses_EntityClass_ClassName = 17
	Devm_EntityClasses_EntityClass_ClassName_CONTAINER   Devm_EntityClasses_EntityClass_ClassName = 18
	Devm_EntityClasses_EntityClass_ClassName_PPMODULE    Devm_EntityClasses_EntityClass_ClassName = 4108
	Devm_EntityClasses_EntityClass_ClassName_SWFMODULE   Devm_EntityClasses_EntityClass_ClassName = 4109
	Devm_EntityClasses_EntityClass_ClassName_ECUMODULE   Devm_EntityClasses_EntityClass_ClassName = 4110
	Devm_EntityClasses_EntityClass_ClassName_ICUMODULE   Devm_EntityClasses_EntityClass_ClassName = 4111
	Devm_EntityClasses_EntityClass_ClassName_LFE         Devm_EntityClasses_EntityClass_ClassName = 4162
	Devm_EntityClasses_EntityClass_ClassName_CFMODULE    Devm_EntityClasses_EntityClass_ClassName = 4170
	Devm_EntityClasses_EntityClass_ClassName_LCD         Devm_EntityClasses_EntityClass_ClassName = 4181
	Devm_EntityClasses_EntityClass_ClassName_PEM         Devm_EntityClasses_EntityClass_ClassName = 5006
	Devm_EntityClasses_EntityClass_ClassName_CMUMODULE   Devm_EntityClasses_EntityClass_ClassName = 5010
	Devm_EntityClasses_EntityClass_ClassName_PIC         Devm_EntityClasses_EntityClass_ClassName = 5011
	Devm_EntityClasses_EntityClass_ClassName_TSU         Devm_EntityClasses_EntityClass_ClassName = 5012
	Devm_EntityClasses_EntityClass_ClassName_PMU         Devm_EntityClasses_EntityClass_ClassName = 5031
	Devm_EntityClasses_EntityClass_ClassName_PM          Devm_EntityClasses_EntityClass_ClassName = 5032
)

// Enum value maps for Devm_EntityClasses_EntityClass_ClassName.
var (
	Devm_EntityClasses_EntityClass_ClassName_name = map[int32]string{
		0:    "ClassName_OTHER",
		1:    "ClassName_CHASSIS",
		4:    "ClassName_MPUMODULE",
		5:    "ClassName_LPUMODULE",
		6:    "ClassName_SFUMODULE",
		7:    "ClassName_CLOCKMODULE",
		9:    "ClassName_CARDMODULE",
		10:   "ClassName_PORT",
		16:   "ClassName_FAN",
		17:   "ClassName_POWERSUPPLY",
		18:   "ClassName_CONTAINER",
		4108: "ClassName_PPMODULE",
		4109: "ClassName_SWFMODULE",
		4110: "ClassName_ECUMODULE",
		4111: "ClassName_ICUMODULE",
		4162: "ClassName_LFE",
		4170: "ClassName_CFMODULE",
		4181: "ClassName_LCD",
		5006: "ClassName_PEM",
		5010: "ClassName_CMUMODULE",
		5011: "ClassName_PIC",
		5012: "ClassName_TSU",
		5031: "ClassName_PMU",
		5032: "ClassName_PM",
	}
	Devm_EntityClasses_EntityClass_ClassName_value = map[string]int32{
		"ClassName_OTHER":       0,
		"ClassName_CHASSIS":     1,
		"ClassName_MPUMODULE":   4,
		"ClassName_LPUMODULE":   5,
		"ClassName_SFUMODULE":   6,
		"ClassName_CLOCKMODULE": 7,
		"ClassName_CARDMODULE":  9,
		"ClassName_PORT":        10,
		"ClassName_FAN":         16,
		"ClassName_POWERSUPPLY": 17,
		"ClassName_CONTAINER":   18,
		"ClassName_PPMODULE":    4108,
		"ClassName_SWFMODULE":   4109,
		"ClassName_ECUMODULE":   4110,
		"ClassName_ICUMODULE":   4111,
		"ClassName_LFE":         4162,
		"ClassName_CFMODULE":    4170,
		"ClassName_LCD":         4181,
		"ClassName_PEM":         5006,
		"ClassName_CMUMODULE":   5010,
		"ClassName_PIC":         5011,
		"ClassName_TSU":         5012,
		"ClassName_PMU":         5031,
		"ClassName_PM":          5032,
	}
)

func (x Devm_EntityClasses_EntityClass_ClassName) Enum() *Devm_EntityClasses_EntityClass_ClassName {
	p := new(Devm_EntityClasses_EntityClass_ClassName)
	*p = x
	return p
}

func (x Devm_EntityClasses_EntityClass_ClassName) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_EntityClasses_EntityClass_ClassName) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[291].Descriptor()
}

func (Devm_EntityClasses_EntityClass_ClassName) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[291]
}

func (x Devm_EntityClasses_EntityClass_ClassName) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_EntityClasses_EntityClass_ClassName.Descriptor instead.
func (Devm_EntityClasses_EntityClass_ClassName) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 12, 0, 0}
}

type Devm_InconsistentEntitys_InconsistentEntity_Class int32

const (
	Devm_InconsistentEntitys_InconsistentEntity_Class_OTHER       Devm_InconsistentEntitys_InconsistentEntity_Class = 0
	Devm_InconsistentEntitys_InconsistentEntity_Class_CHASSIS     Devm_InconsistentEntitys_InconsistentEntity_Class = 1
	Devm_InconsistentEntitys_InconsistentEntity_Class_MPUMODULE   Devm_InconsistentEntitys_InconsistentEntity_Class = 4
	Devm_InconsistentEntitys_InconsistentEntity_Class_LPUMODULE   Devm_InconsistentEntitys_InconsistentEntity_Class = 5
	Devm_InconsistentEntitys_InconsistentEntity_Class_SFUMODULE   Devm_InconsistentEntitys_InconsistentEntity_Class = 6
	Devm_InconsistentEntitys_InconsistentEntity_Class_CLOCKMODULE Devm_InconsistentEntitys_InconsistentEntity_Class = 7
	Devm_InconsistentEntitys_InconsistentEntity_Class_CARDMODULE  Devm_InconsistentEntitys_InconsistentEntity_Class = 9
	Devm_InconsistentEntitys_InconsistentEntity_Class_PORT        Devm_InconsistentEntitys_InconsistentEntity_Class = 10
	Devm_InconsistentEntitys_InconsistentEntity_Class_FAN         Devm_InconsistentEntitys_InconsistentEntity_Class = 16
	Devm_InconsistentEntitys_InconsistentEntity_Class_POWERSUPPLY Devm_InconsistentEntitys_InconsistentEntity_Class = 17
	Devm_InconsistentEntitys_InconsistentEntity_Class_CONTAINER   Devm_InconsistentEntitys_InconsistentEntity_Class = 18
	Devm_InconsistentEntitys_InconsistentEntity_Class_PPMODULE    Devm_InconsistentEntitys_InconsistentEntity_Class = 4108
	Devm_InconsistentEntitys_InconsistentEntity_Class_SWFMODULE   Devm_InconsistentEntitys_InconsistentEntity_Class = 4109
	Devm_InconsistentEntitys_InconsistentEntity_Class_ECUMODULE   Devm_InconsistentEntitys_InconsistentEntity_Class = 4110
	Devm_InconsistentEntitys_InconsistentEntity_Class_ICUMODULE   Devm_InconsistentEntitys_InconsistentEntity_Class = 4111
	Devm_InconsistentEntitys_InconsistentEntity_Class_LFE         Devm_InconsistentEntitys_InconsistentEntity_Class = 4162
	Devm_InconsistentEntitys_InconsistentEntity_Class_CFMODULE    Devm_InconsistentEntitys_InconsistentEntity_Class = 4170
	Devm_InconsistentEntitys_InconsistentEntity_Class_LCD         Devm_InconsistentEntitys_InconsistentEntity_Class = 4181
	Devm_InconsistentEntitys_InconsistentEntity_Class_PEM         Devm_InconsistentEntitys_InconsistentEntity_Class = 5006
	Devm_InconsistentEntitys_InconsistentEntity_Class_CMUMODULE   Devm_InconsistentEntitys_InconsistentEntity_Class = 5010
	Devm_InconsistentEntitys_InconsistentEntity_Class_PIC         Devm_InconsistentEntitys_InconsistentEntity_Class = 5011
	Devm_InconsistentEntitys_InconsistentEntity_Class_TSU         Devm_InconsistentEntitys_InconsistentEntity_Class = 5012
	Devm_InconsistentEntitys_InconsistentEntity_Class_PMU         Devm_InconsistentEntitys_InconsistentEntity_Class = 5031
	Devm_InconsistentEntitys_InconsistentEntity_Class_PM          Devm_InconsistentEntitys_InconsistentEntity_Class = 5032
)

// Enum value maps for Devm_InconsistentEntitys_InconsistentEntity_Class.
var (
	Devm_InconsistentEntitys_InconsistentEntity_Class_name = map[int32]string{
		0:    "Class_OTHER",
		1:    "Class_CHASSIS",
		4:    "Class_MPUMODULE",
		5:    "Class_LPUMODULE",
		6:    "Class_SFUMODULE",
		7:    "Class_CLOCKMODULE",
		9:    "Class_CARDMODULE",
		10:   "Class_PORT",
		16:   "Class_FAN",
		17:   "Class_POWERSUPPLY",
		18:   "Class_CONTAINER",
		4108: "Class_PPMODULE",
		4109: "Class_SWFMODULE",
		4110: "Class_ECUMODULE",
		4111: "Class_ICUMODULE",
		4162: "Class_LFE",
		4170: "Class_CFMODULE",
		4181: "Class_LCD",
		5006: "Class_PEM",
		5010: "Class_CMUMODULE",
		5011: "Class_PIC",
		5012: "Class_TSU",
		5031: "Class_PMU",
		5032: "Class_PM",
	}
	Devm_InconsistentEntitys_InconsistentEntity_Class_value = map[string]int32{
		"Class_OTHER":       0,
		"Class_CHASSIS":     1,
		"Class_MPUMODULE":   4,
		"Class_LPUMODULE":   5,
		"Class_SFUMODULE":   6,
		"Class_CLOCKMODULE": 7,
		"Class_CARDMODULE":  9,
		"Class_PORT":        10,
		"Class_FAN":         16,
		"Class_POWERSUPPLY": 17,
		"Class_CONTAINER":   18,
		"Class_PPMODULE":    4108,
		"Class_SWFMODULE":   4109,
		"Class_ECUMODULE":   4110,
		"Class_ICUMODULE":   4111,
		"Class_LFE":         4162,
		"Class_CFMODULE":    4170,
		"Class_LCD":         4181,
		"Class_PEM":         5006,
		"Class_CMUMODULE":   5010,
		"Class_PIC":         5011,
		"Class_TSU":         5012,
		"Class_PMU":         5031,
		"Class_PM":          5032,
	}
)

func (x Devm_InconsistentEntitys_InconsistentEntity_Class) Enum() *Devm_InconsistentEntitys_InconsistentEntity_Class {
	p := new(Devm_InconsistentEntitys_InconsistentEntity_Class)
	*p = x
	return p
}

func (x Devm_InconsistentEntitys_InconsistentEntity_Class) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_InconsistentEntitys_InconsistentEntity_Class) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[292].Descriptor()
}

func (Devm_InconsistentEntitys_InconsistentEntity_Class) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[292]
}

func (x Devm_InconsistentEntitys_InconsistentEntity_Class) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_InconsistentEntitys_InconsistentEntity_Class.Descriptor instead.
func (Devm_InconsistentEntitys_InconsistentEntity_Class) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 13, 0, 0}
}

type Devm_InconsistentEntitys_InconsistentEntity_LogicalType int32

const (
	Devm_InconsistentEntitys_InconsistentEntity_LogicalType_UNKNOWN Devm_InconsistentEntitys_InconsistentEntity_LogicalType = 0
)

// Enum value maps for Devm_InconsistentEntitys_InconsistentEntity_LogicalType.
var (
	Devm_InconsistentEntitys_InconsistentEntity_LogicalType_name = map[int32]string{
		0: "LogicalType_UNKNOWN",
	}
	Devm_InconsistentEntitys_InconsistentEntity_LogicalType_value = map[string]int32{
		"LogicalType_UNKNOWN": 0,
	}
)

func (x Devm_InconsistentEntitys_InconsistentEntity_LogicalType) Enum() *Devm_InconsistentEntitys_InconsistentEntity_LogicalType {
	p := new(Devm_InconsistentEntitys_InconsistentEntity_LogicalType)
	*p = x
	return p
}

func (x Devm_InconsistentEntitys_InconsistentEntity_LogicalType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_InconsistentEntitys_InconsistentEntity_LogicalType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[293].Descriptor()
}

func (Devm_InconsistentEntitys_InconsistentEntity_LogicalType) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[293]
}

func (x Devm_InconsistentEntitys_InconsistentEntity_LogicalType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_InconsistentEntitys_InconsistentEntity_LogicalType.Descriptor instead.
func (Devm_InconsistentEntitys_InconsistentEntity_LogicalType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 13, 0, 1}
}

type Devm_InconsistentEntitys_InconsistentEntity_PhysicalType int32

const (
	Devm_InconsistentEntitys_InconsistentEntity_PhysicalType_UNKNOWN Devm_InconsistentEntitys_InconsistentEntity_PhysicalType = 0
)

// Enum value maps for Devm_InconsistentEntitys_InconsistentEntity_PhysicalType.
var (
	Devm_InconsistentEntitys_InconsistentEntity_PhysicalType_name = map[int32]string{
		0: "PhysicalType_UNKNOWN",
	}
	Devm_InconsistentEntitys_InconsistentEntity_PhysicalType_value = map[string]int32{
		"PhysicalType_UNKNOWN": 0,
	}
)

func (x Devm_InconsistentEntitys_InconsistentEntity_PhysicalType) Enum() *Devm_InconsistentEntitys_InconsistentEntity_PhysicalType {
	p := new(Devm_InconsistentEntitys_InconsistentEntity_PhysicalType)
	*p = x
	return p
}

func (x Devm_InconsistentEntitys_InconsistentEntity_PhysicalType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_InconsistentEntitys_InconsistentEntity_PhysicalType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[294].Descriptor()
}

func (Devm_InconsistentEntitys_InconsistentEntity_PhysicalType) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[294]
}

func (x Devm_InconsistentEntitys_InconsistentEntity_PhysicalType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_InconsistentEntitys_InconsistentEntity_PhysicalType.Descriptor instead.
func (Devm_InconsistentEntitys_InconsistentEntity_PhysicalType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 13, 0, 2}
}

type Devm_InconsistentEntitys_InconsistentEntity_OperState int32

const (
	Devm_InconsistentEntitys_InconsistentEntity_OperState_UNKNOWN              Devm_InconsistentEntitys_InconsistentEntity_OperState = 0
	Devm_InconsistentEntitys_InconsistentEntity_OperState_NORMAL               Devm_InconsistentEntitys_InconsistentEntity_OperState = 1
	Devm_InconsistentEntitys_InconsistentEntity_OperState_FAULT                Devm_InconsistentEntitys_InconsistentEntity_OperState = 2
	Devm_InconsistentEntitys_InconsistentEntity_OperState_OFFLINE              Devm_InconsistentEntitys_InconsistentEntity_OperState = 3
	Devm_InconsistentEntitys_InconsistentEntity_OperState_NOTSUPPORTED         Devm_InconsistentEntitys_InconsistentEntity_OperState = 4
	Devm_InconsistentEntitys_InconsistentEntity_OperState_OPTICALNOTEQUIPPED   Devm_InconsistentEntitys_InconsistentEntity_OperState = 5
	Devm_InconsistentEntitys_InconsistentEntity_OperState_NOTINSTALL           Devm_InconsistentEntitys_InconsistentEntity_OperState = 6
	Devm_InconsistentEntitys_InconsistentEntity_OperState_WRONGTYPE            Devm_InconsistentEntitys_InconsistentEntity_OperState = 7
	Devm_InconsistentEntitys_InconsistentEntity_OperState_REGISTERED           Devm_InconsistentEntitys_InconsistentEntity_OperState = 8
	Devm_InconsistentEntitys_InconsistentEntity_OperState_UNREGISTERED         Devm_InconsistentEntitys_InconsistentEntity_OperState = 9
	Devm_InconsistentEntitys_InconsistentEntity_OperState_POWEROFF             Devm_InconsistentEntitys_InconsistentEntity_OperState = 10
	Devm_InconsistentEntitys_InconsistentEntity_OperState_PORTX_PHYSICALX_DOWN Devm_InconsistentEntitys_InconsistentEntity_OperState = 11
	Devm_InconsistentEntitys_InconsistentEntity_OperState_ONLINE               Devm_InconsistentEntitys_InconsistentEntity_OperState = 12
)

// Enum value maps for Devm_InconsistentEntitys_InconsistentEntity_OperState.
var (
	Devm_InconsistentEntitys_InconsistentEntity_OperState_name = map[int32]string{
		0:  "OperState_UNKNOWN",
		1:  "OperState_NORMAL",
		2:  "OperState_FAULT",
		3:  "OperState_OFFLINE",
		4:  "OperState_NOTSUPPORTED",
		5:  "OperState_OPTICALNOTEQUIPPED",
		6:  "OperState_NOTINSTALL",
		7:  "OperState_WRONGTYPE",
		8:  "OperState_REGISTERED",
		9:  "OperState_UNREGISTERED",
		10: "OperState_POWEROFF",
		11: "OperState_PORTX_PHYSICALX_DOWN",
		12: "OperState_ONLINE",
	}
	Devm_InconsistentEntitys_InconsistentEntity_OperState_value = map[string]int32{
		"OperState_UNKNOWN":              0,
		"OperState_NORMAL":               1,
		"OperState_FAULT":                2,
		"OperState_OFFLINE":              3,
		"OperState_NOTSUPPORTED":         4,
		"OperState_OPTICALNOTEQUIPPED":   5,
		"OperState_NOTINSTALL":           6,
		"OperState_WRONGTYPE":            7,
		"OperState_REGISTERED":           8,
		"OperState_UNREGISTERED":         9,
		"OperState_POWEROFF":             10,
		"OperState_PORTX_PHYSICALX_DOWN": 11,
		"OperState_ONLINE":               12,
	}
)

func (x Devm_InconsistentEntitys_InconsistentEntity_OperState) Enum() *Devm_InconsistentEntitys_InconsistentEntity_OperState {
	p := new(Devm_InconsistentEntitys_InconsistentEntity_OperState)
	*p = x
	return p
}

func (x Devm_InconsistentEntitys_InconsistentEntity_OperState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_InconsistentEntitys_InconsistentEntity_OperState) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[295].Descriptor()
}

func (Devm_InconsistentEntitys_InconsistentEntity_OperState) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[295]
}

func (x Devm_InconsistentEntitys_InconsistentEntity_OperState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_InconsistentEntitys_InconsistentEntity_OperState.Descriptor instead.
func (Devm_InconsistentEntitys_InconsistentEntity_OperState) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 13, 0, 3}
}

type Devm_OfflineCfgs_Offline_Class int32

const (
	Devm_OfflineCfgs_Offline_INVALID_ENUM_VALUE_Class Devm_OfflineCfgs_Offline_Class = 0
	Devm_OfflineCfgs_Offline_Class_CHASSIS            Devm_OfflineCfgs_Offline_Class = 1
	Devm_OfflineCfgs_Offline_Class_BOARD              Devm_OfflineCfgs_Offline_Class = 3
	Devm_OfflineCfgs_Offline_Class_CARD               Devm_OfflineCfgs_Offline_Class = 8
)

// Enum value maps for Devm_OfflineCfgs_Offline_Class.
var (
	Devm_OfflineCfgs_Offline_Class_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Class",
		1: "Class_CHASSIS",
		3: "Class_BOARD",
		8: "Class_CARD",
	}
	Devm_OfflineCfgs_Offline_Class_value = map[string]int32{
		"INVALID_ENUM_VALUE_Class": 0,
		"Class_CHASSIS":            1,
		"Class_BOARD":              3,
		"Class_CARD":               8,
	}
)

func (x Devm_OfflineCfgs_Offline_Class) Enum() *Devm_OfflineCfgs_Offline_Class {
	p := new(Devm_OfflineCfgs_Offline_Class)
	*p = x
	return p
}

func (x Devm_OfflineCfgs_Offline_Class) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_OfflineCfgs_Offline_Class) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[296].Descriptor()
}

func (Devm_OfflineCfgs_Offline_Class) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[296]
}

func (x Devm_OfflineCfgs_Offline_Class) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_OfflineCfgs_Offline_Class.Descriptor instead.
func (Devm_OfflineCfgs_Offline_Class) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 14, 0, 0}
}

type Devm_Offlines_Offline_Class int32

const (
	Devm_Offlines_Offline_INVALID_ENUM_VALUE_Class Devm_Offlines_Offline_Class = 0
	Devm_Offlines_Offline_Class_CHASSIS            Devm_Offlines_Offline_Class = 1
	Devm_Offlines_Offline_Class_BOARD              Devm_Offlines_Offline_Class = 3
	Devm_Offlines_Offline_Class_CARD               Devm_Offlines_Offline_Class = 8
)

// Enum value maps for Devm_Offlines_Offline_Class.
var (
	Devm_Offlines_Offline_Class_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Class",
		1: "Class_CHASSIS",
		3: "Class_BOARD",
		8: "Class_CARD",
	}
	Devm_Offlines_Offline_Class_value = map[string]int32{
		"INVALID_ENUM_VALUE_Class": 0,
		"Class_CHASSIS":            1,
		"Class_BOARD":              3,
		"Class_CARD":               8,
	}
)

func (x Devm_Offlines_Offline_Class) Enum() *Devm_Offlines_Offline_Class {
	p := new(Devm_Offlines_Offline_Class)
	*p = x
	return p
}

func (x Devm_Offlines_Offline_Class) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Offlines_Offline_Class) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[297].Descriptor()
}

func (Devm_Offlines_Offline_Class) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[297]
}

func (x Devm_Offlines_Offline_Class) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Offlines_Offline_Class.Descriptor instead.
func (Devm_Offlines_Offline_Class) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 16, 0, 0}
}

type Devm_Clockboards_Clockboard_BoardType int32

const (
	Devm_Clockboards_Clockboard_BoardType_UNKNOW Devm_Clockboards_Clockboard_BoardType = 0
	Devm_Clockboards_Clockboard_BoardType_CLOCK  Devm_Clockboards_Clockboard_BoardType = 1
)

// Enum value maps for Devm_Clockboards_Clockboard_BoardType.
var (
	Devm_Clockboards_Clockboard_BoardType_name = map[int32]string{
		0: "BoardType_UNKNOW",
		1: "BoardType_CLOCK",
	}
	Devm_Clockboards_Clockboard_BoardType_value = map[string]int32{
		"BoardType_UNKNOW": 0,
		"BoardType_CLOCK":  1,
	}
)

func (x Devm_Clockboards_Clockboard_BoardType) Enum() *Devm_Clockboards_Clockboard_BoardType {
	p := new(Devm_Clockboards_Clockboard_BoardType)
	*p = x
	return p
}

func (x Devm_Clockboards_Clockboard_BoardType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Clockboards_Clockboard_BoardType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[298].Descriptor()
}

func (Devm_Clockboards_Clockboard_BoardType) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[298]
}

func (x Devm_Clockboards_Clockboard_BoardType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Clockboards_Clockboard_BoardType.Descriptor instead.
func (Devm_Clockboards_Clockboard_BoardType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 17, 0, 0}
}

type Devm_Clockboards_Clockboard_SramState int32

const (
	Devm_Clockboards_Clockboard_SramState_ABNORMAL Devm_Clockboards_Clockboard_SramState = 0
	Devm_Clockboards_Clockboard_SramState_NORMAL   Devm_Clockboards_Clockboard_SramState = 1
	Devm_Clockboards_Clockboard_SramState_UNKNOWN  Devm_Clockboards_Clockboard_SramState = 2
)

// Enum value maps for Devm_Clockboards_Clockboard_SramState.
var (
	Devm_Clockboards_Clockboard_SramState_name = map[int32]string{
		0: "SramState_ABNORMAL",
		1: "SramState_NORMAL",
		2: "SramState_UNKNOWN",
	}
	Devm_Clockboards_Clockboard_SramState_value = map[string]int32{
		"SramState_ABNORMAL": 0,
		"SramState_NORMAL":   1,
		"SramState_UNKNOWN":  2,
	}
)

func (x Devm_Clockboards_Clockboard_SramState) Enum() *Devm_Clockboards_Clockboard_SramState {
	p := new(Devm_Clockboards_Clockboard_SramState)
	*p = x
	return p
}

func (x Devm_Clockboards_Clockboard_SramState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Clockboards_Clockboard_SramState) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[299].Descriptor()
}

func (Devm_Clockboards_Clockboard_SramState) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[299]
}

func (x Devm_Clockboards_Clockboard_SramState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Clockboards_Clockboard_SramState.Descriptor instead.
func (Devm_Clockboards_Clockboard_SramState) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 17, 0, 1}
}

type Devm_Driver_Cmus_Cmu_Role int32

const (
	Devm_Driver_Cmus_Cmu_Role_MASTER Devm_Driver_Cmus_Cmu_Role = 0
	Devm_Driver_Cmus_Cmu_Role_SLAVE  Devm_Driver_Cmus_Cmu_Role = 1
	Devm_Driver_Cmus_Cmu_Role_NA     Devm_Driver_Cmus_Cmu_Role = 2
)

// Enum value maps for Devm_Driver_Cmus_Cmu_Role.
var (
	Devm_Driver_Cmus_Cmu_Role_name = map[int32]string{
		0: "Role_MASTER",
		1: "Role_SLAVE",
		2: "Role_NA",
	}
	Devm_Driver_Cmus_Cmu_Role_value = map[string]int32{
		"Role_MASTER": 0,
		"Role_SLAVE":  1,
		"Role_NA":     2,
	}
)

func (x Devm_Driver_Cmus_Cmu_Role) Enum() *Devm_Driver_Cmus_Cmu_Role {
	p := new(Devm_Driver_Cmus_Cmu_Role)
	*p = x
	return p
}

func (x Devm_Driver_Cmus_Cmu_Role) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Driver_Cmus_Cmu_Role) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[300].Descriptor()
}

func (Devm_Driver_Cmus_Cmu_Role) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[300]
}

func (x Devm_Driver_Cmus_Cmu_Role) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Driver_Cmus_Cmu_Role.Descriptor instead.
func (Devm_Driver_Cmus_Cmu_Role) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 18, 0, 0, 0}
}

type Devm_Driver_Cmus_Cmu_CmuSwitchs_CmuSwitch_AlarmMode int32

const (
	Devm_Driver_Cmus_Cmu_CmuSwitchs_CmuSwitch_AlarmMode_OPEN  Devm_Driver_Cmus_Cmu_CmuSwitchs_CmuSwitch_AlarmMode = 0
	Devm_Driver_Cmus_Cmu_CmuSwitchs_CmuSwitch_AlarmMode_CLOSE Devm_Driver_Cmus_Cmu_CmuSwitchs_CmuSwitch_AlarmMode = 1
	Devm_Driver_Cmus_Cmu_CmuSwitchs_CmuSwitch_AlarmMode_UNDO  Devm_Driver_Cmus_Cmu_CmuSwitchs_CmuSwitch_AlarmMode = 2
)

// Enum value maps for Devm_Driver_Cmus_Cmu_CmuSwitchs_CmuSwitch_AlarmMode.
var (
	Devm_Driver_Cmus_Cmu_CmuSwitchs_CmuSwitch_AlarmMode_name = map[int32]string{
		0: "AlarmMode_OPEN",
		1: "AlarmMode_CLOSE",
		2: "AlarmMode_UNDO",
	}
	Devm_Driver_Cmus_Cmu_CmuSwitchs_CmuSwitch_AlarmMode_value = map[string]int32{
		"AlarmMode_OPEN":  0,
		"AlarmMode_CLOSE": 1,
		"AlarmMode_UNDO":  2,
	}
)

func (x Devm_Driver_Cmus_Cmu_CmuSwitchs_CmuSwitch_AlarmMode) Enum() *Devm_Driver_Cmus_Cmu_CmuSwitchs_CmuSwitch_AlarmMode {
	p := new(Devm_Driver_Cmus_Cmu_CmuSwitchs_CmuSwitch_AlarmMode)
	*p = x
	return p
}

func (x Devm_Driver_Cmus_Cmu_CmuSwitchs_CmuSwitch_AlarmMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Driver_Cmus_Cmu_CmuSwitchs_CmuSwitch_AlarmMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[301].Descriptor()
}

func (Devm_Driver_Cmus_Cmu_CmuSwitchs_CmuSwitch_AlarmMode) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[301]
}

func (x Devm_Driver_Cmus_Cmu_CmuSwitchs_CmuSwitch_AlarmMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Driver_Cmus_Cmu_CmuSwitchs_CmuSwitch_AlarmMode.Descriptor instead.
func (Devm_Driver_Cmus_Cmu_CmuSwitchs_CmuSwitch_AlarmMode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 18, 0, 0, 0, 0, 0}
}

type Devm_Driver_Cmus_Cmu_CmuSwitchs_CmuSwitch_SwitchFog int32

const (
	Devm_Driver_Cmus_Cmu_CmuSwitchs_CmuSwitch_SwitchFog_UNKNOWN Devm_Driver_Cmus_Cmu_CmuSwitchs_CmuSwitch_SwitchFog = 0
	Devm_Driver_Cmus_Cmu_CmuSwitchs_CmuSwitch_SwitchFog_FOG     Devm_Driver_Cmus_Cmu_CmuSwitchs_CmuSwitch_SwitchFog = 1
)

// Enum value maps for Devm_Driver_Cmus_Cmu_CmuSwitchs_CmuSwitch_SwitchFog.
var (
	Devm_Driver_Cmus_Cmu_CmuSwitchs_CmuSwitch_SwitchFog_name = map[int32]string{
		0: "SwitchFog_UNKNOWN",
		1: "SwitchFog_FOG",
	}
	Devm_Driver_Cmus_Cmu_CmuSwitchs_CmuSwitch_SwitchFog_value = map[string]int32{
		"SwitchFog_UNKNOWN": 0,
		"SwitchFog_FOG":     1,
	}
)

func (x Devm_Driver_Cmus_Cmu_CmuSwitchs_CmuSwitch_SwitchFog) Enum() *Devm_Driver_Cmus_Cmu_CmuSwitchs_CmuSwitch_SwitchFog {
	p := new(Devm_Driver_Cmus_Cmu_CmuSwitchs_CmuSwitch_SwitchFog)
	*p = x
	return p
}

func (x Devm_Driver_Cmus_Cmu_CmuSwitchs_CmuSwitch_SwitchFog) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Driver_Cmus_Cmu_CmuSwitchs_CmuSwitch_SwitchFog) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[302].Descriptor()
}

func (Devm_Driver_Cmus_Cmu_CmuSwitchs_CmuSwitch_SwitchFog) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[302]
}

func (x Devm_Driver_Cmus_Cmu_CmuSwitchs_CmuSwitch_SwitchFog) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Driver_Cmus_Cmu_CmuSwitchs_CmuSwitch_SwitchFog.Descriptor instead.
func (Devm_Driver_Cmus_Cmu_CmuSwitchs_CmuSwitch_SwitchFog) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 18, 0, 0, 0, 0, 1}
}

type Devm_Driver_Cmus_Cmu_CmuRelays_CmuRelay_RelayAlarmMode int32

const (
	Devm_Driver_Cmus_Cmu_CmuRelays_CmuRelay_RelayAlarmMode_OPEN  Devm_Driver_Cmus_Cmu_CmuRelays_CmuRelay_RelayAlarmMode = 0
	Devm_Driver_Cmus_Cmu_CmuRelays_CmuRelay_RelayAlarmMode_CLOSE Devm_Driver_Cmus_Cmu_CmuRelays_CmuRelay_RelayAlarmMode = 1
	Devm_Driver_Cmus_Cmu_CmuRelays_CmuRelay_RelayAlarmMode_UNDO  Devm_Driver_Cmus_Cmu_CmuRelays_CmuRelay_RelayAlarmMode = 2
)

// Enum value maps for Devm_Driver_Cmus_Cmu_CmuRelays_CmuRelay_RelayAlarmMode.
var (
	Devm_Driver_Cmus_Cmu_CmuRelays_CmuRelay_RelayAlarmMode_name = map[int32]string{
		0: "RelayAlarmMode_OPEN",
		1: "RelayAlarmMode_CLOSE",
		2: "RelayAlarmMode_UNDO",
	}
	Devm_Driver_Cmus_Cmu_CmuRelays_CmuRelay_RelayAlarmMode_value = map[string]int32{
		"RelayAlarmMode_OPEN":  0,
		"RelayAlarmMode_CLOSE": 1,
		"RelayAlarmMode_UNDO":  2,
	}
)

func (x Devm_Driver_Cmus_Cmu_CmuRelays_CmuRelay_RelayAlarmMode) Enum() *Devm_Driver_Cmus_Cmu_CmuRelays_CmuRelay_RelayAlarmMode {
	p := new(Devm_Driver_Cmus_Cmu_CmuRelays_CmuRelay_RelayAlarmMode)
	*p = x
	return p
}

func (x Devm_Driver_Cmus_Cmu_CmuRelays_CmuRelay_RelayAlarmMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Driver_Cmus_Cmu_CmuRelays_CmuRelay_RelayAlarmMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[303].Descriptor()
}

func (Devm_Driver_Cmus_Cmu_CmuRelays_CmuRelay_RelayAlarmMode) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[303]
}

func (x Devm_Driver_Cmus_Cmu_CmuRelays_CmuRelay_RelayAlarmMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Driver_Cmus_Cmu_CmuRelays_CmuRelay_RelayAlarmMode.Descriptor instead.
func (Devm_Driver_Cmus_Cmu_CmuRelays_CmuRelay_RelayAlarmMode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 18, 0, 0, 1, 0, 0}
}

type Devm_Driver_Cmus_Cmu_CmuAnalogs_CmuAnalog_AnalogType int32

const (
	Devm_Driver_Cmus_Cmu_CmuAnalogs_CmuAnalog_AnalogType_UNKNOWN Devm_Driver_Cmus_Cmu_CmuAnalogs_CmuAnalog_AnalogType = 0
	Devm_Driver_Cmus_Cmu_CmuAnalogs_CmuAnalog_AnalogType_CURRENT Devm_Driver_Cmus_Cmu_CmuAnalogs_CmuAnalog_AnalogType = 1
	Devm_Driver_Cmus_Cmu_CmuAnalogs_CmuAnalog_AnalogType_VOLTAGE Devm_Driver_Cmus_Cmu_CmuAnalogs_CmuAnalog_AnalogType = 2
)

// Enum value maps for Devm_Driver_Cmus_Cmu_CmuAnalogs_CmuAnalog_AnalogType.
var (
	Devm_Driver_Cmus_Cmu_CmuAnalogs_CmuAnalog_AnalogType_name = map[int32]string{
		0: "AnalogType_UNKNOWN",
		1: "AnalogType_CURRENT",
		2: "AnalogType_VOLTAGE",
	}
	Devm_Driver_Cmus_Cmu_CmuAnalogs_CmuAnalog_AnalogType_value = map[string]int32{
		"AnalogType_UNKNOWN": 0,
		"AnalogType_CURRENT": 1,
		"AnalogType_VOLTAGE": 2,
	}
)

func (x Devm_Driver_Cmus_Cmu_CmuAnalogs_CmuAnalog_AnalogType) Enum() *Devm_Driver_Cmus_Cmu_CmuAnalogs_CmuAnalog_AnalogType {
	p := new(Devm_Driver_Cmus_Cmu_CmuAnalogs_CmuAnalog_AnalogType)
	*p = x
	return p
}

func (x Devm_Driver_Cmus_Cmu_CmuAnalogs_CmuAnalog_AnalogType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Driver_Cmus_Cmu_CmuAnalogs_CmuAnalog_AnalogType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[304].Descriptor()
}

func (Devm_Driver_Cmus_Cmu_CmuAnalogs_CmuAnalog_AnalogType) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[304]
}

func (x Devm_Driver_Cmus_Cmu_CmuAnalogs_CmuAnalog_AnalogType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Driver_Cmus_Cmu_CmuAnalogs_CmuAnalog_AnalogType.Descriptor instead.
func (Devm_Driver_Cmus_Cmu_CmuAnalogs_CmuAnalog_AnalogType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 18, 0, 0, 2, 0, 0}
}

type Devm_Driver_Cmus_Cmu_CmuAnalogs_CmuAnalog_AnalogObject int32

const (
	Devm_Driver_Cmus_Cmu_CmuAnalogs_CmuAnalog_AnalogObject_UNKNOWN     Devm_Driver_Cmus_Cmu_CmuAnalogs_CmuAnalog_AnalogObject = 0
	Devm_Driver_Cmus_Cmu_CmuAnalogs_CmuAnalog_AnalogObject_TEMPERATURE Devm_Driver_Cmus_Cmu_CmuAnalogs_CmuAnalog_AnalogObject = 2
	Devm_Driver_Cmus_Cmu_CmuAnalogs_CmuAnalog_AnalogObject_HUMIDITY    Devm_Driver_Cmus_Cmu_CmuAnalogs_CmuAnalog_AnalogObject = 3
)

// Enum value maps for Devm_Driver_Cmus_Cmu_CmuAnalogs_CmuAnalog_AnalogObject.
var (
	Devm_Driver_Cmus_Cmu_CmuAnalogs_CmuAnalog_AnalogObject_name = map[int32]string{
		0: "AnalogObject_UNKNOWN",
		2: "AnalogObject_TEMPERATURE",
		3: "AnalogObject_HUMIDITY",
	}
	Devm_Driver_Cmus_Cmu_CmuAnalogs_CmuAnalog_AnalogObject_value = map[string]int32{
		"AnalogObject_UNKNOWN":     0,
		"AnalogObject_TEMPERATURE": 2,
		"AnalogObject_HUMIDITY":    3,
	}
)

func (x Devm_Driver_Cmus_Cmu_CmuAnalogs_CmuAnalog_AnalogObject) Enum() *Devm_Driver_Cmus_Cmu_CmuAnalogs_CmuAnalog_AnalogObject {
	p := new(Devm_Driver_Cmus_Cmu_CmuAnalogs_CmuAnalog_AnalogObject)
	*p = x
	return p
}

func (x Devm_Driver_Cmus_Cmu_CmuAnalogs_CmuAnalog_AnalogObject) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Driver_Cmus_Cmu_CmuAnalogs_CmuAnalog_AnalogObject) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[305].Descriptor()
}

func (Devm_Driver_Cmus_Cmu_CmuAnalogs_CmuAnalog_AnalogObject) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[305]
}

func (x Devm_Driver_Cmus_Cmu_CmuAnalogs_CmuAnalog_AnalogObject) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Driver_Cmus_Cmu_CmuAnalogs_CmuAnalog_AnalogObject.Descriptor instead.
func (Devm_Driver_Cmus_Cmu_CmuAnalogs_CmuAnalog_AnalogObject) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 18, 0, 0, 2, 0, 1}
}

type Devm_Driver_Cmus_Cmu_CmuAlarms_CmuAlarm_AlarmLevel int32

const (
	Devm_Driver_Cmus_Cmu_CmuAlarms_CmuAlarm_AlarmLevel_OPEN  Devm_Driver_Cmus_Cmu_CmuAlarms_CmuAlarm_AlarmLevel = 0
	Devm_Driver_Cmus_Cmu_CmuAlarms_CmuAlarm_AlarmLevel_CLOSE Devm_Driver_Cmus_Cmu_CmuAlarms_CmuAlarm_AlarmLevel = 1
	Devm_Driver_Cmus_Cmu_CmuAlarms_CmuAlarm_AlarmLevel_UNDO  Devm_Driver_Cmus_Cmu_CmuAlarms_CmuAlarm_AlarmLevel = 2
)

// Enum value maps for Devm_Driver_Cmus_Cmu_CmuAlarms_CmuAlarm_AlarmLevel.
var (
	Devm_Driver_Cmus_Cmu_CmuAlarms_CmuAlarm_AlarmLevel_name = map[int32]string{
		0: "AlarmLevel_OPEN",
		1: "AlarmLevel_CLOSE",
		2: "AlarmLevel_UNDO",
	}
	Devm_Driver_Cmus_Cmu_CmuAlarms_CmuAlarm_AlarmLevel_value = map[string]int32{
		"AlarmLevel_OPEN":  0,
		"AlarmLevel_CLOSE": 1,
		"AlarmLevel_UNDO":  2,
	}
)

func (x Devm_Driver_Cmus_Cmu_CmuAlarms_CmuAlarm_AlarmLevel) Enum() *Devm_Driver_Cmus_Cmu_CmuAlarms_CmuAlarm_AlarmLevel {
	p := new(Devm_Driver_Cmus_Cmu_CmuAlarms_CmuAlarm_AlarmLevel)
	*p = x
	return p
}

func (x Devm_Driver_Cmus_Cmu_CmuAlarms_CmuAlarm_AlarmLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Driver_Cmus_Cmu_CmuAlarms_CmuAlarm_AlarmLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[306].Descriptor()
}

func (Devm_Driver_Cmus_Cmu_CmuAlarms_CmuAlarm_AlarmLevel) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[306]
}

func (x Devm_Driver_Cmus_Cmu_CmuAlarms_CmuAlarm_AlarmLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Driver_Cmus_Cmu_CmuAlarms_CmuAlarm_AlarmLevel.Descriptor instead.
func (Devm_Driver_Cmus_Cmu_CmuAlarms_CmuAlarm_AlarmLevel) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 18, 0, 0, 3, 0, 0}
}

type Devm_Driver_Cmus_Cmu_Switchs_Switch_AlarmTriggeringMode int32

const (
	Devm_Driver_Cmus_Cmu_Switchs_Switch_AlarmTriggeringMode_FALLINGX_EDGE Devm_Driver_Cmus_Cmu_Switchs_Switch_AlarmTriggeringMode = 0
	Devm_Driver_Cmus_Cmu_Switchs_Switch_AlarmTriggeringMode_RISINGX_EDGE  Devm_Driver_Cmus_Cmu_Switchs_Switch_AlarmTriggeringMode = 1
)

// Enum value maps for Devm_Driver_Cmus_Cmu_Switchs_Switch_AlarmTriggeringMode.
var (
	Devm_Driver_Cmus_Cmu_Switchs_Switch_AlarmTriggeringMode_name = map[int32]string{
		0: "AlarmTriggeringMode_FALLINGX_EDGE",
		1: "AlarmTriggeringMode_RISINGX_EDGE",
	}
	Devm_Driver_Cmus_Cmu_Switchs_Switch_AlarmTriggeringMode_value = map[string]int32{
		"AlarmTriggeringMode_FALLINGX_EDGE": 0,
		"AlarmTriggeringMode_RISINGX_EDGE":  1,
	}
)

func (x Devm_Driver_Cmus_Cmu_Switchs_Switch_AlarmTriggeringMode) Enum() *Devm_Driver_Cmus_Cmu_Switchs_Switch_AlarmTriggeringMode {
	p := new(Devm_Driver_Cmus_Cmu_Switchs_Switch_AlarmTriggeringMode)
	*p = x
	return p
}

func (x Devm_Driver_Cmus_Cmu_Switchs_Switch_AlarmTriggeringMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Driver_Cmus_Cmu_Switchs_Switch_AlarmTriggeringMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[307].Descriptor()
}

func (Devm_Driver_Cmus_Cmu_Switchs_Switch_AlarmTriggeringMode) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[307]
}

func (x Devm_Driver_Cmus_Cmu_Switchs_Switch_AlarmTriggeringMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Driver_Cmus_Cmu_Switchs_Switch_AlarmTriggeringMode.Descriptor instead.
func (Devm_Driver_Cmus_Cmu_Switchs_Switch_AlarmTriggeringMode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 18, 0, 0, 4, 0, 0}
}

type Devm_Driver_Cmus_Cmu_Switchs_Switch_SensorName int32

const (
	Devm_Driver_Cmus_Cmu_Switchs_Switch_INVALID_ENUM_VALUE_SensorName Devm_Driver_Cmus_Cmu_Switchs_Switch_SensorName = 0
	Devm_Driver_Cmus_Cmu_Switchs_Switch_SensorName_FOG                Devm_Driver_Cmus_Cmu_Switchs_Switch_SensorName = 1
)

// Enum value maps for Devm_Driver_Cmus_Cmu_Switchs_Switch_SensorName.
var (
	Devm_Driver_Cmus_Cmu_Switchs_Switch_SensorName_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_SensorName",
		1: "SensorName_FOG",
	}
	Devm_Driver_Cmus_Cmu_Switchs_Switch_SensorName_value = map[string]int32{
		"INVALID_ENUM_VALUE_SensorName": 0,
		"SensorName_FOG":                1,
	}
)

func (x Devm_Driver_Cmus_Cmu_Switchs_Switch_SensorName) Enum() *Devm_Driver_Cmus_Cmu_Switchs_Switch_SensorName {
	p := new(Devm_Driver_Cmus_Cmu_Switchs_Switch_SensorName)
	*p = x
	return p
}

func (x Devm_Driver_Cmus_Cmu_Switchs_Switch_SensorName) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Driver_Cmus_Cmu_Switchs_Switch_SensorName) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[308].Descriptor()
}

func (Devm_Driver_Cmus_Cmu_Switchs_Switch_SensorName) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[308]
}

func (x Devm_Driver_Cmus_Cmu_Switchs_Switch_SensorName) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Driver_Cmus_Cmu_Switchs_Switch_SensorName.Descriptor instead.
func (Devm_Driver_Cmus_Cmu_Switchs_Switch_SensorName) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 18, 0, 0, 4, 0, 1}
}

type Devm_Driver_Cmus_Cmu_Relays_Relay_RelayMode int32

const (
	Devm_Driver_Cmus_Cmu_Relays_Relay_RelayMode_OPEN  Devm_Driver_Cmus_Cmu_Relays_Relay_RelayMode = 0
	Devm_Driver_Cmus_Cmu_Relays_Relay_RelayMode_CLOSE Devm_Driver_Cmus_Cmu_Relays_Relay_RelayMode = 1
)

// Enum value maps for Devm_Driver_Cmus_Cmu_Relays_Relay_RelayMode.
var (
	Devm_Driver_Cmus_Cmu_Relays_Relay_RelayMode_name = map[int32]string{
		0: "RelayMode_OPEN",
		1: "RelayMode_CLOSE",
	}
	Devm_Driver_Cmus_Cmu_Relays_Relay_RelayMode_value = map[string]int32{
		"RelayMode_OPEN":  0,
		"RelayMode_CLOSE": 1,
	}
)

func (x Devm_Driver_Cmus_Cmu_Relays_Relay_RelayMode) Enum() *Devm_Driver_Cmus_Cmu_Relays_Relay_RelayMode {
	p := new(Devm_Driver_Cmus_Cmu_Relays_Relay_RelayMode)
	*p = x
	return p
}

func (x Devm_Driver_Cmus_Cmu_Relays_Relay_RelayMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Driver_Cmus_Cmu_Relays_Relay_RelayMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[309].Descriptor()
}

func (Devm_Driver_Cmus_Cmu_Relays_Relay_RelayMode) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[309]
}

func (x Devm_Driver_Cmus_Cmu_Relays_Relay_RelayMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Driver_Cmus_Cmu_Relays_Relay_RelayMode.Descriptor instead.
func (Devm_Driver_Cmus_Cmu_Relays_Relay_RelayMode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 18, 0, 0, 5, 0, 0}
}

type Devm_Driver_Cmus_Cmu_Analogs_Analog_AnalogObject int32

const (
	Devm_Driver_Cmus_Cmu_Analogs_Analog_INVALID_ENUM_VALUE_AnalogObject Devm_Driver_Cmus_Cmu_Analogs_Analog_AnalogObject = 0
	Devm_Driver_Cmus_Cmu_Analogs_Analog_AnalogObject_TEMPERATURE        Devm_Driver_Cmus_Cmu_Analogs_Analog_AnalogObject = 2
	Devm_Driver_Cmus_Cmu_Analogs_Analog_AnalogObject_HUMIDITY           Devm_Driver_Cmus_Cmu_Analogs_Analog_AnalogObject = 3
)

// Enum value maps for Devm_Driver_Cmus_Cmu_Analogs_Analog_AnalogObject.
var (
	Devm_Driver_Cmus_Cmu_Analogs_Analog_AnalogObject_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_AnalogObject",
		2: "AnalogObject_TEMPERATURE",
		3: "AnalogObject_HUMIDITY",
	}
	Devm_Driver_Cmus_Cmu_Analogs_Analog_AnalogObject_value = map[string]int32{
		"INVALID_ENUM_VALUE_AnalogObject": 0,
		"AnalogObject_TEMPERATURE":        2,
		"AnalogObject_HUMIDITY":           3,
	}
)

func (x Devm_Driver_Cmus_Cmu_Analogs_Analog_AnalogObject) Enum() *Devm_Driver_Cmus_Cmu_Analogs_Analog_AnalogObject {
	p := new(Devm_Driver_Cmus_Cmu_Analogs_Analog_AnalogObject)
	*p = x
	return p
}

func (x Devm_Driver_Cmus_Cmu_Analogs_Analog_AnalogObject) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Driver_Cmus_Cmu_Analogs_Analog_AnalogObject) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[310].Descriptor()
}

func (Devm_Driver_Cmus_Cmu_Analogs_Analog_AnalogObject) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[310]
}

func (x Devm_Driver_Cmus_Cmu_Analogs_Analog_AnalogObject) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Driver_Cmus_Cmu_Analogs_Analog_AnalogObject.Descriptor instead.
func (Devm_Driver_Cmus_Cmu_Analogs_Analog_AnalogObject) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 18, 0, 0, 6, 0, 0}
}

type Devm_Driver_Cmus_Cmu_Analogs_Analog_AnalogSensorType int32

const (
	Devm_Driver_Cmus_Cmu_Analogs_Analog_INVALID_ENUM_VALUE_AnalogSensorType Devm_Driver_Cmus_Cmu_Analogs_Analog_AnalogSensorType = 0
	Devm_Driver_Cmus_Cmu_Analogs_Analog_AnalogSensorType_CURRENT            Devm_Driver_Cmus_Cmu_Analogs_Analog_AnalogSensorType = 1
	Devm_Driver_Cmus_Cmu_Analogs_Analog_AnalogSensorType_VOLTAGE            Devm_Driver_Cmus_Cmu_Analogs_Analog_AnalogSensorType = 2
)

// Enum value maps for Devm_Driver_Cmus_Cmu_Analogs_Analog_AnalogSensorType.
var (
	Devm_Driver_Cmus_Cmu_Analogs_Analog_AnalogSensorType_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_AnalogSensorType",
		1: "AnalogSensorType_CURRENT",
		2: "AnalogSensorType_VOLTAGE",
	}
	Devm_Driver_Cmus_Cmu_Analogs_Analog_AnalogSensorType_value = map[string]int32{
		"INVALID_ENUM_VALUE_AnalogSensorType": 0,
		"AnalogSensorType_CURRENT":            1,
		"AnalogSensorType_VOLTAGE":            2,
	}
)

func (x Devm_Driver_Cmus_Cmu_Analogs_Analog_AnalogSensorType) Enum() *Devm_Driver_Cmus_Cmu_Analogs_Analog_AnalogSensorType {
	p := new(Devm_Driver_Cmus_Cmu_Analogs_Analog_AnalogSensorType)
	*p = x
	return p
}

func (x Devm_Driver_Cmus_Cmu_Analogs_Analog_AnalogSensorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Driver_Cmus_Cmu_Analogs_Analog_AnalogSensorType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[311].Descriptor()
}

func (Devm_Driver_Cmus_Cmu_Analogs_Analog_AnalogSensorType) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[311]
}

func (x Devm_Driver_Cmus_Cmu_Analogs_Analog_AnalogSensorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Driver_Cmus_Cmu_Analogs_Analog_AnalogSensorType.Descriptor instead.
func (Devm_Driver_Cmus_Cmu_Analogs_Analog_AnalogSensorType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 18, 0, 0, 6, 0, 1}
}

type Devm_Driver_Pms_Pm_SingleInput int32

const (
	Devm_Driver_Pms_Pm_SingleInput_NA Devm_Driver_Pms_Pm_SingleInput = 0
	Devm_Driver_Pms_Pm_SingleInput_A  Devm_Driver_Pms_Pm_SingleInput = 1
	Devm_Driver_Pms_Pm_SingleInput_B  Devm_Driver_Pms_Pm_SingleInput = 2
)

// Enum value maps for Devm_Driver_Pms_Pm_SingleInput.
var (
	Devm_Driver_Pms_Pm_SingleInput_name = map[int32]string{
		0: "SingleInput_NA",
		1: "SingleInput_A",
		2: "SingleInput_B",
	}
	Devm_Driver_Pms_Pm_SingleInput_value = map[string]int32{
		"SingleInput_NA": 0,
		"SingleInput_A":  1,
		"SingleInput_B":  2,
	}
)

func (x Devm_Driver_Pms_Pm_SingleInput) Enum() *Devm_Driver_Pms_Pm_SingleInput {
	p := new(Devm_Driver_Pms_Pm_SingleInput)
	*p = x
	return p
}

func (x Devm_Driver_Pms_Pm_SingleInput) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Driver_Pms_Pm_SingleInput) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[312].Descriptor()
}

func (Devm_Driver_Pms_Pm_SingleInput) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[312]
}

func (x Devm_Driver_Pms_Pm_SingleInput) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Driver_Pms_Pm_SingleInput.Descriptor instead.
func (Devm_Driver_Pms_Pm_SingleInput) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 18, 1, 0, 0}
}

type Devm_Driver_Pms_Pm_MonitorCableState int32

const (
	Devm_Driver_Pms_Pm_MonitorCableState_UNX_PLUG Devm_Driver_Pms_Pm_MonitorCableState = 0
	Devm_Driver_Pms_Pm_MonitorCableState_PLUG     Devm_Driver_Pms_Pm_MonitorCableState = 1
)

// Enum value maps for Devm_Driver_Pms_Pm_MonitorCableState.
var (
	Devm_Driver_Pms_Pm_MonitorCableState_name = map[int32]string{
		0: "MonitorCableState_UNX_PLUG",
		1: "MonitorCableState_PLUG",
	}
	Devm_Driver_Pms_Pm_MonitorCableState_value = map[string]int32{
		"MonitorCableState_UNX_PLUG": 0,
		"MonitorCableState_PLUG":     1,
	}
)

func (x Devm_Driver_Pms_Pm_MonitorCableState) Enum() *Devm_Driver_Pms_Pm_MonitorCableState {
	p := new(Devm_Driver_Pms_Pm_MonitorCableState)
	*p = x
	return p
}

func (x Devm_Driver_Pms_Pm_MonitorCableState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Driver_Pms_Pm_MonitorCableState) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[313].Descriptor()
}

func (Devm_Driver_Pms_Pm_MonitorCableState) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[313]
}

func (x Devm_Driver_Pms_Pm_MonitorCableState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Driver_Pms_Pm_MonitorCableState.Descriptor instead.
func (Devm_Driver_Pms_Pm_MonitorCableState) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 18, 1, 0, 1}
}

type Devm_Driver_Pms_Pm_PmStatus int32

const (
	Devm_Driver_Pms_Pm_PmStatus_NORMAL   Devm_Driver_Pms_Pm_PmStatus = 0
	Devm_Driver_Pms_Pm_PmStatus_ABNORMAL Devm_Driver_Pms_Pm_PmStatus = 1
)

// Enum value maps for Devm_Driver_Pms_Pm_PmStatus.
var (
	Devm_Driver_Pms_Pm_PmStatus_name = map[int32]string{
		0: "PmStatus_NORMAL",
		1: "PmStatus_ABNORMAL",
	}
	Devm_Driver_Pms_Pm_PmStatus_value = map[string]int32{
		"PmStatus_NORMAL":   0,
		"PmStatus_ABNORMAL": 1,
	}
)

func (x Devm_Driver_Pms_Pm_PmStatus) Enum() *Devm_Driver_Pms_Pm_PmStatus {
	p := new(Devm_Driver_Pms_Pm_PmStatus)
	*p = x
	return p
}

func (x Devm_Driver_Pms_Pm_PmStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Driver_Pms_Pm_PmStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[314].Descriptor()
}

func (Devm_Driver_Pms_Pm_PmStatus) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[314]
}

func (x Devm_Driver_Pms_Pm_PmStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Driver_Pms_Pm_PmStatus.Descriptor instead.
func (Devm_Driver_Pms_Pm_PmStatus) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 18, 1, 0, 2}
}

type Devm_Driver_Dacss_Dacs_Status int32

const (
	Devm_Driver_Dacss_Dacs_Status_NORMAL   Devm_Driver_Dacss_Dacs_Status = 0
	Devm_Driver_Dacss_Dacs_Status_ABNORMAL Devm_Driver_Dacss_Dacs_Status = 1
)

// Enum value maps for Devm_Driver_Dacss_Dacs_Status.
var (
	Devm_Driver_Dacss_Dacs_Status_name = map[int32]string{
		0: "Status_NORMAL",
		1: "Status_ABNORMAL",
	}
	Devm_Driver_Dacss_Dacs_Status_value = map[string]int32{
		"Status_NORMAL":   0,
		"Status_ABNORMAL": 1,
	}
)

func (x Devm_Driver_Dacss_Dacs_Status) Enum() *Devm_Driver_Dacss_Dacs_Status {
	p := new(Devm_Driver_Dacss_Dacs_Status)
	*p = x
	return p
}

func (x Devm_Driver_Dacss_Dacs_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Driver_Dacss_Dacs_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[315].Descriptor()
}

func (Devm_Driver_Dacss_Dacs_Status) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[315]
}

func (x Devm_Driver_Dacss_Dacs_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Driver_Dacss_Dacs_Status.Descriptor instead.
func (Devm_Driver_Dacss_Dacs_Status) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 18, 3, 0, 0}
}

type Devm_Driver_Fans_Fan_WorkMode int32

const (
	Devm_Driver_Fans_Fan_INVALID_ENUM_VALUE_WorkMode Devm_Driver_Fans_Fan_WorkMode = 0
	Devm_Driver_Fans_Fan_WorkMode_AUTO               Devm_Driver_Fans_Fan_WorkMode = 1
	Devm_Driver_Fans_Fan_WorkMode_MANUAL             Devm_Driver_Fans_Fan_WorkMode = 2
	Devm_Driver_Fans_Fan_WorkMode_SILENT             Devm_Driver_Fans_Fan_WorkMode = 4
	Devm_Driver_Fans_Fan_WorkMode_FULL               Devm_Driver_Fans_Fan_WorkMode = 5
	Devm_Driver_Fans_Fan_WorkMode_MINIMUMX_PERCENT   Devm_Driver_Fans_Fan_WorkMode = 9
	Devm_Driver_Fans_Fan_WorkMode_DENOISE            Devm_Driver_Fans_Fan_WorkMode = 11
)

// Enum value maps for Devm_Driver_Fans_Fan_WorkMode.
var (
	Devm_Driver_Fans_Fan_WorkMode_name = map[int32]string{
		0:  "INVALID_ENUM_VALUE_WorkMode",
		1:  "WorkMode_AUTO",
		2:  "WorkMode_MANUAL",
		4:  "WorkMode_SILENT",
		5:  "WorkMode_FULL",
		9:  "WorkMode_MINIMUMX_PERCENT",
		11: "WorkMode_DENOISE",
	}
	Devm_Driver_Fans_Fan_WorkMode_value = map[string]int32{
		"INVALID_ENUM_VALUE_WorkMode": 0,
		"WorkMode_AUTO":               1,
		"WorkMode_MANUAL":             2,
		"WorkMode_SILENT":             4,
		"WorkMode_FULL":               5,
		"WorkMode_MINIMUMX_PERCENT":   9,
		"WorkMode_DENOISE":            11,
	}
)

func (x Devm_Driver_Fans_Fan_WorkMode) Enum() *Devm_Driver_Fans_Fan_WorkMode {
	p := new(Devm_Driver_Fans_Fan_WorkMode)
	*p = x
	return p
}

func (x Devm_Driver_Fans_Fan_WorkMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Driver_Fans_Fan_WorkMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[316].Descriptor()
}

func (Devm_Driver_Fans_Fan_WorkMode) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[316]
}

func (x Devm_Driver_Fans_Fan_WorkMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Driver_Fans_Fan_WorkMode.Descriptor instead.
func (Devm_Driver_Fans_Fan_WorkMode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 18, 4, 0, 0}
}

type Devm_Driver_Fans_Fan_MonitorCableState int32

const (
	Devm_Driver_Fans_Fan_MonitorCableState_UNX_PLUG Devm_Driver_Fans_Fan_MonitorCableState = 0
	Devm_Driver_Fans_Fan_MonitorCableState_PLUG     Devm_Driver_Fans_Fan_MonitorCableState = 1
)

// Enum value maps for Devm_Driver_Fans_Fan_MonitorCableState.
var (
	Devm_Driver_Fans_Fan_MonitorCableState_name = map[int32]string{
		0: "MonitorCableState_UNX_PLUG",
		1: "MonitorCableState_PLUG",
	}
	Devm_Driver_Fans_Fan_MonitorCableState_value = map[string]int32{
		"MonitorCableState_UNX_PLUG": 0,
		"MonitorCableState_PLUG":     1,
	}
)

func (x Devm_Driver_Fans_Fan_MonitorCableState) Enum() *Devm_Driver_Fans_Fan_MonitorCableState {
	p := new(Devm_Driver_Fans_Fan_MonitorCableState)
	*p = x
	return p
}

func (x Devm_Driver_Fans_Fan_MonitorCableState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Driver_Fans_Fan_MonitorCableState) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[317].Descriptor()
}

func (Devm_Driver_Fans_Fan_MonitorCableState) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[317]
}

func (x Devm_Driver_Fans_Fan_MonitorCableState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Driver_Fans_Fan_MonitorCableState.Descriptor instead.
func (Devm_Driver_Fans_Fan_MonitorCableState) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 18, 4, 0, 1}
}

type Devm_Driver_Fans_Fan_Register int32

const (
	Devm_Driver_Fans_Fan_Register_NO  Devm_Driver_Fans_Fan_Register = 0
	Devm_Driver_Fans_Fan_Register_YES Devm_Driver_Fans_Fan_Register = 1
)

// Enum value maps for Devm_Driver_Fans_Fan_Register.
var (
	Devm_Driver_Fans_Fan_Register_name = map[int32]string{
		0: "Register_NO",
		1: "Register_YES",
	}
	Devm_Driver_Fans_Fan_Register_value = map[string]int32{
		"Register_NO":  0,
		"Register_YES": 1,
	}
)

func (x Devm_Driver_Fans_Fan_Register) Enum() *Devm_Driver_Fans_Fan_Register {
	p := new(Devm_Driver_Fans_Fan_Register)
	*p = x
	return p
}

func (x Devm_Driver_Fans_Fan_Register) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Driver_Fans_Fan_Register) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[318].Descriptor()
}

func (Devm_Driver_Fans_Fan_Register) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[318]
}

func (x Devm_Driver_Fans_Fan_Register) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Driver_Fans_Fan_Register.Descriptor instead.
func (Devm_Driver_Fans_Fan_Register) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 18, 4, 0, 2}
}

type Devm_Driver_Fans_Fan_Present int32

const (
	Devm_Driver_Fans_Fan_Present_NO  Devm_Driver_Fans_Fan_Present = 0
	Devm_Driver_Fans_Fan_Present_YES Devm_Driver_Fans_Fan_Present = 1
)

// Enum value maps for Devm_Driver_Fans_Fan_Present.
var (
	Devm_Driver_Fans_Fan_Present_name = map[int32]string{
		0: "Present_NO",
		1: "Present_YES",
	}
	Devm_Driver_Fans_Fan_Present_value = map[string]int32{
		"Present_NO":  0,
		"Present_YES": 1,
	}
)

func (x Devm_Driver_Fans_Fan_Present) Enum() *Devm_Driver_Fans_Fan_Present {
	p := new(Devm_Driver_Fans_Fan_Present)
	*p = x
	return p
}

func (x Devm_Driver_Fans_Fan_Present) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Driver_Fans_Fan_Present) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[319].Descriptor()
}

func (Devm_Driver_Fans_Fan_Present) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[319]
}

func (x Devm_Driver_Fans_Fan_Present) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Driver_Fans_Fan_Present.Descriptor instead.
func (Devm_Driver_Fans_Fan_Present) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 18, 4, 0, 3}
}

type Devm_Driver_PowerSupplys_PowerSupply_WorkMode int32

const (
	Devm_Driver_PowerSupplys_PowerSupply_INVALID_ENUM_VALUE_WorkMode Devm_Driver_PowerSupplys_PowerSupply_WorkMode = 0
	Devm_Driver_PowerSupplys_PowerSupply_WorkMode_DC                 Devm_Driver_PowerSupplys_PowerSupply_WorkMode = 1
	Devm_Driver_PowerSupplys_PowerSupply_WorkMode_AC                 Devm_Driver_PowerSupplys_PowerSupply_WorkMode = 2
	Devm_Driver_PowerSupplys_PowerSupply_WorkMode_HVDC               Devm_Driver_PowerSupplys_PowerSupply_WorkMode = 3
	Devm_Driver_PowerSupplys_PowerSupply_WorkMode_UNKNOWN            Devm_Driver_PowerSupplys_PowerSupply_WorkMode = 4
)

// Enum value maps for Devm_Driver_PowerSupplys_PowerSupply_WorkMode.
var (
	Devm_Driver_PowerSupplys_PowerSupply_WorkMode_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_WorkMode",
		1: "WorkMode_DC",
		2: "WorkMode_AC",
		3: "WorkMode_HVDC",
		4: "WorkMode_UNKNOWN",
	}
	Devm_Driver_PowerSupplys_PowerSupply_WorkMode_value = map[string]int32{
		"INVALID_ENUM_VALUE_WorkMode": 0,
		"WorkMode_DC":                 1,
		"WorkMode_AC":                 2,
		"WorkMode_HVDC":               3,
		"WorkMode_UNKNOWN":            4,
	}
)

func (x Devm_Driver_PowerSupplys_PowerSupply_WorkMode) Enum() *Devm_Driver_PowerSupplys_PowerSupply_WorkMode {
	p := new(Devm_Driver_PowerSupplys_PowerSupply_WorkMode)
	*p = x
	return p
}

func (x Devm_Driver_PowerSupplys_PowerSupply_WorkMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Driver_PowerSupplys_PowerSupply_WorkMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[320].Descriptor()
}

func (Devm_Driver_PowerSupplys_PowerSupply_WorkMode) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[320]
}

func (x Devm_Driver_PowerSupplys_PowerSupply_WorkMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Driver_PowerSupplys_PowerSupply_WorkMode.Descriptor instead.
func (Devm_Driver_PowerSupplys_PowerSupply_WorkMode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 18, 7, 0, 0}
}

type Devm_Driver_PowerSupplys_PowerSupply_MonitorCableState int32

const (
	Devm_Driver_PowerSupplys_PowerSupply_MonitorCableState_UNX_PLUG Devm_Driver_PowerSupplys_PowerSupply_MonitorCableState = 0
	Devm_Driver_PowerSupplys_PowerSupply_MonitorCableState_PLUG     Devm_Driver_PowerSupplys_PowerSupply_MonitorCableState = 1
)

// Enum value maps for Devm_Driver_PowerSupplys_PowerSupply_MonitorCableState.
var (
	Devm_Driver_PowerSupplys_PowerSupply_MonitorCableState_name = map[int32]string{
		0: "MonitorCableState_UNX_PLUG",
		1: "MonitorCableState_PLUG",
	}
	Devm_Driver_PowerSupplys_PowerSupply_MonitorCableState_value = map[string]int32{
		"MonitorCableState_UNX_PLUG": 0,
		"MonitorCableState_PLUG":     1,
	}
)

func (x Devm_Driver_PowerSupplys_PowerSupply_MonitorCableState) Enum() *Devm_Driver_PowerSupplys_PowerSupply_MonitorCableState {
	p := new(Devm_Driver_PowerSupplys_PowerSupply_MonitorCableState)
	*p = x
	return p
}

func (x Devm_Driver_PowerSupplys_PowerSupply_MonitorCableState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Driver_PowerSupplys_PowerSupply_MonitorCableState) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[321].Descriptor()
}

func (Devm_Driver_PowerSupplys_PowerSupply_MonitorCableState) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[321]
}

func (x Devm_Driver_PowerSupplys_PowerSupply_MonitorCableState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Driver_PowerSupplys_PowerSupply_MonitorCableState.Descriptor instead.
func (Devm_Driver_PowerSupplys_PowerSupply_MonitorCableState) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 18, 7, 0, 1}
}

type Devm_Driver_Pdus_Pdu_WorkMode int32

const (
	Devm_Driver_Pdus_Pdu_INVALID_ENUM_VALUE_WorkMode Devm_Driver_Pdus_Pdu_WorkMode = 0
	Devm_Driver_Pdus_Pdu_WorkMode_DC                 Devm_Driver_Pdus_Pdu_WorkMode = 1
	Devm_Driver_Pdus_Pdu_WorkMode_AC                 Devm_Driver_Pdus_Pdu_WorkMode = 2
	Devm_Driver_Pdus_Pdu_WorkMode_HVDC               Devm_Driver_Pdus_Pdu_WorkMode = 3
	Devm_Driver_Pdus_Pdu_WorkMode_UNKNOWN            Devm_Driver_Pdus_Pdu_WorkMode = 4
)

// Enum value maps for Devm_Driver_Pdus_Pdu_WorkMode.
var (
	Devm_Driver_Pdus_Pdu_WorkMode_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_WorkMode",
		1: "WorkMode_DC",
		2: "WorkMode_AC",
		3: "WorkMode_HVDC",
		4: "WorkMode_UNKNOWN",
	}
	Devm_Driver_Pdus_Pdu_WorkMode_value = map[string]int32{
		"INVALID_ENUM_VALUE_WorkMode": 0,
		"WorkMode_DC":                 1,
		"WorkMode_AC":                 2,
		"WorkMode_HVDC":               3,
		"WorkMode_UNKNOWN":            4,
	}
)

func (x Devm_Driver_Pdus_Pdu_WorkMode) Enum() *Devm_Driver_Pdus_Pdu_WorkMode {
	p := new(Devm_Driver_Pdus_Pdu_WorkMode)
	*p = x
	return p
}

func (x Devm_Driver_Pdus_Pdu_WorkMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Driver_Pdus_Pdu_WorkMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[322].Descriptor()
}

func (Devm_Driver_Pdus_Pdu_WorkMode) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[322]
}

func (x Devm_Driver_Pdus_Pdu_WorkMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Driver_Pdus_Pdu_WorkMode.Descriptor instead.
func (Devm_Driver_Pdus_Pdu_WorkMode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 18, 9, 0, 0}
}

type Devm_Driver_Vsus_Vsu_ServiceType int32

const (
	Devm_Driver_Vsus_Vsu_INVALID_ENUM_VALUE_ServiceType Devm_Driver_Vsus_Vsu_ServiceType = 0
	Devm_Driver_Vsus_Vsu_ServiceType_CGN                Devm_Driver_Vsus_Vsu_ServiceType = 1
	Devm_Driver_Vsus_Vsu_ServiceType_QOE                Devm_Driver_Vsus_Vsu_ServiceType = 3
)

// Enum value maps for Devm_Driver_Vsus_Vsu_ServiceType.
var (
	Devm_Driver_Vsus_Vsu_ServiceType_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_ServiceType",
		1: "ServiceType_CGN",
		3: "ServiceType_QOE",
	}
	Devm_Driver_Vsus_Vsu_ServiceType_value = map[string]int32{
		"INVALID_ENUM_VALUE_ServiceType": 0,
		"ServiceType_CGN":                1,
		"ServiceType_QOE":                3,
	}
)

func (x Devm_Driver_Vsus_Vsu_ServiceType) Enum() *Devm_Driver_Vsus_Vsu_ServiceType {
	p := new(Devm_Driver_Vsus_Vsu_ServiceType)
	*p = x
	return p
}

func (x Devm_Driver_Vsus_Vsu_ServiceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Driver_Vsus_Vsu_ServiceType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[323].Descriptor()
}

func (Devm_Driver_Vsus_Vsu_ServiceType) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[323]
}

func (x Devm_Driver_Vsus_Vsu_ServiceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Driver_Vsus_Vsu_ServiceType.Descriptor instead.
func (Devm_Driver_Vsus_Vsu_ServiceType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 18, 10, 0, 0}
}

type Devm_Driver_Disks_Disk_Type int32

const (
	Devm_Driver_Disks_Disk_Type_HARDX_DISK        Devm_Driver_Disks_Disk_Type = 0
	Devm_Driver_Disks_Disk_Type_USBX_FLASHX_DRIVE Devm_Driver_Disks_Disk_Type = 1
)

// Enum value maps for Devm_Driver_Disks_Disk_Type.
var (
	Devm_Driver_Disks_Disk_Type_name = map[int32]string{
		0: "Type_HARDX_DISK",
		1: "Type_USBX_FLASHX_DRIVE",
	}
	Devm_Driver_Disks_Disk_Type_value = map[string]int32{
		"Type_HARDX_DISK":        0,
		"Type_USBX_FLASHX_DRIVE": 1,
	}
)

func (x Devm_Driver_Disks_Disk_Type) Enum() *Devm_Driver_Disks_Disk_Type {
	p := new(Devm_Driver_Disks_Disk_Type)
	*p = x
	return p
}

func (x Devm_Driver_Disks_Disk_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_Driver_Disks_Disk_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[324].Descriptor()
}

func (Devm_Driver_Disks_Disk_Type) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[324]
}

func (x Devm_Driver_Disks_Disk_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_Driver_Disks_Disk_Type.Descriptor instead.
func (Devm_Driver_Disks_Disk_Type) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 18, 13, 0, 0}
}

type Devm_RemotePorts_RemotePort_LoopbackMode int32

const (
	Devm_RemotePorts_RemotePort_LoopbackMode_NOLOOPBACK     Devm_RemotePorts_RemotePort_LoopbackMode = 0
	Devm_RemotePorts_RemotePort_LoopbackMode_LOCALLOOPBACK  Devm_RemotePorts_RemotePort_LoopbackMode = 1
	Devm_RemotePorts_RemotePort_LoopbackMode_REMOTELOOPBACK Devm_RemotePorts_RemotePort_LoopbackMode = 2
)

// Enum value maps for Devm_RemotePorts_RemotePort_LoopbackMode.
var (
	Devm_RemotePorts_RemotePort_LoopbackMode_name = map[int32]string{
		0: "LoopbackMode_NOLOOPBACK",
		1: "LoopbackMode_LOCALLOOPBACK",
		2: "LoopbackMode_REMOTELOOPBACK",
	}
	Devm_RemotePorts_RemotePort_LoopbackMode_value = map[string]int32{
		"LoopbackMode_NOLOOPBACK":     0,
		"LoopbackMode_LOCALLOOPBACK":  1,
		"LoopbackMode_REMOTELOOPBACK": 2,
	}
)

func (x Devm_RemotePorts_RemotePort_LoopbackMode) Enum() *Devm_RemotePorts_RemotePort_LoopbackMode {
	p := new(Devm_RemotePorts_RemotePort_LoopbackMode)
	*p = x
	return p
}

func (x Devm_RemotePorts_RemotePort_LoopbackMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_RemotePorts_RemotePort_LoopbackMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[325].Descriptor()
}

func (Devm_RemotePorts_RemotePort_LoopbackMode) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[325]
}

func (x Devm_RemotePorts_RemotePort_LoopbackMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_RemotePorts_RemotePort_LoopbackMode.Descriptor instead.
func (Devm_RemotePorts_RemotePort_LoopbackMode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 27, 0, 0}
}

type Devm_RemotePorts_RemotePort_Ethernet_FlowControl int32

const (
	Devm_RemotePorts_RemotePort_Ethernet_FlowControl_ALLX_DISABLE    Devm_RemotePorts_RemotePort_Ethernet_FlowControl = 0
	Devm_RemotePorts_RemotePort_Ethernet_FlowControl_RECEIVEX_ENABLE Devm_RemotePorts_RemotePort_Ethernet_FlowControl = 1
	Devm_RemotePorts_RemotePort_Ethernet_FlowControl_SENDX_ENABLE    Devm_RemotePorts_RemotePort_Ethernet_FlowControl = 2
	Devm_RemotePorts_RemotePort_Ethernet_FlowControl_ALLX_ENABLE     Devm_RemotePorts_RemotePort_Ethernet_FlowControl = 3
)

// Enum value maps for Devm_RemotePorts_RemotePort_Ethernet_FlowControl.
var (
	Devm_RemotePorts_RemotePort_Ethernet_FlowControl_name = map[int32]string{
		0: "FlowControl_ALLX_DISABLE",
		1: "FlowControl_RECEIVEX_ENABLE",
		2: "FlowControl_SENDX_ENABLE",
		3: "FlowControl_ALLX_ENABLE",
	}
	Devm_RemotePorts_RemotePort_Ethernet_FlowControl_value = map[string]int32{
		"FlowControl_ALLX_DISABLE":    0,
		"FlowControl_RECEIVEX_ENABLE": 1,
		"FlowControl_SENDX_ENABLE":    2,
		"FlowControl_ALLX_ENABLE":     3,
	}
)

func (x Devm_RemotePorts_RemotePort_Ethernet_FlowControl) Enum() *Devm_RemotePorts_RemotePort_Ethernet_FlowControl {
	p := new(Devm_RemotePorts_RemotePort_Ethernet_FlowControl)
	*p = x
	return p
}

func (x Devm_RemotePorts_RemotePort_Ethernet_FlowControl) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_RemotePorts_RemotePort_Ethernet_FlowControl) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[326].Descriptor()
}

func (Devm_RemotePorts_RemotePort_Ethernet_FlowControl) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[326]
}

func (x Devm_RemotePorts_RemotePort_Ethernet_FlowControl) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_RemotePorts_RemotePort_Ethernet_FlowControl.Descriptor instead.
func (Devm_RemotePorts_RemotePort_Ethernet_FlowControl) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 27, 0, 0, 0}
}

type Devm_RemotePorts_RemotePort_Ethernet_TransMode int32

const (
	Devm_RemotePorts_RemotePort_Ethernet_TransMode_LANX_MODE Devm_RemotePorts_RemotePort_Ethernet_TransMode = 0
	Devm_RemotePorts_RemotePort_Ethernet_TransMode_WANX_MODE Devm_RemotePorts_RemotePort_Ethernet_TransMode = 1
)

// Enum value maps for Devm_RemotePorts_RemotePort_Ethernet_TransMode.
var (
	Devm_RemotePorts_RemotePort_Ethernet_TransMode_name = map[int32]string{
		0: "TransMode_LANX_MODE",
		1: "TransMode_WANX_MODE",
	}
	Devm_RemotePorts_RemotePort_Ethernet_TransMode_value = map[string]int32{
		"TransMode_LANX_MODE": 0,
		"TransMode_WANX_MODE": 1,
	}
)

func (x Devm_RemotePorts_RemotePort_Ethernet_TransMode) Enum() *Devm_RemotePorts_RemotePort_Ethernet_TransMode {
	p := new(Devm_RemotePorts_RemotePort_Ethernet_TransMode)
	*p = x
	return p
}

func (x Devm_RemotePorts_RemotePort_Ethernet_TransMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_RemotePorts_RemotePort_Ethernet_TransMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[327].Descriptor()
}

func (Devm_RemotePorts_RemotePort_Ethernet_TransMode) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[327]
}

func (x Devm_RemotePorts_RemotePort_Ethernet_TransMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_RemotePorts_RemotePort_Ethernet_TransMode.Descriptor instead.
func (Devm_RemotePorts_RemotePort_Ethernet_TransMode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 27, 0, 0, 1}
}

type Devm_RemotePorts_RemotePort_Ethernet_HoldUp int32

const (
	Devm_RemotePorts_RemotePort_Ethernet_HoldUp_DISABLE Devm_RemotePorts_RemotePort_Ethernet_HoldUp = 0
	Devm_RemotePorts_RemotePort_Ethernet_HoldUp_ENABLE  Devm_RemotePorts_RemotePort_Ethernet_HoldUp = 1
)

// Enum value maps for Devm_RemotePorts_RemotePort_Ethernet_HoldUp.
var (
	Devm_RemotePorts_RemotePort_Ethernet_HoldUp_name = map[int32]string{
		0: "HoldUp_DISABLE",
		1: "HoldUp_ENABLE",
	}
	Devm_RemotePorts_RemotePort_Ethernet_HoldUp_value = map[string]int32{
		"HoldUp_DISABLE": 0,
		"HoldUp_ENABLE":  1,
	}
)

func (x Devm_RemotePorts_RemotePort_Ethernet_HoldUp) Enum() *Devm_RemotePorts_RemotePort_Ethernet_HoldUp {
	p := new(Devm_RemotePorts_RemotePort_Ethernet_HoldUp)
	*p = x
	return p
}

func (x Devm_RemotePorts_RemotePort_Ethernet_HoldUp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_RemotePorts_RemotePort_Ethernet_HoldUp) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[328].Descriptor()
}

func (Devm_RemotePorts_RemotePort_Ethernet_HoldUp) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[328]
}

func (x Devm_RemotePorts_RemotePort_Ethernet_HoldUp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_RemotePorts_RemotePort_Ethernet_HoldUp.Descriptor instead.
func (Devm_RemotePorts_RemotePort_Ethernet_HoldUp) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 27, 0, 0, 2}
}

type Devm_RemotePorts_RemotePort_Ethernet_InterPacketGap int32

const (
	Devm_RemotePorts_RemotePort_Ethernet_InterPacketGap_SHRINK      Devm_RemotePorts_RemotePort_Ethernet_InterPacketGap = 0
	Devm_RemotePorts_RemotePort_Ethernet_InterPacketGap_NONX_SHRINK Devm_RemotePorts_RemotePort_Ethernet_InterPacketGap = 1
)

// Enum value maps for Devm_RemotePorts_RemotePort_Ethernet_InterPacketGap.
var (
	Devm_RemotePorts_RemotePort_Ethernet_InterPacketGap_name = map[int32]string{
		0: "InterPacketGap_SHRINK",
		1: "InterPacketGap_NONX_SHRINK",
	}
	Devm_RemotePorts_RemotePort_Ethernet_InterPacketGap_value = map[string]int32{
		"InterPacketGap_SHRINK":      0,
		"InterPacketGap_NONX_SHRINK": 1,
	}
)

func (x Devm_RemotePorts_RemotePort_Ethernet_InterPacketGap) Enum() *Devm_RemotePorts_RemotePort_Ethernet_InterPacketGap {
	p := new(Devm_RemotePorts_RemotePort_Ethernet_InterPacketGap)
	*p = x
	return p
}

func (x Devm_RemotePorts_RemotePort_Ethernet_InterPacketGap) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_RemotePorts_RemotePort_Ethernet_InterPacketGap) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[329].Descriptor()
}

func (Devm_RemotePorts_RemotePort_Ethernet_InterPacketGap) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[329]
}

func (x Devm_RemotePorts_RemotePort_Ethernet_InterPacketGap) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_RemotePorts_RemotePort_Ethernet_InterPacketGap.Descriptor instead.
func (Devm_RemotePorts_RemotePort_Ethernet_InterPacketGap) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 27, 0, 0, 3}
}

type Devm_RemotePorts_RemotePort_Ethernet_Speed int32

const (
	Devm_RemotePorts_RemotePort_Ethernet_Speed_X_10M   Devm_RemotePorts_RemotePort_Ethernet_Speed = 0
	Devm_RemotePorts_RemotePort_Ethernet_Speed_X_100M  Devm_RemotePorts_RemotePort_Ethernet_Speed = 1
	Devm_RemotePorts_RemotePort_Ethernet_Speed_X_1000M Devm_RemotePorts_RemotePort_Ethernet_Speed = 3
	Devm_RemotePorts_RemotePort_Ethernet_Speed_AUTO    Devm_RemotePorts_RemotePort_Ethernet_Speed = 9
)

// Enum value maps for Devm_RemotePorts_RemotePort_Ethernet_Speed.
var (
	Devm_RemotePorts_RemotePort_Ethernet_Speed_name = map[int32]string{
		0: "Speed_X_10M",
		1: "Speed_X_100M",
		3: "Speed_X_1000M",
		9: "Speed_AUTO",
	}
	Devm_RemotePorts_RemotePort_Ethernet_Speed_value = map[string]int32{
		"Speed_X_10M":   0,
		"Speed_X_100M":  1,
		"Speed_X_1000M": 3,
		"Speed_AUTO":    9,
	}
)

func (x Devm_RemotePorts_RemotePort_Ethernet_Speed) Enum() *Devm_RemotePorts_RemotePort_Ethernet_Speed {
	p := new(Devm_RemotePorts_RemotePort_Ethernet_Speed)
	*p = x
	return p
}

func (x Devm_RemotePorts_RemotePort_Ethernet_Speed) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_RemotePorts_RemotePort_Ethernet_Speed) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[330].Descriptor()
}

func (Devm_RemotePorts_RemotePort_Ethernet_Speed) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[330]
}

func (x Devm_RemotePorts_RemotePort_Ethernet_Speed) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_RemotePorts_RemotePort_Ethernet_Speed.Descriptor instead.
func (Devm_RemotePorts_RemotePort_Ethernet_Speed) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 27, 0, 0, 4}
}

type Devm_RemotePorts_RemotePort_Ethernet_Duplex int32

const (
	Devm_RemotePorts_RemotePort_Ethernet_Duplex_AUTO Devm_RemotePorts_RemotePort_Ethernet_Duplex = 0
	Devm_RemotePorts_RemotePort_Ethernet_Duplex_HALF Devm_RemotePorts_RemotePort_Ethernet_Duplex = 1
	Devm_RemotePorts_RemotePort_Ethernet_Duplex_FULL Devm_RemotePorts_RemotePort_Ethernet_Duplex = 2
)

// Enum value maps for Devm_RemotePorts_RemotePort_Ethernet_Duplex.
var (
	Devm_RemotePorts_RemotePort_Ethernet_Duplex_name = map[int32]string{
		0: "Duplex_AUTO",
		1: "Duplex_HALF",
		2: "Duplex_FULL",
	}
	Devm_RemotePorts_RemotePort_Ethernet_Duplex_value = map[string]int32{
		"Duplex_AUTO": 0,
		"Duplex_HALF": 1,
		"Duplex_FULL": 2,
	}
)

func (x Devm_RemotePorts_RemotePort_Ethernet_Duplex) Enum() *Devm_RemotePorts_RemotePort_Ethernet_Duplex {
	p := new(Devm_RemotePorts_RemotePort_Ethernet_Duplex)
	*p = x
	return p
}

func (x Devm_RemotePorts_RemotePort_Ethernet_Duplex) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_RemotePorts_RemotePort_Ethernet_Duplex) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[331].Descriptor()
}

func (Devm_RemotePorts_RemotePort_Ethernet_Duplex) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[331]
}

func (x Devm_RemotePorts_RemotePort_Ethernet_Duplex) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_RemotePorts_RemotePort_Ethernet_Duplex.Descriptor instead.
func (Devm_RemotePorts_RemotePort_Ethernet_Duplex) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 27, 0, 0, 5}
}

type Devm_RemotePorts_RemotePort_Ethernet_Negotiation int32

const (
	Devm_RemotePorts_RemotePort_Ethernet_Negotiation_DISABLE Devm_RemotePorts_RemotePort_Ethernet_Negotiation = 0
	Devm_RemotePorts_RemotePort_Ethernet_Negotiation_ENABLE  Devm_RemotePorts_RemotePort_Ethernet_Negotiation = 1
	Devm_RemotePorts_RemotePort_Ethernet_Negotiation_DEFAULT Devm_RemotePorts_RemotePort_Ethernet_Negotiation = 255
)

// Enum value maps for Devm_RemotePorts_RemotePort_Ethernet_Negotiation.
var (
	Devm_RemotePorts_RemotePort_Ethernet_Negotiation_name = map[int32]string{
		0:   "Negotiation_DISABLE",
		1:   "Negotiation_ENABLE",
		255: "Negotiation_DEFAULT",
	}
	Devm_RemotePorts_RemotePort_Ethernet_Negotiation_value = map[string]int32{
		"Negotiation_DISABLE": 0,
		"Negotiation_ENABLE":  1,
		"Negotiation_DEFAULT": 255,
	}
)

func (x Devm_RemotePorts_RemotePort_Ethernet_Negotiation) Enum() *Devm_RemotePorts_RemotePort_Ethernet_Negotiation {
	p := new(Devm_RemotePorts_RemotePort_Ethernet_Negotiation)
	*p = x
	return p
}

func (x Devm_RemotePorts_RemotePort_Ethernet_Negotiation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_RemotePorts_RemotePort_Ethernet_Negotiation) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[332].Descriptor()
}

func (Devm_RemotePorts_RemotePort_Ethernet_Negotiation) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[332]
}

func (x Devm_RemotePorts_RemotePort_Ethernet_Negotiation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_RemotePorts_RemotePort_Ethernet_Negotiation.Descriptor instead.
func (Devm_RemotePorts_RemotePort_Ethernet_Negotiation) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 27, 0, 0, 6}
}

type Devm_RemotePorts_RemotePort_Ethernet_NegotiationMode int32

const (
	Devm_RemotePorts_RemotePort_Ethernet_NegotiationMode_SLAVE  Devm_RemotePorts_RemotePort_Ethernet_NegotiationMode = 0
	Devm_RemotePorts_RemotePort_Ethernet_NegotiationMode_MASTER Devm_RemotePorts_RemotePort_Ethernet_NegotiationMode = 1
)

// Enum value maps for Devm_RemotePorts_RemotePort_Ethernet_NegotiationMode.
var (
	Devm_RemotePorts_RemotePort_Ethernet_NegotiationMode_name = map[int32]string{
		0: "NegotiationMode_SLAVE",
		1: "NegotiationMode_MASTER",
	}
	Devm_RemotePorts_RemotePort_Ethernet_NegotiationMode_value = map[string]int32{
		"NegotiationMode_SLAVE":  0,
		"NegotiationMode_MASTER": 1,
	}
)

func (x Devm_RemotePorts_RemotePort_Ethernet_NegotiationMode) Enum() *Devm_RemotePorts_RemotePort_Ethernet_NegotiationMode {
	p := new(Devm_RemotePorts_RemotePort_Ethernet_NegotiationMode)
	*p = x
	return p
}

func (x Devm_RemotePorts_RemotePort_Ethernet_NegotiationMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_RemotePorts_RemotePort_Ethernet_NegotiationMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[333].Descriptor()
}

func (Devm_RemotePorts_RemotePort_Ethernet_NegotiationMode) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[333]
}

func (x Devm_RemotePorts_RemotePort_Ethernet_NegotiationMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_RemotePorts_RemotePort_Ethernet_NegotiationMode.Descriptor instead.
func (Devm_RemotePorts_RemotePort_Ethernet_NegotiationMode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 27, 0, 0, 7}
}

type Devm_RemotePorts_RemotePort_Ethernet_GfMediaType int32

const (
	Devm_RemotePorts_RemotePort_Ethernet_GfMediaType_AUTO      Devm_RemotePorts_RemotePort_Ethernet_GfMediaType = 0
	Devm_RemotePorts_RemotePort_Ethernet_GfMediaType_FIBER1000 Devm_RemotePorts_RemotePort_Ethernet_GfMediaType = 1
	Devm_RemotePorts_RemotePort_Ethernet_GfMediaType_FIBER100  Devm_RemotePorts_RemotePort_Ethernet_GfMediaType = 2
	Devm_RemotePorts_RemotePort_Ethernet_GfMediaType_COPPER    Devm_RemotePorts_RemotePort_Ethernet_GfMediaType = 3
)

// Enum value maps for Devm_RemotePorts_RemotePort_Ethernet_GfMediaType.
var (
	Devm_RemotePorts_RemotePort_Ethernet_GfMediaType_name = map[int32]string{
		0: "GfMediaType_AUTO",
		1: "GfMediaType_FIBER1000",
		2: "GfMediaType_FIBER100",
		3: "GfMediaType_COPPER",
	}
	Devm_RemotePorts_RemotePort_Ethernet_GfMediaType_value = map[string]int32{
		"GfMediaType_AUTO":      0,
		"GfMediaType_FIBER1000": 1,
		"GfMediaType_FIBER100":  2,
		"GfMediaType_COPPER":    3,
	}
)

func (x Devm_RemotePorts_RemotePort_Ethernet_GfMediaType) Enum() *Devm_RemotePorts_RemotePort_Ethernet_GfMediaType {
	p := new(Devm_RemotePorts_RemotePort_Ethernet_GfMediaType)
	*p = x
	return p
}

func (x Devm_RemotePorts_RemotePort_Ethernet_GfMediaType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_RemotePorts_RemotePort_Ethernet_GfMediaType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[334].Descriptor()
}

func (Devm_RemotePorts_RemotePort_Ethernet_GfMediaType) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[334]
}

func (x Devm_RemotePorts_RemotePort_Ethernet_GfMediaType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_RemotePorts_RemotePort_Ethernet_GfMediaType.Descriptor instead.
func (Devm_RemotePorts_RemotePort_Ethernet_GfMediaType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 27, 0, 0, 8}
}

type Devm_RemotePorts_RemotePort_Ethernet_FlowControlState int32

const (
	Devm_RemotePorts_RemotePort_Ethernet_FlowControlState_ALLX_DISABLE    Devm_RemotePorts_RemotePort_Ethernet_FlowControlState = 0
	Devm_RemotePorts_RemotePort_Ethernet_FlowControlState_RECEIVEX_ENABLE Devm_RemotePorts_RemotePort_Ethernet_FlowControlState = 1
	Devm_RemotePorts_RemotePort_Ethernet_FlowControlState_SENDX_ENABLE    Devm_RemotePorts_RemotePort_Ethernet_FlowControlState = 2
	Devm_RemotePorts_RemotePort_Ethernet_FlowControlState_ALLX_ENABLE     Devm_RemotePorts_RemotePort_Ethernet_FlowControlState = 3
)

// Enum value maps for Devm_RemotePorts_RemotePort_Ethernet_FlowControlState.
var (
	Devm_RemotePorts_RemotePort_Ethernet_FlowControlState_name = map[int32]string{
		0: "FlowControlState_ALLX_DISABLE",
		1: "FlowControlState_RECEIVEX_ENABLE",
		2: "FlowControlState_SENDX_ENABLE",
		3: "FlowControlState_ALLX_ENABLE",
	}
	Devm_RemotePorts_RemotePort_Ethernet_FlowControlState_value = map[string]int32{
		"FlowControlState_ALLX_DISABLE":    0,
		"FlowControlState_RECEIVEX_ENABLE": 1,
		"FlowControlState_SENDX_ENABLE":    2,
		"FlowControlState_ALLX_ENABLE":     3,
	}
)

func (x Devm_RemotePorts_RemotePort_Ethernet_FlowControlState) Enum() *Devm_RemotePorts_RemotePort_Ethernet_FlowControlState {
	p := new(Devm_RemotePorts_RemotePort_Ethernet_FlowControlState)
	*p = x
	return p
}

func (x Devm_RemotePorts_RemotePort_Ethernet_FlowControlState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_RemotePorts_RemotePort_Ethernet_FlowControlState) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[335].Descriptor()
}

func (Devm_RemotePorts_RemotePort_Ethernet_FlowControlState) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[335]
}

func (x Devm_RemotePorts_RemotePort_Ethernet_FlowControlState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_RemotePorts_RemotePort_Ethernet_FlowControlState.Descriptor instead.
func (Devm_RemotePorts_RemotePort_Ethernet_FlowControlState) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 27, 0, 0, 9}
}

type Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_FrameFormat int32

const (
	Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_FrameFormat_SDH   Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_FrameFormat = 0
	Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_FrameFormat_SONET Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_FrameFormat = 1
)

// Enum value maps for Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_FrameFormat.
var (
	Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_FrameFormat_name = map[int32]string{
		0: "FrameFormat_SDH",
		1: "FrameFormat_SONET",
	}
	Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_FrameFormat_value = map[string]int32{
		"FrameFormat_SDH":   0,
		"FrameFormat_SONET": 1,
	}
)

func (x Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_FrameFormat) Enum() *Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_FrameFormat {
	p := new(Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_FrameFormat)
	*p = x
	return p
}

func (x Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_FrameFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_FrameFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[336].Descriptor()
}

func (Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_FrameFormat) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[336]
}

func (x Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_FrameFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_FrameFormat.Descriptor instead.
func (Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_FrameFormat) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 27, 0, 0, 0, 0}
}

type Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_J0Mode int32

const (
	Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_INVALID_ENUM_VALUE_J0Mode       Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_J0Mode = 0
	Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_J0Mode_X_1BYTE                  Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_J0Mode = 1
	Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_J0Mode_X_16BYTE                 Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_J0Mode = 16
	Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_J0Mode_X_64BYTEX_ORX_NULLX_MODE Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_J0Mode = 64
)

// Enum value maps for Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_J0Mode.
var (
	Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_J0Mode_name = map[int32]string{
		0:  "INVALID_ENUM_VALUE_J0Mode",
		1:  "J0Mode_X_1BYTE",
		16: "J0Mode_X_16BYTE",
		64: "J0Mode_X_64BYTEX_ORX_NULLX_MODE",
	}
	Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_J0Mode_value = map[string]int32{
		"INVALID_ENUM_VALUE_J0Mode":       0,
		"J0Mode_X_1BYTE":                  1,
		"J0Mode_X_16BYTE":                 16,
		"J0Mode_X_64BYTEX_ORX_NULLX_MODE": 64,
	}
)

func (x Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_J0Mode) Enum() *Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_J0Mode {
	p := new(Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_J0Mode)
	*p = x
	return p
}

func (x Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_J0Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_J0Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[337].Descriptor()
}

func (Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_J0Mode) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[337]
}

func (x Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_J0Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_J0Mode.Descriptor instead.
func (Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_J0Mode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 27, 0, 0, 0, 1}
}

type Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_J1Mode int32

const (
	Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_INVALID_ENUM_VALUE_J1Mode       Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_J1Mode = 0
	Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_J1Mode_X_1BYTE                  Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_J1Mode = 1
	Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_J1Mode_X_16BYTE                 Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_J1Mode = 16
	Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_J1Mode_X_64BYTEX_ORX_NULLX_MODE Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_J1Mode = 64
)

// Enum value maps for Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_J1Mode.
var (
	Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_J1Mode_name = map[int32]string{
		0:  "INVALID_ENUM_VALUE_J1Mode",
		1:  "J1Mode_X_1BYTE",
		16: "J1Mode_X_16BYTE",
		64: "J1Mode_X_64BYTEX_ORX_NULLX_MODE",
	}
	Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_J1Mode_value = map[string]int32{
		"INVALID_ENUM_VALUE_J1Mode":       0,
		"J1Mode_X_1BYTE":                  1,
		"J1Mode_X_16BYTE":                 16,
		"J1Mode_X_64BYTEX_ORX_NULLX_MODE": 64,
	}
)

func (x Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_J1Mode) Enum() *Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_J1Mode {
	p := new(Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_J1Mode)
	*p = x
	return p
}

func (x Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_J1Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_J1Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[338].Descriptor()
}

func (Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_J1Mode) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[338]
}

func (x Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_J1Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_J1Mode.Descriptor instead.
func (Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_J1Mode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 27, 0, 0, 0, 2}
}

type Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_Clock int32

const (
	Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_Clock_MASTER Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_Clock = 0
	Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_Clock_SLAVE  Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_Clock = 1
)

// Enum value maps for Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_Clock.
var (
	Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_Clock_name = map[int32]string{
		0: "Clock_MASTER",
		1: "Clock_SLAVE",
	}
	Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_Clock_value = map[string]int32{
		"Clock_MASTER": 0,
		"Clock_SLAVE":  1,
	}
)

func (x Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_Clock) Enum() *Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_Clock {
	p := new(Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_Clock)
	*p = x
	return p
}

func (x Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_Clock) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_Clock) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[339].Descriptor()
}

func (Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_Clock) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[339]
}

func (x Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_Clock) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_Clock.Descriptor instead.
func (Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_Clock) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 27, 0, 0, 0, 3}
}

type Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_Scramble int32

const (
	Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_Scramble_DISABLE Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_Scramble = 0
	Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_Scramble_ENABLE  Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_Scramble = 3
)

// Enum value maps for Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_Scramble.
var (
	Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_Scramble_name = map[int32]string{
		0: "Scramble_DISABLE",
		3: "Scramble_ENABLE",
	}
	Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_Scramble_value = map[string]int32{
		"Scramble_DISABLE": 0,
		"Scramble_ENABLE":  3,
	}
)

func (x Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_Scramble) Enum() *Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_Scramble {
	p := new(Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_Scramble)
	*p = x
	return p
}

func (x Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_Scramble) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_Scramble) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[340].Descriptor()
}

func (Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_Scramble) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[340]
}

func (x Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_Scramble) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_Scramble.Descriptor instead.
func (Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_Scramble) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 27, 0, 0, 0, 4}
}

type Devm_RemotePorts_RemotePort_Laser_AutoShutEnable int32

const (
	Devm_RemotePorts_RemotePort_Laser_AutoShutEnable_DISABLE Devm_RemotePorts_RemotePort_Laser_AutoShutEnable = 0
	Devm_RemotePorts_RemotePort_Laser_AutoShutEnable_ENABLE  Devm_RemotePorts_RemotePort_Laser_AutoShutEnable = 1
)

// Enum value maps for Devm_RemotePorts_RemotePort_Laser_AutoShutEnable.
var (
	Devm_RemotePorts_RemotePort_Laser_AutoShutEnable_name = map[int32]string{
		0: "AutoShutEnable_DISABLE",
		1: "AutoShutEnable_ENABLE",
	}
	Devm_RemotePorts_RemotePort_Laser_AutoShutEnable_value = map[string]int32{
		"AutoShutEnable_DISABLE": 0,
		"AutoShutEnable_ENABLE":  1,
	}
)

func (x Devm_RemotePorts_RemotePort_Laser_AutoShutEnable) Enum() *Devm_RemotePorts_RemotePort_Laser_AutoShutEnable {
	p := new(Devm_RemotePorts_RemotePort_Laser_AutoShutEnable)
	*p = x
	return p
}

func (x Devm_RemotePorts_RemotePort_Laser_AutoShutEnable) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_RemotePorts_RemotePort_Laser_AutoShutEnable) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[341].Descriptor()
}

func (Devm_RemotePorts_RemotePort_Laser_AutoShutEnable) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[341]
}

func (x Devm_RemotePorts_RemotePort_Laser_AutoShutEnable) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_RemotePorts_RemotePort_Laser_AutoShutEnable.Descriptor instead.
func (Devm_RemotePorts_RemotePort_Laser_AutoShutEnable) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 27, 0, 1, 0}
}

type Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber int32

const (
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_196X_10THZX_1528X_773NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 0
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_196X_05THZX_1529X_163NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 1
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_196X_00THZX_1529X_553NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 2
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_195X_95THZX_1529X_944NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 3
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_195X_90THZX_1530X_334NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 4
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_195X_85THZX_1530X_725NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 5
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_195X_80THZX_1531X_116NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 6
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_195X_75THZX_1531X_507NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 7
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_195X_70THZX_1531X_898NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 8
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_195X_65THZX_1532X_290NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 9
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_195X_60THZX_1532X_681NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 10
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_195X_55THZX_1533X_073NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 11
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_195X_50THZX_1533X_465NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 12
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_195X_45THZX_1533X_858NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 13
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_195X_40THZX_1534X_250NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 14
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_195X_35THZX_1534X_643NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 15
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_195X_30THZX_1535X_036NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 16
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_195X_25THZX_1535X_429NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 17
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_195X_20THZX_1535X_822NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 18
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_195X_15THZX_1536X_216NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 19
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_195X_10THZX_1536X_609NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 20
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_195X_05THZX_1537X_003NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 21
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_195X_00THZX_1537X_397NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 22
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_194X_95THZX_1537X_792NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 23
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_194X_90THZX_1538X_186NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 24
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_194X_85THZX_1538X_581NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 25
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_194X_80THZX_1538X_976NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 26
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_194X_75THZX_1539X_371NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 27
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_194X_70THZX_1539X_766NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 28
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_194X_65THZX_1540X_162NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 29
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_194X_60THZX_1540X_557NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 30
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_194X_55THZX_1540X_953NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 31
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_194X_50THZX_1541X_349NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 32
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_194X_45THZX_1541X_746NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 33
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_194X_40THZX_1542X_142NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 34
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_194X_35THZX_1542X_539NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 35
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_194X_30THZX_1542X_936NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 36
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_194X_25THZX_1543X_333NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 37
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_194X_20THZX_1543X_730NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 38
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_194X_15THZX_1544X_128NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 39
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_194X_10THZX_1544X_526NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 40
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_194X_05THZX_1544X_924NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 41
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_194X_00THZX_1545X_322NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 42
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_193X_95THZX_1545X_720NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 43
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_193X_90THZX_1546X_119NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 44
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_193X_85THZX_1546X_518NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 45
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_193X_80THZX_1546X_917NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 46
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_193X_75THZX_1547X_316NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 47
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_193X_70THZX_1547X_715NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 48
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_193X_65THZX_1548X_115NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 49
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_193X_60THZX_1548X_515NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 50
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_193X_55THZX_1548X_915NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 51
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_193X_50THZX_1549X_315NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 52
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_193X_45THZX_1549X_715NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 53
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_193X_40THZX_1550X_116NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 54
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_193X_35THZX_1550X_517NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 55
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_193X_30THZX_1550X_918NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 56
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_193X_25THZX_1551X_319NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 57
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_193X_20THZX_1551X_721NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 58
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_193X_15THZX_1552X_122NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 59
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_193X_10THZX_1552X_524NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 60
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_193X_05THZX_1552X_926NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 61
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_193X_00THZX_1553X_329NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 62
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_192X_95THZX_1553X_731NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 63
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_192X_90THZX_1554X_134NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 64
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_192X_85THZX_1554X_537NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 65
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_192X_80THZX_1554X_940NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 66
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_192X_75THZX_1555X_343NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 67
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_192X_70THZX_1555X_747NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 68
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_192X_65THZX_1556X_151NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 69
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_192X_60THZX_1556X_555NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 70
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_192X_55THZX_1556X_959NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 71
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_192X_50THZX_1557X_363NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 72
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_192X_45THZX_1557X_768NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 73
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_192X_40THZX_1558X_173NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 74
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_192X_35THZX_1558X_578NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 75
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_192X_30THZX_1558X_983NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 76
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_192X_25THZX_1559X_389NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 77
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_192X_20THZX_1559X_794NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 78
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_192X_15THZX_1560X_200NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 79
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_192X_10THZX_1560X_606NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 80
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_192X_05THZX_1561X_013NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 81
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_192X_00THZX_1561X_419NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 82
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_191X_95THZX_1561X_826NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 83
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_191X_90THZX_1562X_233NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 84
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_191X_85THZX_1562X_640NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 85
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_191X_80THZX_1563X_047NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 86
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_191X_75THZX_1563X_455NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 87
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_191X_70THZX_1563X_863NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 88
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_191X_65THZX_1564X_271NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 89
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_191X_60THZX_1564X_679NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 90
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_191X_55THZX_1565X_087NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 91
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_191X_50THZX_1565X_496NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 92
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_191X_45THZX_1565X_905NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 93
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_191X_40THZX_1566X_314NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 94
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_191X_35THZX_1566X_723NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 95
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_191X_30THZX_1567X_133NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 96
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_191X_25THZX_1567X_542NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 97
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_191X_20THZX_1567X_952NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 98
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_191X_15THZX_1568X_362NM Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber = 99
)

// Enum value maps for Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber.
var (
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_name = map[int32]string{
		0:  "WavelengthChannelNumber_X_196X_10THZX_1528X_773NM",
		1:  "WavelengthChannelNumber_X_196X_05THZX_1529X_163NM",
		2:  "WavelengthChannelNumber_X_196X_00THZX_1529X_553NM",
		3:  "WavelengthChannelNumber_X_195X_95THZX_1529X_944NM",
		4:  "WavelengthChannelNumber_X_195X_90THZX_1530X_334NM",
		5:  "WavelengthChannelNumber_X_195X_85THZX_1530X_725NM",
		6:  "WavelengthChannelNumber_X_195X_80THZX_1531X_116NM",
		7:  "WavelengthChannelNumber_X_195X_75THZX_1531X_507NM",
		8:  "WavelengthChannelNumber_X_195X_70THZX_1531X_898NM",
		9:  "WavelengthChannelNumber_X_195X_65THZX_1532X_290NM",
		10: "WavelengthChannelNumber_X_195X_60THZX_1532X_681NM",
		11: "WavelengthChannelNumber_X_195X_55THZX_1533X_073NM",
		12: "WavelengthChannelNumber_X_195X_50THZX_1533X_465NM",
		13: "WavelengthChannelNumber_X_195X_45THZX_1533X_858NM",
		14: "WavelengthChannelNumber_X_195X_40THZX_1534X_250NM",
		15: "WavelengthChannelNumber_X_195X_35THZX_1534X_643NM",
		16: "WavelengthChannelNumber_X_195X_30THZX_1535X_036NM",
		17: "WavelengthChannelNumber_X_195X_25THZX_1535X_429NM",
		18: "WavelengthChannelNumber_X_195X_20THZX_1535X_822NM",
		19: "WavelengthChannelNumber_X_195X_15THZX_1536X_216NM",
		20: "WavelengthChannelNumber_X_195X_10THZX_1536X_609NM",
		21: "WavelengthChannelNumber_X_195X_05THZX_1537X_003NM",
		22: "WavelengthChannelNumber_X_195X_00THZX_1537X_397NM",
		23: "WavelengthChannelNumber_X_194X_95THZX_1537X_792NM",
		24: "WavelengthChannelNumber_X_194X_90THZX_1538X_186NM",
		25: "WavelengthChannelNumber_X_194X_85THZX_1538X_581NM",
		26: "WavelengthChannelNumber_X_194X_80THZX_1538X_976NM",
		27: "WavelengthChannelNumber_X_194X_75THZX_1539X_371NM",
		28: "WavelengthChannelNumber_X_194X_70THZX_1539X_766NM",
		29: "WavelengthChannelNumber_X_194X_65THZX_1540X_162NM",
		30: "WavelengthChannelNumber_X_194X_60THZX_1540X_557NM",
		31: "WavelengthChannelNumber_X_194X_55THZX_1540X_953NM",
		32: "WavelengthChannelNumber_X_194X_50THZX_1541X_349NM",
		33: "WavelengthChannelNumber_X_194X_45THZX_1541X_746NM",
		34: "WavelengthChannelNumber_X_194X_40THZX_1542X_142NM",
		35: "WavelengthChannelNumber_X_194X_35THZX_1542X_539NM",
		36: "WavelengthChannelNumber_X_194X_30THZX_1542X_936NM",
		37: "WavelengthChannelNumber_X_194X_25THZX_1543X_333NM",
		38: "WavelengthChannelNumber_X_194X_20THZX_1543X_730NM",
		39: "WavelengthChannelNumber_X_194X_15THZX_1544X_128NM",
		40: "WavelengthChannelNumber_X_194X_10THZX_1544X_526NM",
		41: "WavelengthChannelNumber_X_194X_05THZX_1544X_924NM",
		42: "WavelengthChannelNumber_X_194X_00THZX_1545X_322NM",
		43: "WavelengthChannelNumber_X_193X_95THZX_1545X_720NM",
		44: "WavelengthChannelNumber_X_193X_90THZX_1546X_119NM",
		45: "WavelengthChannelNumber_X_193X_85THZX_1546X_518NM",
		46: "WavelengthChannelNumber_X_193X_80THZX_1546X_917NM",
		47: "WavelengthChannelNumber_X_193X_75THZX_1547X_316NM",
		48: "WavelengthChannelNumber_X_193X_70THZX_1547X_715NM",
		49: "WavelengthChannelNumber_X_193X_65THZX_1548X_115NM",
		50: "WavelengthChannelNumber_X_193X_60THZX_1548X_515NM",
		51: "WavelengthChannelNumber_X_193X_55THZX_1548X_915NM",
		52: "WavelengthChannelNumber_X_193X_50THZX_1549X_315NM",
		53: "WavelengthChannelNumber_X_193X_45THZX_1549X_715NM",
		54: "WavelengthChannelNumber_X_193X_40THZX_1550X_116NM",
		55: "WavelengthChannelNumber_X_193X_35THZX_1550X_517NM",
		56: "WavelengthChannelNumber_X_193X_30THZX_1550X_918NM",
		57: "WavelengthChannelNumber_X_193X_25THZX_1551X_319NM",
		58: "WavelengthChannelNumber_X_193X_20THZX_1551X_721NM",
		59: "WavelengthChannelNumber_X_193X_15THZX_1552X_122NM",
		60: "WavelengthChannelNumber_X_193X_10THZX_1552X_524NM",
		61: "WavelengthChannelNumber_X_193X_05THZX_1552X_926NM",
		62: "WavelengthChannelNumber_X_193X_00THZX_1553X_329NM",
		63: "WavelengthChannelNumber_X_192X_95THZX_1553X_731NM",
		64: "WavelengthChannelNumber_X_192X_90THZX_1554X_134NM",
		65: "WavelengthChannelNumber_X_192X_85THZX_1554X_537NM",
		66: "WavelengthChannelNumber_X_192X_80THZX_1554X_940NM",
		67: "WavelengthChannelNumber_X_192X_75THZX_1555X_343NM",
		68: "WavelengthChannelNumber_X_192X_70THZX_1555X_747NM",
		69: "WavelengthChannelNumber_X_192X_65THZX_1556X_151NM",
		70: "WavelengthChannelNumber_X_192X_60THZX_1556X_555NM",
		71: "WavelengthChannelNumber_X_192X_55THZX_1556X_959NM",
		72: "WavelengthChannelNumber_X_192X_50THZX_1557X_363NM",
		73: "WavelengthChannelNumber_X_192X_45THZX_1557X_768NM",
		74: "WavelengthChannelNumber_X_192X_40THZX_1558X_173NM",
		75: "WavelengthChannelNumber_X_192X_35THZX_1558X_578NM",
		76: "WavelengthChannelNumber_X_192X_30THZX_1558X_983NM",
		77: "WavelengthChannelNumber_X_192X_25THZX_1559X_389NM",
		78: "WavelengthChannelNumber_X_192X_20THZX_1559X_794NM",
		79: "WavelengthChannelNumber_X_192X_15THZX_1560X_200NM",
		80: "WavelengthChannelNumber_X_192X_10THZX_1560X_606NM",
		81: "WavelengthChannelNumber_X_192X_05THZX_1561X_013NM",
		82: "WavelengthChannelNumber_X_192X_00THZX_1561X_419NM",
		83: "WavelengthChannelNumber_X_191X_95THZX_1561X_826NM",
		84: "WavelengthChannelNumber_X_191X_90THZX_1562X_233NM",
		85: "WavelengthChannelNumber_X_191X_85THZX_1562X_640NM",
		86: "WavelengthChannelNumber_X_191X_80THZX_1563X_047NM",
		87: "WavelengthChannelNumber_X_191X_75THZX_1563X_455NM",
		88: "WavelengthChannelNumber_X_191X_70THZX_1563X_863NM",
		89: "WavelengthChannelNumber_X_191X_65THZX_1564X_271NM",
		90: "WavelengthChannelNumber_X_191X_60THZX_1564X_679NM",
		91: "WavelengthChannelNumber_X_191X_55THZX_1565X_087NM",
		92: "WavelengthChannelNumber_X_191X_50THZX_1565X_496NM",
		93: "WavelengthChannelNumber_X_191X_45THZX_1565X_905NM",
		94: "WavelengthChannelNumber_X_191X_40THZX_1566X_314NM",
		95: "WavelengthChannelNumber_X_191X_35THZX_1566X_723NM",
		96: "WavelengthChannelNumber_X_191X_30THZX_1567X_133NM",
		97: "WavelengthChannelNumber_X_191X_25THZX_1567X_542NM",
		98: "WavelengthChannelNumber_X_191X_20THZX_1567X_952NM",
		99: "WavelengthChannelNumber_X_191X_15THZX_1568X_362NM",
	}
	Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_value = map[string]int32{
		"WavelengthChannelNumber_X_196X_10THZX_1528X_773NM": 0,
		"WavelengthChannelNumber_X_196X_05THZX_1529X_163NM": 1,
		"WavelengthChannelNumber_X_196X_00THZX_1529X_553NM": 2,
		"WavelengthChannelNumber_X_195X_95THZX_1529X_944NM": 3,
		"WavelengthChannelNumber_X_195X_90THZX_1530X_334NM": 4,
		"WavelengthChannelNumber_X_195X_85THZX_1530X_725NM": 5,
		"WavelengthChannelNumber_X_195X_80THZX_1531X_116NM": 6,
		"WavelengthChannelNumber_X_195X_75THZX_1531X_507NM": 7,
		"WavelengthChannelNumber_X_195X_70THZX_1531X_898NM": 8,
		"WavelengthChannelNumber_X_195X_65THZX_1532X_290NM": 9,
		"WavelengthChannelNumber_X_195X_60THZX_1532X_681NM": 10,
		"WavelengthChannelNumber_X_195X_55THZX_1533X_073NM": 11,
		"WavelengthChannelNumber_X_195X_50THZX_1533X_465NM": 12,
		"WavelengthChannelNumber_X_195X_45THZX_1533X_858NM": 13,
		"WavelengthChannelNumber_X_195X_40THZX_1534X_250NM": 14,
		"WavelengthChannelNumber_X_195X_35THZX_1534X_643NM": 15,
		"WavelengthChannelNumber_X_195X_30THZX_1535X_036NM": 16,
		"WavelengthChannelNumber_X_195X_25THZX_1535X_429NM": 17,
		"WavelengthChannelNumber_X_195X_20THZX_1535X_822NM": 18,
		"WavelengthChannelNumber_X_195X_15THZX_1536X_216NM": 19,
		"WavelengthChannelNumber_X_195X_10THZX_1536X_609NM": 20,
		"WavelengthChannelNumber_X_195X_05THZX_1537X_003NM": 21,
		"WavelengthChannelNumber_X_195X_00THZX_1537X_397NM": 22,
		"WavelengthChannelNumber_X_194X_95THZX_1537X_792NM": 23,
		"WavelengthChannelNumber_X_194X_90THZX_1538X_186NM": 24,
		"WavelengthChannelNumber_X_194X_85THZX_1538X_581NM": 25,
		"WavelengthChannelNumber_X_194X_80THZX_1538X_976NM": 26,
		"WavelengthChannelNumber_X_194X_75THZX_1539X_371NM": 27,
		"WavelengthChannelNumber_X_194X_70THZX_1539X_766NM": 28,
		"WavelengthChannelNumber_X_194X_65THZX_1540X_162NM": 29,
		"WavelengthChannelNumber_X_194X_60THZX_1540X_557NM": 30,
		"WavelengthChannelNumber_X_194X_55THZX_1540X_953NM": 31,
		"WavelengthChannelNumber_X_194X_50THZX_1541X_349NM": 32,
		"WavelengthChannelNumber_X_194X_45THZX_1541X_746NM": 33,
		"WavelengthChannelNumber_X_194X_40THZX_1542X_142NM": 34,
		"WavelengthChannelNumber_X_194X_35THZX_1542X_539NM": 35,
		"WavelengthChannelNumber_X_194X_30THZX_1542X_936NM": 36,
		"WavelengthChannelNumber_X_194X_25THZX_1543X_333NM": 37,
		"WavelengthChannelNumber_X_194X_20THZX_1543X_730NM": 38,
		"WavelengthChannelNumber_X_194X_15THZX_1544X_128NM": 39,
		"WavelengthChannelNumber_X_194X_10THZX_1544X_526NM": 40,
		"WavelengthChannelNumber_X_194X_05THZX_1544X_924NM": 41,
		"WavelengthChannelNumber_X_194X_00THZX_1545X_322NM": 42,
		"WavelengthChannelNumber_X_193X_95THZX_1545X_720NM": 43,
		"WavelengthChannelNumber_X_193X_90THZX_1546X_119NM": 44,
		"WavelengthChannelNumber_X_193X_85THZX_1546X_518NM": 45,
		"WavelengthChannelNumber_X_193X_80THZX_1546X_917NM": 46,
		"WavelengthChannelNumber_X_193X_75THZX_1547X_316NM": 47,
		"WavelengthChannelNumber_X_193X_70THZX_1547X_715NM": 48,
		"WavelengthChannelNumber_X_193X_65THZX_1548X_115NM": 49,
		"WavelengthChannelNumber_X_193X_60THZX_1548X_515NM": 50,
		"WavelengthChannelNumber_X_193X_55THZX_1548X_915NM": 51,
		"WavelengthChannelNumber_X_193X_50THZX_1549X_315NM": 52,
		"WavelengthChannelNumber_X_193X_45THZX_1549X_715NM": 53,
		"WavelengthChannelNumber_X_193X_40THZX_1550X_116NM": 54,
		"WavelengthChannelNumber_X_193X_35THZX_1550X_517NM": 55,
		"WavelengthChannelNumber_X_193X_30THZX_1550X_918NM": 56,
		"WavelengthChannelNumber_X_193X_25THZX_1551X_319NM": 57,
		"WavelengthChannelNumber_X_193X_20THZX_1551X_721NM": 58,
		"WavelengthChannelNumber_X_193X_15THZX_1552X_122NM": 59,
		"WavelengthChannelNumber_X_193X_10THZX_1552X_524NM": 60,
		"WavelengthChannelNumber_X_193X_05THZX_1552X_926NM": 61,
		"WavelengthChannelNumber_X_193X_00THZX_1553X_329NM": 62,
		"WavelengthChannelNumber_X_192X_95THZX_1553X_731NM": 63,
		"WavelengthChannelNumber_X_192X_90THZX_1554X_134NM": 64,
		"WavelengthChannelNumber_X_192X_85THZX_1554X_537NM": 65,
		"WavelengthChannelNumber_X_192X_80THZX_1554X_940NM": 66,
		"WavelengthChannelNumber_X_192X_75THZX_1555X_343NM": 67,
		"WavelengthChannelNumber_X_192X_70THZX_1555X_747NM": 68,
		"WavelengthChannelNumber_X_192X_65THZX_1556X_151NM": 69,
		"WavelengthChannelNumber_X_192X_60THZX_1556X_555NM": 70,
		"WavelengthChannelNumber_X_192X_55THZX_1556X_959NM": 71,
		"WavelengthChannelNumber_X_192X_50THZX_1557X_363NM": 72,
		"WavelengthChannelNumber_X_192X_45THZX_1557X_768NM": 73,
		"WavelengthChannelNumber_X_192X_40THZX_1558X_173NM": 74,
		"WavelengthChannelNumber_X_192X_35THZX_1558X_578NM": 75,
		"WavelengthChannelNumber_X_192X_30THZX_1558X_983NM": 76,
		"WavelengthChannelNumber_X_192X_25THZX_1559X_389NM": 77,
		"WavelengthChannelNumber_X_192X_20THZX_1559X_794NM": 78,
		"WavelengthChannelNumber_X_192X_15THZX_1560X_200NM": 79,
		"WavelengthChannelNumber_X_192X_10THZX_1560X_606NM": 80,
		"WavelengthChannelNumber_X_192X_05THZX_1561X_013NM": 81,
		"WavelengthChannelNumber_X_192X_00THZX_1561X_419NM": 82,
		"WavelengthChannelNumber_X_191X_95THZX_1561X_826NM": 83,
		"WavelengthChannelNumber_X_191X_90THZX_1562X_233NM": 84,
		"WavelengthChannelNumber_X_191X_85THZX_1562X_640NM": 85,
		"WavelengthChannelNumber_X_191X_80THZX_1563X_047NM": 86,
		"WavelengthChannelNumber_X_191X_75THZX_1563X_455NM": 87,
		"WavelengthChannelNumber_X_191X_70THZX_1563X_863NM": 88,
		"WavelengthChannelNumber_X_191X_65THZX_1564X_271NM": 89,
		"WavelengthChannelNumber_X_191X_60THZX_1564X_679NM": 90,
		"WavelengthChannelNumber_X_191X_55THZX_1565X_087NM": 91,
		"WavelengthChannelNumber_X_191X_50THZX_1565X_496NM": 92,
		"WavelengthChannelNumber_X_191X_45THZX_1565X_905NM": 93,
		"WavelengthChannelNumber_X_191X_40THZX_1566X_314NM": 94,
		"WavelengthChannelNumber_X_191X_35THZX_1566X_723NM": 95,
		"WavelengthChannelNumber_X_191X_30THZX_1567X_133NM": 96,
		"WavelengthChannelNumber_X_191X_25THZX_1567X_542NM": 97,
		"WavelengthChannelNumber_X_191X_20THZX_1567X_952NM": 98,
		"WavelengthChannelNumber_X_191X_15THZX_1568X_362NM": 99,
	}
)

func (x Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber) Enum() *Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber {
	p := new(Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber)
	*p = x
	return p
}

func (x Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[342].Descriptor()
}

func (Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[342]
}

func (x Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber.Descriptor instead.
func (Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 27, 0, 2, 0}
}

type Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns_TransAlarmIfDown_AlarmType int32

const (
	Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns_TransAlarmIfDown_AlarmType_AUAIS  Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns_TransAlarmIfDown_AlarmType = 0
	Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns_TransAlarmIfDown_AlarmType_B3TCA  Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns_TransAlarmIfDown_AlarmType = 1
	Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns_TransAlarmIfDown_AlarmType_LAIS   Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns_TransAlarmIfDown_AlarmType = 2
	Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns_TransAlarmIfDown_AlarmType_LOF    Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns_TransAlarmIfDown_AlarmType = 3
	Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns_TransAlarmIfDown_AlarmType_LOM    Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns_TransAlarmIfDown_AlarmType = 4
	Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns_TransAlarmIfDown_AlarmType_LOP    Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns_TransAlarmIfDown_AlarmType = 5
	Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns_TransAlarmIfDown_AlarmType_LOS    Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns_TransAlarmIfDown_AlarmType = 6
	Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns_TransAlarmIfDown_AlarmType_LRDI   Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns_TransAlarmIfDown_AlarmType = 7
	Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns_TransAlarmIfDown_AlarmType_LREI   Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns_TransAlarmIfDown_AlarmType = 8
	Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns_TransAlarmIfDown_AlarmType_OOF    Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns_TransAlarmIfDown_AlarmType = 9
	Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns_TransAlarmIfDown_AlarmType_PAIS   Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns_TransAlarmIfDown_AlarmType = 10
	Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns_TransAlarmIfDown_AlarmType_PRDI   Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns_TransAlarmIfDown_AlarmType = 11
	Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns_TransAlarmIfDown_AlarmType_PREI   Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns_TransAlarmIfDown_AlarmType = 12
	Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns_TransAlarmIfDown_AlarmType_PPLM   Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns_TransAlarmIfDown_AlarmType = 13
	Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns_TransAlarmIfDown_AlarmType_RDOOL  Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns_TransAlarmIfDown_AlarmType = 14
	Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns_TransAlarmIfDown_AlarmType_RROOL  Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns_TransAlarmIfDown_AlarmType = 15
	Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns_TransAlarmIfDown_AlarmType_SDBERE Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns_TransAlarmIfDown_AlarmType = 16
	Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns_TransAlarmIfDown_AlarmType_SFBERE Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns_TransAlarmIfDown_AlarmType = 17
	Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns_TransAlarmIfDown_AlarmType_TROOL  Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns_TransAlarmIfDown_AlarmType = 18
	Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns_TransAlarmIfDown_AlarmType_PUNEQ  Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns_TransAlarmIfDown_AlarmType = 19
	Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns_TransAlarmIfDown_AlarmType_LCD    Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns_TransAlarmIfDown_AlarmType = 20
	Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns_TransAlarmIfDown_AlarmType_B1TCA  Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns_TransAlarmIfDown_AlarmType = 40
	Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns_TransAlarmIfDown_AlarmType_B2TCA  Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns_TransAlarmIfDown_AlarmType = 41
)

// Enum value maps for Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns_TransAlarmIfDown_AlarmType.
var (
	Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns_TransAlarmIfDown_AlarmType_name = map[int32]string{
		0:  "AlarmType_AUAIS",
		1:  "AlarmType_B3TCA",
		2:  "AlarmType_LAIS",
		3:  "AlarmType_LOF",
		4:  "AlarmType_LOM",
		5:  "AlarmType_LOP",
		6:  "AlarmType_LOS",
		7:  "AlarmType_LRDI",
		8:  "AlarmType_LREI",
		9:  "AlarmType_OOF",
		10: "AlarmType_PAIS",
		11: "AlarmType_PRDI",
		12: "AlarmType_PREI",
		13: "AlarmType_PPLM",
		14: "AlarmType_RDOOL",
		15: "AlarmType_RROOL",
		16: "AlarmType_SDBERE",
		17: "AlarmType_SFBERE",
		18: "AlarmType_TROOL",
		19: "AlarmType_PUNEQ",
		20: "AlarmType_LCD",
		40: "AlarmType_B1TCA",
		41: "AlarmType_B2TCA",
	}
	Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns_TransAlarmIfDown_AlarmType_value = map[string]int32{
		"AlarmType_AUAIS":  0,
		"AlarmType_B3TCA":  1,
		"AlarmType_LAIS":   2,
		"AlarmType_LOF":    3,
		"AlarmType_LOM":    4,
		"AlarmType_LOP":    5,
		"AlarmType_LOS":    6,
		"AlarmType_LRDI":   7,
		"AlarmType_LREI":   8,
		"AlarmType_OOF":    9,
		"AlarmType_PAIS":   10,
		"AlarmType_PRDI":   11,
		"AlarmType_PREI":   12,
		"AlarmType_PPLM":   13,
		"AlarmType_RDOOL":  14,
		"AlarmType_RROOL":  15,
		"AlarmType_SDBERE": 16,
		"AlarmType_SFBERE": 17,
		"AlarmType_TROOL":  18,
		"AlarmType_PUNEQ":  19,
		"AlarmType_LCD":    20,
		"AlarmType_B1TCA":  40,
		"AlarmType_B2TCA":  41,
	}
)

func (x Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns_TransAlarmIfDown_AlarmType) Enum() *Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns_TransAlarmIfDown_AlarmType {
	p := new(Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns_TransAlarmIfDown_AlarmType)
	*p = x
	return p
}

func (x Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns_TransAlarmIfDown_AlarmType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns_TransAlarmIfDown_AlarmType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_devm_proto_enumTypes[343].Descriptor()
}

func (Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns_TransAlarmIfDown_AlarmType) Type() protoreflect.EnumType {
	return &file_huawei_devm_proto_enumTypes[343]
}

func (x Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns_TransAlarmIfDown_AlarmType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns_TransAlarmIfDown_AlarmType.Descriptor instead.
func (Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns_TransAlarmIfDown_AlarmType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 27, 0, 3, 0, 0, 0}
}

type Devm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhysicalEntitys           *Devm_PhysicalEntitys           `protobuf:"bytes,1,opt,name=physical_entitys,json=physical-entitys,proto3" json:"physical_entitys,omitempty"`
	LogicEntitys              *Devm_LogicEntitys              `protobuf:"bytes,2,opt,name=logic_entitys,json=logic-entitys,proto3" json:"logic_entitys,omitempty"`
	Chassiss                  *Devm_Chassiss                  `protobuf:"bytes,3,opt,name=chassiss,proto3" json:"chassiss,omitempty"`
	LogicContainers           *Devm_LogicContainers           `protobuf:"bytes,4,opt,name=logic_containers,json=logic-containers,proto3" json:"logic_containers,omitempty"`
	Containers                *Devm_Containers                `protobuf:"bytes,5,opt,name=containers,proto3" json:"containers,omitempty"`
	MpuBoards                 *Devm_MpuBoards                 `protobuf:"bytes,6,opt,name=mpu_boards,json=mpu-boards,proto3" json:"mpu_boards,omitempty"`
	LpuBoards                 *Devm_LpuBoards                 `protobuf:"bytes,7,opt,name=lpu_boards,json=lpu-boards,proto3" json:"lpu_boards,omitempty"`
	SfuBoards                 *Devm_SfuBoards                 `protobuf:"bytes,8,opt,name=sfu_boards,json=sfu-boards,proto3" json:"sfu_boards,omitempty"`
	Cards                     *Devm_Cards                     `protobuf:"bytes,9,opt,name=cards,proto3" json:"cards,omitempty"`
	CfCards                   *Devm_CfCards                   `protobuf:"bytes,10,opt,name=cf_cards,json=cf-cards,proto3" json:"cf_cards,omitempty"`
	Ports                     *Devm_Ports                     `protobuf:"bytes,11,opt,name=ports,proto3" json:"ports,omitempty"`
	LogicPorts                *Devm_LogicPorts                `protobuf:"bytes,12,opt,name=logic_ports,json=logic-ports,proto3" json:"logic_ports,omitempty"`
	EntityClasses             *Devm_EntityClasses             `protobuf:"bytes,13,opt,name=entity_classes,json=entity-classes,proto3" json:"entity_classes,omitempty"`
	InconsistentEntitys       *Devm_InconsistentEntitys       `protobuf:"bytes,14,opt,name=inconsistent_entitys,json=inconsistent-entitys,proto3" json:"inconsistent_entitys,omitempty"`
	OfflineCfgs               *Devm_OfflineCfgs               `protobuf:"bytes,15,opt,name=offline_cfgs,json=offline-cfgs,proto3" json:"offline_cfgs,omitempty"`
	ScheduleReboot            *Devm_ScheduleReboot            `protobuf:"bytes,16,opt,name=schedule_reboot,json=schedule-reboot,proto3" json:"schedule_reboot,omitempty"`
	Offlines                  *Devm_Offlines                  `protobuf:"bytes,17,opt,name=offlines,proto3" json:"offlines,omitempty"`
	Clockboards               *Devm_Clockboards               `protobuf:"bytes,18,opt,name=clockboards,proto3" json:"clockboards,omitempty"`
	Driver                    *Devm_Driver                    `protobuf:"bytes,19,opt,name=driver,proto3" json:"driver,omitempty"`
	FwdPerformanceAlarms      *Devm_FwdPerformanceAlarms      `protobuf:"bytes,20,opt,name=fwd_performance_alarms,json=fwd-performance-alarms,proto3" json:"fwd_performance_alarms,omitempty"`
	FwdServicesAlarms         *Devm_FwdServicesAlarms         `protobuf:"bytes,21,opt,name=fwd_services_alarms,json=fwd-services-alarms,proto3" json:"fwd_services_alarms,omitempty"`
	FwdReassemblyAlarms       *Devm_FwdReassemblyAlarms       `protobuf:"bytes,22,opt,name=fwd_reassembly_alarms,json=fwd-reassembly-alarms,proto3" json:"fwd_reassembly_alarms,omitempty"`
	FwdBoardFlowAlarms        *Devm_FwdBoardFlowAlarms        `protobuf:"bytes,23,opt,name=fwd_board_flow_alarms,json=fwd-board-flow-alarms,proto3" json:"fwd_board_flow_alarms,omitempty"`
	ForwardCpuAlarm           *Devm_ForwardCpuAlarm           `protobuf:"bytes,24,opt,name=forward_cpu_alarm,json=forward-cpu-alarm,proto3" json:"forward_cpu_alarm,omitempty"`
	ForwardVcpuAlarm          *Devm_ForwardVcpuAlarm          `protobuf:"bytes,25,opt,name=forward_vcpu_alarm,json=forward-vcpu-alarm,proto3" json:"forward_vcpu_alarm,omitempty"`
	ActiveHardwareAlarmInfos  *Devm_ActiveHardwareAlarmInfos  `protobuf:"bytes,26,opt,name=active_hardware_alarm_infos,json=active-hardware-alarm-infos,proto3" json:"active_hardware_alarm_infos,omitempty"`
	HistoryHardwareAlarmInfos *Devm_HistoryHardwareAlarmInfos `protobuf:"bytes,27,opt,name=history_hardware_alarm_infos,json=history-hardware-alarm-infos,proto3" json:"history_hardware_alarm_infos,omitempty"`
	RemotePorts               *Devm_RemotePorts               `protobuf:"bytes,28,opt,name=remote_ports,json=remote-ports,proto3" json:"remote_ports,omitempty"`
	DisableHardwareAlarms     *Devm_DisableHardwareAlarms     `protobuf:"bytes,29,opt,name=disable_hardware_alarms,json=disable-hardware-alarms,proto3" json:"disable_hardware_alarms,omitempty"`
}

func (x *Devm) Reset() {
	*x = Devm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm) ProtoMessage() {}

func (x *Devm) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm.ProtoReflect.Descriptor instead.
func (*Devm) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0}
}

func (x *Devm) GetPhysicalEntitys() *Devm_PhysicalEntitys {
	if x != nil {
		return x.PhysicalEntitys
	}
	return nil
}

func (x *Devm) GetLogicEntitys() *Devm_LogicEntitys {
	if x != nil {
		return x.LogicEntitys
	}
	return nil
}

func (x *Devm) GetChassiss() *Devm_Chassiss {
	if x != nil {
		return x.Chassiss
	}
	return nil
}

func (x *Devm) GetLogicContainers() *Devm_LogicContainers {
	if x != nil {
		return x.LogicContainers
	}
	return nil
}

func (x *Devm) GetContainers() *Devm_Containers {
	if x != nil {
		return x.Containers
	}
	return nil
}

func (x *Devm) GetMpuBoards() *Devm_MpuBoards {
	if x != nil {
		return x.MpuBoards
	}
	return nil
}

func (x *Devm) GetLpuBoards() *Devm_LpuBoards {
	if x != nil {
		return x.LpuBoards
	}
	return nil
}

func (x *Devm) GetSfuBoards() *Devm_SfuBoards {
	if x != nil {
		return x.SfuBoards
	}
	return nil
}

func (x *Devm) GetCards() *Devm_Cards {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *Devm) GetCfCards() *Devm_CfCards {
	if x != nil {
		return x.CfCards
	}
	return nil
}

func (x *Devm) GetPorts() *Devm_Ports {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *Devm) GetLogicPorts() *Devm_LogicPorts {
	if x != nil {
		return x.LogicPorts
	}
	return nil
}

func (x *Devm) GetEntityClasses() *Devm_EntityClasses {
	if x != nil {
		return x.EntityClasses
	}
	return nil
}

func (x *Devm) GetInconsistentEntitys() *Devm_InconsistentEntitys {
	if x != nil {
		return x.InconsistentEntitys
	}
	return nil
}

func (x *Devm) GetOfflineCfgs() *Devm_OfflineCfgs {
	if x != nil {
		return x.OfflineCfgs
	}
	return nil
}

func (x *Devm) GetScheduleReboot() *Devm_ScheduleReboot {
	if x != nil {
		return x.ScheduleReboot
	}
	return nil
}

func (x *Devm) GetOfflines() *Devm_Offlines {
	if x != nil {
		return x.Offlines
	}
	return nil
}

func (x *Devm) GetClockboards() *Devm_Clockboards {
	if x != nil {
		return x.Clockboards
	}
	return nil
}

func (x *Devm) GetDriver() *Devm_Driver {
	if x != nil {
		return x.Driver
	}
	return nil
}

func (x *Devm) GetFwdPerformanceAlarms() *Devm_FwdPerformanceAlarms {
	if x != nil {
		return x.FwdPerformanceAlarms
	}
	return nil
}

func (x *Devm) GetFwdServicesAlarms() *Devm_FwdServicesAlarms {
	if x != nil {
		return x.FwdServicesAlarms
	}
	return nil
}

func (x *Devm) GetFwdReassemblyAlarms() *Devm_FwdReassemblyAlarms {
	if x != nil {
		return x.FwdReassemblyAlarms
	}
	return nil
}

func (x *Devm) GetFwdBoardFlowAlarms() *Devm_FwdBoardFlowAlarms {
	if x != nil {
		return x.FwdBoardFlowAlarms
	}
	return nil
}

func (x *Devm) GetForwardCpuAlarm() *Devm_ForwardCpuAlarm {
	if x != nil {
		return x.ForwardCpuAlarm
	}
	return nil
}

func (x *Devm) GetForwardVcpuAlarm() *Devm_ForwardVcpuAlarm {
	if x != nil {
		return x.ForwardVcpuAlarm
	}
	return nil
}

func (x *Devm) GetActiveHardwareAlarmInfos() *Devm_ActiveHardwareAlarmInfos {
	if x != nil {
		return x.ActiveHardwareAlarmInfos
	}
	return nil
}

func (x *Devm) GetHistoryHardwareAlarmInfos() *Devm_HistoryHardwareAlarmInfos {
	if x != nil {
		return x.HistoryHardwareAlarmInfos
	}
	return nil
}

func (x *Devm) GetRemotePorts() *Devm_RemotePorts {
	if x != nil {
		return x.RemotePorts
	}
	return nil
}

func (x *Devm) GetDisableHardwareAlarms() *Devm_DisableHardwareAlarms {
	if x != nil {
		return x.DisableHardwareAlarms
	}
	return nil
}

type Devm_PhysicalEntitys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhysicalEntity []*Devm_PhysicalEntitys_PhysicalEntity `protobuf:"bytes,1,rep,name=physical_entity,json=physical-entity,proto3" json:"physical_entity,omitempty"`
}

func (x *Devm_PhysicalEntitys) Reset() {
	*x = Devm_PhysicalEntitys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_PhysicalEntitys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_PhysicalEntitys) ProtoMessage() {}

func (x *Devm_PhysicalEntitys) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_PhysicalEntitys.ProtoReflect.Descriptor instead.
func (*Devm_PhysicalEntitys) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Devm_PhysicalEntitys) GetPhysicalEntity() []*Devm_PhysicalEntitys_PhysicalEntity {
	if x != nil {
		return x.PhysicalEntity
	}
	return nil
}

type Devm_LogicEntitys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogicEntity []*Devm_LogicEntitys_LogicEntity `protobuf:"bytes,1,rep,name=logic_entity,json=logic-entity,proto3" json:"logic_entity,omitempty"`
}

func (x *Devm_LogicEntitys) Reset() {
	*x = Devm_LogicEntitys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LogicEntitys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LogicEntitys) ProtoMessage() {}

func (x *Devm_LogicEntitys) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LogicEntitys.ProtoReflect.Descriptor instead.
func (*Devm_LogicEntitys) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Devm_LogicEntitys) GetLogicEntity() []*Devm_LogicEntitys_LogicEntity {
	if x != nil {
		return x.LogicEntity
	}
	return nil
}

type Devm_Chassiss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chassis []*Devm_Chassiss_Chassis `protobuf:"bytes,1,rep,name=chassis,proto3" json:"chassis,omitempty"`
}

func (x *Devm_Chassiss) Reset() {
	*x = Devm_Chassiss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Chassiss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Chassiss) ProtoMessage() {}

func (x *Devm_Chassiss) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Chassiss.ProtoReflect.Descriptor instead.
func (*Devm_Chassiss) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Devm_Chassiss) GetChassis() []*Devm_Chassiss_Chassis {
	if x != nil {
		return x.Chassis
	}
	return nil
}

type Devm_LogicContainers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogicContainer []*Devm_LogicContainers_LogicContainer `protobuf:"bytes,1,rep,name=logic_container,json=logic-container,proto3" json:"logic_container,omitempty"`
}

func (x *Devm_LogicContainers) Reset() {
	*x = Devm_LogicContainers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LogicContainers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LogicContainers) ProtoMessage() {}

func (x *Devm_LogicContainers) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LogicContainers.ProtoReflect.Descriptor instead.
func (*Devm_LogicContainers) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 3}
}

func (x *Devm_LogicContainers) GetLogicContainer() []*Devm_LogicContainers_LogicContainer {
	if x != nil {
		return x.LogicContainer
	}
	return nil
}

type Devm_Containers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Container []*Devm_Containers_Container `protobuf:"bytes,1,rep,name=container,proto3" json:"container,omitempty"`
}

func (x *Devm_Containers) Reset() {
	*x = Devm_Containers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Containers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Containers) ProtoMessage() {}

func (x *Devm_Containers) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Containers.ProtoReflect.Descriptor instead.
func (*Devm_Containers) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 4}
}

func (x *Devm_Containers) GetContainer() []*Devm_Containers_Container {
	if x != nil {
		return x.Container
	}
	return nil
}

type Devm_MpuBoards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MpuBoard []*Devm_MpuBoards_MpuBoard `protobuf:"bytes,1,rep,name=mpu_board,json=mpu-board,proto3" json:"mpu_board,omitempty"`
}

func (x *Devm_MpuBoards) Reset() {
	*x = Devm_MpuBoards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards) ProtoMessage() {}

func (x *Devm_MpuBoards) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5}
}

func (x *Devm_MpuBoards) GetMpuBoard() []*Devm_MpuBoards_MpuBoard {
	if x != nil {
		return x.MpuBoard
	}
	return nil
}

type Devm_LpuBoards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LpuBoard []*Devm_LpuBoards_LpuBoard `protobuf:"bytes,1,rep,name=lpu_board,json=lpu-board,proto3" json:"lpu_board,omitempty"`
}

func (x *Devm_LpuBoards) Reset() {
	*x = Devm_LpuBoards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards) ProtoMessage() {}

func (x *Devm_LpuBoards) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6}
}

func (x *Devm_LpuBoards) GetLpuBoard() []*Devm_LpuBoards_LpuBoard {
	if x != nil {
		return x.LpuBoard
	}
	return nil
}

type Devm_SfuBoards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SfuBoard []*Devm_SfuBoards_SfuBoard `protobuf:"bytes,1,rep,name=sfu_board,json=sfu-board,proto3" json:"sfu_board,omitempty"`
}

func (x *Devm_SfuBoards) Reset() {
	*x = Devm_SfuBoards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_SfuBoards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_SfuBoards) ProtoMessage() {}

func (x *Devm_SfuBoards) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_SfuBoards.ProtoReflect.Descriptor instead.
func (*Devm_SfuBoards) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 7}
}

func (x *Devm_SfuBoards) GetSfuBoard() []*Devm_SfuBoards_SfuBoard {
	if x != nil {
		return x.SfuBoard
	}
	return nil
}

type Devm_Cards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Card []*Devm_Cards_Card `protobuf:"bytes,1,rep,name=card,proto3" json:"card,omitempty"`
}

func (x *Devm_Cards) Reset() {
	*x = Devm_Cards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Cards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Cards) ProtoMessage() {}

func (x *Devm_Cards) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Cards.ProtoReflect.Descriptor instead.
func (*Devm_Cards) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 8}
}

func (x *Devm_Cards) GetCard() []*Devm_Cards_Card {
	if x != nil {
		return x.Card
	}
	return nil
}

type Devm_CfCards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CfCard []*Devm_CfCards_CfCard `protobuf:"bytes,1,rep,name=cf_card,json=cf-card,proto3" json:"cf_card,omitempty"`
}

func (x *Devm_CfCards) Reset() {
	*x = Devm_CfCards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_CfCards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_CfCards) ProtoMessage() {}

func (x *Devm_CfCards) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_CfCards.ProtoReflect.Descriptor instead.
func (*Devm_CfCards) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 9}
}

func (x *Devm_CfCards) GetCfCard() []*Devm_CfCards_CfCard {
	if x != nil {
		return x.CfCard
	}
	return nil
}

type Devm_Ports struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port []*Devm_Ports_Port `protobuf:"bytes,1,rep,name=port,proto3" json:"port,omitempty"`
}

func (x *Devm_Ports) Reset() {
	*x = Devm_Ports{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Ports) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Ports) ProtoMessage() {}

func (x *Devm_Ports) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Ports.ProtoReflect.Descriptor instead.
func (*Devm_Ports) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10}
}

func (x *Devm_Ports) GetPort() []*Devm_Ports_Port {
	if x != nil {
		return x.Port
	}
	return nil
}

type Devm_LogicPorts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogicPort []*Devm_LogicPorts_LogicPort `protobuf:"bytes,1,rep,name=logic_port,json=logic-port,proto3" json:"logic_port,omitempty"`
}

func (x *Devm_LogicPorts) Reset() {
	*x = Devm_LogicPorts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LogicPorts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LogicPorts) ProtoMessage() {}

func (x *Devm_LogicPorts) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LogicPorts.ProtoReflect.Descriptor instead.
func (*Devm_LogicPorts) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 11}
}

func (x *Devm_LogicPorts) GetLogicPort() []*Devm_LogicPorts_LogicPort {
	if x != nil {
		return x.LogicPort
	}
	return nil
}

type Devm_EntityClasses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityClass []*Devm_EntityClasses_EntityClass `protobuf:"bytes,1,rep,name=entity_class,json=entity-class,proto3" json:"entity_class,omitempty"`
}

func (x *Devm_EntityClasses) Reset() {
	*x = Devm_EntityClasses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_EntityClasses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_EntityClasses) ProtoMessage() {}

func (x *Devm_EntityClasses) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_EntityClasses.ProtoReflect.Descriptor instead.
func (*Devm_EntityClasses) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 12}
}

func (x *Devm_EntityClasses) GetEntityClass() []*Devm_EntityClasses_EntityClass {
	if x != nil {
		return x.EntityClass
	}
	return nil
}

type Devm_InconsistentEntitys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InconsistentEntity []*Devm_InconsistentEntitys_InconsistentEntity `protobuf:"bytes,1,rep,name=inconsistent_entity,json=inconsistent-entity,proto3" json:"inconsistent_entity,omitempty"`
}

func (x *Devm_InconsistentEntitys) Reset() {
	*x = Devm_InconsistentEntitys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_InconsistentEntitys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_InconsistentEntitys) ProtoMessage() {}

func (x *Devm_InconsistentEntitys) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_InconsistentEntitys.ProtoReflect.Descriptor instead.
func (*Devm_InconsistentEntitys) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 13}
}

func (x *Devm_InconsistentEntitys) GetInconsistentEntity() []*Devm_InconsistentEntitys_InconsistentEntity {
	if x != nil {
		return x.InconsistentEntity
	}
	return nil
}

type Devm_OfflineCfgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offline []*Devm_OfflineCfgs_Offline `protobuf:"bytes,1,rep,name=offline,proto3" json:"offline,omitempty"`
}

func (x *Devm_OfflineCfgs) Reset() {
	*x = Devm_OfflineCfgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_OfflineCfgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_OfflineCfgs) ProtoMessage() {}

func (x *Devm_OfflineCfgs) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_OfflineCfgs.ProtoReflect.Descriptor instead.
func (*Devm_OfflineCfgs) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 14}
}

func (x *Devm_OfflineCfgs) GetOffline() []*Devm_OfflineCfgs_Offline {
	if x != nil {
		return x.Offline
	}
	return nil
}

type Devm_ScheduleReboot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datetime  string `protobuf:"bytes,1,opt,name=datetime,proto3" json:"datetime,omitempty"`
	DelayTime string `protobuf:"bytes,2,opt,name=delay_time,json=delay-time,proto3" json:"delay_time,omitempty"`
}

func (x *Devm_ScheduleReboot) Reset() {
	*x = Devm_ScheduleReboot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_ScheduleReboot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_ScheduleReboot) ProtoMessage() {}

func (x *Devm_ScheduleReboot) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_ScheduleReboot.ProtoReflect.Descriptor instead.
func (*Devm_ScheduleReboot) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 15}
}

func (x *Devm_ScheduleReboot) GetDatetime() string {
	if x != nil {
		return x.Datetime
	}
	return ""
}

func (x *Devm_ScheduleReboot) GetDelayTime() string {
	if x != nil {
		return x.DelayTime
	}
	return ""
}

type Devm_Offlines struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offline []*Devm_Offlines_Offline `protobuf:"bytes,1,rep,name=offline,proto3" json:"offline,omitempty"`
}

func (x *Devm_Offlines) Reset() {
	*x = Devm_Offlines{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Offlines) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Offlines) ProtoMessage() {}

func (x *Devm_Offlines) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Offlines.ProtoReflect.Descriptor instead.
func (*Devm_Offlines) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 16}
}

func (x *Devm_Offlines) GetOffline() []*Devm_Offlines_Offline {
	if x != nil {
		return x.Offline
	}
	return nil
}

type Devm_Clockboards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clockboard []*Devm_Clockboards_Clockboard `protobuf:"bytes,1,rep,name=clockboard,proto3" json:"clockboard,omitempty"`
}

func (x *Devm_Clockboards) Reset() {
	*x = Devm_Clockboards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Clockboards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Clockboards) ProtoMessage() {}

func (x *Devm_Clockboards) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Clockboards.ProtoReflect.Descriptor instead.
func (*Devm_Clockboards) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 17}
}

func (x *Devm_Clockboards) GetClockboard() []*Devm_Clockboards_Clockboard {
	if x != nil {
		return x.Clockboard
	}
	return nil
}

type Devm_Driver struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmus         *Devm_Driver_Cmus         `protobuf:"bytes,1,opt,name=cmus,proto3" json:"cmus,omitempty"`
	Pms          *Devm_Driver_Pms          `protobuf:"bytes,2,opt,name=pms,proto3" json:"pms,omitempty"`
	Ccus         *Devm_Driver_Ccus         `protobuf:"bytes,3,opt,name=ccus,proto3" json:"ccus,omitempty"`
	Dacss        *Devm_Driver_Dacss        `protobuf:"bytes,4,opt,name=dacss,proto3" json:"dacss,omitempty"`
	Fans         *Devm_Driver_Fans         `protobuf:"bytes,5,opt,name=fans,proto3" json:"fans,omitempty"`
	Icus         *Devm_Driver_Icus         `protobuf:"bytes,6,opt,name=icus,proto3" json:"icus,omitempty"`
	Pmus         *Devm_Driver_Pmus         `protobuf:"bytes,7,opt,name=pmus,proto3" json:"pmus,omitempty"`
	PowerSupplys *Devm_Driver_PowerSupplys `protobuf:"bytes,8,opt,name=power_supplys,json=power-supplys,proto3" json:"power_supplys,omitempty"`
	Dmus         *Devm_Driver_Dmus         `protobuf:"bytes,9,opt,name=dmus,proto3" json:"dmus,omitempty"`
	Pdus         *Devm_Driver_Pdus         `protobuf:"bytes,10,opt,name=pdus,proto3" json:"pdus,omitempty"`
	Vsus         *Devm_Driver_Vsus         `protobuf:"bytes,11,opt,name=vsus,proto3" json:"vsus,omitempty"`
	Ecus         *Devm_Driver_Ecus         `protobuf:"bytes,12,opt,name=ecus,proto3" json:"ecus,omitempty"`
	Lcds         *Devm_Driver_Lcds         `protobuf:"bytes,13,opt,name=lcds,proto3" json:"lcds,omitempty"`
	Disks        *Devm_Driver_Disks        `protobuf:"bytes,14,opt,name=disks,proto3" json:"disks,omitempty"`
}

func (x *Devm_Driver) Reset() {
	*x = Devm_Driver{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Driver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Driver) ProtoMessage() {}

func (x *Devm_Driver) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Driver.ProtoReflect.Descriptor instead.
func (*Devm_Driver) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 18}
}

func (x *Devm_Driver) GetCmus() *Devm_Driver_Cmus {
	if x != nil {
		return x.Cmus
	}
	return nil
}

func (x *Devm_Driver) GetPms() *Devm_Driver_Pms {
	if x != nil {
		return x.Pms
	}
	return nil
}

func (x *Devm_Driver) GetCcus() *Devm_Driver_Ccus {
	if x != nil {
		return x.Ccus
	}
	return nil
}

func (x *Devm_Driver) GetDacss() *Devm_Driver_Dacss {
	if x != nil {
		return x.Dacss
	}
	return nil
}

func (x *Devm_Driver) GetFans() *Devm_Driver_Fans {
	if x != nil {
		return x.Fans
	}
	return nil
}

func (x *Devm_Driver) GetIcus() *Devm_Driver_Icus {
	if x != nil {
		return x.Icus
	}
	return nil
}

func (x *Devm_Driver) GetPmus() *Devm_Driver_Pmus {
	if x != nil {
		return x.Pmus
	}
	return nil
}

func (x *Devm_Driver) GetPowerSupplys() *Devm_Driver_PowerSupplys {
	if x != nil {
		return x.PowerSupplys
	}
	return nil
}

func (x *Devm_Driver) GetDmus() *Devm_Driver_Dmus {
	if x != nil {
		return x.Dmus
	}
	return nil
}

func (x *Devm_Driver) GetPdus() *Devm_Driver_Pdus {
	if x != nil {
		return x.Pdus
	}
	return nil
}

func (x *Devm_Driver) GetVsus() *Devm_Driver_Vsus {
	if x != nil {
		return x.Vsus
	}
	return nil
}

func (x *Devm_Driver) GetEcus() *Devm_Driver_Ecus {
	if x != nil {
		return x.Ecus
	}
	return nil
}

func (x *Devm_Driver) GetLcds() *Devm_Driver_Lcds {
	if x != nil {
		return x.Lcds
	}
	return nil
}

func (x *Devm_Driver) GetDisks() *Devm_Driver_Disks {
	if x != nil {
		return x.Disks
	}
	return nil
}

type Devm_FwdPerformanceAlarms struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FwdPerformanceAlarm []*Devm_FwdPerformanceAlarms_FwdPerformanceAlarm `protobuf:"bytes,1,rep,name=fwd_performance_alarm,json=fwd-performance-alarm,proto3" json:"fwd_performance_alarm,omitempty"`
}

func (x *Devm_FwdPerformanceAlarms) Reset() {
	*x = Devm_FwdPerformanceAlarms{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_FwdPerformanceAlarms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_FwdPerformanceAlarms) ProtoMessage() {}

func (x *Devm_FwdPerformanceAlarms) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_FwdPerformanceAlarms.ProtoReflect.Descriptor instead.
func (*Devm_FwdPerformanceAlarms) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 19}
}

func (x *Devm_FwdPerformanceAlarms) GetFwdPerformanceAlarm() []*Devm_FwdPerformanceAlarms_FwdPerformanceAlarm {
	if x != nil {
		return x.FwdPerformanceAlarm
	}
	return nil
}

type Devm_FwdServicesAlarms struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FwdServicesAlarm []*Devm_FwdServicesAlarms_FwdServicesAlarm `protobuf:"bytes,1,rep,name=fwd_services_alarm,json=fwd-services-alarm,proto3" json:"fwd_services_alarm,omitempty"`
}

func (x *Devm_FwdServicesAlarms) Reset() {
	*x = Devm_FwdServicesAlarms{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_FwdServicesAlarms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_FwdServicesAlarms) ProtoMessage() {}

func (x *Devm_FwdServicesAlarms) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_FwdServicesAlarms.ProtoReflect.Descriptor instead.
func (*Devm_FwdServicesAlarms) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 20}
}

func (x *Devm_FwdServicesAlarms) GetFwdServicesAlarm() []*Devm_FwdServicesAlarms_FwdServicesAlarm {
	if x != nil {
		return x.FwdServicesAlarm
	}
	return nil
}

type Devm_FwdReassemblyAlarms struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FwdReassemblyAlarm []*Devm_FwdReassemblyAlarms_FwdReassemblyAlarm `protobuf:"bytes,1,rep,name=fwd_reassembly_alarm,json=fwd-reassembly-alarm,proto3" json:"fwd_reassembly_alarm,omitempty"`
}

func (x *Devm_FwdReassemblyAlarms) Reset() {
	*x = Devm_FwdReassemblyAlarms{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_FwdReassemblyAlarms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_FwdReassemblyAlarms) ProtoMessage() {}

func (x *Devm_FwdReassemblyAlarms) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_FwdReassemblyAlarms.ProtoReflect.Descriptor instead.
func (*Devm_FwdReassemblyAlarms) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 21}
}

func (x *Devm_FwdReassemblyAlarms) GetFwdReassemblyAlarm() []*Devm_FwdReassemblyAlarms_FwdReassemblyAlarm {
	if x != nil {
		return x.FwdReassemblyAlarm
	}
	return nil
}

type Devm_FwdBoardFlowAlarms struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FwdBoardFlowAlarm []*Devm_FwdBoardFlowAlarms_FwdBoardFlowAlarm `protobuf:"bytes,1,rep,name=fwd_board_flow_alarm,json=fwd-board-flow-alarm,proto3" json:"fwd_board_flow_alarm,omitempty"`
}

func (x *Devm_FwdBoardFlowAlarms) Reset() {
	*x = Devm_FwdBoardFlowAlarms{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_FwdBoardFlowAlarms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_FwdBoardFlowAlarms) ProtoMessage() {}

func (x *Devm_FwdBoardFlowAlarms) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_FwdBoardFlowAlarms.ProtoReflect.Descriptor instead.
func (*Devm_FwdBoardFlowAlarms) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 22}
}

func (x *Devm_FwdBoardFlowAlarms) GetFwdBoardFlowAlarm() []*Devm_FwdBoardFlowAlarms_FwdBoardFlowAlarm {
	if x != nil {
		return x.FwdBoardFlowAlarm
	}
	return nil
}

type Devm_ForwardCpuAlarm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Threshold  uint32 `protobuf:"varint,1,opt,name=threshold,proto3" json:"threshold,omitempty"`
	LogEnable  bool   `protobuf:"varint,2,opt,name=log_enable,json=log-enable,proto3" json:"log_enable,omitempty"`
	TrapEnable bool   `protobuf:"varint,3,opt,name=trap_enable,json=trap-enable,proto3" json:"trap_enable,omitempty"`
}

func (x *Devm_ForwardCpuAlarm) Reset() {
	*x = Devm_ForwardCpuAlarm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_ForwardCpuAlarm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_ForwardCpuAlarm) ProtoMessage() {}

func (x *Devm_ForwardCpuAlarm) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_ForwardCpuAlarm.ProtoReflect.Descriptor instead.
func (*Devm_ForwardCpuAlarm) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 23}
}

func (x *Devm_ForwardCpuAlarm) GetThreshold() uint32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *Devm_ForwardCpuAlarm) GetLogEnable() bool {
	if x != nil {
		return x.LogEnable
	}
	return false
}

func (x *Devm_ForwardCpuAlarm) GetTrapEnable() bool {
	if x != nil {
		return x.TrapEnable
	}
	return false
}

type Devm_ForwardVcpuAlarm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Threshold  uint32 `protobuf:"varint,1,opt,name=threshold,proto3" json:"threshold,omitempty"`
	LogEnable  bool   `protobuf:"varint,2,opt,name=log_enable,json=log-enable,proto3" json:"log_enable,omitempty"`
	TrapEnable bool   `protobuf:"varint,3,opt,name=trap_enable,json=trap-enable,proto3" json:"trap_enable,omitempty"`
}

func (x *Devm_ForwardVcpuAlarm) Reset() {
	*x = Devm_ForwardVcpuAlarm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_ForwardVcpuAlarm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_ForwardVcpuAlarm) ProtoMessage() {}

func (x *Devm_ForwardVcpuAlarm) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_ForwardVcpuAlarm.ProtoReflect.Descriptor instead.
func (*Devm_ForwardVcpuAlarm) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 24}
}

func (x *Devm_ForwardVcpuAlarm) GetThreshold() uint32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *Devm_ForwardVcpuAlarm) GetLogEnable() bool {
	if x != nil {
		return x.LogEnable
	}
	return false
}

func (x *Devm_ForwardVcpuAlarm) GetTrapEnable() bool {
	if x != nil {
		return x.TrapEnable
	}
	return false
}

type Devm_ActiveHardwareAlarmInfos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActiveHardwareAlarmInfo []*Devm_ActiveHardwareAlarmInfos_ActiveHardwareAlarmInfo `protobuf:"bytes,1,rep,name=active_hardware_alarm_info,json=active-hardware-alarm-info,proto3" json:"active_hardware_alarm_info,omitempty"`
}

func (x *Devm_ActiveHardwareAlarmInfos) Reset() {
	*x = Devm_ActiveHardwareAlarmInfos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_ActiveHardwareAlarmInfos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_ActiveHardwareAlarmInfos) ProtoMessage() {}

func (x *Devm_ActiveHardwareAlarmInfos) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_ActiveHardwareAlarmInfos.ProtoReflect.Descriptor instead.
func (*Devm_ActiveHardwareAlarmInfos) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 25}
}

func (x *Devm_ActiveHardwareAlarmInfos) GetActiveHardwareAlarmInfo() []*Devm_ActiveHardwareAlarmInfos_ActiveHardwareAlarmInfo {
	if x != nil {
		return x.ActiveHardwareAlarmInfo
	}
	return nil
}

type Devm_HistoryHardwareAlarmInfos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HistoryHardwareAlarmInfo []*Devm_HistoryHardwareAlarmInfos_HistoryHardwareAlarmInfo `protobuf:"bytes,1,rep,name=history_hardware_alarm_info,json=history-hardware-alarm-info,proto3" json:"history_hardware_alarm_info,omitempty"`
}

func (x *Devm_HistoryHardwareAlarmInfos) Reset() {
	*x = Devm_HistoryHardwareAlarmInfos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_HistoryHardwareAlarmInfos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_HistoryHardwareAlarmInfos) ProtoMessage() {}

func (x *Devm_HistoryHardwareAlarmInfos) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_HistoryHardwareAlarmInfos.ProtoReflect.Descriptor instead.
func (*Devm_HistoryHardwareAlarmInfos) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 26}
}

func (x *Devm_HistoryHardwareAlarmInfos) GetHistoryHardwareAlarmInfo() []*Devm_HistoryHardwareAlarmInfos_HistoryHardwareAlarmInfo {
	if x != nil {
		return x.HistoryHardwareAlarmInfo
	}
	return nil
}

type Devm_RemotePorts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemotePort []*Devm_RemotePorts_RemotePort `protobuf:"bytes,1,rep,name=remote_port,json=remote-port,proto3" json:"remote_port,omitempty"`
}

func (x *Devm_RemotePorts) Reset() {
	*x = Devm_RemotePorts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_RemotePorts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_RemotePorts) ProtoMessage() {}

func (x *Devm_RemotePorts) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_RemotePorts.ProtoReflect.Descriptor instead.
func (*Devm_RemotePorts) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 27}
}

func (x *Devm_RemotePorts) GetRemotePort() []*Devm_RemotePorts_RemotePort {
	if x != nil {
		return x.RemotePort
	}
	return nil
}

type Devm_DisableHardwareAlarms struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisableHardwareAlarm []*Devm_DisableHardwareAlarms_DisableHardwareAlarm `protobuf:"bytes,1,rep,name=disable_hardware_alarm,json=disable-hardware-alarm,proto3" json:"disable_hardware_alarm,omitempty"`
}

func (x *Devm_DisableHardwareAlarms) Reset() {
	*x = Devm_DisableHardwareAlarms{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_DisableHardwareAlarms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_DisableHardwareAlarms) ProtoMessage() {}

func (x *Devm_DisableHardwareAlarms) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_DisableHardwareAlarms.ProtoReflect.Descriptor instead.
func (*Devm_DisableHardwareAlarms) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 28}
}

func (x *Devm_DisableHardwareAlarms) GetDisableHardwareAlarm() []*Devm_DisableHardwareAlarms_DisableHardwareAlarm {
	if x != nil {
		return x.DisableHardwareAlarm
	}
	return nil
}

type Devm_PhysicalEntitys_PhysicalEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Class                  Devm_PhysicalEntitys_PhysicalEntity_Class        `protobuf:"varint,1,opt,name=class,proto3,enum=huawei_devm.Devm_PhysicalEntitys_PhysicalEntity_Class" json:"class,omitempty"`
	Position               string                                           `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`
	SerialNumber           string                                           `protobuf:"bytes,3,opt,name=serial_number,json=serial-number,proto3" json:"serial_number,omitempty"`
	Index                  uint32                                           `protobuf:"varint,4,opt,name=index,proto3" json:"index,omitempty"`
	ChassisIndex           uint32                                           `protobuf:"varint,5,opt,name=chassis_index,json=chassis-index,proto3" json:"chassis_index,omitempty"`
	BoardIndex             uint32                                           `protobuf:"varint,6,opt,name=board_index,json=board-index,proto3" json:"board_index,omitempty"`
	Name                   string                                           `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	EntityDescription      string                                           `protobuf:"bytes,8,opt,name=entity_description,json=entity-description,proto3" json:"entity_description,omitempty"`
	Alias                  string                                           `protobuf:"bytes,9,opt,name=alias,proto3" json:"alias,omitempty"`
	VendorType             string                                           `protobuf:"bytes,10,opt,name=vendor_type,json=vendor-type,proto3" json:"vendor_type,omitempty"`
	ContainedIndex         uint32                                           `protobuf:"varint,11,opt,name=contained_index,json=contained-index,proto3" json:"contained_index,omitempty"`
	ParentRelativePosition uint32                                           `protobuf:"varint,12,opt,name=parent_relative_position,json=parent-relative-position,proto3" json:"parent_relative_position,omitempty"`
	HardwareVersion        string                                           `protobuf:"bytes,13,opt,name=hardware_version,json=hardware-version,proto3" json:"hardware_version,omitempty"`
	FirmwareVersion        string                                           `protobuf:"bytes,14,opt,name=firmware_version,json=firmware-version,proto3" json:"firmware_version,omitempty"`
	SoftwareVersion        string                                           `protobuf:"bytes,15,opt,name=software_version,json=software-version,proto3" json:"software_version,omitempty"`
	ModuleName             string                                           `protobuf:"bytes,16,opt,name=module_name,json=module-name,proto3" json:"module_name,omitempty"`
	IsFru                  bool                                             `protobuf:"varint,17,opt,name=is_fru,json=is-fru,proto3" json:"is_fru,omitempty"`
	AdminState             Devm_PhysicalEntitys_PhysicalEntity_AdminState   `protobuf:"varint,18,opt,name=admin_state,json=admin-state,proto3,enum=huawei_devm.Devm_PhysicalEntitys_PhysicalEntity_AdminState" json:"admin_state,omitempty"`
	RunningState           Devm_PhysicalEntitys_PhysicalEntity_RunningState `protobuf:"varint,19,opt,name=running_state,json=running-state,proto3,enum=huawei_devm.Devm_PhysicalEntitys_PhysicalEntity_RunningState" json:"running_state,omitempty"`
	StandbyState           Devm_PhysicalEntitys_PhysicalEntity_StandbyState `protobuf:"varint,20,opt,name=standby_state,json=standby-state,proto3,enum=huawei_devm.Devm_PhysicalEntitys_PhysicalEntity_StandbyState" json:"standby_state,omitempty"`
	SystemOid              string                                           `protobuf:"bytes,21,opt,name=system_oid,json=system-oid,proto3" json:"system_oid,omitempty"`
	LsName                 string                                           `protobuf:"bytes,22,opt,name=ls_name,json=ls-name,proto3" json:"ls_name,omitempty"`
	Esn                    string                                           `protobuf:"bytes,23,opt,name=esn,proto3" json:"esn,omitempty"`
}

func (x *Devm_PhysicalEntitys_PhysicalEntity) Reset() {
	*x = Devm_PhysicalEntitys_PhysicalEntity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_PhysicalEntitys_PhysicalEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_PhysicalEntitys_PhysicalEntity) ProtoMessage() {}

func (x *Devm_PhysicalEntitys_PhysicalEntity) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_PhysicalEntitys_PhysicalEntity.ProtoReflect.Descriptor instead.
func (*Devm_PhysicalEntitys_PhysicalEntity) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *Devm_PhysicalEntitys_PhysicalEntity) GetClass() Devm_PhysicalEntitys_PhysicalEntity_Class {
	if x != nil {
		return x.Class
	}
	return Devm_PhysicalEntitys_PhysicalEntity_Class_OTHER
}

func (x *Devm_PhysicalEntitys_PhysicalEntity) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *Devm_PhysicalEntitys_PhysicalEntity) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *Devm_PhysicalEntitys_PhysicalEntity) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Devm_PhysicalEntitys_PhysicalEntity) GetChassisIndex() uint32 {
	if x != nil {
		return x.ChassisIndex
	}
	return 0
}

func (x *Devm_PhysicalEntitys_PhysicalEntity) GetBoardIndex() uint32 {
	if x != nil {
		return x.BoardIndex
	}
	return 0
}

func (x *Devm_PhysicalEntitys_PhysicalEntity) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Devm_PhysicalEntitys_PhysicalEntity) GetEntityDescription() string {
	if x != nil {
		return x.EntityDescription
	}
	return ""
}

func (x *Devm_PhysicalEntitys_PhysicalEntity) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *Devm_PhysicalEntitys_PhysicalEntity) GetVendorType() string {
	if x != nil {
		return x.VendorType
	}
	return ""
}

func (x *Devm_PhysicalEntitys_PhysicalEntity) GetContainedIndex() uint32 {
	if x != nil {
		return x.ContainedIndex
	}
	return 0
}

func (x *Devm_PhysicalEntitys_PhysicalEntity) GetParentRelativePosition() uint32 {
	if x != nil {
		return x.ParentRelativePosition
	}
	return 0
}

func (x *Devm_PhysicalEntitys_PhysicalEntity) GetHardwareVersion() string {
	if x != nil {
		return x.HardwareVersion
	}
	return ""
}

func (x *Devm_PhysicalEntitys_PhysicalEntity) GetFirmwareVersion() string {
	if x != nil {
		return x.FirmwareVersion
	}
	return ""
}

func (x *Devm_PhysicalEntitys_PhysicalEntity) GetSoftwareVersion() string {
	if x != nil {
		return x.SoftwareVersion
	}
	return ""
}

func (x *Devm_PhysicalEntitys_PhysicalEntity) GetModuleName() string {
	if x != nil {
		return x.ModuleName
	}
	return ""
}

func (x *Devm_PhysicalEntitys_PhysicalEntity) GetIsFru() bool {
	if x != nil {
		return x.IsFru
	}
	return false
}

func (x *Devm_PhysicalEntitys_PhysicalEntity) GetAdminState() Devm_PhysicalEntitys_PhysicalEntity_AdminState {
	if x != nil {
		return x.AdminState
	}
	return Devm_PhysicalEntitys_PhysicalEntity_AdminState_INACTIVE
}

func (x *Devm_PhysicalEntitys_PhysicalEntity) GetRunningState() Devm_PhysicalEntitys_PhysicalEntity_RunningState {
	if x != nil {
		return x.RunningState
	}
	return Devm_PhysicalEntitys_PhysicalEntity_RunningState_UNKNOWN
}

func (x *Devm_PhysicalEntitys_PhysicalEntity) GetStandbyState() Devm_PhysicalEntitys_PhysicalEntity_StandbyState {
	if x != nil {
		return x.StandbyState
	}
	return Devm_PhysicalEntitys_PhysicalEntity_StandbyState_MASTER
}

func (x *Devm_PhysicalEntitys_PhysicalEntity) GetSystemOid() string {
	if x != nil {
		return x.SystemOid
	}
	return ""
}

func (x *Devm_PhysicalEntitys_PhysicalEntity) GetLsName() string {
	if x != nil {
		return x.LsName
	}
	return ""
}

func (x *Devm_PhysicalEntitys_PhysicalEntity) GetEsn() string {
	if x != nil {
		return x.Esn
	}
	return ""
}

type Devm_LogicEntitys_LogicEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Class                  Devm_LogicEntitys_LogicEntity_Class     `protobuf:"varint,1,opt,name=class,proto3,enum=huawei_devm.Devm_LogicEntitys_LogicEntity_Class" json:"class,omitempty"`
	Position               string                                  `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`
	SerialNumber           string                                  `protobuf:"bytes,3,opt,name=serial_number,json=serial-number,proto3" json:"serial_number,omitempty"`
	VendorType             string                                  `protobuf:"bytes,4,opt,name=vendor_type,json=vendor-type,proto3" json:"vendor_type,omitempty"`
	Name                   string                                  `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	EntityDescription      string                                  `protobuf:"bytes,6,opt,name=entity_description,json=entity-description,proto3" json:"entity_description,omitempty"`
	Index                  uint32                                  `protobuf:"varint,7,opt,name=index,proto3" json:"index,omitempty"`
	OperState              Devm_LogicEntitys_LogicEntity_OperState `protobuf:"varint,8,opt,name=oper_state,json=oper-state,proto3,enum=huawei_devm.Devm_LogicEntitys_LogicEntity_OperState" json:"oper_state,omitempty"`
	ParentIndex            uint32                                  `protobuf:"varint,9,opt,name=parent_index,json=parent-index,proto3" json:"parent_index,omitempty"`
	ParentRelativePosition uint32                                  `protobuf:"varint,10,opt,name=parent_relative_position,json=parent-relative-position,proto3" json:"parent_relative_position,omitempty"`
	Memo                   string                                  `protobuf:"bytes,11,opt,name=memo,proto3" json:"memo,omitempty"`
}

func (x *Devm_LogicEntitys_LogicEntity) Reset() {
	*x = Devm_LogicEntitys_LogicEntity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LogicEntitys_LogicEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LogicEntitys_LogicEntity) ProtoMessage() {}

func (x *Devm_LogicEntitys_LogicEntity) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LogicEntitys_LogicEntity.ProtoReflect.Descriptor instead.
func (*Devm_LogicEntitys_LogicEntity) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *Devm_LogicEntitys_LogicEntity) GetClass() Devm_LogicEntitys_LogicEntity_Class {
	if x != nil {
		return x.Class
	}
	return Devm_LogicEntitys_LogicEntity_Class_OTHER
}

func (x *Devm_LogicEntitys_LogicEntity) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *Devm_LogicEntitys_LogicEntity) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *Devm_LogicEntitys_LogicEntity) GetVendorType() string {
	if x != nil {
		return x.VendorType
	}
	return ""
}

func (x *Devm_LogicEntitys_LogicEntity) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Devm_LogicEntitys_LogicEntity) GetEntityDescription() string {
	if x != nil {
		return x.EntityDescription
	}
	return ""
}

func (x *Devm_LogicEntitys_LogicEntity) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Devm_LogicEntitys_LogicEntity) GetOperState() Devm_LogicEntitys_LogicEntity_OperState {
	if x != nil {
		return x.OperState
	}
	return Devm_LogicEntitys_LogicEntity_OperState_UNKNOWN
}

func (x *Devm_LogicEntitys_LogicEntity) GetParentIndex() uint32 {
	if x != nil {
		return x.ParentIndex
	}
	return 0
}

func (x *Devm_LogicEntitys_LogicEntity) GetParentRelativePosition() uint32 {
	if x != nil {
		return x.ParentRelativePosition
	}
	return 0
}

func (x *Devm_LogicEntitys_LogicEntity) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

type Devm_Chassiss_Chassis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position             string                                      `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	Index                uint32                                      `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	Type                 string                                      `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	ServiceType          string                                      `protobuf:"bytes,4,opt,name=service_type,json=service-type,proto3" json:"service_type,omitempty"`
	SlotNum              uint32                                      `protobuf:"varint,5,opt,name=slot_num,json=slot-num,proto3" json:"slot_num,omitempty"`
	BoardNum             uint32                                      `protobuf:"varint,6,opt,name=board_num,json=board-num,proto3" json:"board_num,omitempty"`
	FanNum               uint32                                      `protobuf:"varint,7,opt,name=fan_num,json=fan-num,proto3" json:"fan_num,omitempty"`
	PowerNum             uint32                                      `protobuf:"varint,8,opt,name=power_num,json=power-num,proto3" json:"power_num,omitempty"`
	UpTime               uint32                                      `protobuf:"varint,9,opt,name=up_time,json=up-time,proto3" json:"up_time,omitempty"`
	StatusLastChange     uint32                                      `protobuf:"varint,10,opt,name=status_last_change,json=status-last-change,proto3" json:"status_last_change,omitempty"`
	EntityLastChange     uint32                                      `protobuf:"varint,11,opt,name=entity_last_change,json=entity-last-change,proto3" json:"entity_last_change,omitempty"`
	CurrentId            uint32                                      `protobuf:"varint,12,opt,name=current_id,json=current-id,proto3" json:"current_id,omitempty"`
	NextId               uint32                                      `protobuf:"varint,13,opt,name=next_id,json=next-id,proto3" json:"next_id,omitempty"`
	CurrentRunMode       Devm_Chassiss_Chassis_CurrentRunMode        `protobuf:"varint,14,opt,name=current_run_mode,json=current-run-mode,proto3,enum=huawei_devm.Devm_Chassiss_Chassis_CurrentRunMode" json:"current_run_mode,omitempty"`
	NextRunMode          Devm_Chassiss_Chassis_NextRunMode           `protobuf:"varint,15,opt,name=next_run_mode,json=next-run-mode,proto3,enum=huawei_devm.Devm_Chassiss_Chassis_NextRunMode" json:"next_run_mode,omitempty"`
	DustCleanCycle       uint32                                      `protobuf:"varint,16,opt,name=dust_clean_cycle,json=dust-clean-cycle,proto3" json:"dust_clean_cycle,omitempty"`
	LastCleanDate        string                                      `protobuf:"bytes,17,opt,name=last_clean_date,json=last-clean-date,proto3" json:"last_clean_date,omitempty"`
	UpToLastClean        uint32                                      `protobuf:"varint,18,opt,name=up_to_last_clean,json=up-to-last-clean,proto3" json:"up_to_last_clean,omitempty"`
	AlarmExistDays       uint32                                      `protobuf:"varint,19,opt,name=alarm_exist_days,json=alarm-exist-days,proto3" json:"alarm_exist_days,omitempty"`
	MonitorBoardChanges  *Devm_Chassiss_Chassis_MonitorBoardChanges  `protobuf:"bytes,20,opt,name=monitor_board_changes,json=monitor-board-changes,proto3" json:"monitor_board_changes,omitempty"`
	FanAttribute         *Devm_Chassiss_Chassis_FanAttribute         `protobuf:"bytes,21,opt,name=fan_attribute,json=fan-attribute,proto3" json:"fan_attribute,omitempty"`
	PowerSupplyAttribute *Devm_Chassiss_Chassis_PowerSupplyAttribute `protobuf:"bytes,22,opt,name=power_supply_attribute,json=power-supply-attribute,proto3" json:"power_supply_attribute,omitempty"`
	DustproofAttribute   *Devm_Chassiss_Chassis_DustproofAttribute   `protobuf:"bytes,23,opt,name=dustproof_attribute,json=dustproof-attribute,proto3" json:"dustproof_attribute,omitempty"`
	ChassisId            *Devm_Chassiss_Chassis_ChassisId            `protobuf:"bytes,24,opt,name=chassis_id,json=chassis-id,proto3" json:"chassis_id,omitempty"`
	ChassisRunMode       *Devm_Chassiss_Chassis_ChassisRunMode       `protobuf:"bytes,25,opt,name=chassis_run_mode,json=chassis-run-mode,proto3" json:"chassis_run_mode,omitempty"`
	PmInputAttribute     *Devm_Chassiss_Chassis_PmInputAttribute     `protobuf:"bytes,26,opt,name=pm_input_attribute,json=pm-input-attribute,proto3" json:"pm_input_attribute,omitempty"`
	ChassisSfuMode       *Devm_Chassiss_Chassis_ChassisSfuMode       `protobuf:"bytes,27,opt,name=chassis_sfu_mode,json=chassis-sfu-mode,proto3" json:"chassis_sfu_mode,omitempty"`
}

func (x *Devm_Chassiss_Chassis) Reset() {
	*x = Devm_Chassiss_Chassis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Chassiss_Chassis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Chassiss_Chassis) ProtoMessage() {}

func (x *Devm_Chassiss_Chassis) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Chassiss_Chassis.ProtoReflect.Descriptor instead.
func (*Devm_Chassiss_Chassis) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (x *Devm_Chassiss_Chassis) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *Devm_Chassiss_Chassis) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Devm_Chassiss_Chassis) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Devm_Chassiss_Chassis) GetServiceType() string {
	if x != nil {
		return x.ServiceType
	}
	return ""
}

func (x *Devm_Chassiss_Chassis) GetSlotNum() uint32 {
	if x != nil {
		return x.SlotNum
	}
	return 0
}

func (x *Devm_Chassiss_Chassis) GetBoardNum() uint32 {
	if x != nil {
		return x.BoardNum
	}
	return 0
}

func (x *Devm_Chassiss_Chassis) GetFanNum() uint32 {
	if x != nil {
		return x.FanNum
	}
	return 0
}

func (x *Devm_Chassiss_Chassis) GetPowerNum() uint32 {
	if x != nil {
		return x.PowerNum
	}
	return 0
}

func (x *Devm_Chassiss_Chassis) GetUpTime() uint32 {
	if x != nil {
		return x.UpTime
	}
	return 0
}

func (x *Devm_Chassiss_Chassis) GetStatusLastChange() uint32 {
	if x != nil {
		return x.StatusLastChange
	}
	return 0
}

func (x *Devm_Chassiss_Chassis) GetEntityLastChange() uint32 {
	if x != nil {
		return x.EntityLastChange
	}
	return 0
}

func (x *Devm_Chassiss_Chassis) GetCurrentId() uint32 {
	if x != nil {
		return x.CurrentId
	}
	return 0
}

func (x *Devm_Chassiss_Chassis) GetNextId() uint32 {
	if x != nil {
		return x.NextId
	}
	return 0
}

func (x *Devm_Chassiss_Chassis) GetCurrentRunMode() Devm_Chassiss_Chassis_CurrentRunMode {
	if x != nil {
		return x.CurrentRunMode
	}
	return Devm_Chassiss_Chassis_CurrentRunMode_UNKNOWN
}

func (x *Devm_Chassiss_Chassis) GetNextRunMode() Devm_Chassiss_Chassis_NextRunMode {
	if x != nil {
		return x.NextRunMode
	}
	return Devm_Chassiss_Chassis_NextRunMode_UNKNOWN
}

func (x *Devm_Chassiss_Chassis) GetDustCleanCycle() uint32 {
	if x != nil {
		return x.DustCleanCycle
	}
	return 0
}

func (x *Devm_Chassiss_Chassis) GetLastCleanDate() string {
	if x != nil {
		return x.LastCleanDate
	}
	return ""
}

func (x *Devm_Chassiss_Chassis) GetUpToLastClean() uint32 {
	if x != nil {
		return x.UpToLastClean
	}
	return 0
}

func (x *Devm_Chassiss_Chassis) GetAlarmExistDays() uint32 {
	if x != nil {
		return x.AlarmExistDays
	}
	return 0
}

func (x *Devm_Chassiss_Chassis) GetMonitorBoardChanges() *Devm_Chassiss_Chassis_MonitorBoardChanges {
	if x != nil {
		return x.MonitorBoardChanges
	}
	return nil
}

func (x *Devm_Chassiss_Chassis) GetFanAttribute() *Devm_Chassiss_Chassis_FanAttribute {
	if x != nil {
		return x.FanAttribute
	}
	return nil
}

func (x *Devm_Chassiss_Chassis) GetPowerSupplyAttribute() *Devm_Chassiss_Chassis_PowerSupplyAttribute {
	if x != nil {
		return x.PowerSupplyAttribute
	}
	return nil
}

func (x *Devm_Chassiss_Chassis) GetDustproofAttribute() *Devm_Chassiss_Chassis_DustproofAttribute {
	if x != nil {
		return x.DustproofAttribute
	}
	return nil
}

func (x *Devm_Chassiss_Chassis) GetChassisId() *Devm_Chassiss_Chassis_ChassisId {
	if x != nil {
		return x.ChassisId
	}
	return nil
}

func (x *Devm_Chassiss_Chassis) GetChassisRunMode() *Devm_Chassiss_Chassis_ChassisRunMode {
	if x != nil {
		return x.ChassisRunMode
	}
	return nil
}

func (x *Devm_Chassiss_Chassis) GetPmInputAttribute() *Devm_Chassiss_Chassis_PmInputAttribute {
	if x != nil {
		return x.PmInputAttribute
	}
	return nil
}

func (x *Devm_Chassiss_Chassis) GetChassisSfuMode() *Devm_Chassiss_Chassis_ChassisSfuMode {
	if x != nil {
		return x.ChassisSfuMode
	}
	return nil
}

type Devm_Chassiss_Chassis_MonitorBoardChanges struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MonitorBoardChange []*Devm_Chassiss_Chassis_MonitorBoardChanges_MonitorBoardChange `protobuf:"bytes,1,rep,name=monitor_board_change,json=monitor-board-change,proto3" json:"monitor_board_change,omitempty"`
}

func (x *Devm_Chassiss_Chassis_MonitorBoardChanges) Reset() {
	*x = Devm_Chassiss_Chassis_MonitorBoardChanges{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Chassiss_Chassis_MonitorBoardChanges) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Chassiss_Chassis_MonitorBoardChanges) ProtoMessage() {}

func (x *Devm_Chassiss_Chassis_MonitorBoardChanges) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Chassiss_Chassis_MonitorBoardChanges.ProtoReflect.Descriptor instead.
func (*Devm_Chassiss_Chassis_MonitorBoardChanges) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 2, 0, 0}
}

func (x *Devm_Chassiss_Chassis_MonitorBoardChanges) GetMonitorBoardChange() []*Devm_Chassiss_Chassis_MonitorBoardChanges_MonitorBoardChange {
	if x != nil {
		return x.MonitorBoardChange
	}
	return nil
}

type Devm_Chassiss_Chassis_FanAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Workmode Devm_Chassiss_Chassis_FanAttribute_Workmode `protobuf:"varint,1,opt,name=workmode,proto3,enum=huawei_devm.Devm_Chassiss_Chassis_FanAttribute_Workmode" json:"workmode,omitempty"`
	Speed    uint32                                      `protobuf:"varint,2,opt,name=speed,proto3" json:"speed,omitempty"`
}

func (x *Devm_Chassiss_Chassis_FanAttribute) Reset() {
	*x = Devm_Chassiss_Chassis_FanAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Chassiss_Chassis_FanAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Chassiss_Chassis_FanAttribute) ProtoMessage() {}

func (x *Devm_Chassiss_Chassis_FanAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Chassiss_Chassis_FanAttribute.ProtoReflect.Descriptor instead.
func (*Devm_Chassiss_Chassis_FanAttribute) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 2, 0, 1}
}

func (x *Devm_Chassiss_Chassis_FanAttribute) GetWorkmode() Devm_Chassiss_Chassis_FanAttribute_Workmode {
	if x != nil {
		return x.Workmode
	}
	return Devm_Chassiss_Chassis_FanAttribute_INVALID_ENUM_VALUE_Workmode
}

func (x *Devm_Chassiss_Chassis_FanAttribute) GetSpeed() uint32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

type Devm_Chassiss_Chassis_PowerSupplyAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PmOutputLimit              uint32                                                       `protobuf:"varint,1,opt,name=pm_output_limit,json=pm-output-limit,proto3" json:"pm_output_limit,omitempty"`
	PmInputVoltage_110         Devm_Chassiss_Chassis_PowerSupplyAttribute_PmInputVoltage110 `protobuf:"varint,2,opt,name=pm_input_voltage_110,json=pm-input-voltage-110,proto3,enum=huawei_devm.Devm_Chassiss_Chassis_PowerSupplyAttribute_PmInputVoltage110" json:"pm_input_voltage_110,omitempty"`
	PowerSupplyMode            Devm_Chassiss_Chassis_PowerSupplyAttribute_PowerSupplyMode   `protobuf:"varint,3,opt,name=power_supply_mode,json=power-supply-mode,proto3,enum=huawei_devm.Devm_Chassiss_Chassis_PowerSupplyAttribute_PowerSupplyMode" json:"power_supply_mode,omitempty"`
	PowerSupplyInput           uint32                                                       `protobuf:"varint,4,opt,name=power_supply_input,json=power-supply-input,proto3" json:"power_supply_input,omitempty"`
	PowerSupplyTemp            Devm_Chassiss_Chassis_PowerSupplyAttribute_PowerSupplyTemp   `protobuf:"varint,5,opt,name=power_supply_temp,json=power-supply-temp,proto3,enum=huawei_devm.Devm_Chassiss_Chassis_PowerSupplyAttribute_PowerSupplyTemp" json:"power_supply_temp,omitempty"`
	PowerSupplyLimit           uint32                                                       `protobuf:"varint,6,opt,name=power_supply_limit,json=power-supply-limit,proto3" json:"power_supply_limit,omitempty"`
	PowerSupplyAlarmLimit      uint32                                                       `protobuf:"varint,7,opt,name=power_supply_alarm_limit,json=power-supply-alarm-limit,proto3" json:"power_supply_alarm_limit,omitempty"`
	PowerSupplyAssigned        uint32                                                       `protobuf:"varint,8,opt,name=power_supply_assigned,json=power-supply-assigned,proto3" json:"power_supply_assigned,omitempty"`
	PowerSupplyAssignedUtility string                                                       `protobuf:"bytes,9,opt,name=power_supply_assigned_utility,json=power-supply-assigned-utility,proto3" json:"power_supply_assigned_utility,omitempty"`
	PowerSupplyLeft            int32                                                        `protobuf:"varint,10,opt,name=power_supply_left,json=power-supply-left,proto3" json:"power_supply_left,omitempty"`
	PowerSupplyReal            uint32                                                       `protobuf:"varint,11,opt,name=power_supply_real,json=power-supply-real,proto3" json:"power_supply_real,omitempty"`
	PowerSupplyRealUtility     string                                                       `protobuf:"bytes,12,opt,name=power_supply_real_utility,json=power-supply-real-utility,proto3" json:"power_supply_real_utility,omitempty"`
	CurrentPowerConsumption    string                                                       `protobuf:"bytes,13,opt,name=current_power_consumption,json=current-power-consumption,proto3" json:"current_power_consumption,omitempty"`
	AveragePowerConsumption    string                                                       `protobuf:"bytes,14,opt,name=average_power_consumption,json=average-power-consumption,proto3" json:"average_power_consumption,omitempty"`
}

func (x *Devm_Chassiss_Chassis_PowerSupplyAttribute) Reset() {
	*x = Devm_Chassiss_Chassis_PowerSupplyAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Chassiss_Chassis_PowerSupplyAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Chassiss_Chassis_PowerSupplyAttribute) ProtoMessage() {}

func (x *Devm_Chassiss_Chassis_PowerSupplyAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Chassiss_Chassis_PowerSupplyAttribute.ProtoReflect.Descriptor instead.
func (*Devm_Chassiss_Chassis_PowerSupplyAttribute) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 2, 0, 2}
}

func (x *Devm_Chassiss_Chassis_PowerSupplyAttribute) GetPmOutputLimit() uint32 {
	if x != nil {
		return x.PmOutputLimit
	}
	return 0
}

func (x *Devm_Chassiss_Chassis_PowerSupplyAttribute) GetPmInputVoltage_110() Devm_Chassiss_Chassis_PowerSupplyAttribute_PmInputVoltage110 {
	if x != nil {
		return x.PmInputVoltage_110
	}
	return Devm_Chassiss_Chassis_PowerSupplyAttribute_PmInputVoltage110_NO
}

func (x *Devm_Chassiss_Chassis_PowerSupplyAttribute) GetPowerSupplyMode() Devm_Chassiss_Chassis_PowerSupplyAttribute_PowerSupplyMode {
	if x != nil {
		return x.PowerSupplyMode
	}
	return Devm_Chassiss_Chassis_PowerSupplyAttribute_INVALID_ENUM_VALUE_PowerSupplyMode
}

func (x *Devm_Chassiss_Chassis_PowerSupplyAttribute) GetPowerSupplyInput() uint32 {
	if x != nil {
		return x.PowerSupplyInput
	}
	return 0
}

func (x *Devm_Chassiss_Chassis_PowerSupplyAttribute) GetPowerSupplyTemp() Devm_Chassiss_Chassis_PowerSupplyAttribute_PowerSupplyTemp {
	if x != nil {
		return x.PowerSupplyTemp
	}
	return Devm_Chassiss_Chassis_PowerSupplyAttribute_INVALID_ENUM_VALUE_PowerSupplyTemp
}

func (x *Devm_Chassiss_Chassis_PowerSupplyAttribute) GetPowerSupplyLimit() uint32 {
	if x != nil {
		return x.PowerSupplyLimit
	}
	return 0
}

func (x *Devm_Chassiss_Chassis_PowerSupplyAttribute) GetPowerSupplyAlarmLimit() uint32 {
	if x != nil {
		return x.PowerSupplyAlarmLimit
	}
	return 0
}

func (x *Devm_Chassiss_Chassis_PowerSupplyAttribute) GetPowerSupplyAssigned() uint32 {
	if x != nil {
		return x.PowerSupplyAssigned
	}
	return 0
}

func (x *Devm_Chassiss_Chassis_PowerSupplyAttribute) GetPowerSupplyAssignedUtility() string {
	if x != nil {
		return x.PowerSupplyAssignedUtility
	}
	return ""
}

func (x *Devm_Chassiss_Chassis_PowerSupplyAttribute) GetPowerSupplyLeft() int32 {
	if x != nil {
		return x.PowerSupplyLeft
	}
	return 0
}

func (x *Devm_Chassiss_Chassis_PowerSupplyAttribute) GetPowerSupplyReal() uint32 {
	if x != nil {
		return x.PowerSupplyReal
	}
	return 0
}

func (x *Devm_Chassiss_Chassis_PowerSupplyAttribute) GetPowerSupplyRealUtility() string {
	if x != nil {
		return x.PowerSupplyRealUtility
	}
	return ""
}

func (x *Devm_Chassiss_Chassis_PowerSupplyAttribute) GetCurrentPowerConsumption() string {
	if x != nil {
		return x.CurrentPowerConsumption
	}
	return ""
}

func (x *Devm_Chassiss_Chassis_PowerSupplyAttribute) GetAveragePowerConsumption() string {
	if x != nil {
		return x.AveragePowerConsumption
	}
	return ""
}

type Devm_Chassiss_Chassis_DustproofAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dustproofcheck     Devm_Chassiss_Chassis_DustproofAttribute_Dustproofcheck `protobuf:"varint,1,opt,name=dustproofcheck,proto3,enum=huawei_devm.Devm_Chassiss_Chassis_DustproofAttribute_Dustproofcheck" json:"dustproofcheck,omitempty"`
	DustproofDelayTime uint32                                                  `protobuf:"varint,2,opt,name=dustproof_delay_time,json=dustproof-delay-time,proto3" json:"dustproof_delay_time,omitempty"`
}

func (x *Devm_Chassiss_Chassis_DustproofAttribute) Reset() {
	*x = Devm_Chassiss_Chassis_DustproofAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Chassiss_Chassis_DustproofAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Chassiss_Chassis_DustproofAttribute) ProtoMessage() {}

func (x *Devm_Chassiss_Chassis_DustproofAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Chassiss_Chassis_DustproofAttribute.ProtoReflect.Descriptor instead.
func (*Devm_Chassiss_Chassis_DustproofAttribute) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 2, 0, 3}
}

func (x *Devm_Chassiss_Chassis_DustproofAttribute) GetDustproofcheck() Devm_Chassiss_Chassis_DustproofAttribute_Dustproofcheck {
	if x != nil {
		return x.Dustproofcheck
	}
	return Devm_Chassiss_Chassis_DustproofAttribute_Dustproofcheck_ENABLE
}

func (x *Devm_Chassiss_Chassis_DustproofAttribute) GetDustproofDelayTime() uint32 {
	if x != nil {
		return x.DustproofDelayTime
	}
	return 0
}

type Devm_Chassiss_Chassis_ChassisId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentId uint32 `protobuf:"varint,1,opt,name=current_id,json=current-id,proto3" json:"current_id,omitempty"`
	NextId    uint32 `protobuf:"varint,2,opt,name=next_id,json=next-id,proto3" json:"next_id,omitempty"`
}

func (x *Devm_Chassiss_Chassis_ChassisId) Reset() {
	*x = Devm_Chassiss_Chassis_ChassisId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Chassiss_Chassis_ChassisId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Chassiss_Chassis_ChassisId) ProtoMessage() {}

func (x *Devm_Chassiss_Chassis_ChassisId) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Chassiss_Chassis_ChassisId.ProtoReflect.Descriptor instead.
func (*Devm_Chassiss_Chassis_ChassisId) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 2, 0, 4}
}

func (x *Devm_Chassiss_Chassis_ChassisId) GetCurrentId() uint32 {
	if x != nil {
		return x.CurrentId
	}
	return 0
}

func (x *Devm_Chassiss_Chassis_ChassisId) GetNextId() uint32 {
	if x != nil {
		return x.NextId
	}
	return 0
}

type Devm_Chassiss_Chassis_ChassisRunMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentRunMode Devm_Chassiss_Chassis_ChassisRunMode_CurrentRunMode `protobuf:"varint,1,opt,name=current_run_mode,json=current-run-mode,proto3,enum=huawei_devm.Devm_Chassiss_Chassis_ChassisRunMode_CurrentRunMode" json:"current_run_mode,omitempty"`
	NextRunMode    Devm_Chassiss_Chassis_ChassisRunMode_NextRunMode    `protobuf:"varint,2,opt,name=next_run_mode,json=next-run-mode,proto3,enum=huawei_devm.Devm_Chassiss_Chassis_ChassisRunMode_NextRunMode" json:"next_run_mode,omitempty"`
}

func (x *Devm_Chassiss_Chassis_ChassisRunMode) Reset() {
	*x = Devm_Chassiss_Chassis_ChassisRunMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Chassiss_Chassis_ChassisRunMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Chassiss_Chassis_ChassisRunMode) ProtoMessage() {}

func (x *Devm_Chassiss_Chassis_ChassisRunMode) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Chassiss_Chassis_ChassisRunMode.ProtoReflect.Descriptor instead.
func (*Devm_Chassiss_Chassis_ChassisRunMode) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 2, 0, 5}
}

func (x *Devm_Chassiss_Chassis_ChassisRunMode) GetCurrentRunMode() Devm_Chassiss_Chassis_ChassisRunMode_CurrentRunMode {
	if x != nil {
		return x.CurrentRunMode
	}
	return Devm_Chassiss_Chassis_ChassisRunMode_INVALID_ENUM_VALUE_CurrentRunMode
}

func (x *Devm_Chassiss_Chassis_ChassisRunMode) GetNextRunMode() Devm_Chassiss_Chassis_ChassisRunMode_NextRunMode {
	if x != nil {
		return x.NextRunMode
	}
	return Devm_Chassiss_Chassis_ChassisRunMode_INVALID_ENUM_VALUE_NextRunMode
}

type Devm_Chassiss_Chassis_PmInputAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PmInputMode Devm_Chassiss_Chassis_PmInputAttribute_PmInputMode `protobuf:"varint,1,opt,name=pm_input_mode,json=pm-input-mode,proto3,enum=huawei_devm.Devm_Chassiss_Chassis_PmInputAttribute_PmInputMode" json:"pm_input_mode,omitempty"`
}

func (x *Devm_Chassiss_Chassis_PmInputAttribute) Reset() {
	*x = Devm_Chassiss_Chassis_PmInputAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Chassiss_Chassis_PmInputAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Chassiss_Chassis_PmInputAttribute) ProtoMessage() {}

func (x *Devm_Chassiss_Chassis_PmInputAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Chassiss_Chassis_PmInputAttribute.ProtoReflect.Descriptor instead.
func (*Devm_Chassiss_Chassis_PmInputAttribute) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 2, 0, 6}
}

func (x *Devm_Chassiss_Chassis_PmInputAttribute) GetPmInputMode() Devm_Chassiss_Chassis_PmInputAttribute_PmInputMode {
	if x != nil {
		return x.PmInputMode
	}
	return Devm_Chassiss_Chassis_PmInputAttribute_PmInputMode_DEFAULT
}

type Devm_Chassiss_Chassis_ChassisSfuMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentSfuMode Devm_Chassiss_Chassis_ChassisSfuMode_CurrentSfuMode `protobuf:"varint,1,opt,name=current_sfu_mode,json=current-sfu-mode,proto3,enum=huawei_devm.Devm_Chassiss_Chassis_ChassisSfuMode_CurrentSfuMode" json:"current_sfu_mode,omitempty"`
	NextSfuMode    Devm_Chassiss_Chassis_ChassisSfuMode_NextSfuMode    `protobuf:"varint,2,opt,name=next_sfu_mode,json=next-sfu-mode,proto3,enum=huawei_devm.Devm_Chassiss_Chassis_ChassisSfuMode_NextSfuMode" json:"next_sfu_mode,omitempty"`
}

func (x *Devm_Chassiss_Chassis_ChassisSfuMode) Reset() {
	*x = Devm_Chassiss_Chassis_ChassisSfuMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Chassiss_Chassis_ChassisSfuMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Chassiss_Chassis_ChassisSfuMode) ProtoMessage() {}

func (x *Devm_Chassiss_Chassis_ChassisSfuMode) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Chassiss_Chassis_ChassisSfuMode.ProtoReflect.Descriptor instead.
func (*Devm_Chassiss_Chassis_ChassisSfuMode) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 2, 0, 7}
}

func (x *Devm_Chassiss_Chassis_ChassisSfuMode) GetCurrentSfuMode() Devm_Chassiss_Chassis_ChassisSfuMode_CurrentSfuMode {
	if x != nil {
		return x.CurrentSfuMode
	}
	return Devm_Chassiss_Chassis_ChassisSfuMode_INVALID_ENUM_VALUE_CurrentSfuMode
}

func (x *Devm_Chassiss_Chassis_ChassisSfuMode) GetNextSfuMode() Devm_Chassiss_Chassis_ChassisSfuMode_NextSfuMode {
	if x != nil {
		return x.NextSfuMode
	}
	return Devm_Chassiss_Chassis_ChassisSfuMode_INVALID_ENUM_VALUE_NextSfuMode
}

type Devm_Chassiss_Chassis_MonitorBoardChanges_MonitorBoardChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BoardIndex       uint32 `protobuf:"varint,1,opt,name=board_index,json=board-index,proto3" json:"board_index,omitempty"`
	StatusLastChange uint32 `protobuf:"varint,2,opt,name=status_last_change,json=status-last-change,proto3" json:"status_last_change,omitempty"`
	EntityLastChange uint32 `protobuf:"varint,3,opt,name=entity_last_change,json=entity-last-change,proto3" json:"entity_last_change,omitempty"`
}

func (x *Devm_Chassiss_Chassis_MonitorBoardChanges_MonitorBoardChange) Reset() {
	*x = Devm_Chassiss_Chassis_MonitorBoardChanges_MonitorBoardChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Chassiss_Chassis_MonitorBoardChanges_MonitorBoardChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Chassiss_Chassis_MonitorBoardChanges_MonitorBoardChange) ProtoMessage() {}

func (x *Devm_Chassiss_Chassis_MonitorBoardChanges_MonitorBoardChange) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Chassiss_Chassis_MonitorBoardChanges_MonitorBoardChange.ProtoReflect.Descriptor instead.
func (*Devm_Chassiss_Chassis_MonitorBoardChanges_MonitorBoardChange) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0}
}

func (x *Devm_Chassiss_Chassis_MonitorBoardChanges_MonitorBoardChange) GetBoardIndex() uint32 {
	if x != nil {
		return x.BoardIndex
	}
	return 0
}

func (x *Devm_Chassiss_Chassis_MonitorBoardChanges_MonitorBoardChange) GetStatusLastChange() uint32 {
	if x != nil {
		return x.StatusLastChange
	}
	return 0
}

func (x *Devm_Chassiss_Chassis_MonitorBoardChanges_MonitorBoardChange) GetEntityLastChange() uint32 {
	if x != nil {
		return x.EntityLastChange
	}
	return 0
}

type Devm_LogicContainers_LogicContainer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position             string                                                    `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	Index                uint32                                                    `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	ContainerType        Devm_LogicContainers_LogicContainer_ContainerType         `protobuf:"varint,3,opt,name=container_type,json=container-type,proto3,enum=huawei_devm.Devm_LogicContainers_LogicContainer_ContainerType" json:"container_type,omitempty"`
	EquipedEntityType    Devm_LogicContainers_LogicContainer_EquipedEntityType     `protobuf:"varint,4,opt,name=equiped_entity_type,json=equiped-entity-type,proto3,enum=huawei_devm.Devm_LogicContainers_LogicContainer_EquipedEntityType" json:"equiped_entity_type,omitempty"`
	SupportedEntityTypes *Devm_LogicContainers_LogicContainer_SupportedEntityTypes `protobuf:"bytes,5,opt,name=supported_entity_types,json=supported-entity-types,proto3" json:"supported_entity_types,omitempty"`
}

func (x *Devm_LogicContainers_LogicContainer) Reset() {
	*x = Devm_LogicContainers_LogicContainer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LogicContainers_LogicContainer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LogicContainers_LogicContainer) ProtoMessage() {}

func (x *Devm_LogicContainers_LogicContainer) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LogicContainers_LogicContainer.ProtoReflect.Descriptor instead.
func (*Devm_LogicContainers_LogicContainer) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 3, 0}
}

func (x *Devm_LogicContainers_LogicContainer) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *Devm_LogicContainers_LogicContainer) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Devm_LogicContainers_LogicContainer) GetContainerType() Devm_LogicContainers_LogicContainer_ContainerType {
	if x != nil {
		return x.ContainerType
	}
	return Devm_LogicContainers_LogicContainer_ContainerType_UNKNOWN
}

func (x *Devm_LogicContainers_LogicContainer) GetEquipedEntityType() Devm_LogicContainers_LogicContainer_EquipedEntityType {
	if x != nil {
		return x.EquipedEntityType
	}
	return Devm_LogicContainers_LogicContainer_EquipedEntityType_UNKNOWN
}

func (x *Devm_LogicContainers_LogicContainer) GetSupportedEntityTypes() *Devm_LogicContainers_LogicContainer_SupportedEntityTypes {
	if x != nil {
		return x.SupportedEntityTypes
	}
	return nil
}

type Devm_LogicContainers_LogicContainer_SupportedEntityTypes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SupportedEntityType []*Devm_LogicContainers_LogicContainer_SupportedEntityTypes_SupportedEntityType `protobuf:"bytes,1,rep,name=supported_entity_type,json=supported-entity-type,proto3" json:"supported_entity_type,omitempty"`
}

func (x *Devm_LogicContainers_LogicContainer_SupportedEntityTypes) Reset() {
	*x = Devm_LogicContainers_LogicContainer_SupportedEntityTypes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LogicContainers_LogicContainer_SupportedEntityTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LogicContainers_LogicContainer_SupportedEntityTypes) ProtoMessage() {}

func (x *Devm_LogicContainers_LogicContainer_SupportedEntityTypes) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LogicContainers_LogicContainer_SupportedEntityTypes.ProtoReflect.Descriptor instead.
func (*Devm_LogicContainers_LogicContainer_SupportedEntityTypes) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 3, 0, 0}
}

func (x *Devm_LogicContainers_LogicContainer_SupportedEntityTypes) GetSupportedEntityType() []*Devm_LogicContainers_LogicContainer_SupportedEntityTypes_SupportedEntityType {
	if x != nil {
		return x.SupportedEntityType
	}
	return nil
}

type Devm_LogicContainers_LogicContainer_SupportedEntityTypes_SupportedEntityType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityType Devm_LogicContainers_LogicContainer_SupportedEntityTypes_SupportedEntityType_EntityType `protobuf:"varint,1,opt,name=entity_type,json=entity-type,proto3,enum=huawei_devm.Devm_LogicContainers_LogicContainer_SupportedEntityTypes_SupportedEntityType_EntityType" json:"entity_type,omitempty"`
}

func (x *Devm_LogicContainers_LogicContainer_SupportedEntityTypes_SupportedEntityType) Reset() {
	*x = Devm_LogicContainers_LogicContainer_SupportedEntityTypes_SupportedEntityType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LogicContainers_LogicContainer_SupportedEntityTypes_SupportedEntityType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LogicContainers_LogicContainer_SupportedEntityTypes_SupportedEntityType) ProtoMessage() {}

func (x *Devm_LogicContainers_LogicContainer_SupportedEntityTypes_SupportedEntityType) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LogicContainers_LogicContainer_SupportedEntityTypes_SupportedEntityType.ProtoReflect.Descriptor instead.
func (*Devm_LogicContainers_LogicContainer_SupportedEntityTypes_SupportedEntityType) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 3, 0, 0, 0}
}

func (x *Devm_LogicContainers_LogicContainer_SupportedEntityTypes_SupportedEntityType) GetEntityType() Devm_LogicContainers_LogicContainer_SupportedEntityTypes_SupportedEntityType_EntityType {
	if x != nil {
		return x.EntityType
	}
	return Devm_LogicContainers_LogicContainer_SupportedEntityTypes_SupportedEntityType_EntityType_UNKNOWN
}

type Devm_Containers_Container struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position             string                                          `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	Index                uint32                                          `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	Type                 string                                          `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	EquipedEntityType    string                                          `protobuf:"bytes,4,opt,name=equiped_entity_type,json=equiped-entity-type,proto3" json:"equiped_entity_type,omitempty"`
	SupportedEntityTypes *Devm_Containers_Container_SupportedEntityTypes `protobuf:"bytes,5,opt,name=supported_entity_types,json=supported-entity-types,proto3" json:"supported_entity_types,omitempty"`
	Present              Devm_Containers_Container_Present               `protobuf:"varint,6,opt,name=present,proto3,enum=huawei_devm.Devm_Containers_Container_Present" json:"present,omitempty"`
}

func (x *Devm_Containers_Container) Reset() {
	*x = Devm_Containers_Container{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Containers_Container) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Containers_Container) ProtoMessage() {}

func (x *Devm_Containers_Container) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Containers_Container.ProtoReflect.Descriptor instead.
func (*Devm_Containers_Container) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 4, 0}
}

func (x *Devm_Containers_Container) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *Devm_Containers_Container) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Devm_Containers_Container) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Devm_Containers_Container) GetEquipedEntityType() string {
	if x != nil {
		return x.EquipedEntityType
	}
	return ""
}

func (x *Devm_Containers_Container) GetSupportedEntityTypes() *Devm_Containers_Container_SupportedEntityTypes {
	if x != nil {
		return x.SupportedEntityTypes
	}
	return nil
}

func (x *Devm_Containers_Container) GetPresent() Devm_Containers_Container_Present {
	if x != nil {
		return x.Present
	}
	return Devm_Containers_Container_Present_ABSENT
}

type Devm_Containers_Container_SupportedEntityTypes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SupportedEntityType []*Devm_Containers_Container_SupportedEntityTypes_SupportedEntityType `protobuf:"bytes,1,rep,name=supported_entity_type,json=supported-entity-type,proto3" json:"supported_entity_type,omitempty"`
}

func (x *Devm_Containers_Container_SupportedEntityTypes) Reset() {
	*x = Devm_Containers_Container_SupportedEntityTypes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Containers_Container_SupportedEntityTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Containers_Container_SupportedEntityTypes) ProtoMessage() {}

func (x *Devm_Containers_Container_SupportedEntityTypes) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Containers_Container_SupportedEntityTypes.ProtoReflect.Descriptor instead.
func (*Devm_Containers_Container_SupportedEntityTypes) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 4, 0, 0}
}

func (x *Devm_Containers_Container_SupportedEntityTypes) GetSupportedEntityType() []*Devm_Containers_Container_SupportedEntityTypes_SupportedEntityType {
	if x != nil {
		return x.SupportedEntityType
	}
	return nil
}

type Devm_Containers_Container_SupportedEntityTypes_SupportedEntityType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityType string `protobuf:"bytes,1,opt,name=entity_type,json=entity-type,proto3" json:"entity_type,omitempty"`
}

func (x *Devm_Containers_Container_SupportedEntityTypes_SupportedEntityType) Reset() {
	*x = Devm_Containers_Container_SupportedEntityTypes_SupportedEntityType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Containers_Container_SupportedEntityTypes_SupportedEntityType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Containers_Container_SupportedEntityTypes_SupportedEntityType) ProtoMessage() {}

func (x *Devm_Containers_Container_SupportedEntityTypes_SupportedEntityType) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Containers_Container_SupportedEntityTypes_SupportedEntityType.ProtoReflect.Descriptor instead.
func (*Devm_Containers_Container_SupportedEntityTypes_SupportedEntityType) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 4, 0, 0, 0}
}

func (x *Devm_Containers_Container_SupportedEntityTypes_SupportedEntityType) GetEntityType() string {
	if x != nil {
		return x.EntityType
	}
	return ""
}

type Devm_MpuBoards_MpuBoard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position                  string                                             `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	Index                     uint32                                             `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	BoardType                 string                                             `protobuf:"bytes,3,opt,name=board_type,json=board-type,proto3" json:"board_type,omitempty"`
	UpTime                    uint32                                             `protobuf:"varint,4,opt,name=up_time,json=up-time,proto3" json:"up_time,omitempty"`
	SdramSize                 uint32                                             `protobuf:"varint,5,opt,name=sdram_size,json=sdram-size,proto3" json:"sdram_size,omitempty"`
	NvramSize                 uint32                                             `protobuf:"varint,6,opt,name=nvram_size,json=nvram-size,proto3" json:"nvram_size,omitempty"`
	FlashSize                 uint32                                             `protobuf:"varint,7,opt,name=flash_size,json=flash-size,proto3" json:"flash_size,omitempty"`
	LsRole                    Devm_MpuBoards_MpuBoard_LsRole                     `protobuf:"varint,8,opt,name=ls_role,json=ls-role,proto3,enum=huawei_devm.Devm_MpuBoards_MpuBoard_LsRole" json:"ls_role,omitempty"`
	LastResetTime             string                                             `protobuf:"bytes,9,opt,name=last_reset_time,json=last-reset-time,proto3" json:"last_reset_time,omitempty"`
	LastResetReason           string                                             `protobuf:"bytes,10,opt,name=last_reset_reason,json=last-reset-reason,proto3" json:"last_reset_reason,omitempty"`
	RegisterTime              string                                             `protobuf:"bytes,11,opt,name=register_time,json=register-time,proto3" json:"register_time,omitempty"`
	IsRegister                bool                                               `protobuf:"varint,12,opt,name=is_register,json=is-register,proto3" json:"is_register,omitempty"`
	CfcardSize                uint32                                             `protobuf:"varint,13,opt,name=cfcard_size,json=cfcard-size,proto3" json:"cfcard_size,omitempty"`
	Cfcard2Size               uint32                                             `protobuf:"varint,14,opt,name=cfcard2_size,json=cfcard2-size,proto3" json:"cfcard2_size,omitempty"`
	Bras                      *Devm_MpuBoards_MpuBoard_Bras                      `protobuf:"bytes,15,opt,name=bras,proto3" json:"bras,omitempty"`
	L2Tp                      *Devm_MpuBoards_MpuBoard_L2Tp                      `protobuf:"bytes,16,opt,name=l2tp,proto3" json:"l2tp,omitempty"`
	BrasPppox                 *Devm_MpuBoards_MpuBoard_BrasPppox                 `protobuf:"bytes,17,opt,name=bras_pppox,json=bras-pppox,proto3" json:"bras_pppox,omitempty"`
	Cpudefend                 *Devm_MpuBoards_MpuBoard_Cpudefend                 `protobuf:"bytes,18,opt,name=cpudefend,proto3" json:"cpudefend,omitempty"`
	CpudefendDevm             *Devm_MpuBoards_MpuBoard_CpudefendDevm             `protobuf:"bytes,19,opt,name=cpudefend_devm,json=cpudefend-devm,proto3" json:"cpudefend_devm,omitempty"`
	CmacPadding               *Devm_MpuBoards_MpuBoard_CmacPadding               `protobuf:"bytes,20,opt,name=cmac_padding,json=cmac-padding,proto3" json:"cmac_padding,omitempty"`
	Fim                       *Devm_MpuBoards_MpuBoard_Fim                       `protobuf:"bytes,21,opt,name=fim,proto3" json:"fim,omitempty"`
	MacmtuDiscardStatistics   *Devm_MpuBoards_MpuBoard_MacmtuDiscardStatistics   `protobuf:"bytes,22,opt,name=macmtu_discard_statistics,json=macmtu-discard-statistics,proto3" json:"macmtu_discard_statistics,omitempty"`
	VeMacAddress              *Devm_MpuBoards_MpuBoard_VeMacAddress              `protobuf:"bytes,23,opt,name=ve_mac_address,json=ve-mac-address,proto3" json:"ve_mac_address,omitempty"`
	ManagementPlaneDefendSlot *Devm_MpuBoards_MpuBoard_ManagementPlaneDefendSlot `protobuf:"bytes,24,opt,name=management_plane_defend_slot,json=management-plane-defend-slot,proto3" json:"management_plane_defend_slot,omitempty"`
	LinkProtocolTransport     *Devm_MpuBoards_MpuBoard_LinkProtocolTransport     `protobuf:"bytes,25,opt,name=link_protocol_transport,json=link-protocol-transport,proto3" json:"link_protocol_transport,omitempty"`
	Loadbalance               *Devm_MpuBoards_MpuBoard_Loadbalance               `protobuf:"bytes,26,opt,name=loadbalance,proto3" json:"loadbalance,omitempty"`
	Mirror                    *Devm_MpuBoards_MpuBoard_Mirror                    `protobuf:"bytes,27,opt,name=mirror,proto3" json:"mirror,omitempty"`
	MplsForward               *Devm_MpuBoards_MpuBoard_MplsForward               `protobuf:"bytes,28,opt,name=mpls_forward,json=mpls-forward,proto3" json:"mpls_forward,omitempty"`
	Netstream                 *Devm_MpuBoards_MpuBoard_Netstream                 `protobuf:"bytes,29,opt,name=netstream,proto3" json:"netstream,omitempty"`
	Pbr                       *Devm_MpuBoards_MpuBoard_Pbr                       `protobuf:"bytes,30,opt,name=pbr,proto3" json:"pbr,omitempty"`
	Qos                       *Devm_MpuBoards_MpuBoard_Qos                       `protobuf:"bytes,31,opt,name=qos,proto3" json:"qos,omitempty"`
	Soc                       *Devm_MpuBoards_MpuBoard_Soc                       `protobuf:"bytes,32,opt,name=soc,proto3" json:"soc,omitempty"`
	UnicastForward            *Devm_MpuBoards_MpuBoard_UnicastForward            `protobuf:"bytes,33,opt,name=unicast_forward,json=unicast-forward,proto3" json:"unicast_forward,omitempty"`
	CfmMacLevelEnableMpu      *Devm_MpuBoards_MpuBoard_CfmMacLevelEnableMpu      `protobuf:"bytes,34,opt,name=cfm_mac_level_enable_mpu,json=cfm-mac-level-enable-mpu,proto3" json:"cfm_mac_level_enable_mpu,omitempty"`
	Dhcpv6Access              *Devm_MpuBoards_MpuBoard_Dhcpv6Access              `protobuf:"bytes,35,opt,name=dhcpv6_access,json=dhcpv6-access,proto3" json:"dhcpv6_access,omitempty"`
	HttpsRedirect             *Devm_MpuBoards_MpuBoard_HttpsRedirect             `protobuf:"bytes,36,opt,name=https_redirect,json=https-redirect,proto3" json:"https_redirect,omitempty"`
	FramePaddingFix           *Devm_MpuBoards_MpuBoard_FramePaddingFix           `protobuf:"bytes,37,opt,name=frame_padding_fix,json=frame-padding-fix,proto3" json:"frame_padding_fix,omitempty"`
	PppNet                    *Devm_MpuBoards_MpuBoard_PppNet                    `protobuf:"bytes,38,opt,name=ppp_net,json=ppp-net,proto3" json:"ppp_net,omitempty"`
	Sflow                     *Devm_MpuBoards_MpuBoard_Sflow                     `protobuf:"bytes,39,opt,name=sflow,proto3" json:"sflow,omitempty"`
	Dcb                       *Devm_MpuBoards_MpuBoard_Dcb                       `protobuf:"bytes,40,opt,name=dcb,proto3" json:"dcb,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard) Reset() {
	*x = Devm_MpuBoards_MpuBoard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0}
}

func (x *Devm_MpuBoards_MpuBoard) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *Devm_MpuBoards_MpuBoard) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard) GetBoardType() string {
	if x != nil {
		return x.BoardType
	}
	return ""
}

func (x *Devm_MpuBoards_MpuBoard) GetUpTime() uint32 {
	if x != nil {
		return x.UpTime
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard) GetSdramSize() uint32 {
	if x != nil {
		return x.SdramSize
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard) GetNvramSize() uint32 {
	if x != nil {
		return x.NvramSize
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard) GetFlashSize() uint32 {
	if x != nil {
		return x.FlashSize
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard) GetLsRole() Devm_MpuBoards_MpuBoard_LsRole {
	if x != nil {
		return x.LsRole
	}
	return Devm_MpuBoards_MpuBoard_LsRole_UNKNOWN
}

func (x *Devm_MpuBoards_MpuBoard) GetLastResetTime() string {
	if x != nil {
		return x.LastResetTime
	}
	return ""
}

func (x *Devm_MpuBoards_MpuBoard) GetLastResetReason() string {
	if x != nil {
		return x.LastResetReason
	}
	return ""
}

func (x *Devm_MpuBoards_MpuBoard) GetRegisterTime() string {
	if x != nil {
		return x.RegisterTime
	}
	return ""
}

func (x *Devm_MpuBoards_MpuBoard) GetIsRegister() bool {
	if x != nil {
		return x.IsRegister
	}
	return false
}

func (x *Devm_MpuBoards_MpuBoard) GetCfcardSize() uint32 {
	if x != nil {
		return x.CfcardSize
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard) GetCfcard2Size() uint32 {
	if x != nil {
		return x.Cfcard2Size
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard) GetBras() *Devm_MpuBoards_MpuBoard_Bras {
	if x != nil {
		return x.Bras
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard) GetL2Tp() *Devm_MpuBoards_MpuBoard_L2Tp {
	if x != nil {
		return x.L2Tp
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard) GetBrasPppox() *Devm_MpuBoards_MpuBoard_BrasPppox {
	if x != nil {
		return x.BrasPppox
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard) GetCpudefend() *Devm_MpuBoards_MpuBoard_Cpudefend {
	if x != nil {
		return x.Cpudefend
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard) GetCpudefendDevm() *Devm_MpuBoards_MpuBoard_CpudefendDevm {
	if x != nil {
		return x.CpudefendDevm
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard) GetCmacPadding() *Devm_MpuBoards_MpuBoard_CmacPadding {
	if x != nil {
		return x.CmacPadding
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard) GetFim() *Devm_MpuBoards_MpuBoard_Fim {
	if x != nil {
		return x.Fim
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard) GetMacmtuDiscardStatistics() *Devm_MpuBoards_MpuBoard_MacmtuDiscardStatistics {
	if x != nil {
		return x.MacmtuDiscardStatistics
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard) GetVeMacAddress() *Devm_MpuBoards_MpuBoard_VeMacAddress {
	if x != nil {
		return x.VeMacAddress
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard) GetManagementPlaneDefendSlot() *Devm_MpuBoards_MpuBoard_ManagementPlaneDefendSlot {
	if x != nil {
		return x.ManagementPlaneDefendSlot
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard) GetLinkProtocolTransport() *Devm_MpuBoards_MpuBoard_LinkProtocolTransport {
	if x != nil {
		return x.LinkProtocolTransport
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard) GetLoadbalance() *Devm_MpuBoards_MpuBoard_Loadbalance {
	if x != nil {
		return x.Loadbalance
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard) GetMirror() *Devm_MpuBoards_MpuBoard_Mirror {
	if x != nil {
		return x.Mirror
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard) GetMplsForward() *Devm_MpuBoards_MpuBoard_MplsForward {
	if x != nil {
		return x.MplsForward
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard) GetNetstream() *Devm_MpuBoards_MpuBoard_Netstream {
	if x != nil {
		return x.Netstream
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard) GetPbr() *Devm_MpuBoards_MpuBoard_Pbr {
	if x != nil {
		return x.Pbr
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard) GetQos() *Devm_MpuBoards_MpuBoard_Qos {
	if x != nil {
		return x.Qos
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard) GetSoc() *Devm_MpuBoards_MpuBoard_Soc {
	if x != nil {
		return x.Soc
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard) GetUnicastForward() *Devm_MpuBoards_MpuBoard_UnicastForward {
	if x != nil {
		return x.UnicastForward
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard) GetCfmMacLevelEnableMpu() *Devm_MpuBoards_MpuBoard_CfmMacLevelEnableMpu {
	if x != nil {
		return x.CfmMacLevelEnableMpu
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard) GetDhcpv6Access() *Devm_MpuBoards_MpuBoard_Dhcpv6Access {
	if x != nil {
		return x.Dhcpv6Access
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard) GetHttpsRedirect() *Devm_MpuBoards_MpuBoard_HttpsRedirect {
	if x != nil {
		return x.HttpsRedirect
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard) GetFramePaddingFix() *Devm_MpuBoards_MpuBoard_FramePaddingFix {
	if x != nil {
		return x.FramePaddingFix
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard) GetPppNet() *Devm_MpuBoards_MpuBoard_PppNet {
	if x != nil {
		return x.PppNet
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard) GetSflow() *Devm_MpuBoards_MpuBoard_Sflow {
	if x != nil {
		return x.Sflow
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard) GetDcb() *Devm_MpuBoards_MpuBoard_Dcb {
	if x != nil {
		return x.Dcb
	}
	return nil
}

type Devm_MpuBoards_MpuBoard_Bras struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowStatisticFrequency *Devm_MpuBoards_MpuBoard_Bras_FlowStatisticFrequency `protobuf:"bytes,1,opt,name=flow_statistic_frequency,json=flow-statistic-frequency,proto3" json:"flow_statistic_frequency,omitempty"`
	Vas                    *Devm_MpuBoards_MpuBoard_Bras_Vas                    `protobuf:"bytes,2,opt,name=vas,proto3" json:"vas,omitempty"`
	Multicast              *Devm_MpuBoards_MpuBoard_Bras_Multicast              `protobuf:"bytes,3,opt,name=multicast,proto3" json:"multicast,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Bras) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Bras{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Bras) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Bras) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_Bras) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Bras.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Bras) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 0}
}

func (x *Devm_MpuBoards_MpuBoard_Bras) GetFlowStatisticFrequency() *Devm_MpuBoards_MpuBoard_Bras_FlowStatisticFrequency {
	if x != nil {
		return x.FlowStatisticFrequency
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard_Bras) GetVas() *Devm_MpuBoards_MpuBoard_Bras_Vas {
	if x != nil {
		return x.Vas
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard_Bras) GetMulticast() *Devm_MpuBoards_MpuBoard_Bras_Multicast {
	if x != nil {
		return x.Multicast
	}
	return nil
}

type Devm_MpuBoards_MpuBoard_L2Tp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IcrqLimit   *Devm_MpuBoards_MpuBoard_L2Tp_IcrqLimit   `protobuf:"bytes,1,opt,name=icrq_limit,json=icrq-limit,proto3" json:"icrq_limit,omitempty"`
	ForwardMode *Devm_MpuBoards_MpuBoard_L2Tp_ForwardMode `protobuf:"bytes,2,opt,name=forward_mode,json=forward-mode,proto3" json:"forward_mode,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_L2Tp) Reset() {
	*x = Devm_MpuBoards_MpuBoard_L2Tp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_L2Tp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_L2Tp) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_L2Tp) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_L2Tp.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_L2Tp) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 1}
}

func (x *Devm_MpuBoards_MpuBoard_L2Tp) GetIcrqLimit() *Devm_MpuBoards_MpuBoard_L2Tp_IcrqLimit {
	if x != nil {
		return x.IcrqLimit
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard_L2Tp) GetForwardMode() *Devm_MpuBoards_MpuBoard_L2Tp_ForwardMode {
	if x != nil {
		return x.ForwardMode
	}
	return nil
}

type Devm_MpuBoards_MpuBoard_BrasPppox struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotAccessLimit          *Devm_MpuBoards_MpuBoard_BrasPppox_SlotAccessLimit          `protobuf:"bytes,1,opt,name=slot_access_limit,json=slot-access-limit,proto3" json:"slot_access_limit,omitempty"`
	AccessIp                 *Devm_MpuBoards_MpuBoard_BrasPppox_AccessIp                 `protobuf:"bytes,2,opt,name=access_ip,json=access-ip,proto3" json:"access_ip,omitempty"`
	AccessIpLimit            *Devm_MpuBoards_MpuBoard_BrasPppox_AccessIpLimit            `protobuf:"bytes,3,opt,name=access_ip_limit,json=access-ip-limit,proto3" json:"access_ip_limit,omitempty"`
	LoadBalanceIdentifyPppoe *Devm_MpuBoards_MpuBoard_BrasPppox_LoadBalanceIdentifyPppoe `protobuf:"bytes,4,opt,name=load_balance_identify_pppoe,json=load-balance-identify-pppoe,proto3" json:"load_balance_identify_pppoe,omitempty"`
	MaxSessions              *Devm_MpuBoards_MpuBoard_BrasPppox_MaxSessions              `protobuf:"bytes,5,opt,name=max_sessions,json=max-sessions,proto3" json:"max_sessions,omitempty"`
	PppoeSlotStatistic       *Devm_MpuBoards_MpuBoard_BrasPppox_PppoeSlotStatistic       `protobuf:"bytes,6,opt,name=pppoe_slot_statistic,json=pppoe-slot-statistic,proto3" json:"pppoe_slot_statistic,omitempty"`
	PppSlotStatistic         *Devm_MpuBoards_MpuBoard_BrasPppox_PppSlotStatistic         `protobuf:"bytes,7,opt,name=ppp_slot_statistic,json=ppp-slot-statistic,proto3" json:"ppp_slot_statistic,omitempty"`
	UrpfDiscardStatistics    *Devm_MpuBoards_MpuBoard_BrasPppox_UrpfDiscardStatistics    `protobuf:"bytes,8,opt,name=urpf_discard_statistics,json=urpf-discard-statistics,proto3" json:"urpf_discard_statistics,omitempty"`
	PppEchoDeployMode        *Devm_MpuBoards_MpuBoard_BrasPppox_PppEchoDeployMode        `protobuf:"bytes,9,opt,name=ppp_echo_deploy_mode,json=ppp-echo-deploy-mode,proto3" json:"ppp_echo_deploy_mode,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox) Reset() {
	*x = Devm_MpuBoards_MpuBoard_BrasPppox{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_BrasPppox) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_BrasPppox.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_BrasPppox) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 2}
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox) GetSlotAccessLimit() *Devm_MpuBoards_MpuBoard_BrasPppox_SlotAccessLimit {
	if x != nil {
		return x.SlotAccessLimit
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox) GetAccessIp() *Devm_MpuBoards_MpuBoard_BrasPppox_AccessIp {
	if x != nil {
		return x.AccessIp
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox) GetAccessIpLimit() *Devm_MpuBoards_MpuBoard_BrasPppox_AccessIpLimit {
	if x != nil {
		return x.AccessIpLimit
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox) GetLoadBalanceIdentifyPppoe() *Devm_MpuBoards_MpuBoard_BrasPppox_LoadBalanceIdentifyPppoe {
	if x != nil {
		return x.LoadBalanceIdentifyPppoe
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox) GetMaxSessions() *Devm_MpuBoards_MpuBoard_BrasPppox_MaxSessions {
	if x != nil {
		return x.MaxSessions
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox) GetPppoeSlotStatistic() *Devm_MpuBoards_MpuBoard_BrasPppox_PppoeSlotStatistic {
	if x != nil {
		return x.PppoeSlotStatistic
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox) GetPppSlotStatistic() *Devm_MpuBoards_MpuBoard_BrasPppox_PppSlotStatistic {
	if x != nil {
		return x.PppSlotStatistic
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox) GetUrpfDiscardStatistics() *Devm_MpuBoards_MpuBoard_BrasPppox_UrpfDiscardStatistics {
	if x != nil {
		return x.UrpfDiscardStatistics
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox) GetPppEchoDeployMode() *Devm_MpuBoards_MpuBoard_BrasPppox_PppEchoDeployMode {
	if x != nil {
		return x.PppEchoDeployMode
	}
	return nil
}

type Devm_MpuBoards_MpuBoard_Cpudefend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyId uint32 `protobuf:"varint,1,opt,name=policy_id,json=policy-id,proto3" json:"policy_id,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Cpudefend) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Cpudefend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Cpudefend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Cpudefend) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_Cpudefend) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Cpudefend.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Cpudefend) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 3}
}

func (x *Devm_MpuBoards_MpuBoard_Cpudefend) GetPolicyId() uint32 {
	if x != nil {
		return x.PolicyId
	}
	return 0
}

type Devm_MpuBoards_MpuBoard_CpudefendDevm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IgnoreHostcarAcl *Devm_MpuBoards_MpuBoard_CpudefendDevm_IgnoreHostcarAcl `protobuf:"bytes,1,opt,name=ignore_hostcar_acl,json=ignore-hostcar-acl,proto3" json:"ignore_hostcar_acl,omitempty"`
	BrasHostCars     *Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars     `protobuf:"bytes,2,opt,name=bras_host_cars,json=bras-host-cars,proto3" json:"bras_host_cars,omitempty"`
	SpuCars          *Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars          `protobuf:"bytes,3,opt,name=spu_cars,json=spu-cars,proto3" json:"spu_cars,omitempty"`
	ArpVlanCar       *Devm_MpuBoards_MpuBoard_CpudefendDevm_ArpVlanCar       `protobuf:"bytes,4,opt,name=arp_vlan_car,json=arp-vlan-car,proto3" json:"arp_vlan_car,omitempty"`
	NdVlanCar        *Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar        `protobuf:"bytes,5,opt,name=nd_vlan_car,json=nd-vlan-car,proto3" json:"nd_vlan_car,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm) Reset() {
	*x = Devm_MpuBoards_MpuBoard_CpudefendDevm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_CpudefendDevm) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_CpudefendDevm.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_CpudefendDevm) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 4}
}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm) GetIgnoreHostcarAcl() *Devm_MpuBoards_MpuBoard_CpudefendDevm_IgnoreHostcarAcl {
	if x != nil {
		return x.IgnoreHostcarAcl
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm) GetBrasHostCars() *Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars {
	if x != nil {
		return x.BrasHostCars
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm) GetSpuCars() *Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars {
	if x != nil {
		return x.SpuCars
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm) GetArpVlanCar() *Devm_MpuBoards_MpuBoard_CpudefendDevm_ArpVlanCar {
	if x != nil {
		return x.ArpVlanCar
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm) GetNdVlanCar() *Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar {
	if x != nil {
		return x.NdVlanCar
	}
	return nil
}

type Devm_MpuBoards_MpuBoard_CmacPadding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Padding Devm_MpuBoards_MpuBoard_CmacPadding_Padding `protobuf:"varint,1,opt,name=padding,proto3,enum=huawei_devm.Devm_MpuBoards_MpuBoard_CmacPadding_Padding" json:"padding,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_CmacPadding) Reset() {
	*x = Devm_MpuBoards_MpuBoard_CmacPadding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_CmacPadding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_CmacPadding) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_CmacPadding) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_CmacPadding.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_CmacPadding) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 5}
}

func (x *Devm_MpuBoards_MpuBoard_CmacPadding) GetPadding() Devm_MpuBoards_MpuBoard_CmacPadding_Padding {
	if x != nil {
		return x.Padding
	}
	return Devm_MpuBoards_MpuBoard_CmacPadding_Padding_DISABLE
}

type Devm_MpuBoards_MpuBoard_Fim struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ForwardMode    Devm_MpuBoards_MpuBoard_Fim_ForwardMode    `protobuf:"varint,1,opt,name=forward_mode,json=forward-mode,proto3,enum=huawei_devm.Devm_MpuBoards_MpuBoard_Fim_ForwardMode" json:"forward_mode,omitempty"`
	VlanMissEnable Devm_MpuBoards_MpuBoard_Fim_VlanMissEnable `protobuf:"varint,2,opt,name=vlan_miss_enable,json=vlan-miss-enable,proto3,enum=huawei_devm.Devm_MpuBoards_MpuBoard_Fim_VlanMissEnable" json:"vlan_miss_enable,omitempty"`
	ScanPeriod     uint32                                     `protobuf:"varint,3,opt,name=scan_period,json=scan-period,proto3" json:"scan_period,omitempty"`
	CpuThreshold   uint32                                     `protobuf:"varint,4,opt,name=cpu_threshold,json=cpu-threshold,proto3" json:"cpu_threshold,omitempty"`
	CpuDetect      uint32                                     `protobuf:"varint,5,opt,name=cpu_detect,json=cpu-detect,proto3" json:"cpu_detect,omitempty"`
	CpuRestore     uint32                                     `protobuf:"varint,6,opt,name=cpu_restore,json=cpu-restore,proto3" json:"cpu_restore,omitempty"`
	Statistics     uint32                                     `protobuf:"varint,7,opt,name=statistics,proto3" json:"statistics,omitempty"`
	Precision      uint32                                     `protobuf:"varint,8,opt,name=precision,proto3" json:"precision,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Fim) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Fim{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Fim) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Fim) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_Fim) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Fim.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Fim) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 6}
}

func (x *Devm_MpuBoards_MpuBoard_Fim) GetForwardMode() Devm_MpuBoards_MpuBoard_Fim_ForwardMode {
	if x != nil {
		return x.ForwardMode
	}
	return Devm_MpuBoards_MpuBoard_Fim_ForwardMode_LOOPBACK
}

func (x *Devm_MpuBoards_MpuBoard_Fim) GetVlanMissEnable() Devm_MpuBoards_MpuBoard_Fim_VlanMissEnable {
	if x != nil {
		return x.VlanMissEnable
	}
	return Devm_MpuBoards_MpuBoard_Fim_VlanMissEnable_DISABLE
}

func (x *Devm_MpuBoards_MpuBoard_Fim) GetScanPeriod() uint32 {
	if x != nil {
		return x.ScanPeriod
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_Fim) GetCpuThreshold() uint32 {
	if x != nil {
		return x.CpuThreshold
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_Fim) GetCpuDetect() uint32 {
	if x != nil {
		return x.CpuDetect
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_Fim) GetCpuRestore() uint32 {
	if x != nil {
		return x.CpuRestore
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_Fim) GetStatistics() uint32 {
	if x != nil {
		return x.Statistics
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_Fim) GetPrecision() uint32 {
	if x != nil {
		return x.Precision
	}
	return 0
}

type Devm_MpuBoards_MpuBoard_MacmtuDiscardStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MtuIpv4 uint64 `protobuf:"varint,1,opt,name=mtu_ipv4,json=mtu-ipv4,proto3" json:"mtu_ipv4,omitempty"`
	MtuIpv6 uint64 `protobuf:"varint,2,opt,name=mtu_ipv6,json=mtu-ipv6,proto3" json:"mtu_ipv6,omitempty"`
	MacIpv4 uint64 `protobuf:"varint,3,opt,name=mac_ipv4,json=mac-ipv4,proto3" json:"mac_ipv4,omitempty"`
	MacIpv6 uint64 `protobuf:"varint,4,opt,name=mac_ipv6,json=mac-ipv6,proto3" json:"mac_ipv6,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_MacmtuDiscardStatistics) Reset() {
	*x = Devm_MpuBoards_MpuBoard_MacmtuDiscardStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_MacmtuDiscardStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_MacmtuDiscardStatistics) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_MacmtuDiscardStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_MacmtuDiscardStatistics.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_MacmtuDiscardStatistics) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 7}
}

func (x *Devm_MpuBoards_MpuBoard_MacmtuDiscardStatistics) GetMtuIpv4() uint64 {
	if x != nil {
		return x.MtuIpv4
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_MacmtuDiscardStatistics) GetMtuIpv6() uint64 {
	if x != nil {
		return x.MtuIpv6
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_MacmtuDiscardStatistics) GetMacIpv4() uint64 {
	if x != nil {
		return x.MacIpv4
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_MacmtuDiscardStatistics) GetMacIpv6() uint64 {
	if x != nil {
		return x.MacIpv6
	}
	return 0
}

type Devm_MpuBoards_MpuBoard_VeMacAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	L2VeMac     string `protobuf:"bytes,1,opt,name=l2_ve_mac,json=l2-ve-mac,proto3" json:"l2_ve_mac,omitempty"`
	AccessVeMac string `protobuf:"bytes,2,opt,name=access_ve_mac,json=access-ve-mac,proto3" json:"access_ve_mac,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_VeMacAddress) Reset() {
	*x = Devm_MpuBoards_MpuBoard_VeMacAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_VeMacAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_VeMacAddress) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_VeMacAddress) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_VeMacAddress.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_VeMacAddress) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 8}
}

func (x *Devm_MpuBoards_MpuBoard_VeMacAddress) GetL2VeMac() string {
	if x != nil {
		return x.L2VeMac
	}
	return ""
}

func (x *Devm_MpuBoards_MpuBoard_VeMacAddress) GetAccessVeMac() string {
	if x != nil {
		return x.AccessVeMac
	}
	return ""
}

type Devm_MpuBoards_MpuBoard_ManagementPlaneDefendSlot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotPolicyId uint32 `protobuf:"varint,1,opt,name=slot_policy_id,json=slot-policy-id,proto3" json:"slot_policy_id,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_ManagementPlaneDefendSlot) Reset() {
	*x = Devm_MpuBoards_MpuBoard_ManagementPlaneDefendSlot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_ManagementPlaneDefendSlot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_ManagementPlaneDefendSlot) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_ManagementPlaneDefendSlot) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_ManagementPlaneDefendSlot.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_ManagementPlaneDefendSlot) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 9}
}

func (x *Devm_MpuBoards_MpuBoard_ManagementPlaneDefendSlot) GetSlotPolicyId() uint32 {
	if x != nil {
		return x.SlotPolicyId
	}
	return 0
}

type Devm_MpuBoards_MpuBoard_LinkProtocolTransport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lldp Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Lldp `protobuf:"varint,1,opt,name=lldp,proto3,enum=huawei_devm.Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Lldp" json:"lldp,omitempty"`
	Lacp Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Lacp `protobuf:"varint,2,opt,name=lacp,proto3,enum=huawei_devm.Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Lacp" json:"lacp,omitempty"`
	Oam  Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Oam  `protobuf:"varint,3,opt,name=oam,proto3,enum=huawei_devm.Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Oam" json:"oam,omitempty"`
	Esmc Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Esmc `protobuf:"varint,4,opt,name=esmc,proto3,enum=huawei_devm.Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Esmc" json:"esmc,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_LinkProtocolTransport) Reset() {
	*x = Devm_MpuBoards_MpuBoard_LinkProtocolTransport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_LinkProtocolTransport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_LinkProtocolTransport) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_LinkProtocolTransport) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_LinkProtocolTransport.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_LinkProtocolTransport) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 10}
}

func (x *Devm_MpuBoards_MpuBoard_LinkProtocolTransport) GetLldp() Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Lldp {
	if x != nil {
		return x.Lldp
	}
	return Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Lldp_DISABLE
}

func (x *Devm_MpuBoards_MpuBoard_LinkProtocolTransport) GetLacp() Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Lacp {
	if x != nil {
		return x.Lacp
	}
	return Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Lacp_DISABLE
}

func (x *Devm_MpuBoards_MpuBoard_LinkProtocolTransport) GetOam() Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Oam {
	if x != nil {
		return x.Oam
	}
	return Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Oam_DISABLE
}

func (x *Devm_MpuBoards_MpuBoard_LinkProtocolTransport) GetEsmc() Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Esmc {
	if x != nil {
		return x.Esmc
	}
	return Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Esmc_DISABLE
}

type Devm_MpuBoards_MpuBoard_Loadbalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DynamicAdjust  *Devm_MpuBoards_MpuBoard_Loadbalance_DynamicAdjust  `protobuf:"bytes,1,opt,name=dynamic_adjust,json=dynamic-adjust,proto3" json:"dynamic_adjust,omitempty"`
	HashArithmetic *Devm_MpuBoards_MpuBoard_Loadbalance_HashArithmetic `protobuf:"bytes,2,opt,name=hash_arithmetic,json=hash-arithmetic,proto3" json:"hash_arithmetic,omitempty"`
	HashFields     *Devm_MpuBoards_MpuBoard_Loadbalance_HashFields     `protobuf:"bytes,3,opt,name=hash_fields,json=hash-fields,proto3" json:"hash_fields,omitempty"`
	HashSeed       *Devm_MpuBoards_MpuBoard_Loadbalance_HashSeed       `protobuf:"bytes,4,opt,name=hash_seed,json=hash-seed,proto3" json:"hash_seed,omitempty"`
	HashMultipe    *Devm_MpuBoards_MpuBoard_Loadbalance_HashMultipe    `protobuf:"bytes,5,opt,name=hash_multipe,json=hash-multipe,proto3" json:"hash_multipe,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Loadbalance) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Loadbalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Loadbalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Loadbalance) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_Loadbalance) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Loadbalance.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Loadbalance) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 11}
}

func (x *Devm_MpuBoards_MpuBoard_Loadbalance) GetDynamicAdjust() *Devm_MpuBoards_MpuBoard_Loadbalance_DynamicAdjust {
	if x != nil {
		return x.DynamicAdjust
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard_Loadbalance) GetHashArithmetic() *Devm_MpuBoards_MpuBoard_Loadbalance_HashArithmetic {
	if x != nil {
		return x.HashArithmetic
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard_Loadbalance) GetHashFields() *Devm_MpuBoards_MpuBoard_Loadbalance_HashFields {
	if x != nil {
		return x.HashFields
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard_Loadbalance) GetHashSeed() *Devm_MpuBoards_MpuBoard_Loadbalance_HashSeed {
	if x != nil {
		return x.HashSeed
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard_Loadbalance) GetHashMultipe() *Devm_MpuBoards_MpuBoard_Loadbalance_HashMultipe {
	if x != nil {
		return x.HashMultipe
	}
	return nil
}

type Devm_MpuBoards_MpuBoard_Mirror struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotObserve    *Devm_MpuBoards_MpuBoard_Mirror_SlotObserve    `protobuf:"bytes,1,opt,name=slot_observe,json=slot-observe,proto3" json:"slot_observe,omitempty"`
	ObserveFilters *Devm_MpuBoards_MpuBoard_Mirror_ObserveFilters `protobuf:"bytes,2,opt,name=observe_filters,json=observe-filters,proto3" json:"observe_filters,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Mirror) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Mirror{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Mirror) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Mirror) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_Mirror) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Mirror.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Mirror) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 12}
}

func (x *Devm_MpuBoards_MpuBoard_Mirror) GetSlotObserve() *Devm_MpuBoards_MpuBoard_Mirror_SlotObserve {
	if x != nil {
		return x.SlotObserve
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard_Mirror) GetObserveFilters() *Devm_MpuBoards_MpuBoard_Mirror_ObserveFilters {
	if x != nil {
		return x.ObserveFilters
	}
	return nil
}

type Devm_MpuBoards_MpuBoard_MplsForward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MplsHashMode     *Devm_MpuBoards_MpuBoard_MplsForward_MplsHashMode     `protobuf:"bytes,1,opt,name=mpls_hash_mode,json=mpls-hash-mode,proto3" json:"mpls_hash_mode,omitempty"`
	Mplsfrags        *Devm_MpuBoards_MpuBoard_MplsForward_Mplsfrags        `protobuf:"bytes,2,opt,name=mplsfrags,proto3" json:"mplsfrags,omitempty"`
	MplsLoadCtrwords *Devm_MpuBoards_MpuBoard_MplsForward_MplsLoadCtrwords `protobuf:"bytes,3,opt,name=mpls_load_ctrwords,json=mpls-load-ctrwords,proto3" json:"mpls_load_ctrwords,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_MplsForward) Reset() {
	*x = Devm_MpuBoards_MpuBoard_MplsForward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_MplsForward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_MplsForward) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_MplsForward) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_MplsForward.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_MplsForward) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 13}
}

func (x *Devm_MpuBoards_MpuBoard_MplsForward) GetMplsHashMode() *Devm_MpuBoards_MpuBoard_MplsForward_MplsHashMode {
	if x != nil {
		return x.MplsHashMode
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard_MplsForward) GetMplsfrags() *Devm_MpuBoards_MpuBoard_MplsForward_Mplsfrags {
	if x != nil {
		return x.Mplsfrags
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard_MplsForward) GetMplsLoadCtrwords() *Devm_MpuBoards_MpuBoard_MplsForward_MplsLoadCtrwords {
	if x != nil {
		return x.MplsLoadCtrwords
	}
	return nil
}

type Devm_MpuBoards_MpuBoard_Netstream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SamplerModes *Devm_MpuBoards_MpuBoard_Netstream_SamplerModes `protobuf:"bytes,1,opt,name=sampler_modes,json=sampler-modes,proto3" json:"sampler_modes,omitempty"`
	SequenceMode *Devm_MpuBoards_MpuBoard_Netstream_SequenceMode `protobuf:"bytes,2,opt,name=sequence_mode,json=sequence-mode,proto3" json:"sequence_mode,omitempty"`
	ExportHosts  *Devm_MpuBoards_MpuBoard_Netstream_ExportHosts  `protobuf:"bytes,3,opt,name=export_hosts,json=export-hosts,proto3" json:"export_hosts,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Netstream) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Netstream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Netstream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Netstream) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_Netstream) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Netstream.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Netstream) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 14}
}

func (x *Devm_MpuBoards_MpuBoard_Netstream) GetSamplerModes() *Devm_MpuBoards_MpuBoard_Netstream_SamplerModes {
	if x != nil {
		return x.SamplerModes
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard_Netstream) GetSequenceMode() *Devm_MpuBoards_MpuBoard_Netstream_SequenceMode {
	if x != nil {
		return x.SequenceMode
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard_Netstream) GetExportHosts() *Devm_MpuBoards_MpuBoard_Netstream_ExportHosts {
	if x != nil {
		return x.ExportHosts
	}
	return nil
}

type Devm_MpuBoards_MpuBoard_Pbr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoutingFilters *Devm_MpuBoards_MpuBoard_Pbr_RoutingFilters `protobuf:"bytes,1,opt,name=routing_filters,json=routing-filters,proto3" json:"routing_filters,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Pbr) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Pbr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Pbr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Pbr) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_Pbr) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Pbr.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Pbr) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 15}
}

func (x *Devm_MpuBoards_MpuBoard_Pbr) GetRoutingFilters() *Devm_MpuBoards_MpuBoard_Pbr_RoutingFilters {
	if x != nil {
		return x.RoutingFilters
	}
	return nil
}

type Devm_MpuBoards_MpuBoard_Qos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrafficPolicyMatchs            *Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchs           `protobuf:"bytes,1,opt,name=traffic_policy_matchs,json=traffic-policy-matchs,proto3" json:"traffic_policy_matchs,omitempty"`
	PqSchedulePrioritys            *Devm_MpuBoards_MpuBoard_Qos_PqSchedulePrioritys           `protobuf:"bytes,2,opt,name=pq_schedule_prioritys,json=pq-schedule-prioritys,proto3" json:"pq_schedule_prioritys,omitempty"`
	PqSchedulePriorityOnCards      *Devm_MpuBoards_MpuBoard_Qos_PqSchedulePriorityOnCards     `protobuf:"bytes,3,opt,name=pq_schedule_priority_on_cards,json=pq-schedule-priority-on-cards,proto3" json:"pq_schedule_priority_on_cards,omitempty"`
	MulticastPortQueues            *Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues           `protobuf:"bytes,4,opt,name=multicast_port_queues,json=multicast-port-queues,proto3" json:"multicast_port_queues,omitempty"`
	MulticastPortShaping           *Devm_MpuBoards_MpuBoard_Qos_MulticastPortShaping          `protobuf:"bytes,5,opt,name=multicast_port_shaping,json=multicast-port-shaping,proto3" json:"multicast_port_shaping,omitempty"`
	UserQueuePirPrecision          *Devm_MpuBoards_MpuBoard_Qos_UserQueuePirPrecision         `protobuf:"bytes,6,opt,name=user_queue_pir_precision,json=user-queue-pir-precision,proto3" json:"user_queue_pir_precision,omitempty"`
	ExpPhbDisable                  *Devm_MpuBoards_MpuBoard_Qos_ExpPhbDisable                 `protobuf:"bytes,7,opt,name=exp_phb_disable,json=exp-phb-disable,proto3" json:"exp_phb_disable,omitempty"`
	PacketBlockThresholds          *Devm_MpuBoards_MpuBoard_Qos_PacketBlockThresholds         `protobuf:"bytes,8,opt,name=packet_block_thresholds,json=packet-block-thresholds,proto3" json:"packet_block_thresholds,omitempty"`
	PacketBlockThresholdAll        *Devm_MpuBoards_MpuBoard_Qos_PacketBlockThresholdAll       `protobuf:"bytes,9,opt,name=packet_block_threshold_all,json=packet-block-threshold-all,proto3" json:"packet_block_threshold_all,omitempty"`
	ChannelAlarms                  *Devm_MpuBoards_MpuBoard_Qos_ChannelAlarms                 `protobuf:"bytes,10,opt,name=channel_alarms,json=channel-alarms,proto3" json:"channel_alarms,omitempty"`
	ChannelProfilePrecision        *Devm_MpuBoards_MpuBoard_Qos_ChannelProfilePrecision       `protobuf:"bytes,11,opt,name=channel_profile_precision,json=channel-profile-precision,proto3" json:"channel_profile_precision,omitempty"`
	ChannelProfileApply            *Devm_MpuBoards_MpuBoard_Qos_ChannelProfileApply           `protobuf:"bytes,12,opt,name=channel_profile_apply,json=channel-profile-apply,proto3" json:"channel_profile_apply,omitempty"`
	MulticastShaping               *Devm_MpuBoards_MpuBoard_Qos_MulticastShaping              `protobuf:"bytes,13,opt,name=multicast_shaping,json=multicast-shaping,proto3" json:"multicast_shaping,omitempty"`
	PortQueueAlarms                *Devm_MpuBoards_MpuBoard_Qos_PortQueueAlarms               `protobuf:"bytes,14,opt,name=port_queue_alarms,json=port-queue-alarms,proto3" json:"port_queue_alarms,omitempty"`
	UserQueueRecoveryDisable       *Devm_MpuBoards_MpuBoard_Qos_UserQueueRecoveryDisable      `protobuf:"bytes,15,opt,name=user_queue_recovery_disable,json=user-queue-recovery-disable,proto3" json:"user_queue_recovery_disable,omitempty"`
	AccessUserBoardScheduleEnable  *Devm_MpuBoards_MpuBoard_Qos_AccessUserBoardScheduleEnable `protobuf:"bytes,16,opt,name=access_user_board_schedule_enable,json=access-user-board-schedule-enable,proto3" json:"access_user_board_schedule_enable,omitempty"`
	ConvergentPrecedenceHighs      *Devm_MpuBoards_MpuBoard_Qos_ConvergentPrecedenceHighs     `protobuf:"bytes,17,opt,name=convergent_precedence_highs,json=convergent-precedence-highs,proto3" json:"convergent_precedence_highs,omitempty"`
	QueueDiscardAlarms             *Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms            `protobuf:"bytes,18,opt,name=queue_discard_alarms,json=queue-discard-alarms,proto3" json:"queue_discard_alarms,omitempty"`
	UserQueueBurst                 *Devm_MpuBoards_MpuBoard_Qos_UserQueueBurst                `protobuf:"bytes,19,opt,name=user_queue_burst,json=user-queue-burst,proto3" json:"user_queue_burst,omitempty"`
	BurstSizes                     *Devm_MpuBoards_MpuBoard_Qos_BurstSizes                    `protobuf:"bytes,20,opt,name=burst_sizes,json=burst-sizes,proto3" json:"burst_sizes,omitempty"`
	GlobalBufferShareThresholds    *Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareThresholds   `protobuf:"bytes,21,opt,name=global_buffer_share_thresholds,json=global-buffer-share-thresholds,proto3" json:"global_buffer_share_thresholds,omitempty"`
	GlobalBufferShareQueues        *Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues       `protobuf:"bytes,22,opt,name=global_buffer_share_queues,json=global-buffer-share-queues,proto3" json:"global_buffer_share_queues,omitempty"`
	FlowQueueBackpressureOff       *Devm_MpuBoards_MpuBoard_Qos_FlowQueueBackpressureOff      `protobuf:"bytes,23,opt,name=flow_queue_backpressure_off,json=flow-queue-backpressure-off,proto3" json:"flow_queue_backpressure_off,omitempty"`
	TrafficPolicyMatchType         *Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchType        `protobuf:"bytes,24,opt,name=traffic_policy_match_type,json=traffic-policy-match-type,proto3" json:"traffic_policy_match_type,omitempty"`
	UserQueueResource_4Cos         *Devm_MpuBoards_MpuBoard_Qos_UserQueueResource4Cos         `protobuf:"bytes,25,opt,name=user_queue_resource_4cos,json=user-queue-resource-4cos,proto3" json:"user_queue_resource_4cos,omitempty"`
	UserQueueResource_8CosEnhances *Devm_MpuBoards_MpuBoard_Qos_UserQueueResource8CosEnhances `protobuf:"bytes,26,opt,name=user_queue_resource_8cos_enhances,json=user-queue-resource-8cos-enhances,proto3" json:"user_queue_resource_8cos_enhances,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Qos) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Qos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Qos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Qos) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_Qos) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Qos.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Qos) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 16}
}

func (x *Devm_MpuBoards_MpuBoard_Qos) GetTrafficPolicyMatchs() *Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchs {
	if x != nil {
		return x.TrafficPolicyMatchs
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard_Qos) GetPqSchedulePrioritys() *Devm_MpuBoards_MpuBoard_Qos_PqSchedulePrioritys {
	if x != nil {
		return x.PqSchedulePrioritys
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard_Qos) GetPqSchedulePriorityOnCards() *Devm_MpuBoards_MpuBoard_Qos_PqSchedulePriorityOnCards {
	if x != nil {
		return x.PqSchedulePriorityOnCards
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard_Qos) GetMulticastPortQueues() *Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues {
	if x != nil {
		return x.MulticastPortQueues
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard_Qos) GetMulticastPortShaping() *Devm_MpuBoards_MpuBoard_Qos_MulticastPortShaping {
	if x != nil {
		return x.MulticastPortShaping
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard_Qos) GetUserQueuePirPrecision() *Devm_MpuBoards_MpuBoard_Qos_UserQueuePirPrecision {
	if x != nil {
		return x.UserQueuePirPrecision
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard_Qos) GetExpPhbDisable() *Devm_MpuBoards_MpuBoard_Qos_ExpPhbDisable {
	if x != nil {
		return x.ExpPhbDisable
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard_Qos) GetPacketBlockThresholds() *Devm_MpuBoards_MpuBoard_Qos_PacketBlockThresholds {
	if x != nil {
		return x.PacketBlockThresholds
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard_Qos) GetPacketBlockThresholdAll() *Devm_MpuBoards_MpuBoard_Qos_PacketBlockThresholdAll {
	if x != nil {
		return x.PacketBlockThresholdAll
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard_Qos) GetChannelAlarms() *Devm_MpuBoards_MpuBoard_Qos_ChannelAlarms {
	if x != nil {
		return x.ChannelAlarms
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard_Qos) GetChannelProfilePrecision() *Devm_MpuBoards_MpuBoard_Qos_ChannelProfilePrecision {
	if x != nil {
		return x.ChannelProfilePrecision
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard_Qos) GetChannelProfileApply() *Devm_MpuBoards_MpuBoard_Qos_ChannelProfileApply {
	if x != nil {
		return x.ChannelProfileApply
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard_Qos) GetMulticastShaping() *Devm_MpuBoards_MpuBoard_Qos_MulticastShaping {
	if x != nil {
		return x.MulticastShaping
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard_Qos) GetPortQueueAlarms() *Devm_MpuBoards_MpuBoard_Qos_PortQueueAlarms {
	if x != nil {
		return x.PortQueueAlarms
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard_Qos) GetUserQueueRecoveryDisable() *Devm_MpuBoards_MpuBoard_Qos_UserQueueRecoveryDisable {
	if x != nil {
		return x.UserQueueRecoveryDisable
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard_Qos) GetAccessUserBoardScheduleEnable() *Devm_MpuBoards_MpuBoard_Qos_AccessUserBoardScheduleEnable {
	if x != nil {
		return x.AccessUserBoardScheduleEnable
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard_Qos) GetConvergentPrecedenceHighs() *Devm_MpuBoards_MpuBoard_Qos_ConvergentPrecedenceHighs {
	if x != nil {
		return x.ConvergentPrecedenceHighs
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard_Qos) GetQueueDiscardAlarms() *Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms {
	if x != nil {
		return x.QueueDiscardAlarms
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard_Qos) GetUserQueueBurst() *Devm_MpuBoards_MpuBoard_Qos_UserQueueBurst {
	if x != nil {
		return x.UserQueueBurst
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard_Qos) GetBurstSizes() *Devm_MpuBoards_MpuBoard_Qos_BurstSizes {
	if x != nil {
		return x.BurstSizes
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard_Qos) GetGlobalBufferShareThresholds() *Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareThresholds {
	if x != nil {
		return x.GlobalBufferShareThresholds
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard_Qos) GetGlobalBufferShareQueues() *Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues {
	if x != nil {
		return x.GlobalBufferShareQueues
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard_Qos) GetFlowQueueBackpressureOff() *Devm_MpuBoards_MpuBoard_Qos_FlowQueueBackpressureOff {
	if x != nil {
		return x.FlowQueueBackpressureOff
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard_Qos) GetTrafficPolicyMatchType() *Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchType {
	if x != nil {
		return x.TrafficPolicyMatchType
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard_Qos) GetUserQueueResource_4Cos() *Devm_MpuBoards_MpuBoard_Qos_UserQueueResource4Cos {
	if x != nil {
		return x.UserQueueResource_4Cos
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard_Qos) GetUserQueueResource_8CosEnhances() *Devm_MpuBoards_MpuBoard_Qos_UserQueueResource8CosEnhances {
	if x != nil {
		return x.UserQueueResource_8CosEnhances
	}
	return nil
}

type Devm_MpuBoards_MpuBoard_Soc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	L2LoopDetect *Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect `protobuf:"bytes,1,opt,name=l2_loop_detect,json=l2-loop-detect,proto3" json:"l2_loop_detect,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Soc) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Soc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Soc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Soc) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_Soc) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Soc.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Soc) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 17}
}

func (x *Devm_MpuBoards_MpuBoard_Soc) GetL2LoopDetect() *Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect {
	if x != nil {
		return x.L2LoopDetect
	}
	return nil
}

type Devm_MpuBoards_MpuBoard_UnicastForward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ipv4Uc       *Devm_MpuBoards_MpuBoard_UnicastForward_Ipv4Uc       `protobuf:"bytes,1,opt,name=ipv4_uc,json=ipv4-uc,proto3" json:"ipv4_uc,omitempty"`
	ArpFastReply *Devm_MpuBoards_MpuBoard_UnicastForward_ArpFastReply `protobuf:"bytes,2,opt,name=arp_fast_reply,json=arp-fast-reply,proto3" json:"arp_fast_reply,omitempty"`
	GreTtlMode   *Devm_MpuBoards_MpuBoard_UnicastForward_GreTtlMode   `protobuf:"bytes,3,opt,name=gre_ttl_mode,json=gre-ttl-mode,proto3" json:"gre_ttl_mode,omitempty"`
	NdFastReply  *Devm_MpuBoards_MpuBoard_UnicastForward_NdFastReply  `protobuf:"bytes,4,opt,name=nd_fast_reply,json=nd-fast-reply,proto3" json:"nd_fast_reply,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_UnicastForward) Reset() {
	*x = Devm_MpuBoards_MpuBoard_UnicastForward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_UnicastForward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_UnicastForward) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_UnicastForward) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_UnicastForward.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_UnicastForward) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 18}
}

func (x *Devm_MpuBoards_MpuBoard_UnicastForward) GetIpv4Uc() *Devm_MpuBoards_MpuBoard_UnicastForward_Ipv4Uc {
	if x != nil {
		return x.Ipv4Uc
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard_UnicastForward) GetArpFastReply() *Devm_MpuBoards_MpuBoard_UnicastForward_ArpFastReply {
	if x != nil {
		return x.ArpFastReply
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard_UnicastForward) GetGreTtlMode() *Devm_MpuBoards_MpuBoard_UnicastForward_GreTtlMode {
	if x != nil {
		return x.GreTtlMode
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard_UnicastForward) GetNdFastReply() *Devm_MpuBoards_MpuBoard_UnicastForward_NdFastReply {
	if x != nil {
		return x.NdFastReply
	}
	return nil
}

type Devm_MpuBoards_MpuBoard_CfmMacLevelEnableMpu struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MacLevelEnable bool `protobuf:"varint,1,opt,name=mac_level_enable,json=mac-level-enable,proto3" json:"mac_level_enable,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_CfmMacLevelEnableMpu) Reset() {
	*x = Devm_MpuBoards_MpuBoard_CfmMacLevelEnableMpu{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_CfmMacLevelEnableMpu) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_CfmMacLevelEnableMpu) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_CfmMacLevelEnableMpu) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_CfmMacLevelEnableMpu.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_CfmMacLevelEnableMpu) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 19}
}

func (x *Devm_MpuBoards_MpuBoard_CfmMacLevelEnableMpu) GetMacLevelEnable() bool {
	if x != nil {
		return x.MacLevelEnable
	}
	return false
}

type Devm_MpuBoards_MpuBoard_Dhcpv6Access struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeaseProxyRate uint32 `protobuf:"varint,1,opt,name=lease_proxy_rate,json=lease-proxy-rate,proto3" json:"lease_proxy_rate,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Dhcpv6Access) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Dhcpv6Access{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Dhcpv6Access) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Dhcpv6Access) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_Dhcpv6Access) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Dhcpv6Access.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Dhcpv6Access) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 20}
}

func (x *Devm_MpuBoards_MpuBoard_Dhcpv6Access) GetLeaseProxyRate() uint32 {
	if x != nil {
		return x.LeaseProxyRate
	}
	return 0
}

type Devm_MpuBoards_MpuBoard_HttpsRedirect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChastenFlow     *Devm_MpuBoards_MpuBoard_HttpsRedirect_ChastenFlow     `protobuf:"bytes,1,opt,name=chasten_flow,json=chasten-flow,proto3" json:"chasten_flow,omitempty"`
	ChastenRedirect *Devm_MpuBoards_MpuBoard_HttpsRedirect_ChastenRedirect `protobuf:"bytes,2,opt,name=chasten_redirect,json=chasten-redirect,proto3" json:"chasten_redirect,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_HttpsRedirect) Reset() {
	*x = Devm_MpuBoards_MpuBoard_HttpsRedirect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_HttpsRedirect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_HttpsRedirect) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_HttpsRedirect) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_HttpsRedirect.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_HttpsRedirect) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 21}
}

func (x *Devm_MpuBoards_MpuBoard_HttpsRedirect) GetChastenFlow() *Devm_MpuBoards_MpuBoard_HttpsRedirect_ChastenFlow {
	if x != nil {
		return x.ChastenFlow
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard_HttpsRedirect) GetChastenRedirect() *Devm_MpuBoards_MpuBoard_HttpsRedirect_ChastenRedirect {
	if x != nil {
		return x.ChastenRedirect
	}
	return nil
}

type Devm_MpuBoards_MpuBoard_FramePaddingFix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Devm_MpuBoards_MpuBoard_FramePaddingFix) Reset() {
	*x = Devm_MpuBoards_MpuBoard_FramePaddingFix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_FramePaddingFix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_FramePaddingFix) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_FramePaddingFix) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_FramePaddingFix.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_FramePaddingFix) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 22}
}

type Devm_MpuBoards_MpuBoard_PppNet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LoadBalanceIdentifyPppoe *Devm_MpuBoards_MpuBoard_PppNet_LoadBalanceIdentifyPppoe `protobuf:"bytes,1,opt,name=load_balance_identify_pppoe,json=load-balance-identify-pppoe,proto3" json:"load_balance_identify_pppoe,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_PppNet) Reset() {
	*x = Devm_MpuBoards_MpuBoard_PppNet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_PppNet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_PppNet) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_PppNet) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_PppNet.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_PppNet) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 23}
}

func (x *Devm_MpuBoards_MpuBoard_PppNet) GetLoadBalanceIdentifyPppoe() *Devm_MpuBoards_MpuBoard_PppNet_LoadBalanceIdentifyPppoe {
	if x != nil {
		return x.LoadBalanceIdentifyPppoe
	}
	return nil
}

type Devm_MpuBoards_MpuBoard_Sflow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotSampling *Devm_MpuBoards_MpuBoard_Sflow_SlotSampling `protobuf:"bytes,1,opt,name=slot_sampling,json=slot-sampling,proto3" json:"slot_sampling,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Sflow) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Sflow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Sflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Sflow) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_Sflow) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Sflow.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Sflow) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 24}
}

func (x *Devm_MpuBoards_MpuBoard_Sflow) GetSlotSampling() *Devm_MpuBoards_MpuBoard_Sflow_SlotSampling {
	if x != nil {
		return x.SlotSampling
	}
	return nil
}

type Devm_MpuBoards_MpuBoard_Dcb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeadroomPool             *Devm_MpuBoards_MpuBoard_Dcb_HeadroomPool             `protobuf:"bytes,1,opt,name=headroom_pool,json=headroom-pool,proto3" json:"headroom_pool,omitempty"`
	DeadlockRecoveryBehavior *Devm_MpuBoards_MpuBoard_Dcb_DeadlockRecoveryBehavior `protobuf:"bytes,2,opt,name=deadlock_recovery_behavior,json=deadlock-recovery-behavior,proto3" json:"deadlock_recovery_behavior,omitempty"`
	PfcMappingType           *Devm_MpuBoards_MpuBoard_Dcb_PfcMappingType           `protobuf:"bytes,3,opt,name=pfc_mapping_type,json=pfc-mapping-type,proto3" json:"pfc_mapping_type,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Dcb) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Dcb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Dcb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Dcb) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_Dcb) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Dcb.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Dcb) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 25}
}

func (x *Devm_MpuBoards_MpuBoard_Dcb) GetHeadroomPool() *Devm_MpuBoards_MpuBoard_Dcb_HeadroomPool {
	if x != nil {
		return x.HeadroomPool
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard_Dcb) GetDeadlockRecoveryBehavior() *Devm_MpuBoards_MpuBoard_Dcb_DeadlockRecoveryBehavior {
	if x != nil {
		return x.DeadlockRecoveryBehavior
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard_Dcb) GetPfcMappingType() *Devm_MpuBoards_MpuBoard_Dcb_PfcMappingType {
	if x != nil {
		return x.PfcMappingType
	}
	return nil
}

type Devm_MpuBoards_MpuBoard_Bras_FlowStatisticFrequency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type Devm_MpuBoards_MpuBoard_Bras_FlowStatisticFrequency_Type `protobuf:"varint,1,opt,name=type,proto3,enum=huawei_devm.Devm_MpuBoards_MpuBoard_Bras_FlowStatisticFrequency_Type" json:"type,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Bras_FlowStatisticFrequency) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Bras_FlowStatisticFrequency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Bras_FlowStatisticFrequency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Bras_FlowStatisticFrequency) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_Bras_FlowStatisticFrequency) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Bras_FlowStatisticFrequency.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Bras_FlowStatisticFrequency) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 0, 0}
}

func (x *Devm_MpuBoards_MpuBoard_Bras_FlowStatisticFrequency) GetType() Devm_MpuBoards_MpuBoard_Bras_FlowStatisticFrequency_Type {
	if x != nil {
		return x.Type
	}
	return Devm_MpuBoards_MpuBoard_Bras_FlowStatisticFrequency_INVALID_ENUM_VALUE_Type
}

type Devm_MpuBoards_MpuBoard_Bras_Vas struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatisticFrequency *Devm_MpuBoards_MpuBoard_Bras_Vas_StatisticFrequency `protobuf:"bytes,1,opt,name=statistic_frequency,json=statistic-frequency,proto3" json:"statistic_frequency,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Bras_Vas) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Bras_Vas{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Bras_Vas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Bras_Vas) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_Bras_Vas) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Bras_Vas.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Bras_Vas) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 0, 1}
}

func (x *Devm_MpuBoards_MpuBoard_Bras_Vas) GetStatisticFrequency() *Devm_MpuBoards_MpuBoard_Bras_Vas_StatisticFrequency {
	if x != nil {
		return x.StatisticFrequency
	}
	return nil
}

type Devm_MpuBoards_MpuBoard_Bras_Multicast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasPolicyCac *Devm_MpuBoards_MpuBoard_Bras_Multicast_BasPolicyCac `protobuf:"bytes,1,opt,name=bas_policy_cac,json=bas-policy-cac,proto3" json:"bas_policy_cac,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Bras_Multicast) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Bras_Multicast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Bras_Multicast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Bras_Multicast) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_Bras_Multicast) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Bras_Multicast.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Bras_Multicast) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 0, 2}
}

func (x *Devm_MpuBoards_MpuBoard_Bras_Multicast) GetBasPolicyCac() *Devm_MpuBoards_MpuBoard_Bras_Multicast_BasPolicyCac {
	if x != nil {
		return x.BasPolicyCac
	}
	return nil
}

type Devm_MpuBoards_MpuBoard_Bras_Vas_StatisticFrequency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowReadSpeed uint32 `protobuf:"varint,1,opt,name=flow_read_speed,json=flow-read-speed,proto3" json:"flow_read_speed,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Bras_Vas_StatisticFrequency) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Bras_Vas_StatisticFrequency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Bras_Vas_StatisticFrequency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Bras_Vas_StatisticFrequency) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_Bras_Vas_StatisticFrequency) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Bras_Vas_StatisticFrequency.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Bras_Vas_StatisticFrequency) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 0, 1, 0}
}

func (x *Devm_MpuBoards_MpuBoard_Bras_Vas_StatisticFrequency) GetFlowReadSpeed() uint32 {
	if x != nil {
		return x.FlowReadSpeed
	}
	return 0
}

type Devm_MpuBoards_MpuBoard_Bras_Multicast_BasPolicyCac struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Bras_Multicast_BasPolicyCac) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Bras_Multicast_BasPolicyCac{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Bras_Multicast_BasPolicyCac) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Bras_Multicast_BasPolicyCac) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_Bras_Multicast_BasPolicyCac) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Bras_Multicast_BasPolicyCac.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Bras_Multicast_BasPolicyCac) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 0, 2, 0}
}

func (x *Devm_MpuBoards_MpuBoard_Bras_Multicast_BasPolicyCac) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

type Devm_MpuBoards_MpuBoard_L2Tp_IcrqLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SetValue uint32 `protobuf:"varint,1,opt,name=set_value,json=set-value,proto3" json:"set_value,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_L2Tp_IcrqLimit) Reset() {
	*x = Devm_MpuBoards_MpuBoard_L2Tp_IcrqLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_L2Tp_IcrqLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_L2Tp_IcrqLimit) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_L2Tp_IcrqLimit) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_L2Tp_IcrqLimit.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_L2Tp_IcrqLimit) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 1, 0}
}

func (x *Devm_MpuBoards_MpuBoard_L2Tp_IcrqLimit) GetSetValue() uint32 {
	if x != nil {
		return x.SetValue
	}
	return 0
}

type Devm_MpuBoards_MpuBoard_L2Tp_ForwardMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModeValue Devm_MpuBoards_MpuBoard_L2Tp_ForwardMode_ModeValue `protobuf:"varint,1,opt,name=mode_value,json=mode-value,proto3,enum=huawei_devm.Devm_MpuBoards_MpuBoard_L2Tp_ForwardMode_ModeValue" json:"mode_value,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_L2Tp_ForwardMode) Reset() {
	*x = Devm_MpuBoards_MpuBoard_L2Tp_ForwardMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_L2Tp_ForwardMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_L2Tp_ForwardMode) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_L2Tp_ForwardMode) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_L2Tp_ForwardMode.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_L2Tp_ForwardMode) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 1, 1}
}

func (x *Devm_MpuBoards_MpuBoard_L2Tp_ForwardMode) GetModeValue() Devm_MpuBoards_MpuBoard_L2Tp_ForwardMode_ModeValue {
	if x != nil {
		return x.ModeValue
	}
	return Devm_MpuBoards_MpuBoard_L2Tp_ForwardMode_ModeValue_LOOPBACK
}

type Devm_MpuBoards_MpuBoard_BrasPppox_SlotAccessLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessUserLimit uint32 `protobuf:"varint,1,opt,name=access_user_limit,json=access-user-limit,proto3" json:"access_user_limit,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_SlotAccessLimit) Reset() {
	*x = Devm_MpuBoards_MpuBoard_BrasPppox_SlotAccessLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_SlotAccessLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_BrasPppox_SlotAccessLimit) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_SlotAccessLimit) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_BrasPppox_SlotAccessLimit.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_BrasPppox_SlotAccessLimit) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 2, 0}
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_SlotAccessLimit) GetAccessUserLimit() uint32 {
	if x != nil {
		return x.AccessUserLimit
	}
	return 0
}

type Devm_MpuBoards_MpuBoard_BrasPppox_AccessIp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessIpNumber uint32 `protobuf:"varint,1,opt,name=access_ip_number,json=access-ip-number,proto3" json:"access_ip_number,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_AccessIp) Reset() {
	*x = Devm_MpuBoards_MpuBoard_BrasPppox_AccessIp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_AccessIp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_BrasPppox_AccessIp) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_AccessIp) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_BrasPppox_AccessIp.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_BrasPppox_AccessIp) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 2, 1}
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_AccessIp) GetAccessIpNumber() uint32 {
	if x != nil {
		return x.AccessIpNumber
	}
	return 0
}

type Devm_MpuBoards_MpuBoard_BrasPppox_AccessIpLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FailNumber uint32 `protobuf:"varint,1,opt,name=fail_number,json=fail-number,proto3" json:"fail_number,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_AccessIpLimit) Reset() {
	*x = Devm_MpuBoards_MpuBoard_BrasPppox_AccessIpLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_AccessIpLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_BrasPppox_AccessIpLimit) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_AccessIpLimit) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_BrasPppox_AccessIpLimit.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_BrasPppox_AccessIpLimit) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 2, 2}
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_AccessIpLimit) GetFailNumber() uint32 {
	if x != nil {
		return x.FailNumber
	}
	return 0
}

type Devm_MpuBoards_MpuBoard_BrasPppox_LoadBalanceIdentifyPppoe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LoadBalanceEnable bool `protobuf:"varint,1,opt,name=load_balance_enable,json=load-balance-enable,proto3" json:"load_balance_enable,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_LoadBalanceIdentifyPppoe) Reset() {
	*x = Devm_MpuBoards_MpuBoard_BrasPppox_LoadBalanceIdentifyPppoe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_LoadBalanceIdentifyPppoe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_BrasPppox_LoadBalanceIdentifyPppoe) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_LoadBalanceIdentifyPppoe) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_BrasPppox_LoadBalanceIdentifyPppoe.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_BrasPppox_LoadBalanceIdentifyPppoe) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 2, 3}
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_LoadBalanceIdentifyPppoe) GetLoadBalanceEnable() bool {
	if x != nil {
		return x.LoadBalanceEnable
	}
	return false
}

type Devm_MpuBoards_MpuBoard_BrasPppox_MaxSessions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxSessionNumber uint32 `protobuf:"varint,1,opt,name=max_session_number,json=max-session-number,proto3" json:"max_session_number,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_MaxSessions) Reset() {
	*x = Devm_MpuBoards_MpuBoard_BrasPppox_MaxSessions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_MaxSessions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_BrasPppox_MaxSessions) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_MaxSessions) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_BrasPppox_MaxSessions.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_BrasPppox_MaxSessions) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 2, 4}
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_MaxSessions) GetMaxSessionNumber() uint32 {
	if x != nil {
		return x.MaxSessionNumber
	}
	return 0
}

type Devm_MpuBoards_MpuBoard_BrasPppox_PppoeSlotStatistic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActiveSessions         uint32 `protobuf:"varint,1,opt,name=active_sessions,json=active-sessions,proto3" json:"active_sessions,omitempty"`
	TotalSessions          uint32 `protobuf:"varint,2,opt,name=total_sessions,json=total-sessions,proto3" json:"total_sessions,omitempty"`
	ReceivePadiPackets     uint32 `protobuf:"varint,3,opt,name=receive_padi_packets,json=receive-padi-packets,proto3" json:"receive_padi_packets,omitempty"`
	DiscardPadiPackets     uint32 `protobuf:"varint,4,opt,name=discard_padi_packets,json=discard-padi-packets,proto3" json:"discard_padi_packets,omitempty"`
	SendPadoPackets        uint32 `protobuf:"varint,5,opt,name=send_pado_packets,json=send-pado-packets,proto3" json:"send_pado_packets,omitempty"`
	ReceivePadrPackets     uint32 `protobuf:"varint,6,opt,name=receive_padr_packets,json=receive-padr-packets,proto3" json:"receive_padr_packets,omitempty"`
	DiscardPadrPackets     uint32 `protobuf:"varint,7,opt,name=discard_padr_packets,json=discard-padr-packets,proto3" json:"discard_padr_packets,omitempty"`
	SendPadsPackets        uint32 `protobuf:"varint,8,opt,name=send_pads_packets,json=send-pads-packets,proto3" json:"send_pads_packets,omitempty"`
	DiscardPadrSameMac     uint32 `protobuf:"varint,9,opt,name=discard_padr_same_mac,json=discard-padr-same-mac,proto3" json:"discard_padr_same_mac,omitempty"`
	ReceivePadtPackets     uint32 `protobuf:"varint,10,opt,name=receive_padt_packets,json=receive-padt-packets,proto3" json:"receive_padt_packets,omitempty"`
	DiscardPadtPackets     uint32 `protobuf:"varint,11,opt,name=discard_padt_packets,json=discard-padt-packets,proto3" json:"discard_padt_packets,omitempty"`
	SendPadtPackets        uint32 `protobuf:"varint,12,opt,name=send_padt_packets,json=send-padt-packets,proto3" json:"send_padt_packets,omitempty"`
	SendPadmPackets        uint32 `protobuf:"varint,13,opt,name=send_padm_packets,json=send-padm-packets,proto3" json:"send_padm_packets,omitempty"`
	SendPadmUrlPackets     uint32 `protobuf:"varint,14,opt,name=send_padm_url_packets,json=send-padm-url-packets,proto3" json:"send_padm_url_packets,omitempty"`
	SendPadmMotmPackets    uint32 `protobuf:"varint,15,opt,name=send_padm_motm_packets,json=send-padm-motm-packets,proto3" json:"send_padm_motm_packets,omitempty"`
	SendPadnPackets        uint32 `protobuf:"varint,16,opt,name=send_padn_packets,json=send-padn-packets,proto3" json:"send_padn_packets,omitempty"`
	ReceiveSessionPackets  uint32 `protobuf:"varint,17,opt,name=receive_session_packets,json=receive-session-packets,proto3" json:"receive_session_packets,omitempty"`
	DiscardSessionPackets  uint32 `protobuf:"varint,18,opt,name=discard_session_packets,json=discard-session-packets,proto3" json:"discard_session_packets,omitempty"`
	SendSessionPackets     uint32 `protobuf:"varint,19,opt,name=send_session_packets,json=send-session-packets,proto3" json:"send_session_packets,omitempty"`
	ReceivePackets         uint32 `protobuf:"varint,20,opt,name=receive_packets,json=receive-packets,proto3" json:"receive_packets,omitempty"`
	DiscardPackets         uint32 `protobuf:"varint,21,opt,name=discard_packets,json=discard-packets,proto3" json:"discard_packets,omitempty"`
	InvalidVersion         uint32 `protobuf:"varint,22,opt,name=invalid_version,json=invalid-version,proto3" json:"invalid_version,omitempty"`
	InvalidPadCode         uint32 `protobuf:"varint,23,opt,name=invalid_pad_code,json=invalid-pad-code,proto3" json:"invalid_pad_code,omitempty"`
	InvalidPadTags         uint32 `protobuf:"varint,24,opt,name=invalid_pad_tags,json=invalid-pad-tags,proto3" json:"invalid_pad_tags,omitempty"`
	InvalidPadTagLength    uint32 `protobuf:"varint,25,opt,name=invalid_pad_tag_length,json=invalid-pad-tag-length,proto3" json:"invalid_pad_tag_length,omitempty"`
	InvalidPadType         uint32 `protobuf:"varint,26,opt,name=invalid_pad_type,json=invalid-pad-type,proto3" json:"invalid_pad_type,omitempty"`
	InvalidPadiSessions    uint32 `protobuf:"varint,27,opt,name=invalid_padi_sessions,json=invalid-padi-sessions,proto3" json:"invalid_padi_sessions,omitempty"`
	InvalidPadrSessions    uint32 `protobuf:"varint,28,opt,name=invalid_padr_sessions,json=invalid-padr-sessions,proto3" json:"invalid_padr_sessions,omitempty"`
	InvalidPadPacketLength uint32 `protobuf:"varint,29,opt,name=invalid_pad_packet_length,json=invalid-pad-packet-length,proto3" json:"invalid_pad_packet_length,omitempty"`
	OtherInvalidPadPackets uint32 `protobuf:"varint,30,opt,name=other_invalid_pad_packets,json=other-invalid-pad-packets,proto3" json:"other_invalid_pad_packets,omitempty"`
	TotalInvalidPadPackets uint32 `protobuf:"varint,31,opt,name=total_invalid_pad_packets,json=total-invalid-pad-packets,proto3" json:"total_invalid_pad_packets,omitempty"`
	SendNullPadsPackets    uint32 `protobuf:"varint,32,opt,name=send_null_pads_packets,json=send-null-pads-packets,proto3" json:"send_null_pads_packets,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppoeSlotStatistic) Reset() {
	*x = Devm_MpuBoards_MpuBoard_BrasPppox_PppoeSlotStatistic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppoeSlotStatistic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_BrasPppox_PppoeSlotStatistic) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppoeSlotStatistic) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_BrasPppox_PppoeSlotStatistic.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_BrasPppox_PppoeSlotStatistic) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 2, 5}
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppoeSlotStatistic) GetActiveSessions() uint32 {
	if x != nil {
		return x.ActiveSessions
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppoeSlotStatistic) GetTotalSessions() uint32 {
	if x != nil {
		return x.TotalSessions
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppoeSlotStatistic) GetReceivePadiPackets() uint32 {
	if x != nil {
		return x.ReceivePadiPackets
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppoeSlotStatistic) GetDiscardPadiPackets() uint32 {
	if x != nil {
		return x.DiscardPadiPackets
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppoeSlotStatistic) GetSendPadoPackets() uint32 {
	if x != nil {
		return x.SendPadoPackets
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppoeSlotStatistic) GetReceivePadrPackets() uint32 {
	if x != nil {
		return x.ReceivePadrPackets
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppoeSlotStatistic) GetDiscardPadrPackets() uint32 {
	if x != nil {
		return x.DiscardPadrPackets
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppoeSlotStatistic) GetSendPadsPackets() uint32 {
	if x != nil {
		return x.SendPadsPackets
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppoeSlotStatistic) GetDiscardPadrSameMac() uint32 {
	if x != nil {
		return x.DiscardPadrSameMac
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppoeSlotStatistic) GetReceivePadtPackets() uint32 {
	if x != nil {
		return x.ReceivePadtPackets
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppoeSlotStatistic) GetDiscardPadtPackets() uint32 {
	if x != nil {
		return x.DiscardPadtPackets
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppoeSlotStatistic) GetSendPadtPackets() uint32 {
	if x != nil {
		return x.SendPadtPackets
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppoeSlotStatistic) GetSendPadmPackets() uint32 {
	if x != nil {
		return x.SendPadmPackets
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppoeSlotStatistic) GetSendPadmUrlPackets() uint32 {
	if x != nil {
		return x.SendPadmUrlPackets
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppoeSlotStatistic) GetSendPadmMotmPackets() uint32 {
	if x != nil {
		return x.SendPadmMotmPackets
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppoeSlotStatistic) GetSendPadnPackets() uint32 {
	if x != nil {
		return x.SendPadnPackets
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppoeSlotStatistic) GetReceiveSessionPackets() uint32 {
	if x != nil {
		return x.ReceiveSessionPackets
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppoeSlotStatistic) GetDiscardSessionPackets() uint32 {
	if x != nil {
		return x.DiscardSessionPackets
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppoeSlotStatistic) GetSendSessionPackets() uint32 {
	if x != nil {
		return x.SendSessionPackets
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppoeSlotStatistic) GetReceivePackets() uint32 {
	if x != nil {
		return x.ReceivePackets
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppoeSlotStatistic) GetDiscardPackets() uint32 {
	if x != nil {
		return x.DiscardPackets
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppoeSlotStatistic) GetInvalidVersion() uint32 {
	if x != nil {
		return x.InvalidVersion
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppoeSlotStatistic) GetInvalidPadCode() uint32 {
	if x != nil {
		return x.InvalidPadCode
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppoeSlotStatistic) GetInvalidPadTags() uint32 {
	if x != nil {
		return x.InvalidPadTags
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppoeSlotStatistic) GetInvalidPadTagLength() uint32 {
	if x != nil {
		return x.InvalidPadTagLength
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppoeSlotStatistic) GetInvalidPadType() uint32 {
	if x != nil {
		return x.InvalidPadType
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppoeSlotStatistic) GetInvalidPadiSessions() uint32 {
	if x != nil {
		return x.InvalidPadiSessions
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppoeSlotStatistic) GetInvalidPadrSessions() uint32 {
	if x != nil {
		return x.InvalidPadrSessions
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppoeSlotStatistic) GetInvalidPadPacketLength() uint32 {
	if x != nil {
		return x.InvalidPadPacketLength
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppoeSlotStatistic) GetOtherInvalidPadPackets() uint32 {
	if x != nil {
		return x.OtherInvalidPadPackets
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppoeSlotStatistic) GetTotalInvalidPadPackets() uint32 {
	if x != nil {
		return x.TotalInvalidPadPackets
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppoeSlotStatistic) GetSendNullPadsPackets() uint32 {
	if x != nil {
		return x.SendNullPadsPackets
	}
	return 0
}

type Devm_MpuBoards_MpuBoard_BrasPppox_PppSlotStatistic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SendEchoRequest                 uint32 `protobuf:"varint,1,opt,name=send_echo_request,json=send-echo-request,proto3" json:"send_echo_request,omitempty"`
	SendEchoReply                   uint32 `protobuf:"varint,2,opt,name=send_echo_reply,json=send-echo-reply,proto3" json:"send_echo_reply,omitempty"`
	SendEchoFailed                  uint32 `protobuf:"varint,3,opt,name=send_echo_failed,json=send-echo-failed,proto3" json:"send_echo_failed,omitempty"`
	ReceiveEchoReply                uint32 `protobuf:"varint,4,opt,name=receive_echo_reply,json=receive-echo-reply,proto3" json:"receive_echo_reply,omitempty"`
	ReceiveEchoRequest              uint32 `protobuf:"varint,5,opt,name=receive_echo_request,json=receive-echo-request,proto3" json:"receive_echo_request,omitempty"`
	SendLcpConnectionRequest        uint32 `protobuf:"varint,6,opt,name=send_lcp_connection_request,json=send-lcp-connection-request,proto3" json:"send_lcp_connection_request,omitempty"`
	SendLcpConnectionNak            uint32 `protobuf:"varint,7,opt,name=send_lcp_connection_nak,json=send-lcp-connection-nak,proto3" json:"send_lcp_connection_nak,omitempty"`
	SendLcpConnectionRejection      uint32 `protobuf:"varint,8,opt,name=send_lcp_connection_rejection,json=send-lcp-connection-rejection,proto3" json:"send_lcp_connection_rejection,omitempty"`
	SendLcpConnectionAck            uint32 `protobuf:"varint,9,opt,name=send_lcp_connection_ack,json=send-lcp-connection-ack,proto3" json:"send_lcp_connection_ack,omitempty"`
	SendLcpCodeRejection            uint32 `protobuf:"varint,10,opt,name=send_lcp_code_rejection,json=send-lcp-code-rejection,proto3" json:"send_lcp_code_rejection,omitempty"`
	SendLcpProtocolRejection        uint32 `protobuf:"varint,11,opt,name=send_lcp_protocol_rejection,json=send-lcp-protocol-rejection,proto3" json:"send_lcp_protocol_rejection,omitempty"`
	SendLcpTerminationRequest       uint32 `protobuf:"varint,12,opt,name=send_lcp_termination_request,json=send-lcp-termination-request,proto3" json:"send_lcp_termination_request,omitempty"`
	SendLcpTerminationAck           uint32 `protobuf:"varint,13,opt,name=send_lcp_termination_ack,json=send-lcp-termination-ack,proto3" json:"send_lcp_termination_ack,omitempty"`
	ReceiveLcpConnectionRequest     uint32 `protobuf:"varint,14,opt,name=receive_lcp_connection_request,json=receive-lcp-connection-request,proto3" json:"receive_lcp_connection_request,omitempty"`
	ReceiveLcpConnectionNak         uint32 `protobuf:"varint,15,opt,name=receive_lcp_connection_nak,json=receive-lcp-connection-nak,proto3" json:"receive_lcp_connection_nak,omitempty"`
	ReceiveLcpConnectionRejection   uint32 `protobuf:"varint,16,opt,name=receive_lcp_connection_rejection,json=receive-lcp-connection-rejection,proto3" json:"receive_lcp_connection_rejection,omitempty"`
	ReceiveLcpConnectionAck         uint32 `protobuf:"varint,17,opt,name=receive_lcp_connection_ack,json=receive-lcp-connection-ack,proto3" json:"receive_lcp_connection_ack,omitempty"`
	ReceiveLcpCodeRejection         uint32 `protobuf:"varint,18,opt,name=receive_lcp_code_rejection,json=receive-lcp-code-rejection,proto3" json:"receive_lcp_code_rejection,omitempty"`
	ReceiveLcpProtocolRejection     uint32 `protobuf:"varint,19,opt,name=receive_lcp_protocol_rejection,json=receive-lcp-protocol-rejection,proto3" json:"receive_lcp_protocol_rejection,omitempty"`
	ReceiveLcpTerminationRequest    uint32 `protobuf:"varint,20,opt,name=receive_lcp_termination_request,json=receive-lcp-termination-request,proto3" json:"receive_lcp_termination_request,omitempty"`
	ReceiveLcpTerminationAck        uint32 `protobuf:"varint,21,opt,name=receive_lcp_termination_ack,json=receive-lcp-termination-ack,proto3" json:"receive_lcp_termination_ack,omitempty"`
	SendIpcpConnectionRequest       uint32 `protobuf:"varint,22,opt,name=send_ipcp_connection_request,json=send-ipcp-connection-request,proto3" json:"send_ipcp_connection_request,omitempty"`
	SendIpcpConnectionNak           uint32 `protobuf:"varint,23,opt,name=send_ipcp_connection_nak,json=send-ipcp-connection-nak,proto3" json:"send_ipcp_connection_nak,omitempty"`
	SendIpcpConnectionRejection     uint32 `protobuf:"varint,24,opt,name=send_ipcp_connection_rejection,json=send-ipcp-connection-rejection,proto3" json:"send_ipcp_connection_rejection,omitempty"`
	SendIpcpConnectionAck           uint32 `protobuf:"varint,25,opt,name=send_ipcp_connection_ack,json=send-ipcp-connection-ack,proto3" json:"send_ipcp_connection_ack,omitempty"`
	SendIpcpCodeRejection           uint32 `protobuf:"varint,26,opt,name=send_ipcp_code_rejection,json=send-ipcp-code-rejection,proto3" json:"send_ipcp_code_rejection,omitempty"`
	SendIpcpProtocolRejection       uint32 `protobuf:"varint,27,opt,name=send_ipcp_protocol_rejection,json=send-ipcp-protocol-rejection,proto3" json:"send_ipcp_protocol_rejection,omitempty"`
	SendIpcpTerminationRequest      uint32 `protobuf:"varint,28,opt,name=send_ipcp_termination_request,json=send-ipcp-termination-request,proto3" json:"send_ipcp_termination_request,omitempty"`
	SendIpccpTerminationAck         uint32 `protobuf:"varint,29,opt,name=send_ipccp_termination_ack,json=send-ipccp-termination-ack,proto3" json:"send_ipccp_termination_ack,omitempty"`
	ReceiveIpcpConnectionRequest    uint32 `protobuf:"varint,30,opt,name=receive_ipcp_connection_request,json=receive-ipcp-connection-request,proto3" json:"receive_ipcp_connection_request,omitempty"`
	ReceiveIpcpConnectionNak        uint32 `protobuf:"varint,31,opt,name=receive_ipcp_connection_nak,json=receive-ipcp-connection-nak,proto3" json:"receive_ipcp_connection_nak,omitempty"`
	ReceiveIpcpConnectionRejection  uint32 `protobuf:"varint,32,opt,name=receive_ipcp_connection_rejection,json=receive-ipcp-connection-rejection,proto3" json:"receive_ipcp_connection_rejection,omitempty"`
	ReceiveIpcpConnectionAck        uint32 `protobuf:"varint,33,opt,name=receive_ipcp_connection_ack,json=receive-ipcp-connection-ack,proto3" json:"receive_ipcp_connection_ack,omitempty"`
	ReceiveIpcpCodeRejection        uint32 `protobuf:"varint,34,opt,name=receive_ipcp_code_rejection,json=receive-ipcp-code-rejection,proto3" json:"receive_ipcp_code_rejection,omitempty"`
	ReceiveIpcpProtocolRejection    uint32 `protobuf:"varint,35,opt,name=receive_ipcp_protocol_rejection,json=receive-ipcp-protocol-rejection,proto3" json:"receive_ipcp_protocol_rejection,omitempty"`
	ReceiveIpcpTerminationRequest   uint32 `protobuf:"varint,36,opt,name=receive_ipcp_termination_request,json=receive-ipcp-termination-request,proto3" json:"receive_ipcp_termination_request,omitempty"`
	ReceiveIpcpTerminationAck       uint32 `protobuf:"varint,37,opt,name=receive_ipcp_termination_ack,json=receive-ipcp-termination-ack,proto3" json:"receive_ipcp_termination_ack,omitempty"`
	SendIp6CpConnectionRequest      uint32 `protobuf:"varint,38,opt,name=send_ip6cp_connection_request,json=send-ip6cp-connection-request,proto3" json:"send_ip6cp_connection_request,omitempty"`
	SendIp6CpConnectionNak          uint32 `protobuf:"varint,39,opt,name=send_ip6cp_connection_nak,json=send-ip6cp-connection-nak,proto3" json:"send_ip6cp_connection_nak,omitempty"`
	SendIp6CpConnectionRejection    uint32 `protobuf:"varint,40,opt,name=send_ip6cp_connection_rejection,json=send-ip6cp-connection-rejection,proto3" json:"send_ip6cp_connection_rejection,omitempty"`
	SendIp6CpConnectionAck          uint32 `protobuf:"varint,41,opt,name=send_ip6cp_connection_ack,json=send-ip6cp-connection-ack,proto3" json:"send_ip6cp_connection_ack,omitempty"`
	SendIp6CpCodeRejection          uint32 `protobuf:"varint,42,opt,name=send_ip6cp_code_rejection,json=send-ip6cp-code-rejection,proto3" json:"send_ip6cp_code_rejection,omitempty"`
	SendIp6CpProtocolRejection      uint32 `protobuf:"varint,43,opt,name=send_ip6cp_protocol_rejection,json=send-ip6cp-protocol-rejection,proto3" json:"send_ip6cp_protocol_rejection,omitempty"`
	SendIp6CpTerminationRequest     uint32 `protobuf:"varint,44,opt,name=send_ip6cp_termination_request,json=send-ip6cp-termination-request,proto3" json:"send_ip6cp_termination_request,omitempty"`
	SendIp6CpTerminationAck         uint32 `protobuf:"varint,45,opt,name=send_ip6cp_termination_ack,json=send-ip6cp-termination-ack,proto3" json:"send_ip6cp_termination_ack,omitempty"`
	ReceiveIp6CpConnectionRequest   uint32 `protobuf:"varint,46,opt,name=receive_ip6cp_connection_request,json=receive-ip6cp-connection-request,proto3" json:"receive_ip6cp_connection_request,omitempty"`
	ReceiveIp6CpConnectionNak       uint32 `protobuf:"varint,47,opt,name=receive_ip6cp_connection_nak,json=receive-ip6cp-connection-nak,proto3" json:"receive_ip6cp_connection_nak,omitempty"`
	ReceiveIp6CpConnectionReject    uint32 `protobuf:"varint,48,opt,name=receive_ip6cp_connection_reject,json=receive-ip6cp-connection-reject,proto3" json:"receive_ip6cp_connection_reject,omitempty"`
	ReceiveIp6CpConnectionAck       uint32 `protobuf:"varint,49,opt,name=receive_ip6cp_connection_ack,json=receive-ip6cp-connection-ack,proto3" json:"receive_ip6cp_connection_ack,omitempty"`
	ReceiveIp6CpCodeRejection       uint32 `protobuf:"varint,50,opt,name=receive_ip6cp_code_rejection,json=receive-ip6cp-code-rejection,proto3" json:"receive_ip6cp_code_rejection,omitempty"`
	ReceiveIp6CpProtocolRejection   uint32 `protobuf:"varint,51,opt,name=receive_ip6cp_protocol_rejection,json=receive-ip6cp-protocol-rejection,proto3" json:"receive_ip6cp_protocol_rejection,omitempty"`
	ReceiveIp6CpTerminationRequest  uint32 `protobuf:"varint,52,opt,name=receive_ip6cp_termination_request,json=receive-ip6cp-termination-request,proto3" json:"receive_ip6cp_termination_request,omitempty"`
	ReceiveIp6CpTerminationAck      uint32 `protobuf:"varint,53,opt,name=receive_ip6cp_termination_ack,json=receive-ip6cp-termination-ack,proto3" json:"receive_ip6cp_termination_ack,omitempty"`
	SendPapAuthenticationAck        uint32 `protobuf:"varint,54,opt,name=send_pap_authentication_ack,json=send-pap-authentication-ack,proto3" json:"send_pap_authentication_ack,omitempty"`
	SendPapAuthenticationNak        uint32 `protobuf:"varint,55,opt,name=send_pap_authentication_nak,json=send-pap-authentication-nak,proto3" json:"send_pap_authentication_nak,omitempty"`
	SendChapChallenge               uint32 `protobuf:"varint,56,opt,name=send_chap_challenge,json=send-chap-challenge,proto3" json:"send_chap_challenge,omitempty"`
	SendChapAuthenticationAck       uint32 `protobuf:"varint,57,opt,name=send_chap_authentication_ack,json=send-chap-authentication-ack,proto3" json:"send_chap_authentication_ack,omitempty"`
	SendChapAuthenticationFail      uint32 `protobuf:"varint,58,opt,name=send_chap_authentication_fail,json=send-chap-authentication-fail,proto3" json:"send_chap_authentication_fail,omitempty"`
	DiscardDailFast                 uint32 `protobuf:"varint,59,opt,name=discard_dail_fast,json=discard-dail-fast,proto3" json:"discard_dail_fast,omitempty"`
	DiscardChasten                  uint32 `protobuf:"varint,60,opt,name=discard_chasten,json=discard-chasten,proto3" json:"discard_chasten,omitempty"`
	ReceivePapAuthenticationRequest uint32 `protobuf:"varint,61,opt,name=receive_pap_authentication_request,json=receive-pap-authentication-request,proto3" json:"receive_pap_authentication_request,omitempty"`
	ReceiveChapResponse             uint32 `protobuf:"varint,62,opt,name=receive_chap_response,json=receive-chap-response,proto3" json:"receive_chap_response,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppSlotStatistic) Reset() {
	*x = Devm_MpuBoards_MpuBoard_BrasPppox_PppSlotStatistic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppSlotStatistic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_BrasPppox_PppSlotStatistic) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppSlotStatistic) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_BrasPppox_PppSlotStatistic.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_BrasPppox_PppSlotStatistic) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 2, 6}
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppSlotStatistic) GetSendEchoRequest() uint32 {
	if x != nil {
		return x.SendEchoRequest
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppSlotStatistic) GetSendEchoReply() uint32 {
	if x != nil {
		return x.SendEchoReply
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppSlotStatistic) GetSendEchoFailed() uint32 {
	if x != nil {
		return x.SendEchoFailed
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppSlotStatistic) GetReceiveEchoReply() uint32 {
	if x != nil {
		return x.ReceiveEchoReply
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppSlotStatistic) GetReceiveEchoRequest() uint32 {
	if x != nil {
		return x.ReceiveEchoRequest
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppSlotStatistic) GetSendLcpConnectionRequest() uint32 {
	if x != nil {
		return x.SendLcpConnectionRequest
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppSlotStatistic) GetSendLcpConnectionNak() uint32 {
	if x != nil {
		return x.SendLcpConnectionNak
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppSlotStatistic) GetSendLcpConnectionRejection() uint32 {
	if x != nil {
		return x.SendLcpConnectionRejection
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppSlotStatistic) GetSendLcpConnectionAck() uint32 {
	if x != nil {
		return x.SendLcpConnectionAck
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppSlotStatistic) GetSendLcpCodeRejection() uint32 {
	if x != nil {
		return x.SendLcpCodeRejection
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppSlotStatistic) GetSendLcpProtocolRejection() uint32 {
	if x != nil {
		return x.SendLcpProtocolRejection
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppSlotStatistic) GetSendLcpTerminationRequest() uint32 {
	if x != nil {
		return x.SendLcpTerminationRequest
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppSlotStatistic) GetSendLcpTerminationAck() uint32 {
	if x != nil {
		return x.SendLcpTerminationAck
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppSlotStatistic) GetReceiveLcpConnectionRequest() uint32 {
	if x != nil {
		return x.ReceiveLcpConnectionRequest
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppSlotStatistic) GetReceiveLcpConnectionNak() uint32 {
	if x != nil {
		return x.ReceiveLcpConnectionNak
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppSlotStatistic) GetReceiveLcpConnectionRejection() uint32 {
	if x != nil {
		return x.ReceiveLcpConnectionRejection
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppSlotStatistic) GetReceiveLcpConnectionAck() uint32 {
	if x != nil {
		return x.ReceiveLcpConnectionAck
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppSlotStatistic) GetReceiveLcpCodeRejection() uint32 {
	if x != nil {
		return x.ReceiveLcpCodeRejection
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppSlotStatistic) GetReceiveLcpProtocolRejection() uint32 {
	if x != nil {
		return x.ReceiveLcpProtocolRejection
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppSlotStatistic) GetReceiveLcpTerminationRequest() uint32 {
	if x != nil {
		return x.ReceiveLcpTerminationRequest
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppSlotStatistic) GetReceiveLcpTerminationAck() uint32 {
	if x != nil {
		return x.ReceiveLcpTerminationAck
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppSlotStatistic) GetSendIpcpConnectionRequest() uint32 {
	if x != nil {
		return x.SendIpcpConnectionRequest
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppSlotStatistic) GetSendIpcpConnectionNak() uint32 {
	if x != nil {
		return x.SendIpcpConnectionNak
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppSlotStatistic) GetSendIpcpConnectionRejection() uint32 {
	if x != nil {
		return x.SendIpcpConnectionRejection
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppSlotStatistic) GetSendIpcpConnectionAck() uint32 {
	if x != nil {
		return x.SendIpcpConnectionAck
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppSlotStatistic) GetSendIpcpCodeRejection() uint32 {
	if x != nil {
		return x.SendIpcpCodeRejection
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppSlotStatistic) GetSendIpcpProtocolRejection() uint32 {
	if x != nil {
		return x.SendIpcpProtocolRejection
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppSlotStatistic) GetSendIpcpTerminationRequest() uint32 {
	if x != nil {
		return x.SendIpcpTerminationRequest
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppSlotStatistic) GetSendIpccpTerminationAck() uint32 {
	if x != nil {
		return x.SendIpccpTerminationAck
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppSlotStatistic) GetReceiveIpcpConnectionRequest() uint32 {
	if x != nil {
		return x.ReceiveIpcpConnectionRequest
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppSlotStatistic) GetReceiveIpcpConnectionNak() uint32 {
	if x != nil {
		return x.ReceiveIpcpConnectionNak
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppSlotStatistic) GetReceiveIpcpConnectionRejection() uint32 {
	if x != nil {
		return x.ReceiveIpcpConnectionRejection
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppSlotStatistic) GetReceiveIpcpConnectionAck() uint32 {
	if x != nil {
		return x.ReceiveIpcpConnectionAck
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppSlotStatistic) GetReceiveIpcpCodeRejection() uint32 {
	if x != nil {
		return x.ReceiveIpcpCodeRejection
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppSlotStatistic) GetReceiveIpcpProtocolRejection() uint32 {
	if x != nil {
		return x.ReceiveIpcpProtocolRejection
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppSlotStatistic) GetReceiveIpcpTerminationRequest() uint32 {
	if x != nil {
		return x.ReceiveIpcpTerminationRequest
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppSlotStatistic) GetReceiveIpcpTerminationAck() uint32 {
	if x != nil {
		return x.ReceiveIpcpTerminationAck
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppSlotStatistic) GetSendIp6CpConnectionRequest() uint32 {
	if x != nil {
		return x.SendIp6CpConnectionRequest
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppSlotStatistic) GetSendIp6CpConnectionNak() uint32 {
	if x != nil {
		return x.SendIp6CpConnectionNak
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppSlotStatistic) GetSendIp6CpConnectionRejection() uint32 {
	if x != nil {
		return x.SendIp6CpConnectionRejection
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppSlotStatistic) GetSendIp6CpConnectionAck() uint32 {
	if x != nil {
		return x.SendIp6CpConnectionAck
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppSlotStatistic) GetSendIp6CpCodeRejection() uint32 {
	if x != nil {
		return x.SendIp6CpCodeRejection
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppSlotStatistic) GetSendIp6CpProtocolRejection() uint32 {
	if x != nil {
		return x.SendIp6CpProtocolRejection
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppSlotStatistic) GetSendIp6CpTerminationRequest() uint32 {
	if x != nil {
		return x.SendIp6CpTerminationRequest
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppSlotStatistic) GetSendIp6CpTerminationAck() uint32 {
	if x != nil {
		return x.SendIp6CpTerminationAck
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppSlotStatistic) GetReceiveIp6CpConnectionRequest() uint32 {
	if x != nil {
		return x.ReceiveIp6CpConnectionRequest
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppSlotStatistic) GetReceiveIp6CpConnectionNak() uint32 {
	if x != nil {
		return x.ReceiveIp6CpConnectionNak
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppSlotStatistic) GetReceiveIp6CpConnectionReject() uint32 {
	if x != nil {
		return x.ReceiveIp6CpConnectionReject
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppSlotStatistic) GetReceiveIp6CpConnectionAck() uint32 {
	if x != nil {
		return x.ReceiveIp6CpConnectionAck
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppSlotStatistic) GetReceiveIp6CpCodeRejection() uint32 {
	if x != nil {
		return x.ReceiveIp6CpCodeRejection
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppSlotStatistic) GetReceiveIp6CpProtocolRejection() uint32 {
	if x != nil {
		return x.ReceiveIp6CpProtocolRejection
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppSlotStatistic) GetReceiveIp6CpTerminationRequest() uint32 {
	if x != nil {
		return x.ReceiveIp6CpTerminationRequest
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppSlotStatistic) GetReceiveIp6CpTerminationAck() uint32 {
	if x != nil {
		return x.ReceiveIp6CpTerminationAck
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppSlotStatistic) GetSendPapAuthenticationAck() uint32 {
	if x != nil {
		return x.SendPapAuthenticationAck
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppSlotStatistic) GetSendPapAuthenticationNak() uint32 {
	if x != nil {
		return x.SendPapAuthenticationNak
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppSlotStatistic) GetSendChapChallenge() uint32 {
	if x != nil {
		return x.SendChapChallenge
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppSlotStatistic) GetSendChapAuthenticationAck() uint32 {
	if x != nil {
		return x.SendChapAuthenticationAck
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppSlotStatistic) GetSendChapAuthenticationFail() uint32 {
	if x != nil {
		return x.SendChapAuthenticationFail
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppSlotStatistic) GetDiscardDailFast() uint32 {
	if x != nil {
		return x.DiscardDailFast
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppSlotStatistic) GetDiscardChasten() uint32 {
	if x != nil {
		return x.DiscardChasten
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppSlotStatistic) GetReceivePapAuthenticationRequest() uint32 {
	if x != nil {
		return x.ReceivePapAuthenticationRequest
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppSlotStatistic) GetReceiveChapResponse() uint32 {
	if x != nil {
		return x.ReceiveChapResponse
	}
	return 0
}

type Devm_MpuBoards_MpuBoard_BrasPppox_UrpfDiscardStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UrpfIpv4DiscardStatistic *Devm_MpuBoards_MpuBoard_BrasPppox_UrpfDiscardStatistics_UrpfIpv4DiscardStatistic `protobuf:"bytes,1,opt,name=urpf_ipv4_discard_statistic,json=urpf-ipv4-discard-statistic,proto3" json:"urpf_ipv4_discard_statistic,omitempty"`
	UrpfIpv6DiscardStatistic *Devm_MpuBoards_MpuBoard_BrasPppox_UrpfDiscardStatistics_UrpfIpv6DiscardStatistic `protobuf:"bytes,2,opt,name=urpf_ipv6_discard_statistic,json=urpf-ipv6-discard-statistic,proto3" json:"urpf_ipv6_discard_statistic,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_UrpfDiscardStatistics) Reset() {
	*x = Devm_MpuBoards_MpuBoard_BrasPppox_UrpfDiscardStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_UrpfDiscardStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_BrasPppox_UrpfDiscardStatistics) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_UrpfDiscardStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_BrasPppox_UrpfDiscardStatistics.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_BrasPppox_UrpfDiscardStatistics) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 2, 7}
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_UrpfDiscardStatistics) GetUrpfIpv4DiscardStatistic() *Devm_MpuBoards_MpuBoard_BrasPppox_UrpfDiscardStatistics_UrpfIpv4DiscardStatistic {
	if x != nil {
		return x.UrpfIpv4DiscardStatistic
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_UrpfDiscardStatistics) GetUrpfIpv6DiscardStatistic() *Devm_MpuBoards_MpuBoard_BrasPppox_UrpfDiscardStatistics_UrpfIpv6DiscardStatistic {
	if x != nil {
		return x.UrpfIpv6DiscardStatistic
	}
	return nil
}

type Devm_MpuBoards_MpuBoard_BrasPppox_PppEchoDeployMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeparateMode bool `protobuf:"varint,1,opt,name=separate_mode,json=separate-mode,proto3" json:"separate_mode,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppEchoDeployMode) Reset() {
	*x = Devm_MpuBoards_MpuBoard_BrasPppox_PppEchoDeployMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppEchoDeployMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_BrasPppox_PppEchoDeployMode) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppEchoDeployMode) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_BrasPppox_PppEchoDeployMode.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_BrasPppox_PppEchoDeployMode) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 2, 8}
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_PppEchoDeployMode) GetSeparateMode() bool {
	if x != nil {
		return x.SeparateMode
	}
	return false
}

type Devm_MpuBoards_MpuBoard_BrasPppox_UrpfDiscardStatistics_UrpfIpv4DiscardStatistic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PppIpv4PacketHighBits uint32 `protobuf:"varint,1,opt,name=ppp_ipv4_packet_high_bits,json=ppp-ipv4-packet-high-bits,proto3" json:"ppp_ipv4_packet_high_bits,omitempty"`
	PppIpv4PacketLowBits  uint32 `protobuf:"varint,2,opt,name=ppp_ipv4_packet_low_bits,json=ppp-ipv4-packet-low-bits,proto3" json:"ppp_ipv4_packet_low_bits,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_UrpfDiscardStatistics_UrpfIpv4DiscardStatistic) Reset() {
	*x = Devm_MpuBoards_MpuBoard_BrasPppox_UrpfDiscardStatistics_UrpfIpv4DiscardStatistic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_UrpfDiscardStatistics_UrpfIpv4DiscardStatistic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_BrasPppox_UrpfDiscardStatistics_UrpfIpv4DiscardStatistic) ProtoMessage() {
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_UrpfDiscardStatistics_UrpfIpv4DiscardStatistic) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_BrasPppox_UrpfDiscardStatistics_UrpfIpv4DiscardStatistic.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_BrasPppox_UrpfDiscardStatistics_UrpfIpv4DiscardStatistic) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 2, 7, 0}
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_UrpfDiscardStatistics_UrpfIpv4DiscardStatistic) GetPppIpv4PacketHighBits() uint32 {
	if x != nil {
		return x.PppIpv4PacketHighBits
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_UrpfDiscardStatistics_UrpfIpv4DiscardStatistic) GetPppIpv4PacketLowBits() uint32 {
	if x != nil {
		return x.PppIpv4PacketLowBits
	}
	return 0
}

type Devm_MpuBoards_MpuBoard_BrasPppox_UrpfDiscardStatistics_UrpfIpv6DiscardStatistic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PppIpv6PacketHighBits uint32 `protobuf:"varint,1,opt,name=ppp_ipv6_packet_high_bits,json=ppp-ipv6-packet-high-bits,proto3" json:"ppp_ipv6_packet_high_bits,omitempty"`
	PppIpv6PacketLowBits  uint32 `protobuf:"varint,2,opt,name=ppp_ipv6_packet_low_bits,json=ppp-ipv6-packet-low-bits,proto3" json:"ppp_ipv6_packet_low_bits,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_UrpfDiscardStatistics_UrpfIpv6DiscardStatistic) Reset() {
	*x = Devm_MpuBoards_MpuBoard_BrasPppox_UrpfDiscardStatistics_UrpfIpv6DiscardStatistic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_UrpfDiscardStatistics_UrpfIpv6DiscardStatistic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_BrasPppox_UrpfDiscardStatistics_UrpfIpv6DiscardStatistic) ProtoMessage() {
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_UrpfDiscardStatistics_UrpfIpv6DiscardStatistic) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_BrasPppox_UrpfDiscardStatistics_UrpfIpv6DiscardStatistic.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_BrasPppox_UrpfDiscardStatistics_UrpfIpv6DiscardStatistic) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 2, 7, 1}
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_UrpfDiscardStatistics_UrpfIpv6DiscardStatistic) GetPppIpv6PacketHighBits() uint32 {
	if x != nil {
		return x.PppIpv6PacketHighBits
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_BrasPppox_UrpfDiscardStatistics_UrpfIpv6DiscardStatistic) GetPppIpv6PacketLowBits() uint32 {
	if x != nil {
		return x.PppIpv6PacketLowBits
	}
	return 0
}

type Devm_MpuBoards_MpuBoard_CpudefendDevm_IgnoreHostcarAcl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ipv4Acl string `protobuf:"bytes,1,opt,name=ipv4_acl,json=ipv4-acl,proto3" json:"ipv4_acl,omitempty"`
	Ipv6Acl string `protobuf:"bytes,2,opt,name=ipv6_acl,json=ipv6-acl,proto3" json:"ipv6_acl,omitempty"`
	// Types that are assignable to Ipv4AclType:
	//	*Devm_MpuBoards_MpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclTypeByIdentity
	//	*Devm_MpuBoards_MpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclTypeByNumber
	Ipv4AclType isDevm_MpuBoards_MpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclType `protobuf_oneof:"Ipv4AclType"`
}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_IgnoreHostcarAcl) Reset() {
	*x = Devm_MpuBoards_MpuBoard_CpudefendDevm_IgnoreHostcarAcl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_IgnoreHostcarAcl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_CpudefendDevm_IgnoreHostcarAcl) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_IgnoreHostcarAcl) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_CpudefendDevm_IgnoreHostcarAcl.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_CpudefendDevm_IgnoreHostcarAcl) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 4, 0}
}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_IgnoreHostcarAcl) GetIpv4Acl() string {
	if x != nil {
		return x.Ipv4Acl
	}
	return ""
}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_IgnoreHostcarAcl) GetIpv6Acl() string {
	if x != nil {
		return x.Ipv6Acl
	}
	return ""
}

func (m *Devm_MpuBoards_MpuBoard_CpudefendDevm_IgnoreHostcarAcl) GetIpv4AclType() isDevm_MpuBoards_MpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclType {
	if m != nil {
		return m.Ipv4AclType
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_IgnoreHostcarAcl) GetIpv4AclTypeByIdentity() *Devm_MpuBoards_MpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclType_ByIdentity {
	if x, ok := x.GetIpv4AclType().(*Devm_MpuBoards_MpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclTypeByIdentity); ok {
		return x.Ipv4AclTypeByIdentity
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_IgnoreHostcarAcl) GetIpv4AclTypeByNumber() *Devm_MpuBoards_MpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclType_ByNumber {
	if x, ok := x.GetIpv4AclType().(*Devm_MpuBoards_MpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclTypeByNumber); ok {
		return x.Ipv4AclTypeByNumber
	}
	return nil
}

type isDevm_MpuBoards_MpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclType interface {
	isDevm_MpuBoards_MpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclType()
}

type Devm_MpuBoards_MpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclTypeByIdentity struct {
	Ipv4AclTypeByIdentity *Devm_MpuBoards_MpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclType_ByIdentity `protobuf:"bytes,3,opt,name=ipv4_acl_type_by_identity,json=by-identity,proto3,oneof"`
}

type Devm_MpuBoards_MpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclTypeByNumber struct {
	Ipv4AclTypeByNumber *Devm_MpuBoards_MpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclType_ByNumber `protobuf:"bytes,4,opt,name=ipv4_acl_type_by_number,json=by-number,proto3,oneof"`
}

func (*Devm_MpuBoards_MpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclTypeByIdentity) isDevm_MpuBoards_MpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclType() {
}

func (*Devm_MpuBoards_MpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclTypeByNumber) isDevm_MpuBoards_MpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclType() {
}

type Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrasHostCar []*Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar `protobuf:"bytes,1,rep,name=bras_host_car,json=bras-host-car,proto3" json:"bras_host_car,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars) Reset() {
	*x = Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 4, 1}
}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars) GetBrasHostCar() []*Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar {
	if x != nil {
		return x.BrasHostCar
	}
	return nil
}

type Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpuCar []*Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar `protobuf:"bytes,1,rep,name=spu_car,json=spu-car,proto3" json:"spu_car,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars) Reset() {
	*x = Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 4, 2}
}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars) GetSpuCar() []*Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar {
	if x != nil {
		return x.SpuCar
	}
	return nil
}

type Devm_MpuBoards_MpuBoard_CpudefendDevm_ArpVlanCar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlarmDropRate bool                                                        `protobuf:"varint,1,opt,name=alarm_drop_rate,json=alarm-drop-rate,proto3" json:"alarm_drop_rate,omitempty"`
	Level_2Car    *Devm_MpuBoards_MpuBoard_CpudefendDevm_ArpVlanCar_Level2Car `protobuf:"bytes,2,opt,name=level_2_car,json=level-2-car,proto3" json:"level_2_car,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_ArpVlanCar) Reset() {
	*x = Devm_MpuBoards_MpuBoard_CpudefendDevm_ArpVlanCar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_ArpVlanCar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_CpudefendDevm_ArpVlanCar) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_ArpVlanCar) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_CpudefendDevm_ArpVlanCar.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_CpudefendDevm_ArpVlanCar) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 4, 3}
}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_ArpVlanCar) GetAlarmDropRate() bool {
	if x != nil {
		return x.AlarmDropRate
	}
	return false
}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_ArpVlanCar) GetLevel_2Car() *Devm_MpuBoards_MpuBoard_CpudefendDevm_ArpVlanCar_Level2Car {
	if x != nil {
		return x.Level_2Car
	}
	return nil
}

type Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NdAttackAlarms *Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms `protobuf:"bytes,1,opt,name=nd_attack_alarms,json=nd-attack-alarms,proto3" json:"nd_attack_alarms,omitempty"`
	Level_2Cars    *Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_Level2Cars     `protobuf:"bytes,2,opt,name=level_2_cars,json=level-2-cars,proto3" json:"level_2_cars,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar) Reset() {
	*x = Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 4, 4}
}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar) GetNdAttackAlarms() *Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms {
	if x != nil {
		return x.NdAttackAlarms
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar) GetLevel_2Cars() *Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_Level2Cars {
	if x != nil {
		return x.Level_2Cars
	}
	return nil
}

type Devm_MpuBoards_MpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclType_ByIdentity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ipv4Acl string `protobuf:"bytes,1,opt,name=ipv4_acl,json=ipv4-acl,proto3" json:"ipv4_acl,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclType_ByIdentity) Reset() {
	*x = Devm_MpuBoards_MpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclType_ByIdentity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclType_ByIdentity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclType_ByIdentity) ProtoMessage() {
}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclType_ByIdentity) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclType_ByIdentity.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclType_ByIdentity) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 4, 0, 0}
}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclType_ByIdentity) GetIpv4Acl() string {
	if x != nil {
		return x.Ipv4Acl
	}
	return ""
}

type Devm_MpuBoards_MpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclType_ByNumber struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ipv4AclNumber uint32 `protobuf:"varint,1,opt,name=ipv4_acl_number,json=ipv4-acl-number,proto3" json:"ipv4_acl_number,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclType_ByNumber) Reset() {
	*x = Devm_MpuBoards_MpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclType_ByNumber{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclType_ByNumber) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclType_ByNumber) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclType_ByNumber) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclType_ByNumber.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclType_ByNumber) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 4, 0, 1}
}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclType_ByNumber) GetIpv4AclNumber() uint32 {
	if x != nil {
		return x.Ipv4AclNumber
	}
	return 0
}

type Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type         Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_Type          `protobuf:"varint,1,opt,name=type,proto3,enum=huawei_devm.Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_Type" json:"type,omitempty"`
	RateLimit    *Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_RateLimit    `protobuf:"bytes,2,opt,name=rate_limit,json=rate-limit,proto3" json:"rate_limit,omitempty"`
	Logging      *Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_Logging      `protobuf:"bytes,3,opt,name=logging,proto3" json:"logging,omitempty"`
	AttackDetect *Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_AttackDetect `protobuf:"bytes,4,opt,name=attack_detect,json=attack-detect,proto3" json:"attack_detect,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar) Reset() {
	*x = Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 4, 1, 0}
}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar) GetType() Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_Type {
	if x != nil {
		return x.Type
	}
	return Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_INVALID_ENUM_VALUE_Type
}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar) GetRateLimit() *Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_RateLimit {
	if x != nil {
		return x.RateLimit
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar) GetLogging() *Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_Logging {
	if x != nil {
		return x.Logging
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar) GetAttackDetect() *Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_AttackDetect {
	if x != nil {
		return x.AttackDetect
	}
	return nil
}

type Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_RateLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cir              uint32 `protobuf:"varint,1,opt,name=cir,proto3" json:"cir,omitempty"`
	Cbs              uint32 `protobuf:"varint,2,opt,name=cbs,proto3" json:"cbs,omitempty"`
	Pir              uint32 `protobuf:"varint,3,opt,name=pir,proto3" json:"pir,omitempty"`
	Pbs              uint32 `protobuf:"varint,4,opt,name=pbs,proto3" json:"pbs,omitempty"`
	AutoAdjustEnable bool   `protobuf:"varint,5,opt,name=auto_adjust_enable,json=auto-adjust-enable,proto3" json:"auto_adjust_enable,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_RateLimit) Reset() {
	*x = Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_RateLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_RateLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_RateLimit) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_RateLimit) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_RateLimit.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_RateLimit) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 4, 1, 0, 0}
}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_RateLimit) GetCir() uint32 {
	if x != nil {
		return x.Cir
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_RateLimit) GetCbs() uint32 {
	if x != nil {
		return x.Cbs
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_RateLimit) GetPir() uint32 {
	if x != nil {
		return x.Pir
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_RateLimit) GetPbs() uint32 {
	if x != nil {
		return x.Pbs
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_RateLimit) GetAutoAdjustEnable() bool {
	if x != nil {
		return x.AutoAdjustEnable
	}
	return false
}

type Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_Logging struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interval         uint32 `protobuf:"varint,1,opt,name=interval,proto3" json:"interval,omitempty"`
	DiscardThreshold uint32 `protobuf:"varint,2,opt,name=discard_threshold,json=discard-threshold,proto3" json:"discard_threshold,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_Logging) Reset() {
	*x = Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_Logging{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_Logging) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_Logging) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_Logging) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_Logging.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_Logging) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 4, 1, 0, 1}
}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_Logging) GetInterval() uint32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_Logging) GetDiscardThreshold() uint32 {
	if x != nil {
		return x.DiscardThreshold
	}
	return 0
}

type Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_AttackDetect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DropRateThreshold uint32 `protobuf:"varint,1,opt,name=drop_rate_threshold,json=drop-rate-threshold,proto3" json:"drop_rate_threshold,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_AttackDetect) Reset() {
	*x = Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_AttackDetect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_AttackDetect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_AttackDetect) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_AttackDetect) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_AttackDetect.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_AttackDetect) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 4, 1, 0, 2}
}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_AttackDetect) GetDropRateThreshold() uint32 {
	if x != nil {
		return x.DropRateThreshold
	}
	return 0
}

type Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CarType Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType `protobuf:"varint,1,opt,name=car_type,json=car-type,proto3,enum=huawei_devm.Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType" json:"car_type,omitempty"`
	Cir     uint32                                                       `protobuf:"varint,2,opt,name=cir,proto3" json:"cir,omitempty"`
	Cbs     uint32                                                       `protobuf:"varint,3,opt,name=cbs,proto3" json:"cbs,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar) Reset() {
	*x = Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 4, 2, 0}
}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar) GetCarType() Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType {
	if x != nil {
		return x.CarType
	}
	return Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar_INVALID_ENUM_VALUE_CarType
}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar) GetCir() uint32 {
	if x != nil {
		return x.Cir
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar) GetCbs() uint32 {
	if x != nil {
		return x.Cbs
	}
	return 0
}

type Devm_MpuBoards_MpuBoard_CpudefendDevm_ArpVlanCar_Level2Car struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RateLimitPercent uint32 `protobuf:"varint,1,opt,name=rate_limit_percent,json=rate-limit-percent,proto3" json:"rate_limit_percent,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_ArpVlanCar_Level2Car) Reset() {
	*x = Devm_MpuBoards_MpuBoard_CpudefendDevm_ArpVlanCar_Level2Car{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_ArpVlanCar_Level2Car) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_CpudefendDevm_ArpVlanCar_Level2Car) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_ArpVlanCar_Level2Car) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_CpudefendDevm_ArpVlanCar_Level2Car.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_CpudefendDevm_ArpVlanCar_Level2Car) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 4, 3, 0}
}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_ArpVlanCar_Level2Car) GetRateLimitPercent() uint32 {
	if x != nil {
		return x.RateLimitPercent
	}
	return 0
}

type Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NdAttackAlarm []*Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms_NdAttackAlarm `protobuf:"bytes,1,rep,name=nd_attack_alarm,json=nd-attack-alarm,proto3" json:"nd_attack_alarm,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms) Reset() {
	*x = Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 4, 4, 0}
}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms) GetNdAttackAlarm() []*Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms_NdAttackAlarm {
	if x != nil {
		return x.NdAttackAlarm
	}
	return nil
}

type Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_Level2Cars struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level_2Car []*Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_Level2Cars_Level2Car `protobuf:"bytes,1,rep,name=level_2_car,json=level-2-car,proto3" json:"level_2_car,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_Level2Cars) Reset() {
	*x = Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_Level2Cars{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_Level2Cars) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_Level2Cars) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_Level2Cars) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_Level2Cars.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_Level2Cars) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 4, 4, 1}
}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_Level2Cars) GetLevel_2Car() []*Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_Level2Cars_Level2Car {
	if x != nil {
		return x.Level_2Car
	}
	return nil
}

type Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms_NdAttackAlarm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms_NdAttackAlarm_Type `protobuf:"varint,1,opt,name=type,proto3,enum=huawei_devm.Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms_NdAttackAlarm_Type" json:"type,omitempty"`
	AlarmEnable bool                                                                              `protobuf:"varint,2,opt,name=alarm_enable,json=alarm-enable,proto3" json:"alarm_enable,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms_NdAttackAlarm) Reset() {
	*x = Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms_NdAttackAlarm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms_NdAttackAlarm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms_NdAttackAlarm) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms_NdAttackAlarm) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms_NdAttackAlarm.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms_NdAttackAlarm) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 4, 4, 0, 0}
}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms_NdAttackAlarm) GetType() Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms_NdAttackAlarm_Type {
	if x != nil {
		return x.Type
	}
	return Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms_NdAttackAlarm_INVALID_ENUM_VALUE_Type
}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms_NdAttackAlarm) GetAlarmEnable() bool {
	if x != nil {
		return x.AlarmEnable
	}
	return false
}

type Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_Level2Cars_Level2Car struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type             Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_Level2Cars_Level2Car_Type `protobuf:"varint,1,opt,name=type,proto3,enum=huawei_devm.Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_Level2Cars_Level2Car_Type" json:"type,omitempty"`
	RateLimitPercent uint32                                                                    `protobuf:"varint,2,opt,name=rate_limit_percent,json=rate-limit-percent,proto3" json:"rate_limit_percent,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_Level2Cars_Level2Car) Reset() {
	*x = Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_Level2Cars_Level2Car{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_Level2Cars_Level2Car) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_Level2Cars_Level2Car) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_Level2Cars_Level2Car) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_Level2Cars_Level2Car.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_Level2Cars_Level2Car) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 4, 4, 1, 0}
}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_Level2Cars_Level2Car) GetType() Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_Level2Cars_Level2Car_Type {
	if x != nil {
		return x.Type
	}
	return Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_Level2Cars_Level2Car_INVALID_ENUM_VALUE_Type
}

func (x *Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_Level2Cars_Level2Car) GetRateLimitPercent() uint32 {
	if x != nil {
		return x.RateLimitPercent
	}
	return 0
}

type Devm_MpuBoards_MpuBoard_Loadbalance_DynamicAdjust struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Loadbalance_DynamicAdjust) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Loadbalance_DynamicAdjust{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Loadbalance_DynamicAdjust) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Loadbalance_DynamicAdjust) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_Loadbalance_DynamicAdjust) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Loadbalance_DynamicAdjust.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Loadbalance_DynamicAdjust) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 11, 0}
}

func (x *Devm_MpuBoards_MpuBoard_Loadbalance_DynamicAdjust) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

type Devm_MpuBoards_MpuBoard_Loadbalance_HashArithmetic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arithmetic     Devm_MpuBoards_MpuBoard_Loadbalance_HashArithmetic_Arithmetic `protobuf:"varint,1,opt,name=arithmetic,proto3,enum=huawei_devm.Devm_MpuBoards_MpuBoard_Loadbalance_HashArithmetic_Arithmetic" json:"arithmetic,omitempty"`
	SecondHashFlag bool                                                          `protobuf:"varint,2,opt,name=second_hash_flag,json=second-hash-flag,proto3" json:"second_hash_flag,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Loadbalance_HashArithmetic) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Loadbalance_HashArithmetic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Loadbalance_HashArithmetic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Loadbalance_HashArithmetic) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_Loadbalance_HashArithmetic) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Loadbalance_HashArithmetic.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Loadbalance_HashArithmetic) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 11, 1}
}

func (x *Devm_MpuBoards_MpuBoard_Loadbalance_HashArithmetic) GetArithmetic() Devm_MpuBoards_MpuBoard_Loadbalance_HashArithmetic_Arithmetic {
	if x != nil {
		return x.Arithmetic
	}
	return Devm_MpuBoards_MpuBoard_Loadbalance_HashArithmetic_INVALID_ENUM_VALUE_Arithmetic
}

func (x *Devm_MpuBoards_MpuBoard_Loadbalance_HashArithmetic) GetSecondHashFlag() bool {
	if x != nil {
		return x.SecondHashFlag
	}
	return false
}

type Devm_MpuBoards_MpuBoard_Loadbalance_HashFields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HashField []*Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField `protobuf:"bytes,1,rep,name=hash_field,json=hash-field,proto3" json:"hash_field,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Loadbalance_HashFields) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Loadbalance_HashFields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Loadbalance_HashFields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Loadbalance_HashFields) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_Loadbalance_HashFields) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Loadbalance_HashFields.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Loadbalance_HashFields) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 11, 2}
}

func (x *Devm_MpuBoards_MpuBoard_Loadbalance_HashFields) GetHashField() []*Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField {
	if x != nil {
		return x.HashField
	}
	return nil
}

type Devm_MpuBoards_MpuBoard_Loadbalance_HashSeed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RandomFlag bool   `protobuf:"varint,1,opt,name=random_flag,json=random-flag,proto3" json:"random_flag,omitempty"`
	CustomSeed string `protobuf:"bytes,2,opt,name=custom_seed,json=custom-seed,proto3" json:"custom_seed,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Loadbalance_HashSeed) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Loadbalance_HashSeed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Loadbalance_HashSeed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Loadbalance_HashSeed) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_Loadbalance_HashSeed) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Loadbalance_HashSeed.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Loadbalance_HashSeed) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 11, 3}
}

func (x *Devm_MpuBoards_MpuBoard_Loadbalance_HashSeed) GetRandomFlag() bool {
	if x != nil {
		return x.RandomFlag
	}
	return false
}

func (x *Devm_MpuBoards_MpuBoard_Loadbalance_HashSeed) GetCustomSeed() string {
	if x != nil {
		return x.CustomSeed
	}
	return ""
}

type Devm_MpuBoards_MpuBoard_Loadbalance_HashMultipe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MultipeFlag Devm_MpuBoards_MpuBoard_Loadbalance_HashMultipe_MultipeFlag `protobuf:"varint,1,opt,name=multipe_flag,json=multipe-flag,proto3,enum=huawei_devm.Devm_MpuBoards_MpuBoard_Loadbalance_HashMultipe_MultipeFlag" json:"multipe_flag,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Loadbalance_HashMultipe) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Loadbalance_HashMultipe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Loadbalance_HashMultipe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Loadbalance_HashMultipe) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_Loadbalance_HashMultipe) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Loadbalance_HashMultipe.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Loadbalance_HashMultipe) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 11, 4}
}

func (x *Devm_MpuBoards_MpuBoard_Loadbalance_HashMultipe) GetMultipeFlag() Devm_MpuBoards_MpuBoard_Loadbalance_HashMultipe_MultipeFlag {
	if x != nil {
		return x.MultipeFlag
	}
	return Devm_MpuBoards_MpuBoard_Loadbalance_HashMultipe_MultipeFlag_ENABLE
}

type Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrunkEcmp Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField_TrunkEcmp `protobuf:"varint,1,opt,name=trunk_ecmp,json=trunk-ecmp,proto3,enum=huawei_devm.Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField_TrunkEcmp" json:"trunk_ecmp,omitempty"`
	Material  Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField_Material  `protobuf:"varint,2,opt,name=material,proto3,enum=huawei_devm.Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField_Material" json:"material,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 11, 2, 0}
}

func (x *Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField) GetTrunkEcmp() Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField_TrunkEcmp {
	if x != nil {
		return x.TrunkEcmp
	}
	return Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField_INVALID_ENUM_VALUE_TrunkEcmp
}

func (x *Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField) GetMaterial() Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField_Material {
	if x != nil {
		return x.Material
	}
	return Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField_INVALID_ENUM_VALUE_Material
}

type Devm_MpuBoards_MpuBoard_Mirror_SlotObserve struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObserveIndex uint32 `protobuf:"varint,1,opt,name=observe_index,json=observe-index,proto3" json:"observe_index,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Mirror_SlotObserve) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Mirror_SlotObserve{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Mirror_SlotObserve) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Mirror_SlotObserve) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_Mirror_SlotObserve) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Mirror_SlotObserve.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Mirror_SlotObserve) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 12, 0}
}

func (x *Devm_MpuBoards_MpuBoard_Mirror_SlotObserve) GetObserveIndex() uint32 {
	if x != nil {
		return x.ObserveIndex
	}
	return 0
}

type Devm_MpuBoards_MpuBoard_Mirror_ObserveFilters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObserveFilter []*Devm_MpuBoards_MpuBoard_Mirror_ObserveFilters_ObserveFilter `protobuf:"bytes,1,rep,name=observe_filter,json=observe-filter,proto3" json:"observe_filter,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Mirror_ObserveFilters) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Mirror_ObserveFilters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Mirror_ObserveFilters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Mirror_ObserveFilters) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_Mirror_ObserveFilters) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Mirror_ObserveFilters.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Mirror_ObserveFilters) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 12, 1}
}

func (x *Devm_MpuBoards_MpuBoard_Mirror_ObserveFilters) GetObserveFilter() []*Devm_MpuBoards_MpuBoard_Mirror_ObserveFilters_ObserveFilter {
	if x != nil {
		return x.ObserveFilter
	}
	return nil
}

type Devm_MpuBoards_MpuBoard_Mirror_ObserveFilters_ObserveFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilterId       uint32 `protobuf:"varint,1,opt,name=filter_id,json=filter-id,proto3" json:"filter_id,omitempty"`
	SrcIpaddr      string `protobuf:"bytes,2,opt,name=src_ipaddr,json=src-ipaddr,proto3" json:"src_ipaddr,omitempty"`
	SrcIpaddrMask  string `protobuf:"bytes,3,opt,name=src_ipaddr_mask,json=src-ipaddr-mask,proto3" json:"src_ipaddr_mask,omitempty"`
	DstIpaddr      string `protobuf:"bytes,4,opt,name=dst_ipaddr,json=dst-ipaddr,proto3" json:"dst_ipaddr,omitempty"`
	DstIpaddrMask  string `protobuf:"bytes,5,opt,name=dst_ipaddr_mask,json=dst-ipaddr-mask,proto3" json:"dst_ipaddr_mask,omitempty"`
	SrcPort        uint32 `protobuf:"varint,6,opt,name=src_port,json=src-port,proto3" json:"src_port,omitempty"`
	DstPort        uint32 `protobuf:"varint,7,opt,name=dst_port,json=dst-port,proto3" json:"dst_port,omitempty"`
	SrcMacaddr     string `protobuf:"bytes,8,opt,name=src_macaddr,json=src-macaddr,proto3" json:"src_macaddr,omitempty"`
	PppoeSessionId uint32 `protobuf:"varint,9,opt,name=pppoe_session_id,json=pppoe-session-id,proto3" json:"pppoe_session_id,omitempty"`
	DstMacaddr     string `protobuf:"bytes,10,opt,name=dst_macaddr,json=dst-macaddr,proto3" json:"dst_macaddr,omitempty"`
	Vlan           uint32 `protobuf:"varint,11,opt,name=vlan,proto3" json:"vlan,omitempty"`
	EthType        string `protobuf:"bytes,12,opt,name=eth_type,json=eth-type,proto3" json:"eth_type,omitempty"`
	// Types that are assignable to ProtocolType:
	//	*Devm_MpuBoards_MpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolTypePpp
	//	*Devm_MpuBoards_MpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolTypeIp
	ProtocolType isDevm_MpuBoards_MpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolType `protobuf_oneof:"ProtocolType"`
}

func (x *Devm_MpuBoards_MpuBoard_Mirror_ObserveFilters_ObserveFilter) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Mirror_ObserveFilters_ObserveFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Mirror_ObserveFilters_ObserveFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Mirror_ObserveFilters_ObserveFilter) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_Mirror_ObserveFilters_ObserveFilter) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Mirror_ObserveFilters_ObserveFilter.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Mirror_ObserveFilters_ObserveFilter) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 12, 1, 0}
}

func (x *Devm_MpuBoards_MpuBoard_Mirror_ObserveFilters_ObserveFilter) GetFilterId() uint32 {
	if x != nil {
		return x.FilterId
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_Mirror_ObserveFilters_ObserveFilter) GetSrcIpaddr() string {
	if x != nil {
		return x.SrcIpaddr
	}
	return ""
}

func (x *Devm_MpuBoards_MpuBoard_Mirror_ObserveFilters_ObserveFilter) GetSrcIpaddrMask() string {
	if x != nil {
		return x.SrcIpaddrMask
	}
	return ""
}

func (x *Devm_MpuBoards_MpuBoard_Mirror_ObserveFilters_ObserveFilter) GetDstIpaddr() string {
	if x != nil {
		return x.DstIpaddr
	}
	return ""
}

func (x *Devm_MpuBoards_MpuBoard_Mirror_ObserveFilters_ObserveFilter) GetDstIpaddrMask() string {
	if x != nil {
		return x.DstIpaddrMask
	}
	return ""
}

func (x *Devm_MpuBoards_MpuBoard_Mirror_ObserveFilters_ObserveFilter) GetSrcPort() uint32 {
	if x != nil {
		return x.SrcPort
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_Mirror_ObserveFilters_ObserveFilter) GetDstPort() uint32 {
	if x != nil {
		return x.DstPort
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_Mirror_ObserveFilters_ObserveFilter) GetSrcMacaddr() string {
	if x != nil {
		return x.SrcMacaddr
	}
	return ""
}

func (x *Devm_MpuBoards_MpuBoard_Mirror_ObserveFilters_ObserveFilter) GetPppoeSessionId() uint32 {
	if x != nil {
		return x.PppoeSessionId
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_Mirror_ObserveFilters_ObserveFilter) GetDstMacaddr() string {
	if x != nil {
		return x.DstMacaddr
	}
	return ""
}

func (x *Devm_MpuBoards_MpuBoard_Mirror_ObserveFilters_ObserveFilter) GetVlan() uint32 {
	if x != nil {
		return x.Vlan
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_Mirror_ObserveFilters_ObserveFilter) GetEthType() string {
	if x != nil {
		return x.EthType
	}
	return ""
}

func (m *Devm_MpuBoards_MpuBoard_Mirror_ObserveFilters_ObserveFilter) GetProtocolType() isDevm_MpuBoards_MpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolType {
	if m != nil {
		return m.ProtocolType
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard_Mirror_ObserveFilters_ObserveFilter) GetProtocolTypePpp() *Devm_MpuBoards_MpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolType_Ppp {
	if x, ok := x.GetProtocolType().(*Devm_MpuBoards_MpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolTypePpp); ok {
		return x.ProtocolTypePpp
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard_Mirror_ObserveFilters_ObserveFilter) GetProtocolTypeIp() *Devm_MpuBoards_MpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolType_Ip {
	if x, ok := x.GetProtocolType().(*Devm_MpuBoards_MpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolTypeIp); ok {
		return x.ProtocolTypeIp
	}
	return nil
}

type isDevm_MpuBoards_MpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolType interface {
	isDevm_MpuBoards_MpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolType()
}

type Devm_MpuBoards_MpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolTypePpp struct {
	ProtocolTypePpp *Devm_MpuBoards_MpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolType_Ppp `protobuf:"bytes,13,opt,name=protocol_type_ppp,json=ppp,proto3,oneof"`
}

type Devm_MpuBoards_MpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolTypeIp struct {
	ProtocolTypeIp *Devm_MpuBoards_MpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolType_Ip `protobuf:"bytes,14,opt,name=protocol_type_ip,json=ip,proto3,oneof"`
}

func (*Devm_MpuBoards_MpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolTypePpp) isDevm_MpuBoards_MpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolType() {
}

func (*Devm_MpuBoards_MpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolTypeIp) isDevm_MpuBoards_MpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolType() {
}

type Devm_MpuBoards_MpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolType_Ppp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PppProtocol string `protobuf:"bytes,1,opt,name=ppp_protocol,json=ppp-protocol,proto3" json:"ppp_protocol,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolType_Ppp) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolType_Ppp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolType_Ppp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolType_Ppp) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolType_Ppp) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolType_Ppp.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolType_Ppp) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 12, 1, 0, 0}
}

func (x *Devm_MpuBoards_MpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolType_Ppp) GetPppProtocol() string {
	if x != nil {
		return x.PppProtocol
	}
	return ""
}

type Devm_MpuBoards_MpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolType_Ip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpProtocol uint32 `protobuf:"varint,1,opt,name=ip_protocol,json=ip-protocol,proto3" json:"ip_protocol,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolType_Ip) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolType_Ip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolType_Ip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolType_Ip) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolType_Ip) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolType_Ip.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolType_Ip) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 12, 1, 0, 1}
}

func (x *Devm_MpuBoards_MpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolType_Ip) GetIpProtocol() uint32 {
	if x != nil {
		return x.IpProtocol
	}
	return 0
}

type Devm_MpuBoards_MpuBoard_MplsForward_MplsHashMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hashcfg Devm_MpuBoards_MpuBoard_MplsForward_MplsHashMode_Hashcfg `protobuf:"varint,1,opt,name=hashcfg,proto3,enum=huawei_devm.Devm_MpuBoards_MpuBoard_MplsForward_MplsHashMode_Hashcfg" json:"hashcfg,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_MplsForward_MplsHashMode) Reset() {
	*x = Devm_MpuBoards_MpuBoard_MplsForward_MplsHashMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_MplsForward_MplsHashMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_MplsForward_MplsHashMode) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_MplsForward_MplsHashMode) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_MplsForward_MplsHashMode.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_MplsForward_MplsHashMode) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 13, 0}
}

func (x *Devm_MpuBoards_MpuBoard_MplsForward_MplsHashMode) GetHashcfg() Devm_MpuBoards_MpuBoard_MplsForward_MplsHashMode_Hashcfg {
	if x != nil {
		return x.Hashcfg
	}
	return Devm_MpuBoards_MpuBoard_MplsForward_MplsHashMode_INVALID_ENUM_VALUE_Hashcfg
}

type Devm_MpuBoards_MpuBoard_MplsForward_Mplsfrags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MplsfragEnable Devm_MpuBoards_MpuBoard_MplsForward_Mplsfrags_MplsfragEnable `protobuf:"varint,1,opt,name=mplsfrag_enable,json=mplsfrag-enable,proto3,enum=huawei_devm.Devm_MpuBoards_MpuBoard_MplsForward_Mplsfrags_MplsfragEnable" json:"mplsfrag_enable,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_MplsForward_Mplsfrags) Reset() {
	*x = Devm_MpuBoards_MpuBoard_MplsForward_Mplsfrags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_MplsForward_Mplsfrags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_MplsForward_Mplsfrags) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_MplsForward_Mplsfrags) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_MplsForward_Mplsfrags.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_MplsForward_Mplsfrags) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 13, 1}
}

func (x *Devm_MpuBoards_MpuBoard_MplsForward_Mplsfrags) GetMplsfragEnable() Devm_MpuBoards_MpuBoard_MplsForward_Mplsfrags_MplsfragEnable {
	if x != nil {
		return x.MplsfragEnable
	}
	return Devm_MpuBoards_MpuBoard_MplsForward_Mplsfrags_MplsfragEnable_DISABLE
}

type Devm_MpuBoards_MpuBoard_MplsForward_MplsLoadCtrwords struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MplsloadCtrwordDisable Devm_MpuBoards_MpuBoard_MplsForward_MplsLoadCtrwords_MplsloadCtrwordDisable `protobuf:"varint,1,opt,name=mplsload_ctrword_disable,json=mplsload-ctrword-disable,proto3,enum=huawei_devm.Devm_MpuBoards_MpuBoard_MplsForward_MplsLoadCtrwords_MplsloadCtrwordDisable" json:"mplsload_ctrword_disable,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_MplsForward_MplsLoadCtrwords) Reset() {
	*x = Devm_MpuBoards_MpuBoard_MplsForward_MplsLoadCtrwords{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_MplsForward_MplsLoadCtrwords) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_MplsForward_MplsLoadCtrwords) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_MplsForward_MplsLoadCtrwords) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_MplsForward_MplsLoadCtrwords.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_MplsForward_MplsLoadCtrwords) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 13, 2}
}

func (x *Devm_MpuBoards_MpuBoard_MplsForward_MplsLoadCtrwords) GetMplsloadCtrwordDisable() Devm_MpuBoards_MpuBoard_MplsForward_MplsLoadCtrwords_MplsloadCtrwordDisable {
	if x != nil {
		return x.MplsloadCtrwordDisable
	}
	return Devm_MpuBoards_MpuBoard_MplsForward_MplsLoadCtrwords_MplsloadCtrwordDisable_DISABLE
}

type Devm_MpuBoards_MpuBoard_Netstream_SamplerModes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SamplerMode []*Devm_MpuBoards_MpuBoard_Netstream_SamplerModes_SamplerMode `protobuf:"bytes,1,rep,name=sampler_mode,json=sampler-mode,proto3" json:"sampler_mode,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Netstream_SamplerModes) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Netstream_SamplerModes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Netstream_SamplerModes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Netstream_SamplerModes) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_Netstream_SamplerModes) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Netstream_SamplerModes.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Netstream_SamplerModes) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 14, 0}
}

func (x *Devm_MpuBoards_MpuBoard_Netstream_SamplerModes) GetSamplerMode() []*Devm_MpuBoards_MpuBoard_Netstream_SamplerModes_SamplerMode {
	if x != nil {
		return x.SamplerMode
	}
	return nil
}

type Devm_MpuBoards_MpuBoard_Netstream_SequenceMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode Devm_MpuBoards_MpuBoard_Netstream_SequenceMode_Mode `protobuf:"varint,1,opt,name=mode,proto3,enum=huawei_devm.Devm_MpuBoards_MpuBoard_Netstream_SequenceMode_Mode" json:"mode,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Netstream_SequenceMode) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Netstream_SequenceMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Netstream_SequenceMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Netstream_SequenceMode) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_Netstream_SequenceMode) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Netstream_SequenceMode.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Netstream_SequenceMode) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 14, 1}
}

func (x *Devm_MpuBoards_MpuBoard_Netstream_SequenceMode) GetMode() Devm_MpuBoards_MpuBoard_Netstream_SequenceMode_Mode {
	if x != nil {
		return x.Mode
	}
	return Devm_MpuBoards_MpuBoard_Netstream_SequenceMode_INVALID_ENUM_VALUE_Mode
}

type Devm_MpuBoards_MpuBoard_Netstream_ExportHosts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExportHost []*Devm_MpuBoards_MpuBoard_Netstream_ExportHosts_ExportHost `protobuf:"bytes,1,rep,name=export_host,json=export-host,proto3" json:"export_host,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Netstream_ExportHosts) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Netstream_ExportHosts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Netstream_ExportHosts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Netstream_ExportHosts) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_Netstream_ExportHosts) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Netstream_ExportHosts.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Netstream_ExportHosts) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 14, 2}
}

func (x *Devm_MpuBoards_MpuBoard_Netstream_ExportHosts) GetExportHost() []*Devm_MpuBoards_MpuBoard_Netstream_ExportHosts_ExportHost {
	if x != nil {
		return x.ExportHost
	}
	return nil
}

type Devm_MpuBoards_MpuBoard_Netstream_SamplerModes_SamplerMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowType    Devm_MpuBoards_MpuBoard_Netstream_SamplerModes_SamplerMode_FlowType     `protobuf:"varint,1,opt,name=flow_type,json=flow-type,proto3,enum=huawei_devm.Devm_MpuBoards_MpuBoard_Netstream_SamplerModes_SamplerMode_FlowType" json:"flow_type,omitempty"`
	SamplerMode Devm_MpuBoards_MpuBoard_Netstream_SamplerModes_SamplerMode_SamplerMode7 `protobuf:"varint,2,opt,name=sampler_mode,json=sampler-mode,proto3,enum=huawei_devm.Devm_MpuBoards_MpuBoard_Netstream_SamplerModes_SamplerMode_SamplerMode7" json:"sampler_mode,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Netstream_SamplerModes_SamplerMode) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Netstream_SamplerModes_SamplerMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Netstream_SamplerModes_SamplerMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Netstream_SamplerModes_SamplerMode) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_Netstream_SamplerModes_SamplerMode) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Netstream_SamplerModes_SamplerMode.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Netstream_SamplerModes_SamplerMode) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 14, 0, 0}
}

func (x *Devm_MpuBoards_MpuBoard_Netstream_SamplerModes_SamplerMode) GetFlowType() Devm_MpuBoards_MpuBoard_Netstream_SamplerModes_SamplerMode_FlowType {
	if x != nil {
		return x.FlowType
	}
	return Devm_MpuBoards_MpuBoard_Netstream_SamplerModes_SamplerMode_FlowType_IPX_FLOW
}

func (x *Devm_MpuBoards_MpuBoard_Netstream_SamplerModes_SamplerMode) GetSamplerMode() Devm_MpuBoards_MpuBoard_Netstream_SamplerModes_SamplerMode_SamplerMode7 {
	if x != nil {
		return x.SamplerMode
	}
	return Devm_MpuBoards_MpuBoard_Netstream_SamplerModes_SamplerMode_SamplerMode7_SELF
}

type Devm_MpuBoards_MpuBoard_Netstream_ExportHosts_ExportHost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowType        Devm_MpuBoards_MpuBoard_Netstream_ExportHosts_ExportHost_FlowType    `protobuf:"varint,1,opt,name=flow_type,json=flow-type,proto3,enum=huawei_devm.Devm_MpuBoards_MpuBoard_Netstream_ExportHosts_ExportHost_FlowType" json:"flow_type,omitempty"`
	AddressType     Devm_MpuBoards_MpuBoard_Netstream_ExportHosts_ExportHost_AddressType `protobuf:"varint,2,opt,name=address_type,json=address-type,proto3,enum=huawei_devm.Devm_MpuBoards_MpuBoard_Netstream_ExportHosts_ExportHost_AddressType" json:"address_type,omitempty"`
	IpAddress       string                                                               `protobuf:"bytes,3,opt,name=ip_address,json=ip-address,proto3" json:"ip_address,omitempty"`
	DestinationPort uint32                                                               `protobuf:"varint,4,opt,name=destination_port,json=destination-port,proto3" json:"destination_port,omitempty"`
	VpnName         string                                                               `protobuf:"bytes,5,opt,name=vpn_name,json=vpn-name,proto3" json:"vpn_name,omitempty"`
	Dscp            uint32                                                               `protobuf:"varint,6,opt,name=dscp,proto3" json:"dscp,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Netstream_ExportHosts_ExportHost) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Netstream_ExportHosts_ExportHost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Netstream_ExportHosts_ExportHost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Netstream_ExportHosts_ExportHost) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_Netstream_ExportHosts_ExportHost) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Netstream_ExportHosts_ExportHost.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Netstream_ExportHosts_ExportHost) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 14, 2, 0}
}

func (x *Devm_MpuBoards_MpuBoard_Netstream_ExportHosts_ExportHost) GetFlowType() Devm_MpuBoards_MpuBoard_Netstream_ExportHosts_ExportHost_FlowType {
	if x != nil {
		return x.FlowType
	}
	return Devm_MpuBoards_MpuBoard_Netstream_ExportHosts_ExportHost_FlowType_IPX_FLOW
}

func (x *Devm_MpuBoards_MpuBoard_Netstream_ExportHosts_ExportHost) GetAddressType() Devm_MpuBoards_MpuBoard_Netstream_ExportHosts_ExportHost_AddressType {
	if x != nil {
		return x.AddressType
	}
	return Devm_MpuBoards_MpuBoard_Netstream_ExportHosts_ExportHost_AddressType_IPV4
}

func (x *Devm_MpuBoards_MpuBoard_Netstream_ExportHosts_ExportHost) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *Devm_MpuBoards_MpuBoard_Netstream_ExportHosts_ExportHost) GetDestinationPort() uint32 {
	if x != nil {
		return x.DestinationPort
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_Netstream_ExportHosts_ExportHost) GetVpnName() string {
	if x != nil {
		return x.VpnName
	}
	return ""
}

func (x *Devm_MpuBoards_MpuBoard_Netstream_ExportHosts_ExportHost) GetDscp() uint32 {
	if x != nil {
		return x.Dscp
	}
	return 0
}

type Devm_MpuBoards_MpuBoard_Pbr_RoutingFilters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoutingFilter []*Devm_MpuBoards_MpuBoard_Pbr_RoutingFilters_RoutingFilter `protobuf:"bytes,1,rep,name=routing_filter,json=routing-filter,proto3" json:"routing_filter,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Pbr_RoutingFilters) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Pbr_RoutingFilters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Pbr_RoutingFilters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Pbr_RoutingFilters) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_Pbr_RoutingFilters) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Pbr_RoutingFilters.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Pbr_RoutingFilters) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 15, 0}
}

func (x *Devm_MpuBoards_MpuBoard_Pbr_RoutingFilters) GetRoutingFilter() []*Devm_MpuBoards_MpuBoard_Pbr_RoutingFilters_RoutingFilter {
	if x != nil {
		return x.RoutingFilter
	}
	return nil
}

type Devm_MpuBoards_MpuBoard_Pbr_RoutingFilters_RoutingFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        Devm_MpuBoards_MpuBoard_Pbr_RoutingFilters_RoutingFilter_Type        `protobuf:"varint,1,opt,name=type,proto3,enum=huawei_devm.Devm_MpuBoards_MpuBoard_Pbr_RoutingFilters_RoutingFilter_Type" json:"type,omitempty"`
	RoutingType Devm_MpuBoards_MpuBoard_Pbr_RoutingFilters_RoutingFilter_RoutingType `protobuf:"varint,2,opt,name=routing_type,json=routing-type,proto3,enum=huawei_devm.Devm_MpuBoards_MpuBoard_Pbr_RoutingFilters_RoutingFilter_RoutingType" json:"routing_type,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Pbr_RoutingFilters_RoutingFilter) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Pbr_RoutingFilters_RoutingFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Pbr_RoutingFilters_RoutingFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Pbr_RoutingFilters_RoutingFilter) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_Pbr_RoutingFilters_RoutingFilter) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Pbr_RoutingFilters_RoutingFilter.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Pbr_RoutingFilters_RoutingFilter) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 15, 0, 0}
}

func (x *Devm_MpuBoards_MpuBoard_Pbr_RoutingFilters_RoutingFilter) GetType() Devm_MpuBoards_MpuBoard_Pbr_RoutingFilters_RoutingFilter_Type {
	if x != nil {
		return x.Type
	}
	return Devm_MpuBoards_MpuBoard_Pbr_RoutingFilters_RoutingFilter_Type_IPV4
}

func (x *Devm_MpuBoards_MpuBoard_Pbr_RoutingFilters_RoutingFilter) GetRoutingType() Devm_MpuBoards_MpuBoard_Pbr_RoutingFilters_RoutingFilter_RoutingType {
	if x != nil {
		return x.RoutingType
	}
	return Devm_MpuBoards_MpuBoard_Pbr_RoutingFilters_RoutingFilter_INVALID_ENUM_VALUE_RoutingType
}

type Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrafficPolicyMatch []*Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch `protobuf:"bytes,1,rep,name=traffic_policy_match,json=traffic-policy-match,proto3" json:"traffic_policy_match,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchs) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchs) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchs) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchs.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchs) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 16, 0}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchs) GetTrafficPolicyMatch() []*Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch {
	if x != nil {
		return x.TrafficPolicyMatch
	}
	return nil
}

type Devm_MpuBoards_MpuBoard_Qos_PqSchedulePrioritys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PqSchedulePriority []*Devm_MpuBoards_MpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority `protobuf:"bytes,1,rep,name=pq_schedule_priority,json=pq-schedule-priority,proto3" json:"pq_schedule_priority,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Qos_PqSchedulePrioritys) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Qos_PqSchedulePrioritys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_PqSchedulePrioritys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Qos_PqSchedulePrioritys) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_Qos_PqSchedulePrioritys) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Qos_PqSchedulePrioritys.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Qos_PqSchedulePrioritys) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 16, 1}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_PqSchedulePrioritys) GetPqSchedulePriority() []*Devm_MpuBoards_MpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority {
	if x != nil {
		return x.PqSchedulePriority
	}
	return nil
}

type Devm_MpuBoards_MpuBoard_Qos_PqSchedulePriorityOnCards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PqSchedulePriorityOnCard []*Devm_MpuBoards_MpuBoard_Qos_PqSchedulePriorityOnCards_PqSchedulePriorityOnCard `protobuf:"bytes,1,rep,name=pq_schedule_priority_on_card,json=pq-schedule-priority-on-card,proto3" json:"pq_schedule_priority_on_card,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Qos_PqSchedulePriorityOnCards) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Qos_PqSchedulePriorityOnCards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_PqSchedulePriorityOnCards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Qos_PqSchedulePriorityOnCards) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_Qos_PqSchedulePriorityOnCards) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Qos_PqSchedulePriorityOnCards.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Qos_PqSchedulePriorityOnCards) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 16, 2}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_PqSchedulePriorityOnCards) GetPqSchedulePriorityOnCard() []*Devm_MpuBoards_MpuBoard_Qos_PqSchedulePriorityOnCards_PqSchedulePriorityOnCard {
	if x != nil {
		return x.PqSchedulePriorityOnCard
	}
	return nil
}

type Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MulticastPortQueue []*Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue `protobuf:"bytes,1,rep,name=multicast_port_queue,json=multicast-port-queue,proto3" json:"multicast_port_queue,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 16, 3}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues) GetMulticastPortQueue() []*Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue {
	if x != nil {
		return x.MulticastPortQueue
	}
	return nil
}

type Devm_MpuBoards_MpuBoard_Qos_MulticastPortShaping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ShapingParameters:
	//	*Devm_MpuBoards_MpuBoard_Qos_MulticastPortShaping_ShapingParametersShapingTypeMode
	//	*Devm_MpuBoards_MpuBoard_Qos_MulticastPortShaping_ShapingParametersShapingValueMode
	ShapingParameters isDevm_MpuBoards_MpuBoard_Qos_MulticastPortShaping_ShapingParameters `protobuf_oneof:"ShapingParameters"`
}

func (x *Devm_MpuBoards_MpuBoard_Qos_MulticastPortShaping) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Qos_MulticastPortShaping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_MulticastPortShaping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Qos_MulticastPortShaping) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_Qos_MulticastPortShaping) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Qos_MulticastPortShaping.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Qos_MulticastPortShaping) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 16, 4}
}

func (m *Devm_MpuBoards_MpuBoard_Qos_MulticastPortShaping) GetShapingParameters() isDevm_MpuBoards_MpuBoard_Qos_MulticastPortShaping_ShapingParameters {
	if m != nil {
		return m.ShapingParameters
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard_Qos_MulticastPortShaping) GetShapingParametersShapingTypeMode() *Devm_MpuBoards_MpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingTypeMode {
	if x, ok := x.GetShapingParameters().(*Devm_MpuBoards_MpuBoard_Qos_MulticastPortShaping_ShapingParametersShapingTypeMode); ok {
		return x.ShapingParametersShapingTypeMode
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard_Qos_MulticastPortShaping) GetShapingParametersShapingValueMode() *Devm_MpuBoards_MpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingValueMode {
	if x, ok := x.GetShapingParameters().(*Devm_MpuBoards_MpuBoard_Qos_MulticastPortShaping_ShapingParametersShapingValueMode); ok {
		return x.ShapingParametersShapingValueMode
	}
	return nil
}

type isDevm_MpuBoards_MpuBoard_Qos_MulticastPortShaping_ShapingParameters interface {
	isDevm_MpuBoards_MpuBoard_Qos_MulticastPortShaping_ShapingParameters()
}

type Devm_MpuBoards_MpuBoard_Qos_MulticastPortShaping_ShapingParametersShapingTypeMode struct {
	ShapingParametersShapingTypeMode *Devm_MpuBoards_MpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingTypeMode `protobuf:"bytes,1,opt,name=shaping_parameters_shaping_type_mode,json=shaping-type-mode,proto3,oneof"`
}

type Devm_MpuBoards_MpuBoard_Qos_MulticastPortShaping_ShapingParametersShapingValueMode struct {
	ShapingParametersShapingValueMode *Devm_MpuBoards_MpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingValueMode `protobuf:"bytes,2,opt,name=shaping_parameters_shaping_value_mode,json=shaping-value-mode,proto3,oneof"`
}

func (*Devm_MpuBoards_MpuBoard_Qos_MulticastPortShaping_ShapingParametersShapingTypeMode) isDevm_MpuBoards_MpuBoard_Qos_MulticastPortShaping_ShapingParameters() {
}

func (*Devm_MpuBoards_MpuBoard_Qos_MulticastPortShaping_ShapingParametersShapingValueMode) isDevm_MpuBoards_MpuBoard_Qos_MulticastPortShaping_ShapingParameters() {
}

type Devm_MpuBoards_MpuBoard_Qos_UserQueuePirPrecision struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Precision uint32 `protobuf:"varint,1,opt,name=precision,proto3" json:"precision,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Qos_UserQueuePirPrecision) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Qos_UserQueuePirPrecision{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_UserQueuePirPrecision) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Qos_UserQueuePirPrecision) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_Qos_UserQueuePirPrecision) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Qos_UserQueuePirPrecision.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Qos_UserQueuePirPrecision) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 16, 5}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_UserQueuePirPrecision) GetPrecision() uint32 {
	if x != nil {
		return x.Precision
	}
	return 0
}

type Devm_MpuBoards_MpuBoard_Qos_ExpPhbDisable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ForwardType Devm_MpuBoards_MpuBoard_Qos_ExpPhbDisable_ForwardType `protobuf:"varint,1,opt,name=forward_type,json=forward-type,proto3,enum=huawei_devm.Devm_MpuBoards_MpuBoard_Qos_ExpPhbDisable_ForwardType" json:"forward_type,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Qos_ExpPhbDisable) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Qos_ExpPhbDisable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_ExpPhbDisable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Qos_ExpPhbDisable) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_Qos_ExpPhbDisable) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Qos_ExpPhbDisable.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Qos_ExpPhbDisable) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 16, 6}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_ExpPhbDisable) GetForwardType() Devm_MpuBoards_MpuBoard_Qos_ExpPhbDisable_ForwardType {
	if x != nil {
		return x.ForwardType
	}
	return Devm_MpuBoards_MpuBoard_Qos_ExpPhbDisable_INVALID_ENUM_VALUE_ForwardType
}

type Devm_MpuBoards_MpuBoard_Qos_PacketBlockThresholds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PacketBlockThreshold []*Devm_MpuBoards_MpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold `protobuf:"bytes,1,rep,name=packet_block_threshold,json=packet-block-threshold,proto3" json:"packet_block_threshold,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Qos_PacketBlockThresholds) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Qos_PacketBlockThresholds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_PacketBlockThresholds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Qos_PacketBlockThresholds) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_Qos_PacketBlockThresholds) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Qos_PacketBlockThresholds.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Qos_PacketBlockThresholds) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 16, 7}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_PacketBlockThresholds) GetPacketBlockThreshold() []*Devm_MpuBoards_MpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold {
	if x != nil {
		return x.PacketBlockThreshold
	}
	return nil
}

type Devm_MpuBoards_MpuBoard_Qos_PacketBlockThresholdAll struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size uint32 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Qos_PacketBlockThresholdAll) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Qos_PacketBlockThresholdAll{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_PacketBlockThresholdAll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Qos_PacketBlockThresholdAll) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_Qos_PacketBlockThresholdAll) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Qos_PacketBlockThresholdAll.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Qos_PacketBlockThresholdAll) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 16, 8}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_PacketBlockThresholdAll) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

type Devm_MpuBoards_MpuBoard_Qos_ChannelAlarms struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelAlarm []*Devm_MpuBoards_MpuBoard_Qos_ChannelAlarms_ChannelAlarm `protobuf:"bytes,1,rep,name=channel_alarm,json=channel-alarm,proto3" json:"channel_alarm,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Qos_ChannelAlarms) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Qos_ChannelAlarms{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_ChannelAlarms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Qos_ChannelAlarms) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_Qos_ChannelAlarms) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Qos_ChannelAlarms.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Qos_ChannelAlarms) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 16, 9}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_ChannelAlarms) GetChannelAlarm() []*Devm_MpuBoards_MpuBoard_Qos_ChannelAlarms_ChannelAlarm {
	if x != nil {
		return x.ChannelAlarm
	}
	return nil
}

type Devm_MpuBoards_MpuBoard_Qos_ChannelProfilePrecision struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type Devm_MpuBoards_MpuBoard_Qos_ChannelProfilePrecision_Type `protobuf:"varint,1,opt,name=type,proto3,enum=huawei_devm.Devm_MpuBoards_MpuBoard_Qos_ChannelProfilePrecision_Type" json:"type,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Qos_ChannelProfilePrecision) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Qos_ChannelProfilePrecision{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_ChannelProfilePrecision) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Qos_ChannelProfilePrecision) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_Qos_ChannelProfilePrecision) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Qos_ChannelProfilePrecision.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Qos_ChannelProfilePrecision) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 16, 10}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_ChannelProfilePrecision) GetType() Devm_MpuBoards_MpuBoard_Qos_ChannelProfilePrecision_Type {
	if x != nil {
		return x.Type
	}
	return Devm_MpuBoards_MpuBoard_Qos_ChannelProfilePrecision_INVALID_ENUM_VALUE_Type
}

type Devm_MpuBoards_MpuBoard_Qos_ChannelProfileApply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Qos_ChannelProfileApply) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Qos_ChannelProfileApply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_ChannelProfileApply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Qos_ChannelProfileApply) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_Qos_ChannelProfileApply) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Qos_ChannelProfileApply.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Qos_ChannelProfileApply) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 16, 11}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_ChannelProfileApply) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Devm_MpuBoards_MpuBoard_Qos_MulticastShaping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShapingValue uint32 `protobuf:"varint,1,opt,name=shaping_value,json=shaping-value,proto3" json:"shaping_value,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Qos_MulticastShaping) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Qos_MulticastShaping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_MulticastShaping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Qos_MulticastShaping) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_Qos_MulticastShaping) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Qos_MulticastShaping.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Qos_MulticastShaping) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 16, 12}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_MulticastShaping) GetShapingValue() uint32 {
	if x != nil {
		return x.ShapingValue
	}
	return 0
}

type Devm_MpuBoards_MpuBoard_Qos_PortQueueAlarms struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortQueueAlarm []*Devm_MpuBoards_MpuBoard_Qos_PortQueueAlarms_PortQueueAlarm `protobuf:"bytes,1,rep,name=port_queue_alarm,json=port-queue-alarm,proto3" json:"port_queue_alarm,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Qos_PortQueueAlarms) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Qos_PortQueueAlarms{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_PortQueueAlarms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Qos_PortQueueAlarms) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_Qos_PortQueueAlarms) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Qos_PortQueueAlarms.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Qos_PortQueueAlarms) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 16, 13}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_PortQueueAlarms) GetPortQueueAlarm() []*Devm_MpuBoards_MpuBoard_Qos_PortQueueAlarms_PortQueueAlarm {
	if x != nil {
		return x.PortQueueAlarm
	}
	return nil
}

type Devm_MpuBoards_MpuBoard_Qos_UserQueueRecoveryDisable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Devm_MpuBoards_MpuBoard_Qos_UserQueueRecoveryDisable) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Qos_UserQueueRecoveryDisable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_UserQueueRecoveryDisable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Qos_UserQueueRecoveryDisable) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_Qos_UserQueueRecoveryDisable) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Qos_UserQueueRecoveryDisable.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Qos_UserQueueRecoveryDisable) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 16, 14}
}

type Devm_MpuBoards_MpuBoard_Qos_AccessUserBoardScheduleEnable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Devm_MpuBoards_MpuBoard_Qos_AccessUserBoardScheduleEnable) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Qos_AccessUserBoardScheduleEnable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_AccessUserBoardScheduleEnable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Qos_AccessUserBoardScheduleEnable) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_Qos_AccessUserBoardScheduleEnable) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Qos_AccessUserBoardScheduleEnable.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Qos_AccessUserBoardScheduleEnable) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 16, 15}
}

type Devm_MpuBoards_MpuBoard_Qos_ConvergentPrecedenceHighs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConvergentPrecedenceHigh []*Devm_MpuBoards_MpuBoard_Qos_ConvergentPrecedenceHighs_ConvergentPrecedenceHigh `protobuf:"bytes,1,rep,name=convergent_precedence_high,json=convergent-precedence-high,proto3" json:"convergent_precedence_high,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Qos_ConvergentPrecedenceHighs) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Qos_ConvergentPrecedenceHighs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_ConvergentPrecedenceHighs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Qos_ConvergentPrecedenceHighs) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_Qos_ConvergentPrecedenceHighs) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Qos_ConvergentPrecedenceHighs.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Qos_ConvergentPrecedenceHighs) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 16, 16}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_ConvergentPrecedenceHighs) GetConvergentPrecedenceHigh() []*Devm_MpuBoards_MpuBoard_Qos_ConvergentPrecedenceHighs_ConvergentPrecedenceHigh {
	if x != nil {
		return x.ConvergentPrecedenceHigh
	}
	return nil
}

type Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueueDiscardAlarm []*Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm `protobuf:"bytes,1,rep,name=queue_discard_alarm,json=queue-discard-alarm,proto3" json:"queue_discard_alarm,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 16, 17}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms) GetQueueDiscardAlarm() []*Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm {
	if x != nil {
		return x.QueueDiscardAlarm
	}
	return nil
}

type Devm_MpuBoards_MpuBoard_Qos_UserQueueBurst struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinimumBurstSize uint32 `protobuf:"varint,1,opt,name=minimum_burst_size,json=minimum-burst-size,proto3" json:"minimum_burst_size,omitempty"`
	Time             uint32 `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Qos_UserQueueBurst) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Qos_UserQueueBurst{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_UserQueueBurst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Qos_UserQueueBurst) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_Qos_UserQueueBurst) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Qos_UserQueueBurst.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Qos_UserQueueBurst) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 16, 18}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_UserQueueBurst) GetMinimumBurstSize() uint32 {
	if x != nil {
		return x.MinimumBurstSize
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_Qos_UserQueueBurst) GetTime() uint32 {
	if x != nil {
		return x.Time
	}
	return 0
}

type Devm_MpuBoards_MpuBoard_Qos_BurstSizes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BurstSize []*Devm_MpuBoards_MpuBoard_Qos_BurstSizes_BurstSize `protobuf:"bytes,1,rep,name=burst_size,json=burst-size,proto3" json:"burst_size,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Qos_BurstSizes) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Qos_BurstSizes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_BurstSizes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Qos_BurstSizes) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_Qos_BurstSizes) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Qos_BurstSizes.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Qos_BurstSizes) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 16, 19}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_BurstSizes) GetBurstSize() []*Devm_MpuBoards_MpuBoard_Qos_BurstSizes_BurstSize {
	if x != nil {
		return x.BurstSize
	}
	return nil
}

type Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareThresholds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GlobalBufferShareThreshold []*Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareThresholds_GlobalBufferShareThreshold `protobuf:"bytes,1,rep,name=global_buffer_share_threshold,json=global-buffer-share-threshold,proto3" json:"global_buffer_share_threshold,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareThresholds) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareThresholds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareThresholds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareThresholds) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareThresholds) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareThresholds.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareThresholds) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 16, 20}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareThresholds) GetGlobalBufferShareThreshold() []*Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareThresholds_GlobalBufferShareThreshold {
	if x != nil {
		return x.GlobalBufferShareThreshold
	}
	return nil
}

type Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GlobalBufferShareQueue []*Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue `protobuf:"bytes,1,rep,name=global_buffer_share_queue,json=global-buffer-share-queue,proto3" json:"global_buffer_share_queue,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 16, 21}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues) GetGlobalBufferShareQueue() []*Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue {
	if x != nil {
		return x.GlobalBufferShareQueue
	}
	return nil
}

type Devm_MpuBoards_MpuBoard_Qos_FlowQueueBackpressureOff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Devm_MpuBoards_MpuBoard_Qos_FlowQueueBackpressureOff) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Qos_FlowQueueBackpressureOff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_FlowQueueBackpressureOff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Qos_FlowQueueBackpressureOff) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_Qos_FlowQueueBackpressureOff) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Qos_FlowQueueBackpressureOff.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Qos_FlowQueueBackpressureOff) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 16, 22}
}

type Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestinationUser *Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchType_DestinationUser `protobuf:"bytes,1,opt,name=destination_user,json=destination-user,proto3" json:"destination_user,omitempty"`
	InterfaceAcl    *Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchType_InterfaceAcl    `protobuf:"bytes,2,opt,name=interface_acl,json=interface-acl,proto3" json:"interface_acl,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchType) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchType) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchType) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchType.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchType) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 16, 23}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchType) GetDestinationUser() *Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchType_DestinationUser {
	if x != nil {
		return x.DestinationUser
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchType) GetInterfaceAcl() *Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchType_InterfaceAcl {
	if x != nil {
		return x.InterfaceAcl
	}
	return nil
}

type Devm_MpuBoards_MpuBoard_Qos_UserQueueResource4Cos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CosValue uint32 `protobuf:"varint,1,opt,name=cos_value,json=cos-value,proto3" json:"cos_value,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Qos_UserQueueResource4Cos) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Qos_UserQueueResource4Cos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_UserQueueResource4Cos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Qos_UserQueueResource4Cos) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_Qos_UserQueueResource4Cos) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Qos_UserQueueResource4Cos.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Qos_UserQueueResource4Cos) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 16, 24}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_UserQueueResource4Cos) GetCosValue() uint32 {
	if x != nil {
		return x.CosValue
	}
	return 0
}

type Devm_MpuBoards_MpuBoard_Qos_UserQueueResource8CosEnhances struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserQueueResource_8CosEnhance []*Devm_MpuBoards_MpuBoard_Qos_UserQueueResource8CosEnhances_UserQueueResource8CosEnhance `protobuf:"bytes,1,rep,name=user_queue_resource_8cos_enhance,json=user-queue-resource-8cos-enhance,proto3" json:"user_queue_resource_8cos_enhance,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Qos_UserQueueResource8CosEnhances) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Qos_UserQueueResource8CosEnhances{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_UserQueueResource8CosEnhances) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Qos_UserQueueResource8CosEnhances) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_Qos_UserQueueResource8CosEnhances) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Qos_UserQueueResource8CosEnhances.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Qos_UserQueueResource8CosEnhances) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 16, 25}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_UserQueueResource8CosEnhances) GetUserQueueResource_8CosEnhance() []*Devm_MpuBoards_MpuBoard_Qos_UserQueueResource8CosEnhances_UserQueueResource8CosEnhance {
	if x != nil {
		return x.UserQueueResource_8CosEnhance
	}
	return nil
}

type Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch_Type `protobuf:"varint,1,opt,name=type,proto3,enum=huawei_devm.Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch_Type" json:"type,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 16, 0, 0}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch) GetType() Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch_Type {
	if x != nil {
		return x.Type
	}
	return Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch_Type_IPX_LAYERX_PUSH
}

type Devm_MpuBoards_MpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Direction Devm_MpuBoards_MpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Direction `protobuf:"varint,1,opt,name=direction,proto3,enum=huawei_devm.Devm_MpuBoards_MpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Direction" json:"direction,omitempty"`
	Mode      Devm_MpuBoards_MpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Mode      `protobuf:"varint,2,opt,name=mode,proto3,enum=huawei_devm.Devm_MpuBoards_MpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Mode" json:"mode,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 16, 1, 0}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority) GetDirection() Devm_MpuBoards_MpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Direction {
	if x != nil {
		return x.Direction
	}
	return Devm_MpuBoards_MpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Direction_INBOUND
}

func (x *Devm_MpuBoards_MpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority) GetMode() Devm_MpuBoards_MpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Mode {
	if x != nil {
		return x.Mode
	}
	return Devm_MpuBoards_MpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Mode_HIGH
}

type Devm_MpuBoards_MpuBoard_Qos_PqSchedulePriorityOnCards_PqSchedulePriorityOnCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardId string                                                                              `protobuf:"bytes,1,opt,name=card_id,json=card-id,proto3" json:"card_id,omitempty"`
	Mode   Devm_MpuBoards_MpuBoard_Qos_PqSchedulePriorityOnCards_PqSchedulePriorityOnCard_Mode `protobuf:"varint,2,opt,name=mode,proto3,enum=huawei_devm.Devm_MpuBoards_MpuBoard_Qos_PqSchedulePriorityOnCards_PqSchedulePriorityOnCard_Mode" json:"mode,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Qos_PqSchedulePriorityOnCards_PqSchedulePriorityOnCard) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Qos_PqSchedulePriorityOnCards_PqSchedulePriorityOnCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_PqSchedulePriorityOnCards_PqSchedulePriorityOnCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Qos_PqSchedulePriorityOnCards_PqSchedulePriorityOnCard) ProtoMessage() {
}

func (x *Devm_MpuBoards_MpuBoard_Qos_PqSchedulePriorityOnCards_PqSchedulePriorityOnCard) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Qos_PqSchedulePriorityOnCards_PqSchedulePriorityOnCard.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Qos_PqSchedulePriorityOnCards_PqSchedulePriorityOnCard) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 16, 2, 0}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_PqSchedulePriorityOnCards_PqSchedulePriorityOnCard) GetCardId() string {
	if x != nil {
		return x.CardId
	}
	return ""
}

func (x *Devm_MpuBoards_MpuBoard_Qos_PqSchedulePriorityOnCards_PqSchedulePriorityOnCard) GetMode() Devm_MpuBoards_MpuBoard_Qos_PqSchedulePriorityOnCards_PqSchedulePriorityOnCard_Mode {
	if x != nil {
		return x.Mode
	}
	return Devm_MpuBoards_MpuBoard_Qos_PqSchedulePriorityOnCards_PqSchedulePriorityOnCard_Mode_HIGH
}

type Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceClass      Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ServiceClass      `protobuf:"varint,1,opt,name=service_class,json=service-class,proto3,enum=huawei_devm.Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ServiceClass" json:"service_class,omitempty"`
	QueueScheduleMode Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_QueueScheduleMode `protobuf:"varint,2,opt,name=queue_schedule_mode,json=queue-schedule-mode,proto3,enum=huawei_devm.Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_QueueScheduleMode" json:"queue_schedule_mode,omitempty"`
	Weight            uint32                                                                               `protobuf:"varint,3,opt,name=weight,proto3" json:"weight,omitempty"`
	PortWredName      string                                                                               `protobuf:"bytes,4,opt,name=port_wred_name,json=port-wred-name,proto3" json:"port_wred_name,omitempty"`
	// Types that are assignable to ShapingParameters:
	//	*Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParametersShaping
	//	*Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParametersShapingPercent
	ShapingParameters isDevm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParameters `protobuf_oneof:"ShapingParameters"`
}

func (x *Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 16, 3, 0}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue) GetServiceClass() Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ServiceClass {
	if x != nil {
		return x.ServiceClass
	}
	return Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ServiceClass_BE
}

func (x *Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue) GetQueueScheduleMode() Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_QueueScheduleMode {
	if x != nil {
		return x.QueueScheduleMode
	}
	return Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_QueueScheduleMode_PQ
}

func (x *Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue) GetPortWredName() string {
	if x != nil {
		return x.PortWredName
	}
	return ""
}

func (m *Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue) GetShapingParameters() isDevm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParameters {
	if m != nil {
		return m.ShapingParameters
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue) GetShapingParametersShaping() *Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParameters_Shaping {
	if x, ok := x.GetShapingParameters().(*Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParametersShaping); ok {
		return x.ShapingParametersShaping
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue) GetShapingParametersShapingPercent() *Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParameters_ShapingPercent {
	if x, ok := x.GetShapingParameters().(*Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParametersShapingPercent); ok {
		return x.ShapingParametersShapingPercent
	}
	return nil
}

type isDevm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParameters interface {
	isDevm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParameters()
}

type Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParametersShaping struct {
	ShapingParametersShaping *Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParameters_Shaping `protobuf:"bytes,5,opt,name=shaping_parameters_shaping,json=shaping,proto3,oneof"`
}

type Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParametersShapingPercent struct {
	ShapingParametersShapingPercent *Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParameters_ShapingPercent `protobuf:"bytes,6,opt,name=shaping_parameters_shaping_percent,json=shaping-percent,proto3,oneof"`
}

func (*Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParametersShaping) isDevm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParameters() {
}

func (*Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParametersShapingPercent) isDevm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParameters() {
}

type Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParameters_Shaping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShapingValue uint32 `protobuf:"varint,1,opt,name=shaping_value,json=shaping-value,proto3" json:"shaping_value,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParameters_Shaping) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParameters_Shaping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParameters_Shaping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParameters_Shaping) ProtoMessage() {
}

func (x *Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParameters_Shaping) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParameters_Shaping.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParameters_Shaping) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 16, 3, 0, 0}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParameters_Shaping) GetShapingValue() uint32 {
	if x != nil {
		return x.ShapingValue
	}
	return 0
}

type Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParameters_ShapingPercent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShapingPercentage uint32 `protobuf:"varint,1,opt,name=shaping_percentage,json=shaping-percentage,proto3" json:"shaping_percentage,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParameters_ShapingPercent) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParameters_ShapingPercent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParameters_ShapingPercent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParameters_ShapingPercent) ProtoMessage() {
}

func (x *Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParameters_ShapingPercent) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParameters_ShapingPercent.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParameters_ShapingPercent) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 16, 3, 0, 1}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParameters_ShapingPercent) GetShapingPercentage() uint32 {
	if x != nil {
		return x.ShapingPercentage
	}
	return 0
}

type Devm_MpuBoards_MpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingTypeMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShapingType Devm_MpuBoards_MpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingTypeMode_ShapingType `protobuf:"varint,1,opt,name=shaping_type,json=shaping-type,proto3,enum=huawei_devm.Devm_MpuBoards_MpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingTypeMode_ShapingType" json:"shaping_type,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingTypeMode) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingTypeMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingTypeMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingTypeMode) ProtoMessage() {
}

func (x *Devm_MpuBoards_MpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingTypeMode) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingTypeMode.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingTypeMode) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 16, 4, 0}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingTypeMode) GetShapingType() Devm_MpuBoards_MpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingTypeMode_ShapingType {
	if x != nil {
		return x.ShapingType
	}
	return Devm_MpuBoards_MpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingTypeMode_ShapingType_X_256K
}

type Devm_MpuBoards_MpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingValueMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShapingValue uint32 `protobuf:"varint,1,opt,name=shaping_value,json=shaping-value,proto3" json:"shaping_value,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingValueMode) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingValueMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingValueMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingValueMode) ProtoMessage() {
}

func (x *Devm_MpuBoards_MpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingValueMode) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingValueMode.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingValueMode) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 16, 4, 1}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingValueMode) GetShapingValue() uint32 {
	if x != nil {
		return x.ShapingValue
	}
	return 0
}

type Devm_MpuBoards_MpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceClass Devm_MpuBoards_MpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold_ServiceClass `protobuf:"varint,1,opt,name=service_class,json=service-class,proto3,enum=huawei_devm.Devm_MpuBoards_MpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold_ServiceClass" json:"service_class,omitempty"`
	Size         uint32                                                                              `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 16, 7, 0}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold) GetServiceClass() Devm_MpuBoards_MpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold_ServiceClass {
	if x != nil {
		return x.ServiceClass
	}
	return Devm_MpuBoards_MpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold_ServiceClass_BE
}

func (x *Devm_MpuBoards_MpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

type Devm_MpuBoards_MpuBoard_Qos_ChannelAlarms_ChannelAlarm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlarmType Devm_MpuBoards_MpuBoard_Qos_ChannelAlarms_ChannelAlarm_AlarmType `protobuf:"varint,1,opt,name=alarm_type,json=alarm-type,proto3,enum=huawei_devm.Devm_MpuBoards_MpuBoard_Qos_ChannelAlarms_ChannelAlarm_AlarmType" json:"alarm_type,omitempty"`
	Pool      Devm_MpuBoards_MpuBoard_Qos_ChannelAlarms_ChannelAlarm_Pool      `protobuf:"varint,2,opt,name=pool,proto3,enum=huawei_devm.Devm_MpuBoards_MpuBoard_Qos_ChannelAlarms_ChannelAlarm_Pool" json:"pool,omitempty"`
	Threshold uint32                                                           `protobuf:"varint,3,opt,name=threshold,proto3" json:"threshold,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Qos_ChannelAlarms_ChannelAlarm) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Qos_ChannelAlarms_ChannelAlarm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_ChannelAlarms_ChannelAlarm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Qos_ChannelAlarms_ChannelAlarm) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_Qos_ChannelAlarms_ChannelAlarm) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Qos_ChannelAlarms_ChannelAlarm.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Qos_ChannelAlarms_ChannelAlarm) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 16, 9, 0}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_ChannelAlarms_ChannelAlarm) GetAlarmType() Devm_MpuBoards_MpuBoard_Qos_ChannelAlarms_ChannelAlarm_AlarmType {
	if x != nil {
		return x.AlarmType
	}
	return Devm_MpuBoards_MpuBoard_Qos_ChannelAlarms_ChannelAlarm_AlarmType_QUANTITY
}

func (x *Devm_MpuBoards_MpuBoard_Qos_ChannelAlarms_ChannelAlarm) GetPool() Devm_MpuBoards_MpuBoard_Qos_ChannelAlarms_ChannelAlarm_Pool {
	if x != nil {
		return x.Pool
	}
	return Devm_MpuBoards_MpuBoard_Qos_ChannelAlarms_ChannelAlarm_INVALID_ENUM_VALUE_Pool
}

func (x *Devm_MpuBoards_MpuBoard_Qos_ChannelAlarms_ChannelAlarm) GetThreshold() uint32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

type Devm_MpuBoards_MpuBoard_Qos_PortQueueAlarms_PortQueueAlarm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceClass     Devm_MpuBoards_MpuBoard_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass `protobuf:"varint,1,opt,name=service_class,json=service-class,proto3,enum=huawei_devm.Devm_MpuBoards_MpuBoard_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass" json:"service_class,omitempty"`
	BufferPercentage uint32                                                                  `protobuf:"varint,2,opt,name=buffer_percentage,json=buffer-percentage,proto3" json:"buffer_percentage,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Qos_PortQueueAlarms_PortQueueAlarm) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Qos_PortQueueAlarms_PortQueueAlarm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_PortQueueAlarms_PortQueueAlarm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Qos_PortQueueAlarms_PortQueueAlarm) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_Qos_PortQueueAlarms_PortQueueAlarm) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Qos_PortQueueAlarms_PortQueueAlarm.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Qos_PortQueueAlarms_PortQueueAlarm) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 16, 13, 0}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_PortQueueAlarms_PortQueueAlarm) GetServiceClass() Devm_MpuBoards_MpuBoard_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass {
	if x != nil {
		return x.ServiceClass
	}
	return Devm_MpuBoards_MpuBoard_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass_BE
}

func (x *Devm_MpuBoards_MpuBoard_Qos_PortQueueAlarms_PortQueueAlarm) GetBufferPercentage() uint32 {
	if x != nil {
		return x.BufferPercentage
	}
	return 0
}

type Devm_MpuBoards_MpuBoard_Qos_ConvergentPrecedenceHighs_ConvergentPrecedenceHigh struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceClassValue uint32 `protobuf:"varint,1,opt,name=service_class_value,json=service-class-value,proto3" json:"service_class_value,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Qos_ConvergentPrecedenceHighs_ConvergentPrecedenceHigh) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Qos_ConvergentPrecedenceHighs_ConvergentPrecedenceHigh{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_ConvergentPrecedenceHighs_ConvergentPrecedenceHigh) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Qos_ConvergentPrecedenceHighs_ConvergentPrecedenceHigh) ProtoMessage() {
}

func (x *Devm_MpuBoards_MpuBoard_Qos_ConvergentPrecedenceHighs_ConvergentPrecedenceHigh) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Qos_ConvergentPrecedenceHighs_ConvergentPrecedenceHigh.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Qos_ConvergentPrecedenceHighs_ConvergentPrecedenceHigh) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 16, 16, 0}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_ConvergentPrecedenceHighs_ConvergentPrecedenceHigh) GetServiceClassValue() uint32 {
	if x != nil {
		return x.ServiceClassValue
	}
	return 0
}

type Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceClass Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_ServiceClass `protobuf:"varint,1,opt,name=service_class,json=service-class,proto3,enum=huawei_devm.Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_ServiceClass" json:"service_class,omitempty"`
	IntervalTime uint32                                                                        `protobuf:"varint,2,opt,name=interval_time,json=interval-time,proto3" json:"interval_time,omitempty"`
	// Types that are assignable to DiscardType:
	//	*Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardTypeBytes
	//	*Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardTypePackets
	//	*Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardTypePacketRatio
	DiscardType isDevm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType `protobuf_oneof:"DiscardType"`
}

func (x *Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 16, 17, 0}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm) GetServiceClass() Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_ServiceClass {
	if x != nil {
		return x.ServiceClass
	}
	return Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_ServiceClass_BE
}

func (x *Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm) GetIntervalTime() uint32 {
	if x != nil {
		return x.IntervalTime
	}
	return 0
}

func (m *Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm) GetDiscardType() isDevm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType {
	if m != nil {
		return m.DiscardType
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm) GetDiscardTypeBytes() *Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType_Bytes {
	if x, ok := x.GetDiscardType().(*Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardTypeBytes); ok {
		return x.DiscardTypeBytes
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm) GetDiscardTypePackets() *Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType_Packets {
	if x, ok := x.GetDiscardType().(*Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardTypePackets); ok {
		return x.DiscardTypePackets
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm) GetDiscardTypePacketRatio() *Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType_PacketRatio {
	if x, ok := x.GetDiscardType().(*Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardTypePacketRatio); ok {
		return x.DiscardTypePacketRatio
	}
	return nil
}

type isDevm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType interface {
	isDevm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType()
}

type Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardTypeBytes struct {
	DiscardTypeBytes *Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType_Bytes `protobuf:"bytes,3,opt,name=discard_type_bytes,json=bytes,proto3,oneof"`
}

type Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardTypePackets struct {
	DiscardTypePackets *Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType_Packets `protobuf:"bytes,4,opt,name=discard_type_packets,json=packets,proto3,oneof"`
}

type Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardTypePacketRatio struct {
	DiscardTypePacketRatio *Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType_PacketRatio `protobuf:"bytes,5,opt,name=discard_type_packet_ratio,json=packet-ratio,proto3,oneof"`
}

func (*Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardTypeBytes) isDevm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType() {
}

func (*Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardTypePackets) isDevm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType() {
}

func (*Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardTypePacketRatio) isDevm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType() {
}

type Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType_Bytes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bytes8 uint32 `protobuf:"varint,1,opt,name=bytes8,json=bytes,proto3" json:"bytes8,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType_Bytes) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType_Bytes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType_Bytes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType_Bytes) ProtoMessage() {
}

func (x *Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType_Bytes) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType_Bytes.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType_Bytes) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 16, 17, 0, 0}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType_Bytes) GetBytes8() uint32 {
	if x != nil {
		return x.Bytes8
	}
	return 0
}

type Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType_Packets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Packets8 uint32 `protobuf:"varint,1,opt,name=packets8,json=packets,proto3" json:"packets8,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType_Packets) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType_Packets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType_Packets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType_Packets) ProtoMessage() {
}

func (x *Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType_Packets) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType_Packets.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType_Packets) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 16, 17, 0, 1}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType_Packets) GetPackets8() uint32 {
	if x != nil {
		return x.Packets8
	}
	return 0
}

type Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType_PacketRatio struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PacketCoefficient uint32 `protobuf:"varint,1,opt,name=packet_coefficient,json=packet-coefficient,proto3" json:"packet_coefficient,omitempty"`
	PacketExponent    uint32 `protobuf:"varint,2,opt,name=packet_exponent,json=packet-exponent,proto3" json:"packet_exponent,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType_PacketRatio) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType_PacketRatio{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType_PacketRatio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType_PacketRatio) ProtoMessage() {
}

func (x *Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType_PacketRatio) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType_PacketRatio.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType_PacketRatio) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 16, 17, 0, 2}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType_PacketRatio) GetPacketCoefficient() uint32 {
	if x != nil {
		return x.PacketCoefficient
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType_PacketRatio) GetPacketExponent() uint32 {
	if x != nil {
		return x.PacketExponent
	}
	return 0
}

type Devm_MpuBoards_MpuBoard_Qos_BurstSizes_BurstSize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceClass Devm_MpuBoards_MpuBoard_Qos_BurstSizes_BurstSize_ServiceClass `protobuf:"varint,1,opt,name=service_class,json=service-class,proto3,enum=huawei_devm.Devm_MpuBoards_MpuBoard_Qos_BurstSizes_BurstSize_ServiceClass" json:"service_class,omitempty"`
	Value        uint32                                                        `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Qos_BurstSizes_BurstSize) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Qos_BurstSizes_BurstSize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_BurstSizes_BurstSize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Qos_BurstSizes_BurstSize) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_Qos_BurstSizes_BurstSize) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Qos_BurstSizes_BurstSize.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Qos_BurstSizes_BurstSize) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 16, 19, 0}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_BurstSizes_BurstSize) GetServiceClass() Devm_MpuBoards_MpuBoard_Qos_BurstSizes_BurstSize_ServiceClass {
	if x != nil {
		return x.ServiceClass
	}
	return Devm_MpuBoards_MpuBoard_Qos_BurstSizes_BurstSize_ServiceClass_BE
}

func (x *Devm_MpuBoards_MpuBoard_Qos_BurstSizes_BurstSize) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareThresholds_GlobalBufferShareThreshold struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Direction Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareThresholds_GlobalBufferShareThreshold_Direction `protobuf:"varint,1,opt,name=direction,proto3,enum=huawei_devm.Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareThresholds_GlobalBufferShareThreshold_Direction" json:"direction,omitempty"`
	Threshold uint32                                                                                       `protobuf:"varint,2,opt,name=threshold,proto3" json:"threshold,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareThresholds_GlobalBufferShareThreshold) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareThresholds_GlobalBufferShareThreshold{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareThresholds_GlobalBufferShareThreshold) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareThresholds_GlobalBufferShareThreshold) ProtoMessage() {
}

func (x *Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareThresholds_GlobalBufferShareThreshold) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareThresholds_GlobalBufferShareThreshold.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareThresholds_GlobalBufferShareThreshold) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 16, 20, 0}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareThresholds_GlobalBufferShareThreshold) GetDirection() Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareThresholds_GlobalBufferShareThreshold_Direction {
	if x != nil {
		return x.Direction
	}
	return Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareThresholds_GlobalBufferShareThreshold_Direction_INBOUND
}

func (x *Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareThresholds_GlobalBufferShareThreshold) GetThreshold() uint32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

type Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceClass Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_ServiceClass `protobuf:"varint,1,opt,name=service_class,json=service-class,proto3,enum=huawei_devm.Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_ServiceClass" json:"service_class,omitempty"`
	Direction    Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_Direction    `protobuf:"varint,2,opt,name=direction,proto3,enum=huawei_devm.Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_Direction" json:"direction,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 16, 21, 0}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue) GetServiceClass() Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_ServiceClass {
	if x != nil {
		return x.ServiceClass
	}
	return Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_ServiceClass_BE
}

func (x *Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue) GetDirection() Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_Direction {
	if x != nil {
		return x.Direction
	}
	return Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_Direction_INBOUND
}

type Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchType_DestinationUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchType_DestinationUser) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchType_DestinationUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchType_DestinationUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchType_DestinationUser) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchType_DestinationUser) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchType_DestinationUser.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchType_DestinationUser) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 16, 23, 0}
}

type Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchType_InterfaceAcl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchType_InterfaceAcl) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchType_InterfaceAcl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchType_InterfaceAcl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchType_InterfaceAcl) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchType_InterfaceAcl) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchType_InterfaceAcl.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchType_InterfaceAcl) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 16, 23, 1}
}

type Devm_MpuBoards_MpuBoard_Qos_UserQueueResource8CosEnhances_UserQueueResource8CosEnhance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Direction Devm_MpuBoards_MpuBoard_Qos_UserQueueResource8CosEnhances_UserQueueResource8CosEnhance_Direction `protobuf:"varint,1,opt,name=direction,proto3,enum=huawei_devm.Devm_MpuBoards_MpuBoard_Qos_UserQueueResource8CosEnhances_UserQueueResource8CosEnhance_Direction" json:"direction,omitempty"`
	CosValue  uint32                                                                                           `protobuf:"varint,2,opt,name=cos_value,json=cos-value,proto3" json:"cos_value,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Qos_UserQueueResource8CosEnhances_UserQueueResource8CosEnhance) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Qos_UserQueueResource8CosEnhances_UserQueueResource8CosEnhance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_UserQueueResource8CosEnhances_UserQueueResource8CosEnhance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Qos_UserQueueResource8CosEnhances_UserQueueResource8CosEnhance) ProtoMessage() {
}

func (x *Devm_MpuBoards_MpuBoard_Qos_UserQueueResource8CosEnhances_UserQueueResource8CosEnhance) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Qos_UserQueueResource8CosEnhances_UserQueueResource8CosEnhance.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Qos_UserQueueResource8CosEnhances_UserQueueResource8CosEnhance) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 16, 25, 0}
}

func (x *Devm_MpuBoards_MpuBoard_Qos_UserQueueResource8CosEnhances_UserQueueResource8CosEnhance) GetDirection() Devm_MpuBoards_MpuBoard_Qos_UserQueueResource8CosEnhances_UserQueueResource8CosEnhance_Direction {
	if x != nil {
		return x.Direction
	}
	return Devm_MpuBoards_MpuBoard_Qos_UserQueueResource8CosEnhances_UserQueueResource8CosEnhance_Direction_INBOUND
}

func (x *Devm_MpuBoards_MpuBoard_Qos_UserQueueResource8CosEnhances_UserQueueResource8CosEnhance) GetCosValue() uint32 {
	if x != nil {
		return x.CosValue
	}
	return 0
}

type Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotL2Loopdet       *Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_SlotL2Loopdet       `protobuf:"bytes,1,opt,name=slot_l2loopdet,json=slot-l2loopdet,proto3" json:"slot_l2loopdet,omitempty"`
	Action              *Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_Action              `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
	LoopLevelThresholds *Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_LoopLevelThresholds `protobuf:"bytes,3,opt,name=loop_level_thresholds,json=loop-level-thresholds,proto3" json:"loop_level_thresholds,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 17, 0}
}

func (x *Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect) GetSlotL2Loopdet() *Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_SlotL2Loopdet {
	if x != nil {
		return x.SlotL2Loopdet
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect) GetAction() *Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_Action {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect) GetLoopLevelThresholds() *Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_LoopLevelThresholds {
	if x != nil {
		return x.LoopLevelThresholds
	}
	return nil
}

type Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_SlotL2Loopdet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable               bool   `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	PacketsDropThreshold uint32 `protobuf:"varint,2,opt,name=packets_drop_threshold,json=packets-drop-threshold,proto3" json:"packets_drop_threshold,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_SlotL2Loopdet) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_SlotL2Loopdet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_SlotL2Loopdet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_SlotL2Loopdet) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_SlotL2Loopdet) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_SlotL2Loopdet.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_SlotL2Loopdet) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 17, 0, 0}
}

func (x *Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_SlotL2Loopdet) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_SlotL2Loopdet) GetPacketsDropThreshold() uint32 {
	if x != nil {
		return x.PacketsDropThreshold
	}
	return 0
}

type Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_Action struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Shutdown *Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_Action_Shutdown `protobuf:"bytes,1,opt,name=shutdown,proto3" json:"shutdown,omitempty"`
	Trap     *Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_Action_Trap     `protobuf:"bytes,2,opt,name=trap,proto3" json:"trap,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_Action) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_Action{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_Action) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_Action) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_Action.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_Action) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 17, 0, 1}
}

func (x *Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_Action) GetShutdown() *Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_Action_Shutdown {
	if x != nil {
		return x.Shutdown
	}
	return nil
}

func (x *Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_Action) GetTrap() *Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_Action_Trap {
	if x != nil {
		return x.Trap
	}
	return nil
}

type Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_LoopLevelThresholds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LoopLevelThreshold []*Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_LoopLevelThresholds_LoopLevelThreshold `protobuf:"bytes,1,rep,name=loop_level_threshold,json=loop-level-threshold,proto3" json:"loop_level_threshold,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_LoopLevelThresholds) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_LoopLevelThresholds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_LoopLevelThresholds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_LoopLevelThresholds) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_LoopLevelThresholds) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_LoopLevelThresholds.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_LoopLevelThresholds) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 17, 0, 2}
}

func (x *Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_LoopLevelThresholds) GetLoopLevelThreshold() []*Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_LoopLevelThresholds_LoopLevelThreshold {
	if x != nil {
		return x.LoopLevelThreshold
	}
	return nil
}

type Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_Action_Shutdown struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpTimes    uint32 `protobuf:"varint,1,opt,name=up_times,json=up-times,proto3" json:"up_times,omitempty"`
	UpInterval uint32 `protobuf:"varint,2,opt,name=up_interval,json=up-interval,proto3" json:"up_interval,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_Action_Shutdown) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_Action_Shutdown{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_Action_Shutdown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_Action_Shutdown) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_Action_Shutdown) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_Action_Shutdown.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_Action_Shutdown) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 17, 0, 1, 0}
}

func (x *Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_Action_Shutdown) GetUpTimes() uint32 {
	if x != nil {
		return x.UpTimes
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_Action_Shutdown) GetUpInterval() uint32 {
	if x != nil {
		return x.UpInterval
	}
	return 0
}

type Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_Action_Trap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_Action_Trap) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_Action_Trap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_Action_Trap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_Action_Trap) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_Action_Trap) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_Action_Trap.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_Action_Trap) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 17, 0, 1, 1}
}

func (x *Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_Action_Trap) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

type Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_LoopLevelThresholds_LoopLevelThreshold struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceType Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_LoopLevelThresholds_LoopLevelThreshold_InterfaceType `protobuf:"varint,1,opt,name=interface_type,json=interface-type,proto3,enum=huawei_devm.Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_LoopLevelThresholds_LoopLevelThreshold_InterfaceType" json:"interface_type,omitempty"`
	Determined    uint32                                                                                        `protobuf:"varint,2,opt,name=determined,proto3" json:"determined,omitempty"`
	Suspect       uint32                                                                                        `protobuf:"varint,3,opt,name=suspect,proto3" json:"suspect,omitempty"`
	Notification  uint32                                                                                        `protobuf:"varint,4,opt,name=notification,proto3" json:"notification,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_LoopLevelThresholds_LoopLevelThreshold) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_LoopLevelThresholds_LoopLevelThreshold{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_LoopLevelThresholds_LoopLevelThreshold) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_LoopLevelThresholds_LoopLevelThreshold) ProtoMessage() {
}

func (x *Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_LoopLevelThresholds_LoopLevelThreshold) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_LoopLevelThresholds_LoopLevelThreshold.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_LoopLevelThresholds_LoopLevelThreshold) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 17, 0, 2, 0}
}

func (x *Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_LoopLevelThresholds_LoopLevelThreshold) GetInterfaceType() Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_LoopLevelThresholds_LoopLevelThreshold_InterfaceType {
	if x != nil {
		return x.InterfaceType
	}
	return Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_LoopLevelThresholds_LoopLevelThreshold_InterfaceType_MAINX_INTERFACE
}

func (x *Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_LoopLevelThresholds_LoopLevelThreshold) GetDetermined() uint32 {
	if x != nil {
		return x.Determined
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_LoopLevelThresholds_LoopLevelThreshold) GetSuspect() uint32 {
	if x != nil {
		return x.Suspect
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_LoopLevelThresholds_LoopLevelThreshold) GetNotification() uint32 {
	if x != nil {
		return x.Notification
	}
	return 0
}

type Devm_MpuBoards_MpuBoard_UnicastForward_Ipv4Uc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ForceFrag     bool `protobuf:"varint,1,opt,name=force_frag,json=force-frag,proto3" json:"force_frag,omitempty"`
	IcmpReplyFast bool `protobuf:"varint,2,opt,name=icmp_reply_fast,json=icmp-reply-fast,proto3" json:"icmp_reply_fast,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_UnicastForward_Ipv4Uc) Reset() {
	*x = Devm_MpuBoards_MpuBoard_UnicastForward_Ipv4Uc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_UnicastForward_Ipv4Uc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_UnicastForward_Ipv4Uc) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_UnicastForward_Ipv4Uc) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_UnicastForward_Ipv4Uc.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_UnicastForward_Ipv4Uc) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 18, 0}
}

func (x *Devm_MpuBoards_MpuBoard_UnicastForward_Ipv4Uc) GetForceFrag() bool {
	if x != nil {
		return x.ForceFrag
	}
	return false
}

func (x *Devm_MpuBoards_MpuBoard_UnicastForward_Ipv4Uc) GetIcmpReplyFast() bool {
	if x != nil {
		return x.IcmpReplyFast
	}
	return false
}

type Devm_MpuBoards_MpuBoard_UnicastForward_ArpFastReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_UnicastForward_ArpFastReply) Reset() {
	*x = Devm_MpuBoards_MpuBoard_UnicastForward_ArpFastReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_UnicastForward_ArpFastReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_UnicastForward_ArpFastReply) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_UnicastForward_ArpFastReply) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_UnicastForward_ArpFastReply.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_UnicastForward_ArpFastReply) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 18, 1}
}

func (x *Devm_MpuBoards_MpuBoard_UnicastForward_ArpFastReply) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

type Devm_MpuBoards_MpuBoard_UnicastForward_GreTtlMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TtlMode Devm_MpuBoards_MpuBoard_UnicastForward_GreTtlMode_TtlMode `protobuf:"varint,1,opt,name=ttl_mode,json=ttl-mode,proto3,enum=huawei_devm.Devm_MpuBoards_MpuBoard_UnicastForward_GreTtlMode_TtlMode" json:"ttl_mode,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_UnicastForward_GreTtlMode) Reset() {
	*x = Devm_MpuBoards_MpuBoard_UnicastForward_GreTtlMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_UnicastForward_GreTtlMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_UnicastForward_GreTtlMode) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_UnicastForward_GreTtlMode) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_UnicastForward_GreTtlMode.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_UnicastForward_GreTtlMode) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 18, 2}
}

func (x *Devm_MpuBoards_MpuBoard_UnicastForward_GreTtlMode) GetTtlMode() Devm_MpuBoards_MpuBoard_UnicastForward_GreTtlMode_TtlMode {
	if x != nil {
		return x.TtlMode
	}
	return Devm_MpuBoards_MpuBoard_UnicastForward_GreTtlMode_TtlMode_PIPE
}

type Devm_MpuBoards_MpuBoard_UnicastForward_NdFastReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_UnicastForward_NdFastReply) Reset() {
	*x = Devm_MpuBoards_MpuBoard_UnicastForward_NdFastReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_UnicastForward_NdFastReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_UnicastForward_NdFastReply) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_UnicastForward_NdFastReply) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_UnicastForward_NdFastReply.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_UnicastForward_NdFastReply) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 18, 3}
}

func (x *Devm_MpuBoards_MpuBoard_UnicastForward_NdFastReply) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

type Devm_MpuBoards_MpuBoard_HttpsRedirect_ChastenFlow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowNumber      uint32 `protobuf:"varint,1,opt,name=flow_number,json=flow-number,proto3" json:"flow_number,omitempty"`
	FlowPeriod      uint32 `protobuf:"varint,2,opt,name=flow_period,json=flow-period,proto3" json:"flow_period,omitempty"`
	FlowBlockPeriod uint32 `protobuf:"varint,3,opt,name=flow_block_period,json=flow-block-period,proto3" json:"flow_block_period,omitempty"`
	FlowBlockRate   uint32 `protobuf:"varint,4,opt,name=flow_block_rate,json=flow-block-rate,proto3" json:"flow_block_rate,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_HttpsRedirect_ChastenFlow) Reset() {
	*x = Devm_MpuBoards_MpuBoard_HttpsRedirect_ChastenFlow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_HttpsRedirect_ChastenFlow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_HttpsRedirect_ChastenFlow) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_HttpsRedirect_ChastenFlow) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_HttpsRedirect_ChastenFlow.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_HttpsRedirect_ChastenFlow) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 21, 0}
}

func (x *Devm_MpuBoards_MpuBoard_HttpsRedirect_ChastenFlow) GetFlowNumber() uint32 {
	if x != nil {
		return x.FlowNumber
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_HttpsRedirect_ChastenFlow) GetFlowPeriod() uint32 {
	if x != nil {
		return x.FlowPeriod
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_HttpsRedirect_ChastenFlow) GetFlowBlockPeriod() uint32 {
	if x != nil {
		return x.FlowBlockPeriod
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_HttpsRedirect_ChastenFlow) GetFlowBlockRate() uint32 {
	if x != nil {
		return x.FlowBlockRate
	}
	return 0
}

type Devm_MpuBoards_MpuBoard_HttpsRedirect_ChastenRedirect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RedirectNumber      uint32 `protobuf:"varint,1,opt,name=redirect_number,json=redirect-number,proto3" json:"redirect_number,omitempty"`
	RedirectPeriod      uint32 `protobuf:"varint,2,opt,name=redirect_period,json=redirect-period,proto3" json:"redirect_period,omitempty"`
	RedirectBlockPeriod uint32 `protobuf:"varint,3,opt,name=redirect_block_period,json=redirect-block-period,proto3" json:"redirect_block_period,omitempty"`
	RedirectBlockRate   uint32 `protobuf:"varint,4,opt,name=redirect_block_rate,json=redirect-block-rate,proto3" json:"redirect_block_rate,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_HttpsRedirect_ChastenRedirect) Reset() {
	*x = Devm_MpuBoards_MpuBoard_HttpsRedirect_ChastenRedirect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_HttpsRedirect_ChastenRedirect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_HttpsRedirect_ChastenRedirect) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_HttpsRedirect_ChastenRedirect) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_HttpsRedirect_ChastenRedirect.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_HttpsRedirect_ChastenRedirect) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 21, 1}
}

func (x *Devm_MpuBoards_MpuBoard_HttpsRedirect_ChastenRedirect) GetRedirectNumber() uint32 {
	if x != nil {
		return x.RedirectNumber
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_HttpsRedirect_ChastenRedirect) GetRedirectPeriod() uint32 {
	if x != nil {
		return x.RedirectPeriod
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_HttpsRedirect_ChastenRedirect) GetRedirectBlockPeriod() uint32 {
	if x != nil {
		return x.RedirectBlockPeriod
	}
	return 0
}

func (x *Devm_MpuBoards_MpuBoard_HttpsRedirect_ChastenRedirect) GetRedirectBlockRate() uint32 {
	if x != nil {
		return x.RedirectBlockRate
	}
	return 0
}

type Devm_MpuBoards_MpuBoard_PppNet_LoadBalanceIdentifyPppoe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LoadBalanceEnable bool `protobuf:"varint,1,opt,name=load_balance_enable,json=load-balance-enable,proto3" json:"load_balance_enable,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_PppNet_LoadBalanceIdentifyPppoe) Reset() {
	*x = Devm_MpuBoards_MpuBoard_PppNet_LoadBalanceIdentifyPppoe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_PppNet_LoadBalanceIdentifyPppoe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_PppNet_LoadBalanceIdentifyPppoe) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_PppNet_LoadBalanceIdentifyPppoe) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_PppNet_LoadBalanceIdentifyPppoe.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_PppNet_LoadBalanceIdentifyPppoe) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 23, 0}
}

func (x *Devm_MpuBoards_MpuBoard_PppNet_LoadBalanceIdentifyPppoe) GetLoadBalanceEnable() bool {
	if x != nil {
		return x.LoadBalanceEnable
	}
	return false
}

type Devm_MpuBoards_MpuBoard_Sflow_SlotSampling struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Sflow_SlotSampling) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Sflow_SlotSampling{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[193]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Sflow_SlotSampling) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Sflow_SlotSampling) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_Sflow_SlotSampling) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[193]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Sflow_SlotSampling.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Sflow_SlotSampling) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 24, 0}
}

func (x *Devm_MpuBoards_MpuBoard_Sflow_SlotSampling) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

type Devm_MpuBoards_MpuBoard_Dcb_HeadroomPool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pool uint32 `protobuf:"varint,1,opt,name=pool,proto3" json:"pool,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Dcb_HeadroomPool) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Dcb_HeadroomPool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[194]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Dcb_HeadroomPool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Dcb_HeadroomPool) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_Dcb_HeadroomPool) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[194]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Dcb_HeadroomPool.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Dcb_HeadroomPool) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 25, 0}
}

func (x *Devm_MpuBoards_MpuBoard_Dcb_HeadroomPool) GetPool() uint32 {
	if x != nil {
		return x.Pool
	}
	return 0
}

type Devm_MpuBoards_MpuBoard_Dcb_DeadlockRecoveryBehavior struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Behavior Devm_MpuBoards_MpuBoard_Dcb_DeadlockRecoveryBehavior_Behavior `protobuf:"varint,1,opt,name=behavior,proto3,enum=huawei_devm.Devm_MpuBoards_MpuBoard_Dcb_DeadlockRecoveryBehavior_Behavior" json:"behavior,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Dcb_DeadlockRecoveryBehavior) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Dcb_DeadlockRecoveryBehavior{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[195]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Dcb_DeadlockRecoveryBehavior) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Dcb_DeadlockRecoveryBehavior) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_Dcb_DeadlockRecoveryBehavior) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[195]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Dcb_DeadlockRecoveryBehavior.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Dcb_DeadlockRecoveryBehavior) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 25, 1}
}

func (x *Devm_MpuBoards_MpuBoard_Dcb_DeadlockRecoveryBehavior) GetBehavior() Devm_MpuBoards_MpuBoard_Dcb_DeadlockRecoveryBehavior_Behavior {
	if x != nil {
		return x.Behavior
	}
	return Devm_MpuBoards_MpuBoard_Dcb_DeadlockRecoveryBehavior_Behavior_FORWARDING
}

type Devm_MpuBoards_MpuBoard_Dcb_PfcMappingType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type Devm_MpuBoards_MpuBoard_Dcb_PfcMappingType_Type `protobuf:"varint,1,opt,name=type,proto3,enum=huawei_devm.Devm_MpuBoards_MpuBoard_Dcb_PfcMappingType_Type" json:"type,omitempty"`
}

func (x *Devm_MpuBoards_MpuBoard_Dcb_PfcMappingType) Reset() {
	*x = Devm_MpuBoards_MpuBoard_Dcb_PfcMappingType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[196]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_MpuBoards_MpuBoard_Dcb_PfcMappingType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_MpuBoards_MpuBoard_Dcb_PfcMappingType) ProtoMessage() {}

func (x *Devm_MpuBoards_MpuBoard_Dcb_PfcMappingType) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[196]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_MpuBoards_MpuBoard_Dcb_PfcMappingType.ProtoReflect.Descriptor instead.
func (*Devm_MpuBoards_MpuBoard_Dcb_PfcMappingType) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 5, 0, 25, 2}
}

func (x *Devm_MpuBoards_MpuBoard_Dcb_PfcMappingType) GetType() Devm_MpuBoards_MpuBoard_Dcb_PfcMappingType_Type {
	if x != nil {
		return x.Type
	}
	return Devm_MpuBoards_MpuBoard_Dcb_PfcMappingType_Type_X_8021P
}

type Devm_LpuBoards_LpuBoard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position                  string                                             `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	Index                     uint32                                             `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	BoardType                 string                                             `protobuf:"bytes,3,opt,name=board_type,json=board-type,proto3" json:"board_type,omitempty"`
	SdramSize                 uint32                                             `protobuf:"varint,4,opt,name=sdram_size,json=sdram-size,proto3" json:"sdram_size,omitempty"`
	FlashSize                 uint32                                             `protobuf:"varint,5,opt,name=flash_size,json=flash-size,proto3" json:"flash_size,omitempty"`
	UpTime                    uint32                                             `protobuf:"varint,6,opt,name=up_time,json=up-time,proto3" json:"up_time,omitempty"`
	NpRdramSize               uint32                                             `protobuf:"varint,7,opt,name=np_rdram_size,json=np-rdram-size,proto3" json:"np_rdram_size,omitempty"`
	NpSramSize                uint32                                             `protobuf:"varint,8,opt,name=np_sram_size,json=np-sram-size,proto3" json:"np_sram_size,omitempty"`
	ServiceType               Devm_LpuBoards_LpuBoard_ServiceType                `protobuf:"varint,9,opt,name=service_type,json=service-type,proto3,enum=huawei_devm.Devm_LpuBoards_LpuBoard_ServiceType" json:"service_type,omitempty"`
	NextServiceType           Devm_LpuBoards_LpuBoard_NextServiceType            `protobuf:"varint,10,opt,name=next_service_type,json=next-service-type,proto3,enum=huawei_devm.Devm_LpuBoards_LpuBoard_NextServiceType" json:"next_service_type,omitempty"`
	PicNum                    uint32                                             `protobuf:"varint,11,opt,name=pic_num,json=pic-num,proto3" json:"pic_num,omitempty"`
	SubSlotNum                uint32                                             `protobuf:"varint,12,opt,name=sub_slot_num,json=sub-slot-num,proto3" json:"sub_slot_num,omitempty"`
	Clock_8KPort              string                                             `protobuf:"bytes,13,opt,name=clock_8k_port,json=clock-8k-port,proto3" json:"clock_8k_port,omitempty"`
	CurrentL3Clk              uint32                                             `protobuf:"varint,14,opt,name=current_l3_clk,json=current-l3-clk,proto3" json:"current_l3_clk,omitempty"`
	RegisterTime              string                                             `protobuf:"bytes,15,opt,name=register_time,json=register-time,proto3" json:"register_time,omitempty"`
	IsRegister                bool                                               `protobuf:"varint,16,opt,name=is_register,json=is-register,proto3" json:"is_register,omitempty"`
	Bras                      *Devm_LpuBoards_LpuBoard_Bras                      `protobuf:"bytes,17,opt,name=bras,proto3" json:"bras,omitempty"`
	HttpsRedirect             *Devm_LpuBoards_LpuBoard_HttpsRedirect             `protobuf:"bytes,18,opt,name=https_redirect,json=https-redirect,proto3" json:"https_redirect,omitempty"`
	L2Tp                      *Devm_LpuBoards_LpuBoard_L2Tp                      `protobuf:"bytes,19,opt,name=l2tp,proto3" json:"l2tp,omitempty"`
	BrasPppox                 *Devm_LpuBoards_LpuBoard_BrasPppox                 `protobuf:"bytes,20,opt,name=bras_pppox,json=bras-pppox,proto3" json:"bras_pppox,omitempty"`
	Cpudefend                 *Devm_LpuBoards_LpuBoard_Cpudefend                 `protobuf:"bytes,21,opt,name=cpudefend,proto3" json:"cpudefend,omitempty"`
	CpudefendDevm             *Devm_LpuBoards_LpuBoard_CpudefendDevm             `protobuf:"bytes,22,opt,name=cpudefend_devm,json=cpudefend-devm,proto3" json:"cpudefend_devm,omitempty"`
	Driver                    *Devm_LpuBoards_LpuBoard_Driver                    `protobuf:"bytes,23,opt,name=driver,proto3" json:"driver,omitempty"`
	CmacPadding               *Devm_LpuBoards_LpuBoard_CmacPadding               `protobuf:"bytes,24,opt,name=cmac_padding,json=cmac-padding,proto3" json:"cmac_padding,omitempty"`
	Fim                       *Devm_LpuBoards_LpuBoard_Fim                       `protobuf:"bytes,25,opt,name=fim,proto3" json:"fim,omitempty"`
	MacmtuDiscardStatistics   *Devm_LpuBoards_LpuBoard_MacmtuDiscardStatistics   `protobuf:"bytes,26,opt,name=macmtu_discard_statistics,json=macmtu-discard-statistics,proto3" json:"macmtu_discard_statistics,omitempty"`
	VeMacAddress              *Devm_LpuBoards_LpuBoard_VeMacAddress              `protobuf:"bytes,27,opt,name=ve_mac_address,json=ve-mac-address,proto3" json:"ve_mac_address,omitempty"`
	FlowspecForward           *Devm_LpuBoards_LpuBoard_FlowspecForward           `protobuf:"bytes,28,opt,name=flowspec_forward,json=flowspec-forward,proto3" json:"flowspec_forward,omitempty"`
	ManagementPlaneDefendSlot *Devm_LpuBoards_LpuBoard_ManagementPlaneDefendSlot `protobuf:"bytes,29,opt,name=management_plane_defend_slot,json=management-plane-defend-slot,proto3" json:"management_plane_defend_slot,omitempty"`
	LinkProtocolTransport     *Devm_LpuBoards_LpuBoard_LinkProtocolTransport     `protobuf:"bytes,30,opt,name=link_protocol_transport,json=link-protocol-transport,proto3" json:"link_protocol_transport,omitempty"`
	Loadbalance               *Devm_LpuBoards_LpuBoard_Loadbalance               `protobuf:"bytes,31,opt,name=loadbalance,proto3" json:"loadbalance,omitempty"`
	MacSync                   *Devm_LpuBoards_LpuBoard_MacSync                   `protobuf:"bytes,32,opt,name=mac_sync,json=mac-sync,proto3" json:"mac_sync,omitempty"`
	Mirror                    *Devm_LpuBoards_LpuBoard_Mirror                    `protobuf:"bytes,33,opt,name=mirror,proto3" json:"mirror,omitempty"`
	MplsForward               *Devm_LpuBoards_LpuBoard_MplsForward               `protobuf:"bytes,34,opt,name=mpls_forward,json=mpls-forward,proto3" json:"mpls_forward,omitempty"`
	Netstream                 *Devm_LpuBoards_LpuBoard_Netstream                 `protobuf:"bytes,35,opt,name=netstream,proto3" json:"netstream,omitempty"`
	Pbr                       *Devm_LpuBoards_LpuBoard_Pbr                       `protobuf:"bytes,36,opt,name=pbr,proto3" json:"pbr,omitempty"`
	Qos                       *Devm_LpuBoards_LpuBoard_Qos                       `protobuf:"bytes,37,opt,name=qos,proto3" json:"qos,omitempty"`
	Soc                       *Devm_LpuBoards_LpuBoard_Soc                       `protobuf:"bytes,38,opt,name=soc,proto3" json:"soc,omitempty"`
	UnicastForward            *Devm_LpuBoards_LpuBoard_UnicastForward            `protobuf:"bytes,39,opt,name=unicast_forward,json=unicast-forward,proto3" json:"unicast_forward,omitempty"`
	CfmMacLevelEnableLpu      *Devm_LpuBoards_LpuBoard_CfmMacLevelEnableLpu      `protobuf:"bytes,40,opt,name=cfm_mac_level_enable_lpu,json=cfm-mac-level-enable-lpu,proto3" json:"cfm_mac_level_enable_lpu,omitempty"`
	Dhcpv6Access              *Devm_LpuBoards_LpuBoard_Dhcpv6Access              `protobuf:"bytes,41,opt,name=dhcpv6_access,json=dhcpv6-access,proto3" json:"dhcpv6_access,omitempty"`
	FramePaddingFix           *Devm_LpuBoards_LpuBoard_FramePaddingFix           `protobuf:"bytes,42,opt,name=frame_padding_fix,json=frame-padding-fix,proto3" json:"frame_padding_fix,omitempty"`
	PppNet                    *Devm_LpuBoards_LpuBoard_PppNet                    `protobuf:"bytes,43,opt,name=ppp_net,json=ppp-net,proto3" json:"ppp_net,omitempty"`
	Sflow                     *Devm_LpuBoards_LpuBoard_Sflow                     `protobuf:"bytes,44,opt,name=sflow,proto3" json:"sflow,omitempty"`
	Dcb                       *Devm_LpuBoards_LpuBoard_Dcb                       `protobuf:"bytes,45,opt,name=dcb,proto3" json:"dcb,omitempty"`
	MulticastLeafCfcChecks    *Devm_LpuBoards_LpuBoard_MulticastLeafCfcChecks    `protobuf:"bytes,46,opt,name=multicast_leaf_cfc_checks,json=multicast-leaf-cfc-checks,proto3" json:"multicast_leaf_cfc_checks,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard) Reset() {
	*x = Devm_LpuBoards_LpuBoard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[197]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[197]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0}
}

func (x *Devm_LpuBoards_LpuBoard) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *Devm_LpuBoards_LpuBoard) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard) GetBoardType() string {
	if x != nil {
		return x.BoardType
	}
	return ""
}

func (x *Devm_LpuBoards_LpuBoard) GetSdramSize() uint32 {
	if x != nil {
		return x.SdramSize
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard) GetFlashSize() uint32 {
	if x != nil {
		return x.FlashSize
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard) GetUpTime() uint32 {
	if x != nil {
		return x.UpTime
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard) GetNpRdramSize() uint32 {
	if x != nil {
		return x.NpRdramSize
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard) GetNpSramSize() uint32 {
	if x != nil {
		return x.NpSramSize
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard) GetServiceType() Devm_LpuBoards_LpuBoard_ServiceType {
	if x != nil {
		return x.ServiceType
	}
	return Devm_LpuBoards_LpuBoard_ServiceType_LPU
}

func (x *Devm_LpuBoards_LpuBoard) GetNextServiceType() Devm_LpuBoards_LpuBoard_NextServiceType {
	if x != nil {
		return x.NextServiceType
	}
	return Devm_LpuBoards_LpuBoard_NextServiceType_LPU
}

func (x *Devm_LpuBoards_LpuBoard) GetPicNum() uint32 {
	if x != nil {
		return x.PicNum
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard) GetSubSlotNum() uint32 {
	if x != nil {
		return x.SubSlotNum
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard) GetClock_8KPort() string {
	if x != nil {
		return x.Clock_8KPort
	}
	return ""
}

func (x *Devm_LpuBoards_LpuBoard) GetCurrentL3Clk() uint32 {
	if x != nil {
		return x.CurrentL3Clk
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard) GetRegisterTime() string {
	if x != nil {
		return x.RegisterTime
	}
	return ""
}

func (x *Devm_LpuBoards_LpuBoard) GetIsRegister() bool {
	if x != nil {
		return x.IsRegister
	}
	return false
}

func (x *Devm_LpuBoards_LpuBoard) GetBras() *Devm_LpuBoards_LpuBoard_Bras {
	if x != nil {
		return x.Bras
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard) GetHttpsRedirect() *Devm_LpuBoards_LpuBoard_HttpsRedirect {
	if x != nil {
		return x.HttpsRedirect
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard) GetL2Tp() *Devm_LpuBoards_LpuBoard_L2Tp {
	if x != nil {
		return x.L2Tp
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard) GetBrasPppox() *Devm_LpuBoards_LpuBoard_BrasPppox {
	if x != nil {
		return x.BrasPppox
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard) GetCpudefend() *Devm_LpuBoards_LpuBoard_Cpudefend {
	if x != nil {
		return x.Cpudefend
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard) GetCpudefendDevm() *Devm_LpuBoards_LpuBoard_CpudefendDevm {
	if x != nil {
		return x.CpudefendDevm
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard) GetDriver() *Devm_LpuBoards_LpuBoard_Driver {
	if x != nil {
		return x.Driver
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard) GetCmacPadding() *Devm_LpuBoards_LpuBoard_CmacPadding {
	if x != nil {
		return x.CmacPadding
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard) GetFim() *Devm_LpuBoards_LpuBoard_Fim {
	if x != nil {
		return x.Fim
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard) GetMacmtuDiscardStatistics() *Devm_LpuBoards_LpuBoard_MacmtuDiscardStatistics {
	if x != nil {
		return x.MacmtuDiscardStatistics
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard) GetVeMacAddress() *Devm_LpuBoards_LpuBoard_VeMacAddress {
	if x != nil {
		return x.VeMacAddress
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard) GetFlowspecForward() *Devm_LpuBoards_LpuBoard_FlowspecForward {
	if x != nil {
		return x.FlowspecForward
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard) GetManagementPlaneDefendSlot() *Devm_LpuBoards_LpuBoard_ManagementPlaneDefendSlot {
	if x != nil {
		return x.ManagementPlaneDefendSlot
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard) GetLinkProtocolTransport() *Devm_LpuBoards_LpuBoard_LinkProtocolTransport {
	if x != nil {
		return x.LinkProtocolTransport
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard) GetLoadbalance() *Devm_LpuBoards_LpuBoard_Loadbalance {
	if x != nil {
		return x.Loadbalance
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard) GetMacSync() *Devm_LpuBoards_LpuBoard_MacSync {
	if x != nil {
		return x.MacSync
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard) GetMirror() *Devm_LpuBoards_LpuBoard_Mirror {
	if x != nil {
		return x.Mirror
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard) GetMplsForward() *Devm_LpuBoards_LpuBoard_MplsForward {
	if x != nil {
		return x.MplsForward
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard) GetNetstream() *Devm_LpuBoards_LpuBoard_Netstream {
	if x != nil {
		return x.Netstream
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard) GetPbr() *Devm_LpuBoards_LpuBoard_Pbr {
	if x != nil {
		return x.Pbr
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard) GetQos() *Devm_LpuBoards_LpuBoard_Qos {
	if x != nil {
		return x.Qos
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard) GetSoc() *Devm_LpuBoards_LpuBoard_Soc {
	if x != nil {
		return x.Soc
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard) GetUnicastForward() *Devm_LpuBoards_LpuBoard_UnicastForward {
	if x != nil {
		return x.UnicastForward
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard) GetCfmMacLevelEnableLpu() *Devm_LpuBoards_LpuBoard_CfmMacLevelEnableLpu {
	if x != nil {
		return x.CfmMacLevelEnableLpu
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard) GetDhcpv6Access() *Devm_LpuBoards_LpuBoard_Dhcpv6Access {
	if x != nil {
		return x.Dhcpv6Access
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard) GetFramePaddingFix() *Devm_LpuBoards_LpuBoard_FramePaddingFix {
	if x != nil {
		return x.FramePaddingFix
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard) GetPppNet() *Devm_LpuBoards_LpuBoard_PppNet {
	if x != nil {
		return x.PppNet
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard) GetSflow() *Devm_LpuBoards_LpuBoard_Sflow {
	if x != nil {
		return x.Sflow
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard) GetDcb() *Devm_LpuBoards_LpuBoard_Dcb {
	if x != nil {
		return x.Dcb
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard) GetMulticastLeafCfcChecks() *Devm_LpuBoards_LpuBoard_MulticastLeafCfcChecks {
	if x != nil {
		return x.MulticastLeafCfcChecks
	}
	return nil
}

type Devm_LpuBoards_LpuBoard_Bras struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowStatisticFrequency *Devm_LpuBoards_LpuBoard_Bras_FlowStatisticFrequency `protobuf:"bytes,1,opt,name=flow_statistic_frequency,json=flow-statistic-frequency,proto3" json:"flow_statistic_frequency,omitempty"`
	Vas                    *Devm_LpuBoards_LpuBoard_Bras_Vas                    `protobuf:"bytes,2,opt,name=vas,proto3" json:"vas,omitempty"`
	Multicast              *Devm_LpuBoards_LpuBoard_Bras_Multicast              `protobuf:"bytes,3,opt,name=multicast,proto3" json:"multicast,omitempty"`
	IpUnrHostRoute         *Devm_LpuBoards_LpuBoard_Bras_IpUnrHostRoute         `protobuf:"bytes,4,opt,name=ip_unr_host_route,json=ip-unr-host-route,proto3" json:"ip_unr_host_route,omitempty"`
	Block                  *Devm_LpuBoards_LpuBoard_Bras_Block                  `protobuf:"bytes,5,opt,name=block,proto3" json:"block,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Bras) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Bras{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[198]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Bras) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Bras) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Bras) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[198]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Bras.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Bras) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 0}
}

func (x *Devm_LpuBoards_LpuBoard_Bras) GetFlowStatisticFrequency() *Devm_LpuBoards_LpuBoard_Bras_FlowStatisticFrequency {
	if x != nil {
		return x.FlowStatisticFrequency
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_Bras) GetVas() *Devm_LpuBoards_LpuBoard_Bras_Vas {
	if x != nil {
		return x.Vas
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_Bras) GetMulticast() *Devm_LpuBoards_LpuBoard_Bras_Multicast {
	if x != nil {
		return x.Multicast
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_Bras) GetIpUnrHostRoute() *Devm_LpuBoards_LpuBoard_Bras_IpUnrHostRoute {
	if x != nil {
		return x.IpUnrHostRoute
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_Bras) GetBlock() *Devm_LpuBoards_LpuBoard_Bras_Block {
	if x != nil {
		return x.Block
	}
	return nil
}

type Devm_LpuBoards_LpuBoard_HttpsRedirect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChastenFlow     *Devm_LpuBoards_LpuBoard_HttpsRedirect_ChastenFlow     `protobuf:"bytes,1,opt,name=chasten_flow,json=chasten-flow,proto3" json:"chasten_flow,omitempty"`
	ChastenRedirect *Devm_LpuBoards_LpuBoard_HttpsRedirect_ChastenRedirect `protobuf:"bytes,2,opt,name=chasten_redirect,json=chasten-redirect,proto3" json:"chasten_redirect,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_HttpsRedirect) Reset() {
	*x = Devm_LpuBoards_LpuBoard_HttpsRedirect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[199]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_HttpsRedirect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_HttpsRedirect) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_HttpsRedirect) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[199]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_HttpsRedirect.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_HttpsRedirect) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 1}
}

func (x *Devm_LpuBoards_LpuBoard_HttpsRedirect) GetChastenFlow() *Devm_LpuBoards_LpuBoard_HttpsRedirect_ChastenFlow {
	if x != nil {
		return x.ChastenFlow
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_HttpsRedirect) GetChastenRedirect() *Devm_LpuBoards_LpuBoard_HttpsRedirect_ChastenRedirect {
	if x != nil {
		return x.ChastenRedirect
	}
	return nil
}

type Devm_LpuBoards_LpuBoard_L2Tp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IcrqLimit   *Devm_LpuBoards_LpuBoard_L2Tp_IcrqLimit   `protobuf:"bytes,1,opt,name=icrq_limit,json=icrq-limit,proto3" json:"icrq_limit,omitempty"`
	ForwardMode *Devm_LpuBoards_LpuBoard_L2Tp_ForwardMode `protobuf:"bytes,2,opt,name=forward_mode,json=forward-mode,proto3" json:"forward_mode,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_L2Tp) Reset() {
	*x = Devm_LpuBoards_LpuBoard_L2Tp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[200]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_L2Tp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_L2Tp) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_L2Tp) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[200]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_L2Tp.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_L2Tp) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 2}
}

func (x *Devm_LpuBoards_LpuBoard_L2Tp) GetIcrqLimit() *Devm_LpuBoards_LpuBoard_L2Tp_IcrqLimit {
	if x != nil {
		return x.IcrqLimit
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_L2Tp) GetForwardMode() *Devm_LpuBoards_LpuBoard_L2Tp_ForwardMode {
	if x != nil {
		return x.ForwardMode
	}
	return nil
}

type Devm_LpuBoards_LpuBoard_BrasPppox struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotAccessLimit          *Devm_LpuBoards_LpuBoard_BrasPppox_SlotAccessLimit          `protobuf:"bytes,1,opt,name=slot_access_limit,json=slot-access-limit,proto3" json:"slot_access_limit,omitempty"`
	AccessIp                 *Devm_LpuBoards_LpuBoard_BrasPppox_AccessIp                 `protobuf:"bytes,2,opt,name=access_ip,json=access-ip,proto3" json:"access_ip,omitempty"`
	AccessIpLimit            *Devm_LpuBoards_LpuBoard_BrasPppox_AccessIpLimit            `protobuf:"bytes,3,opt,name=access_ip_limit,json=access-ip-limit,proto3" json:"access_ip_limit,omitempty"`
	LoadBalanceIdentifyPppoe *Devm_LpuBoards_LpuBoard_BrasPppox_LoadBalanceIdentifyPppoe `protobuf:"bytes,4,opt,name=load_balance_identify_pppoe,json=load-balance-identify-pppoe,proto3" json:"load_balance_identify_pppoe,omitempty"`
	MaxSessions              *Devm_LpuBoards_LpuBoard_BrasPppox_MaxSessions              `protobuf:"bytes,5,opt,name=max_sessions,json=max-sessions,proto3" json:"max_sessions,omitempty"`
	PppoeSlotStatistic       *Devm_LpuBoards_LpuBoard_BrasPppox_PppoeSlotStatistic       `protobuf:"bytes,6,opt,name=pppoe_slot_statistic,json=pppoe-slot-statistic,proto3" json:"pppoe_slot_statistic,omitempty"`
	PppSlotStatistic         *Devm_LpuBoards_LpuBoard_BrasPppox_PppSlotStatistic         `protobuf:"bytes,7,opt,name=ppp_slot_statistic,json=ppp-slot-statistic,proto3" json:"ppp_slot_statistic,omitempty"`
	UrpfDiscardStatistics    *Devm_LpuBoards_LpuBoard_BrasPppox_UrpfDiscardStatistics    `protobuf:"bytes,8,opt,name=urpf_discard_statistics,json=urpf-discard-statistics,proto3" json:"urpf_discard_statistics,omitempty"`
	PppEchoDeployMode        *Devm_LpuBoards_LpuBoard_BrasPppox_PppEchoDeployMode        `protobuf:"bytes,9,opt,name=ppp_echo_deploy_mode,json=ppp-echo-deploy-mode,proto3" json:"ppp_echo_deploy_mode,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox) Reset() {
	*x = Devm_LpuBoards_LpuBoard_BrasPppox{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[201]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_BrasPppox) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[201]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_BrasPppox.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_BrasPppox) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 3}
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox) GetSlotAccessLimit() *Devm_LpuBoards_LpuBoard_BrasPppox_SlotAccessLimit {
	if x != nil {
		return x.SlotAccessLimit
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox) GetAccessIp() *Devm_LpuBoards_LpuBoard_BrasPppox_AccessIp {
	if x != nil {
		return x.AccessIp
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox) GetAccessIpLimit() *Devm_LpuBoards_LpuBoard_BrasPppox_AccessIpLimit {
	if x != nil {
		return x.AccessIpLimit
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox) GetLoadBalanceIdentifyPppoe() *Devm_LpuBoards_LpuBoard_BrasPppox_LoadBalanceIdentifyPppoe {
	if x != nil {
		return x.LoadBalanceIdentifyPppoe
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox) GetMaxSessions() *Devm_LpuBoards_LpuBoard_BrasPppox_MaxSessions {
	if x != nil {
		return x.MaxSessions
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox) GetPppoeSlotStatistic() *Devm_LpuBoards_LpuBoard_BrasPppox_PppoeSlotStatistic {
	if x != nil {
		return x.PppoeSlotStatistic
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox) GetPppSlotStatistic() *Devm_LpuBoards_LpuBoard_BrasPppox_PppSlotStatistic {
	if x != nil {
		return x.PppSlotStatistic
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox) GetUrpfDiscardStatistics() *Devm_LpuBoards_LpuBoard_BrasPppox_UrpfDiscardStatistics {
	if x != nil {
		return x.UrpfDiscardStatistics
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox) GetPppEchoDeployMode() *Devm_LpuBoards_LpuBoard_BrasPppox_PppEchoDeployMode {
	if x != nil {
		return x.PppEchoDeployMode
	}
	return nil
}

type Devm_LpuBoards_LpuBoard_Cpudefend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyId uint32 `protobuf:"varint,1,opt,name=policy_id,json=policy-id,proto3" json:"policy_id,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Cpudefend) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Cpudefend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[202]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Cpudefend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Cpudefend) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Cpudefend) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[202]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Cpudefend.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Cpudefend) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 4}
}

func (x *Devm_LpuBoards_LpuBoard_Cpudefend) GetPolicyId() uint32 {
	if x != nil {
		return x.PolicyId
	}
	return 0
}

type Devm_LpuBoards_LpuBoard_CpudefendDevm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IgnoreHostcarAcl *Devm_LpuBoards_LpuBoard_CpudefendDevm_IgnoreHostcarAcl `protobuf:"bytes,1,opt,name=ignore_hostcar_acl,json=ignore-hostcar-acl,proto3" json:"ignore_hostcar_acl,omitempty"`
	BrasHostCars     *Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars     `protobuf:"bytes,2,opt,name=bras_host_cars,json=bras-host-cars,proto3" json:"bras_host_cars,omitempty"`
	SpuCars          *Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars          `protobuf:"bytes,3,opt,name=spu_cars,json=spu-cars,proto3" json:"spu_cars,omitempty"`
	ArpVlanCar       *Devm_LpuBoards_LpuBoard_CpudefendDevm_ArpVlanCar       `protobuf:"bytes,4,opt,name=arp_vlan_car,json=arp-vlan-car,proto3" json:"arp_vlan_car,omitempty"`
	NdVlanCar        *Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar        `protobuf:"bytes,5,opt,name=nd_vlan_car,json=nd-vlan-car,proto3" json:"nd_vlan_car,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm) Reset() {
	*x = Devm_LpuBoards_LpuBoard_CpudefendDevm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[203]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_CpudefendDevm) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[203]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_CpudefendDevm.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_CpudefendDevm) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 5}
}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm) GetIgnoreHostcarAcl() *Devm_LpuBoards_LpuBoard_CpudefendDevm_IgnoreHostcarAcl {
	if x != nil {
		return x.IgnoreHostcarAcl
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm) GetBrasHostCars() *Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars {
	if x != nil {
		return x.BrasHostCars
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm) GetSpuCars() *Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars {
	if x != nil {
		return x.SpuCars
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm) GetArpVlanCar() *Devm_LpuBoards_LpuBoard_CpudefendDevm_ArpVlanCar {
	if x != nil {
		return x.ArpVlanCar
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm) GetNdVlanCar() *Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar {
	if x != nil {
		return x.NdVlanCar
	}
	return nil
}

type Devm_LpuBoards_LpuBoard_Driver struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	L3Clocks *Devm_LpuBoards_LpuBoard_Driver_L3Clocks `protobuf:"bytes,1,opt,name=l3_clocks,json=l3-clocks,proto3" json:"l3_clocks,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Driver) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Driver{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[204]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Driver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Driver) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Driver) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[204]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Driver.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Driver) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 6}
}

func (x *Devm_LpuBoards_LpuBoard_Driver) GetL3Clocks() *Devm_LpuBoards_LpuBoard_Driver_L3Clocks {
	if x != nil {
		return x.L3Clocks
	}
	return nil
}

type Devm_LpuBoards_LpuBoard_CmacPadding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Padding Devm_LpuBoards_LpuBoard_CmacPadding_Padding `protobuf:"varint,1,opt,name=padding,proto3,enum=huawei_devm.Devm_LpuBoards_LpuBoard_CmacPadding_Padding" json:"padding,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_CmacPadding) Reset() {
	*x = Devm_LpuBoards_LpuBoard_CmacPadding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[205]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_CmacPadding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_CmacPadding) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_CmacPadding) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[205]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_CmacPadding.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_CmacPadding) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 7}
}

func (x *Devm_LpuBoards_LpuBoard_CmacPadding) GetPadding() Devm_LpuBoards_LpuBoard_CmacPadding_Padding {
	if x != nil {
		return x.Padding
	}
	return Devm_LpuBoards_LpuBoard_CmacPadding_Padding_DISABLE
}

type Devm_LpuBoards_LpuBoard_Fim struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ForwardMode    Devm_LpuBoards_LpuBoard_Fim_ForwardMode    `protobuf:"varint,1,opt,name=forward_mode,json=forward-mode,proto3,enum=huawei_devm.Devm_LpuBoards_LpuBoard_Fim_ForwardMode" json:"forward_mode,omitempty"`
	VlanMissEnable Devm_LpuBoards_LpuBoard_Fim_VlanMissEnable `protobuf:"varint,2,opt,name=vlan_miss_enable,json=vlan-miss-enable,proto3,enum=huawei_devm.Devm_LpuBoards_LpuBoard_Fim_VlanMissEnable" json:"vlan_miss_enable,omitempty"`
	ScanPeriod     uint32                                     `protobuf:"varint,3,opt,name=scan_period,json=scan-period,proto3" json:"scan_period,omitempty"`
	CpuThreshold   uint32                                     `protobuf:"varint,4,opt,name=cpu_threshold,json=cpu-threshold,proto3" json:"cpu_threshold,omitempty"`
	CpuDetect      uint32                                     `protobuf:"varint,5,opt,name=cpu_detect,json=cpu-detect,proto3" json:"cpu_detect,omitempty"`
	CpuRestore     uint32                                     `protobuf:"varint,6,opt,name=cpu_restore,json=cpu-restore,proto3" json:"cpu_restore,omitempty"`
	Statistics     uint32                                     `protobuf:"varint,7,opt,name=statistics,proto3" json:"statistics,omitempty"`
	Precision      uint32                                     `protobuf:"varint,8,opt,name=precision,proto3" json:"precision,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Fim) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Fim{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[206]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Fim) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Fim) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Fim) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[206]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Fim.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Fim) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 8}
}

func (x *Devm_LpuBoards_LpuBoard_Fim) GetForwardMode() Devm_LpuBoards_LpuBoard_Fim_ForwardMode {
	if x != nil {
		return x.ForwardMode
	}
	return Devm_LpuBoards_LpuBoard_Fim_ForwardMode_LOOPBACK
}

func (x *Devm_LpuBoards_LpuBoard_Fim) GetVlanMissEnable() Devm_LpuBoards_LpuBoard_Fim_VlanMissEnable {
	if x != nil {
		return x.VlanMissEnable
	}
	return Devm_LpuBoards_LpuBoard_Fim_VlanMissEnable_DISABLE
}

func (x *Devm_LpuBoards_LpuBoard_Fim) GetScanPeriod() uint32 {
	if x != nil {
		return x.ScanPeriod
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_Fim) GetCpuThreshold() uint32 {
	if x != nil {
		return x.CpuThreshold
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_Fim) GetCpuDetect() uint32 {
	if x != nil {
		return x.CpuDetect
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_Fim) GetCpuRestore() uint32 {
	if x != nil {
		return x.CpuRestore
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_Fim) GetStatistics() uint32 {
	if x != nil {
		return x.Statistics
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_Fim) GetPrecision() uint32 {
	if x != nil {
		return x.Precision
	}
	return 0
}

type Devm_LpuBoards_LpuBoard_MacmtuDiscardStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MtuIpv4 uint64 `protobuf:"varint,1,opt,name=mtu_ipv4,json=mtu-ipv4,proto3" json:"mtu_ipv4,omitempty"`
	MtuIpv6 uint64 `protobuf:"varint,2,opt,name=mtu_ipv6,json=mtu-ipv6,proto3" json:"mtu_ipv6,omitempty"`
	MacIpv4 uint64 `protobuf:"varint,3,opt,name=mac_ipv4,json=mac-ipv4,proto3" json:"mac_ipv4,omitempty"`
	MacIpv6 uint64 `protobuf:"varint,4,opt,name=mac_ipv6,json=mac-ipv6,proto3" json:"mac_ipv6,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_MacmtuDiscardStatistics) Reset() {
	*x = Devm_LpuBoards_LpuBoard_MacmtuDiscardStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[207]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_MacmtuDiscardStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_MacmtuDiscardStatistics) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_MacmtuDiscardStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[207]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_MacmtuDiscardStatistics.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_MacmtuDiscardStatistics) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 9}
}

func (x *Devm_LpuBoards_LpuBoard_MacmtuDiscardStatistics) GetMtuIpv4() uint64 {
	if x != nil {
		return x.MtuIpv4
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_MacmtuDiscardStatistics) GetMtuIpv6() uint64 {
	if x != nil {
		return x.MtuIpv6
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_MacmtuDiscardStatistics) GetMacIpv4() uint64 {
	if x != nil {
		return x.MacIpv4
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_MacmtuDiscardStatistics) GetMacIpv6() uint64 {
	if x != nil {
		return x.MacIpv6
	}
	return 0
}

type Devm_LpuBoards_LpuBoard_VeMacAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	L2VeMac     string `protobuf:"bytes,1,opt,name=l2_ve_mac,json=l2-ve-mac,proto3" json:"l2_ve_mac,omitempty"`
	AccessVeMac string `protobuf:"bytes,2,opt,name=access_ve_mac,json=access-ve-mac,proto3" json:"access_ve_mac,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_VeMacAddress) Reset() {
	*x = Devm_LpuBoards_LpuBoard_VeMacAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[208]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_VeMacAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_VeMacAddress) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_VeMacAddress) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[208]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_VeMacAddress.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_VeMacAddress) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 10}
}

func (x *Devm_LpuBoards_LpuBoard_VeMacAddress) GetL2VeMac() string {
	if x != nil {
		return x.L2VeMac
	}
	return ""
}

func (x *Devm_LpuBoards_LpuBoard_VeMacAddress) GetAccessVeMac() string {
	if x != nil {
		return x.AccessVeMac
	}
	return ""
}

type Devm_LpuBoards_LpuBoard_FlowspecForward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ipv6FlowspecEnable *Devm_LpuBoards_LpuBoard_FlowspecForward_Ipv6FlowspecEnable `protobuf:"bytes,1,opt,name=ipv6_flowspec_enable,json=ipv6-flowspec-enable,proto3" json:"ipv6_flowspec_enable,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_FlowspecForward) Reset() {
	*x = Devm_LpuBoards_LpuBoard_FlowspecForward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[209]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_FlowspecForward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_FlowspecForward) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_FlowspecForward) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[209]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_FlowspecForward.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_FlowspecForward) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 11}
}

func (x *Devm_LpuBoards_LpuBoard_FlowspecForward) GetIpv6FlowspecEnable() *Devm_LpuBoards_LpuBoard_FlowspecForward_Ipv6FlowspecEnable {
	if x != nil {
		return x.Ipv6FlowspecEnable
	}
	return nil
}

type Devm_LpuBoards_LpuBoard_ManagementPlaneDefendSlot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotPolicyId uint32 `protobuf:"varint,1,opt,name=slot_policy_id,json=slot-policy-id,proto3" json:"slot_policy_id,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_ManagementPlaneDefendSlot) Reset() {
	*x = Devm_LpuBoards_LpuBoard_ManagementPlaneDefendSlot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[210]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_ManagementPlaneDefendSlot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_ManagementPlaneDefendSlot) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_ManagementPlaneDefendSlot) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[210]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_ManagementPlaneDefendSlot.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_ManagementPlaneDefendSlot) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 12}
}

func (x *Devm_LpuBoards_LpuBoard_ManagementPlaneDefendSlot) GetSlotPolicyId() uint32 {
	if x != nil {
		return x.SlotPolicyId
	}
	return 0
}

type Devm_LpuBoards_LpuBoard_LinkProtocolTransport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lldp Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Lldp `protobuf:"varint,1,opt,name=lldp,proto3,enum=huawei_devm.Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Lldp" json:"lldp,omitempty"`
	Lacp Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Lacp `protobuf:"varint,2,opt,name=lacp,proto3,enum=huawei_devm.Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Lacp" json:"lacp,omitempty"`
	Oam  Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Oam  `protobuf:"varint,3,opt,name=oam,proto3,enum=huawei_devm.Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Oam" json:"oam,omitempty"`
	Esmc Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Esmc `protobuf:"varint,4,opt,name=esmc,proto3,enum=huawei_devm.Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Esmc" json:"esmc,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_LinkProtocolTransport) Reset() {
	*x = Devm_LpuBoards_LpuBoard_LinkProtocolTransport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[211]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_LinkProtocolTransport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_LinkProtocolTransport) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_LinkProtocolTransport) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[211]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_LinkProtocolTransport.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_LinkProtocolTransport) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 13}
}

func (x *Devm_LpuBoards_LpuBoard_LinkProtocolTransport) GetLldp() Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Lldp {
	if x != nil {
		return x.Lldp
	}
	return Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Lldp_DISABLE
}

func (x *Devm_LpuBoards_LpuBoard_LinkProtocolTransport) GetLacp() Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Lacp {
	if x != nil {
		return x.Lacp
	}
	return Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Lacp_DISABLE
}

func (x *Devm_LpuBoards_LpuBoard_LinkProtocolTransport) GetOam() Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Oam {
	if x != nil {
		return x.Oam
	}
	return Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Oam_DISABLE
}

func (x *Devm_LpuBoards_LpuBoard_LinkProtocolTransport) GetEsmc() Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Esmc {
	if x != nil {
		return x.Esmc
	}
	return Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Esmc_DISABLE
}

type Devm_LpuBoards_LpuBoard_Loadbalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DynamicAdjust  *Devm_LpuBoards_LpuBoard_Loadbalance_DynamicAdjust  `protobuf:"bytes,1,opt,name=dynamic_adjust,json=dynamic-adjust,proto3" json:"dynamic_adjust,omitempty"`
	HashArithmetic *Devm_LpuBoards_LpuBoard_Loadbalance_HashArithmetic `protobuf:"bytes,2,opt,name=hash_arithmetic,json=hash-arithmetic,proto3" json:"hash_arithmetic,omitempty"`
	HashFields     *Devm_LpuBoards_LpuBoard_Loadbalance_HashFields     `protobuf:"bytes,3,opt,name=hash_fields,json=hash-fields,proto3" json:"hash_fields,omitempty"`
	HashSeed       *Devm_LpuBoards_LpuBoard_Loadbalance_HashSeed       `protobuf:"bytes,4,opt,name=hash_seed,json=hash-seed,proto3" json:"hash_seed,omitempty"`
	HashMultipe    *Devm_LpuBoards_LpuBoard_Loadbalance_HashMultipe    `protobuf:"bytes,5,opt,name=hash_multipe,json=hash-multipe,proto3" json:"hash_multipe,omitempty"`
	Hashs          *Devm_LpuBoards_LpuBoard_Loadbalance_Hashs          `protobuf:"bytes,6,opt,name=hashs,proto3" json:"hashs,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Loadbalance) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Loadbalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[212]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Loadbalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Loadbalance) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Loadbalance) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[212]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Loadbalance.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Loadbalance) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 14}
}

func (x *Devm_LpuBoards_LpuBoard_Loadbalance) GetDynamicAdjust() *Devm_LpuBoards_LpuBoard_Loadbalance_DynamicAdjust {
	if x != nil {
		return x.DynamicAdjust
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_Loadbalance) GetHashArithmetic() *Devm_LpuBoards_LpuBoard_Loadbalance_HashArithmetic {
	if x != nil {
		return x.HashArithmetic
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_Loadbalance) GetHashFields() *Devm_LpuBoards_LpuBoard_Loadbalance_HashFields {
	if x != nil {
		return x.HashFields
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_Loadbalance) GetHashSeed() *Devm_LpuBoards_LpuBoard_Loadbalance_HashSeed {
	if x != nil {
		return x.HashSeed
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_Loadbalance) GetHashMultipe() *Devm_LpuBoards_LpuBoard_Loadbalance_HashMultipe {
	if x != nil {
		return x.HashMultipe
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_Loadbalance) GetHashs() *Devm_LpuBoards_LpuBoard_Loadbalance_Hashs {
	if x != nil {
		return x.Hashs
	}
	return nil
}

type Devm_LpuBoards_LpuBoard_MacSync struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_MacSync) Reset() {
	*x = Devm_LpuBoards_LpuBoard_MacSync{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[213]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_MacSync) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_MacSync) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_MacSync) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[213]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_MacSync.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_MacSync) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 15}
}

func (x *Devm_LpuBoards_LpuBoard_MacSync) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

type Devm_LpuBoards_LpuBoard_Mirror struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotObserve      *Devm_LpuBoards_LpuBoard_Mirror_SlotObserve      `protobuf:"bytes,1,opt,name=slot_observe,json=slot-observe,proto3" json:"slot_observe,omitempty"`
	RateLimitPercent *Devm_LpuBoards_LpuBoard_Mirror_RateLimitPercent `protobuf:"bytes,2,opt,name=rate_limit_percent,json=rate-limit-percent,proto3" json:"rate_limit_percent,omitempty"`
	ObserveFilters   *Devm_LpuBoards_LpuBoard_Mirror_ObserveFilters   `protobuf:"bytes,3,opt,name=observe_filters,json=observe-filters,proto3" json:"observe_filters,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Mirror) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Mirror{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[214]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Mirror) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Mirror) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Mirror) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[214]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Mirror.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Mirror) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 16}
}

func (x *Devm_LpuBoards_LpuBoard_Mirror) GetSlotObserve() *Devm_LpuBoards_LpuBoard_Mirror_SlotObserve {
	if x != nil {
		return x.SlotObserve
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_Mirror) GetRateLimitPercent() *Devm_LpuBoards_LpuBoard_Mirror_RateLimitPercent {
	if x != nil {
		return x.RateLimitPercent
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_Mirror) GetObserveFilters() *Devm_LpuBoards_LpuBoard_Mirror_ObserveFilters {
	if x != nil {
		return x.ObserveFilters
	}
	return nil
}

type Devm_LpuBoards_LpuBoard_MplsForward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MplsHashMode     *Devm_LpuBoards_LpuBoard_MplsForward_MplsHashMode     `protobuf:"bytes,1,opt,name=mpls_hash_mode,json=mpls-hash-mode,proto3" json:"mpls_hash_mode,omitempty"`
	Mplsfrags        *Devm_LpuBoards_LpuBoard_MplsForward_Mplsfrags        `protobuf:"bytes,2,opt,name=mplsfrags,proto3" json:"mplsfrags,omitempty"`
	MplsLoadCtrwords *Devm_LpuBoards_LpuBoard_MplsForward_MplsLoadCtrwords `protobuf:"bytes,3,opt,name=mpls_load_ctrwords,json=mpls-load-ctrwords,proto3" json:"mpls_load_ctrwords,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_MplsForward) Reset() {
	*x = Devm_LpuBoards_LpuBoard_MplsForward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[215]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_MplsForward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_MplsForward) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_MplsForward) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[215]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_MplsForward.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_MplsForward) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 17}
}

func (x *Devm_LpuBoards_LpuBoard_MplsForward) GetMplsHashMode() *Devm_LpuBoards_LpuBoard_MplsForward_MplsHashMode {
	if x != nil {
		return x.MplsHashMode
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_MplsForward) GetMplsfrags() *Devm_LpuBoards_LpuBoard_MplsForward_Mplsfrags {
	if x != nil {
		return x.Mplsfrags
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_MplsForward) GetMplsLoadCtrwords() *Devm_LpuBoards_LpuBoard_MplsForward_MplsLoadCtrwords {
	if x != nil {
		return x.MplsLoadCtrwords
	}
	return nil
}

type Devm_LpuBoards_LpuBoard_Netstream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SamplerModes *Devm_LpuBoards_LpuBoard_Netstream_SamplerModes `protobuf:"bytes,1,opt,name=sampler_modes,json=sampler-modes,proto3" json:"sampler_modes,omitempty"`
	SequenceMode *Devm_LpuBoards_LpuBoard_Netstream_SequenceMode `protobuf:"bytes,2,opt,name=sequence_mode,json=sequence-mode,proto3" json:"sequence_mode,omitempty"`
	ExportHosts  *Devm_LpuBoards_LpuBoard_Netstream_ExportHosts  `protobuf:"bytes,3,opt,name=export_hosts,json=export-hosts,proto3" json:"export_hosts,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Netstream) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Netstream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[216]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Netstream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Netstream) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Netstream) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[216]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Netstream.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Netstream) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 18}
}

func (x *Devm_LpuBoards_LpuBoard_Netstream) GetSamplerModes() *Devm_LpuBoards_LpuBoard_Netstream_SamplerModes {
	if x != nil {
		return x.SamplerModes
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_Netstream) GetSequenceMode() *Devm_LpuBoards_LpuBoard_Netstream_SequenceMode {
	if x != nil {
		return x.SequenceMode
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_Netstream) GetExportHosts() *Devm_LpuBoards_LpuBoard_Netstream_ExportHosts {
	if x != nil {
		return x.ExportHosts
	}
	return nil
}

type Devm_LpuBoards_LpuBoard_Pbr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoutingFilters *Devm_LpuBoards_LpuBoard_Pbr_RoutingFilters `protobuf:"bytes,1,opt,name=routing_filters,json=routing-filters,proto3" json:"routing_filters,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Pbr) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Pbr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[217]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Pbr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Pbr) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Pbr) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[217]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Pbr.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Pbr) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 19}
}

func (x *Devm_LpuBoards_LpuBoard_Pbr) GetRoutingFilters() *Devm_LpuBoards_LpuBoard_Pbr_RoutingFilters {
	if x != nil {
		return x.RoutingFilters
	}
	return nil
}

type Devm_LpuBoards_LpuBoard_Qos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrafficPolicyMatchs             *Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchs             `protobuf:"bytes,1,opt,name=traffic_policy_matchs,json=traffic-policy-matchs,proto3" json:"traffic_policy_matchs,omitempty"`
	PqSchedulePrioritys             *Devm_LpuBoards_LpuBoard_Qos_PqSchedulePrioritys             `protobuf:"bytes,2,opt,name=pq_schedule_prioritys,json=pq-schedule-prioritys,proto3" json:"pq_schedule_prioritys,omitempty"`
	PqSchedulePriorityOnCards       *Devm_LpuBoards_LpuBoard_Qos_PqSchedulePriorityOnCards       `protobuf:"bytes,3,opt,name=pq_schedule_priority_on_cards,json=pq-schedule-priority-on-cards,proto3" json:"pq_schedule_priority_on_cards,omitempty"`
	MulticastPortQueues             *Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues             `protobuf:"bytes,4,opt,name=multicast_port_queues,json=multicast-port-queues,proto3" json:"multicast_port_queues,omitempty"`
	MulticastPortShaping            *Devm_LpuBoards_LpuBoard_Qos_MulticastPortShaping            `protobuf:"bytes,5,opt,name=multicast_port_shaping,json=multicast-port-shaping,proto3" json:"multicast_port_shaping,omitempty"`
	UserQueuePirPrecision           *Devm_LpuBoards_LpuBoard_Qos_UserQueuePirPrecision           `protobuf:"bytes,6,opt,name=user_queue_pir_precision,json=user-queue-pir-precision,proto3" json:"user_queue_pir_precision,omitempty"`
	ExpPhbDisable                   *Devm_LpuBoards_LpuBoard_Qos_ExpPhbDisable                   `protobuf:"bytes,7,opt,name=exp_phb_disable,json=exp-phb-disable,proto3" json:"exp_phb_disable,omitempty"`
	PacketBlockThresholds           *Devm_LpuBoards_LpuBoard_Qos_PacketBlockThresholds           `protobuf:"bytes,8,opt,name=packet_block_thresholds,json=packet-block-thresholds,proto3" json:"packet_block_thresholds,omitempty"`
	PacketBlockThresholdAll         *Devm_LpuBoards_LpuBoard_Qos_PacketBlockThresholdAll         `protobuf:"bytes,9,opt,name=packet_block_threshold_all,json=packet-block-threshold-all,proto3" json:"packet_block_threshold_all,omitempty"`
	ChannelAlarms                   *Devm_LpuBoards_LpuBoard_Qos_ChannelAlarms                   `protobuf:"bytes,10,opt,name=channel_alarms,json=channel-alarms,proto3" json:"channel_alarms,omitempty"`
	ChannelProfilePrecision         *Devm_LpuBoards_LpuBoard_Qos_ChannelProfilePrecision         `protobuf:"bytes,11,opt,name=channel_profile_precision,json=channel-profile-precision,proto3" json:"channel_profile_precision,omitempty"`
	ChannelProfileApply             *Devm_LpuBoards_LpuBoard_Qos_ChannelProfileApply             `protobuf:"bytes,12,opt,name=channel_profile_apply,json=channel-profile-apply,proto3" json:"channel_profile_apply,omitempty"`
	FabricQueueStatisticEnable      *Devm_LpuBoards_LpuBoard_Qos_FabricQueueStatisticEnable      `protobuf:"bytes,13,opt,name=fabric_queue_statistic_enable,json=fabric-queue-statistic-enable,proto3" json:"fabric_queue_statistic_enable,omitempty"`
	OverRideAdjustNumber            *Devm_LpuBoards_LpuBoard_Qos_OverRideAdjustNumber            `protobuf:"bytes,14,opt,name=over_ride_adjust_number,json=over-ride-adjust-number,proto3" json:"over_ride_adjust_number,omitempty"`
	OverRideDegradeCycle            *Devm_LpuBoards_LpuBoard_Qos_OverRideDegradeCycle            `protobuf:"bytes,15,opt,name=over_ride_degrade_cycle,json=over-ride-degrade-cycle,proto3" json:"over_ride_degrade_cycle,omitempty"`
	OverRideUpgradeCycle            *Devm_LpuBoards_LpuBoard_Qos_OverRideUpgradeCycle            `protobuf:"bytes,16,opt,name=over_ride_upgrade_cycle,json=over-ride-upgrade-cycle,proto3" json:"over_ride_upgrade_cycle,omitempty"`
	OverRideSwitch                  *Devm_LpuBoards_LpuBoard_Qos_OverRideSwitch                  `protobuf:"bytes,17,opt,name=over_ride_switch,json=over-ride-switch,proto3" json:"over_ride_switch,omitempty"`
	OverRideInboundThresholdAdjust  *Devm_LpuBoards_LpuBoard_Qos_OverRideInboundThresholdAdjust  `protobuf:"bytes,18,opt,name=over_ride_inbound_threshold_adjust,json=over-ride-inbound-threshold-adjust,proto3" json:"over_ride_inbound_threshold_adjust,omitempty"`
	OverRideOutboundThresholdAdjust *Devm_LpuBoards_LpuBoard_Qos_OverRideOutboundThresholdAdjust `protobuf:"bytes,19,opt,name=over_ride_outbound_threshold_adjust,json=over-ride-outbound-threshold-adjust,proto3" json:"over_ride_outbound_threshold_adjust,omitempty"`
	OverRideMonitorNumber           *Devm_LpuBoards_LpuBoard_Qos_OverRideMonitorNumber           `protobuf:"bytes,20,opt,name=over_ride_monitor_number,json=over-ride-monitor-number,proto3" json:"over_ride_monitor_number,omitempty"`
	OverRideEnableSwitch            *Devm_LpuBoards_LpuBoard_Qos_OverRideEnableSwitch            `protobuf:"bytes,21,opt,name=over_ride_enable_switch,json=over-ride-enable-switch,proto3" json:"over_ride_enable_switch,omitempty"`
	MulticastShaping                *Devm_LpuBoards_LpuBoard_Qos_MulticastShaping                `protobuf:"bytes,22,opt,name=multicast_shaping,json=multicast-shaping,proto3" json:"multicast_shaping,omitempty"`
	MulticastShapingServiceTemplate *Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate `protobuf:"bytes,23,opt,name=multicast_shaping_service_template,json=multicast-shaping-service-template,proto3" json:"multicast_shaping_service_template,omitempty"`
	PortQueueAlarms                 *Devm_LpuBoards_LpuBoard_Qos_PortQueueAlarms                 `protobuf:"bytes,24,opt,name=port_queue_alarms,json=port-queue-alarms,proto3" json:"port_queue_alarms,omitempty"`
	UserQueueRecoveryDisable        *Devm_LpuBoards_LpuBoard_Qos_UserQueueRecoveryDisable        `protobuf:"bytes,25,opt,name=user_queue_recovery_disable,json=user-queue-recovery-disable,proto3" json:"user_queue_recovery_disable,omitempty"`
	MulticastShapers                *Devm_LpuBoards_LpuBoard_Qos_MulticastShapers                `protobuf:"bytes,26,opt,name=multicast_shapers,json=multicast-shapers,proto3" json:"multicast_shapers,omitempty"`
	AccessUserBoardScheduleEnable   *Devm_LpuBoards_LpuBoard_Qos_AccessUserBoardScheduleEnable   `protobuf:"bytes,27,opt,name=access_user_board_schedule_enable,json=access-user-board-schedule-enable,proto3" json:"access_user_board_schedule_enable,omitempty"`
	ConvergentPrecedenceHighs       *Devm_LpuBoards_LpuBoard_Qos_ConvergentPrecedenceHighs       `protobuf:"bytes,28,opt,name=convergent_precedence_highs,json=convergent-precedence-highs,proto3" json:"convergent_precedence_highs,omitempty"`
	QueueDiscardAlarms              *Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms              `protobuf:"bytes,29,opt,name=queue_discard_alarms,json=queue-discard-alarms,proto3" json:"queue_discard_alarms,omitempty"`
	UserQueueBurst                  *Devm_LpuBoards_LpuBoard_Qos_UserQueueBurst                  `protobuf:"bytes,30,opt,name=user_queue_burst,json=user-queue-burst,proto3" json:"user_queue_burst,omitempty"`
	BurstSizes                      *Devm_LpuBoards_LpuBoard_Qos_BurstSizes                      `protobuf:"bytes,31,opt,name=burst_sizes,json=burst-sizes,proto3" json:"burst_sizes,omitempty"`
	GlobalBufferShareThresholds     *Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareThresholds     `protobuf:"bytes,32,opt,name=global_buffer_share_thresholds,json=global-buffer-share-thresholds,proto3" json:"global_buffer_share_thresholds,omitempty"`
	GlobalBufferShareQueues         *Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues         `protobuf:"bytes,33,opt,name=global_buffer_share_queues,json=global-buffer-share-queues,proto3" json:"global_buffer_share_queues,omitempty"`
	FlowQueueBackpressureOff        *Devm_LpuBoards_LpuBoard_Qos_FlowQueueBackpressureOff        `protobuf:"bytes,34,opt,name=flow_queue_backpressure_off,json=flow-queue-backpressure-off,proto3" json:"flow_queue_backpressure_off,omitempty"`
	TrafficPolicyMatchType          *Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchType          `protobuf:"bytes,35,opt,name=traffic_policy_match_type,json=traffic-policy-match-type,proto3" json:"traffic_policy_match_type,omitempty"`
	UserQueueResource_4Cos          *Devm_LpuBoards_LpuBoard_Qos_UserQueueResource4Cos           `protobuf:"bytes,36,opt,name=user_queue_resource_4cos,json=user-queue-resource-4cos,proto3" json:"user_queue_resource_4cos,omitempty"`
	UserQueueResource_8CosEnhances  *Devm_LpuBoards_LpuBoard_Qos_UserQueueResource8CosEnhances   `protobuf:"bytes,37,opt,name=user_queue_resource_8cos_enhances,json=user-queue-resource-8cos-enhances,proto3" json:"user_queue_resource_8cos_enhances,omitempty"`
	ChannelAutoAdjustSwitch         *Devm_LpuBoards_LpuBoard_Qos_ChannelAutoAdjustSwitch         `protobuf:"bytes,38,opt,name=channel_auto_adjust_switch,json=channel-auto-adjust-switch,proto3" json:"channel_auto_adjust_switch,omitempty"`
	OverRideEnableInboundSwitch     *Devm_LpuBoards_LpuBoard_Qos_OverRideEnableInboundSwitch     `protobuf:"bytes,39,opt,name=over_ride_enable_inbound_switch,json=over-ride-enable-inbound-switch,proto3" json:"over_ride_enable_inbound_switch,omitempty"`
	OverRideInitialGrade            *Devm_LpuBoards_LpuBoard_Qos_OverRideInitialGrade            `protobuf:"bytes,40,opt,name=over_ride_initial_grade,json=over-ride-initial-grade,proto3" json:"over_ride_initial_grade,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Qos) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Qos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[218]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Qos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Qos) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Qos) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[218]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Qos) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20}
}

func (x *Devm_LpuBoards_LpuBoard_Qos) GetTrafficPolicyMatchs() *Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchs {
	if x != nil {
		return x.TrafficPolicyMatchs
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_Qos) GetPqSchedulePrioritys() *Devm_LpuBoards_LpuBoard_Qos_PqSchedulePrioritys {
	if x != nil {
		return x.PqSchedulePrioritys
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_Qos) GetPqSchedulePriorityOnCards() *Devm_LpuBoards_LpuBoard_Qos_PqSchedulePriorityOnCards {
	if x != nil {
		return x.PqSchedulePriorityOnCards
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_Qos) GetMulticastPortQueues() *Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues {
	if x != nil {
		return x.MulticastPortQueues
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_Qos) GetMulticastPortShaping() *Devm_LpuBoards_LpuBoard_Qos_MulticastPortShaping {
	if x != nil {
		return x.MulticastPortShaping
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_Qos) GetUserQueuePirPrecision() *Devm_LpuBoards_LpuBoard_Qos_UserQueuePirPrecision {
	if x != nil {
		return x.UserQueuePirPrecision
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_Qos) GetExpPhbDisable() *Devm_LpuBoards_LpuBoard_Qos_ExpPhbDisable {
	if x != nil {
		return x.ExpPhbDisable
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_Qos) GetPacketBlockThresholds() *Devm_LpuBoards_LpuBoard_Qos_PacketBlockThresholds {
	if x != nil {
		return x.PacketBlockThresholds
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_Qos) GetPacketBlockThresholdAll() *Devm_LpuBoards_LpuBoard_Qos_PacketBlockThresholdAll {
	if x != nil {
		return x.PacketBlockThresholdAll
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_Qos) GetChannelAlarms() *Devm_LpuBoards_LpuBoard_Qos_ChannelAlarms {
	if x != nil {
		return x.ChannelAlarms
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_Qos) GetChannelProfilePrecision() *Devm_LpuBoards_LpuBoard_Qos_ChannelProfilePrecision {
	if x != nil {
		return x.ChannelProfilePrecision
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_Qos) GetChannelProfileApply() *Devm_LpuBoards_LpuBoard_Qos_ChannelProfileApply {
	if x != nil {
		return x.ChannelProfileApply
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_Qos) GetFabricQueueStatisticEnable() *Devm_LpuBoards_LpuBoard_Qos_FabricQueueStatisticEnable {
	if x != nil {
		return x.FabricQueueStatisticEnable
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_Qos) GetOverRideAdjustNumber() *Devm_LpuBoards_LpuBoard_Qos_OverRideAdjustNumber {
	if x != nil {
		return x.OverRideAdjustNumber
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_Qos) GetOverRideDegradeCycle() *Devm_LpuBoards_LpuBoard_Qos_OverRideDegradeCycle {
	if x != nil {
		return x.OverRideDegradeCycle
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_Qos) GetOverRideUpgradeCycle() *Devm_LpuBoards_LpuBoard_Qos_OverRideUpgradeCycle {
	if x != nil {
		return x.OverRideUpgradeCycle
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_Qos) GetOverRideSwitch() *Devm_LpuBoards_LpuBoard_Qos_OverRideSwitch {
	if x != nil {
		return x.OverRideSwitch
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_Qos) GetOverRideInboundThresholdAdjust() *Devm_LpuBoards_LpuBoard_Qos_OverRideInboundThresholdAdjust {
	if x != nil {
		return x.OverRideInboundThresholdAdjust
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_Qos) GetOverRideOutboundThresholdAdjust() *Devm_LpuBoards_LpuBoard_Qos_OverRideOutboundThresholdAdjust {
	if x != nil {
		return x.OverRideOutboundThresholdAdjust
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_Qos) GetOverRideMonitorNumber() *Devm_LpuBoards_LpuBoard_Qos_OverRideMonitorNumber {
	if x != nil {
		return x.OverRideMonitorNumber
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_Qos) GetOverRideEnableSwitch() *Devm_LpuBoards_LpuBoard_Qos_OverRideEnableSwitch {
	if x != nil {
		return x.OverRideEnableSwitch
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_Qos) GetMulticastShaping() *Devm_LpuBoards_LpuBoard_Qos_MulticastShaping {
	if x != nil {
		return x.MulticastShaping
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_Qos) GetMulticastShapingServiceTemplate() *Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate {
	if x != nil {
		return x.MulticastShapingServiceTemplate
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_Qos) GetPortQueueAlarms() *Devm_LpuBoards_LpuBoard_Qos_PortQueueAlarms {
	if x != nil {
		return x.PortQueueAlarms
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_Qos) GetUserQueueRecoveryDisable() *Devm_LpuBoards_LpuBoard_Qos_UserQueueRecoveryDisable {
	if x != nil {
		return x.UserQueueRecoveryDisable
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_Qos) GetMulticastShapers() *Devm_LpuBoards_LpuBoard_Qos_MulticastShapers {
	if x != nil {
		return x.MulticastShapers
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_Qos) GetAccessUserBoardScheduleEnable() *Devm_LpuBoards_LpuBoard_Qos_AccessUserBoardScheduleEnable {
	if x != nil {
		return x.AccessUserBoardScheduleEnable
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_Qos) GetConvergentPrecedenceHighs() *Devm_LpuBoards_LpuBoard_Qos_ConvergentPrecedenceHighs {
	if x != nil {
		return x.ConvergentPrecedenceHighs
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_Qos) GetQueueDiscardAlarms() *Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms {
	if x != nil {
		return x.QueueDiscardAlarms
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_Qos) GetUserQueueBurst() *Devm_LpuBoards_LpuBoard_Qos_UserQueueBurst {
	if x != nil {
		return x.UserQueueBurst
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_Qos) GetBurstSizes() *Devm_LpuBoards_LpuBoard_Qos_BurstSizes {
	if x != nil {
		return x.BurstSizes
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_Qos) GetGlobalBufferShareThresholds() *Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareThresholds {
	if x != nil {
		return x.GlobalBufferShareThresholds
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_Qos) GetGlobalBufferShareQueues() *Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues {
	if x != nil {
		return x.GlobalBufferShareQueues
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_Qos) GetFlowQueueBackpressureOff() *Devm_LpuBoards_LpuBoard_Qos_FlowQueueBackpressureOff {
	if x != nil {
		return x.FlowQueueBackpressureOff
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_Qos) GetTrafficPolicyMatchType() *Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchType {
	if x != nil {
		return x.TrafficPolicyMatchType
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_Qos) GetUserQueueResource_4Cos() *Devm_LpuBoards_LpuBoard_Qos_UserQueueResource4Cos {
	if x != nil {
		return x.UserQueueResource_4Cos
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_Qos) GetUserQueueResource_8CosEnhances() *Devm_LpuBoards_LpuBoard_Qos_UserQueueResource8CosEnhances {
	if x != nil {
		return x.UserQueueResource_8CosEnhances
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_Qos) GetChannelAutoAdjustSwitch() *Devm_LpuBoards_LpuBoard_Qos_ChannelAutoAdjustSwitch {
	if x != nil {
		return x.ChannelAutoAdjustSwitch
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_Qos) GetOverRideEnableInboundSwitch() *Devm_LpuBoards_LpuBoard_Qos_OverRideEnableInboundSwitch {
	if x != nil {
		return x.OverRideEnableInboundSwitch
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_Qos) GetOverRideInitialGrade() *Devm_LpuBoards_LpuBoard_Qos_OverRideInitialGrade {
	if x != nil {
		return x.OverRideInitialGrade
	}
	return nil
}

type Devm_LpuBoards_LpuBoard_Soc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	L2LoopDetect *Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect `protobuf:"bytes,1,opt,name=l2_loop_detect,json=l2-loop-detect,proto3" json:"l2_loop_detect,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Soc) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Soc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[219]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Soc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Soc) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Soc) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[219]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Soc.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Soc) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 21}
}

func (x *Devm_LpuBoards_LpuBoard_Soc) GetL2LoopDetect() *Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect {
	if x != nil {
		return x.L2LoopDetect
	}
	return nil
}

type Devm_LpuBoards_LpuBoard_UnicastForward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ipv4Uc         *Devm_LpuBoards_LpuBoard_UnicastForward_Ipv4Uc         `protobuf:"bytes,1,opt,name=ipv4_uc,json=ipv4-uc,proto3" json:"ipv4_uc,omitempty"`
	ArpFastReply   *Devm_LpuBoards_LpuBoard_UnicastForward_ArpFastReply   `protobuf:"bytes,2,opt,name=arp_fast_reply,json=arp-fast-reply,proto3" json:"arp_fast_reply,omitempty"`
	GreTtlMode     *Devm_LpuBoards_LpuBoard_UnicastForward_GreTtlMode     `protobuf:"bytes,3,opt,name=gre_ttl_mode,json=gre-ttl-mode,proto3" json:"gre_ttl_mode,omitempty"`
	L3LcsCapacitys *Devm_LpuBoards_LpuBoard_UnicastForward_L3LcsCapacitys `protobuf:"bytes,4,opt,name=l3_lcs_capacitys,json=l3-lcs-capacitys,proto3" json:"l3_lcs_capacitys,omitempty"`
	NdFastReply    *Devm_LpuBoards_LpuBoard_UnicastForward_NdFastReply    `protobuf:"bytes,5,opt,name=nd_fast_reply,json=nd-fast-reply,proto3" json:"nd_fast_reply,omitempty"`
	VxlanRdrTrunks *Devm_LpuBoards_LpuBoard_UnicastForward_VxlanRdrTrunks `protobuf:"bytes,6,opt,name=vxlan_rdr_trunks,json=vxlan-rdr-trunks,proto3" json:"vxlan_rdr_trunks,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_UnicastForward) Reset() {
	*x = Devm_LpuBoards_LpuBoard_UnicastForward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[220]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_UnicastForward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_UnicastForward) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_UnicastForward) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[220]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_UnicastForward.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_UnicastForward) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 22}
}

func (x *Devm_LpuBoards_LpuBoard_UnicastForward) GetIpv4Uc() *Devm_LpuBoards_LpuBoard_UnicastForward_Ipv4Uc {
	if x != nil {
		return x.Ipv4Uc
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_UnicastForward) GetArpFastReply() *Devm_LpuBoards_LpuBoard_UnicastForward_ArpFastReply {
	if x != nil {
		return x.ArpFastReply
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_UnicastForward) GetGreTtlMode() *Devm_LpuBoards_LpuBoard_UnicastForward_GreTtlMode {
	if x != nil {
		return x.GreTtlMode
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_UnicastForward) GetL3LcsCapacitys() *Devm_LpuBoards_LpuBoard_UnicastForward_L3LcsCapacitys {
	if x != nil {
		return x.L3LcsCapacitys
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_UnicastForward) GetNdFastReply() *Devm_LpuBoards_LpuBoard_UnicastForward_NdFastReply {
	if x != nil {
		return x.NdFastReply
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_UnicastForward) GetVxlanRdrTrunks() *Devm_LpuBoards_LpuBoard_UnicastForward_VxlanRdrTrunks {
	if x != nil {
		return x.VxlanRdrTrunks
	}
	return nil
}

type Devm_LpuBoards_LpuBoard_CfmMacLevelEnableLpu struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MacLevelEnable bool `protobuf:"varint,1,opt,name=mac_level_enable,json=mac-level-enable,proto3" json:"mac_level_enable,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_CfmMacLevelEnableLpu) Reset() {
	*x = Devm_LpuBoards_LpuBoard_CfmMacLevelEnableLpu{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[221]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_CfmMacLevelEnableLpu) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_CfmMacLevelEnableLpu) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_CfmMacLevelEnableLpu) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[221]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_CfmMacLevelEnableLpu.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_CfmMacLevelEnableLpu) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 23}
}

func (x *Devm_LpuBoards_LpuBoard_CfmMacLevelEnableLpu) GetMacLevelEnable() bool {
	if x != nil {
		return x.MacLevelEnable
	}
	return false
}

type Devm_LpuBoards_LpuBoard_Dhcpv6Access struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeaseProxyRate uint32 `protobuf:"varint,1,opt,name=lease_proxy_rate,json=lease-proxy-rate,proto3" json:"lease_proxy_rate,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Dhcpv6Access) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Dhcpv6Access{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[222]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Dhcpv6Access) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Dhcpv6Access) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Dhcpv6Access) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[222]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Dhcpv6Access.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Dhcpv6Access) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 24}
}

func (x *Devm_LpuBoards_LpuBoard_Dhcpv6Access) GetLeaseProxyRate() uint32 {
	if x != nil {
		return x.LeaseProxyRate
	}
	return 0
}

type Devm_LpuBoards_LpuBoard_FramePaddingFix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Devm_LpuBoards_LpuBoard_FramePaddingFix) Reset() {
	*x = Devm_LpuBoards_LpuBoard_FramePaddingFix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[223]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_FramePaddingFix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_FramePaddingFix) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_FramePaddingFix) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[223]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_FramePaddingFix.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_FramePaddingFix) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 25}
}

type Devm_LpuBoards_LpuBoard_PppNet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PppMinPacketLength       *Devm_LpuBoards_LpuBoard_PppNet_PppMinPacketLength       `protobuf:"bytes,1,opt,name=ppp_min_packet_length,json=ppp-min-packet-length,proto3" json:"ppp_min_packet_length,omitempty"`
	LoadBalanceIdentifyPppoe *Devm_LpuBoards_LpuBoard_PppNet_LoadBalanceIdentifyPppoe `protobuf:"bytes,2,opt,name=load_balance_identify_pppoe,json=load-balance-identify-pppoe,proto3" json:"load_balance_identify_pppoe,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_PppNet) Reset() {
	*x = Devm_LpuBoards_LpuBoard_PppNet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[224]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_PppNet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_PppNet) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_PppNet) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[224]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_PppNet.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_PppNet) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 26}
}

func (x *Devm_LpuBoards_LpuBoard_PppNet) GetPppMinPacketLength() *Devm_LpuBoards_LpuBoard_PppNet_PppMinPacketLength {
	if x != nil {
		return x.PppMinPacketLength
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_PppNet) GetLoadBalanceIdentifyPppoe() *Devm_LpuBoards_LpuBoard_PppNet_LoadBalanceIdentifyPppoe {
	if x != nil {
		return x.LoadBalanceIdentifyPppoe
	}
	return nil
}

type Devm_LpuBoards_LpuBoard_Sflow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotSampling *Devm_LpuBoards_LpuBoard_Sflow_SlotSampling `protobuf:"bytes,1,opt,name=slot_sampling,json=slot-sampling,proto3" json:"slot_sampling,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Sflow) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Sflow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[225]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Sflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Sflow) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Sflow) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[225]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Sflow.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Sflow) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 27}
}

func (x *Devm_LpuBoards_LpuBoard_Sflow) GetSlotSampling() *Devm_LpuBoards_LpuBoard_Sflow_SlotSampling {
	if x != nil {
		return x.SlotSampling
	}
	return nil
}

type Devm_LpuBoards_LpuBoard_Dcb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeadroomPool             *Devm_LpuBoards_LpuBoard_Dcb_HeadroomPool             `protobuf:"bytes,1,opt,name=headroom_pool,json=headroom-pool,proto3" json:"headroom_pool,omitempty"`
	DeadlockRecoveryBehavior *Devm_LpuBoards_LpuBoard_Dcb_DeadlockRecoveryBehavior `protobuf:"bytes,2,opt,name=deadlock_recovery_behavior,json=deadlock-recovery-behavior,proto3" json:"deadlock_recovery_behavior,omitempty"`
	PfcMappingType           *Devm_LpuBoards_LpuBoard_Dcb_PfcMappingType           `protobuf:"bytes,3,opt,name=pfc_mapping_type,json=pfc-mapping-type,proto3" json:"pfc_mapping_type,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Dcb) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Dcb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[226]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Dcb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Dcb) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Dcb) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[226]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Dcb.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Dcb) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 28}
}

func (x *Devm_LpuBoards_LpuBoard_Dcb) GetHeadroomPool() *Devm_LpuBoards_LpuBoard_Dcb_HeadroomPool {
	if x != nil {
		return x.HeadroomPool
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_Dcb) GetDeadlockRecoveryBehavior() *Devm_LpuBoards_LpuBoard_Dcb_DeadlockRecoveryBehavior {
	if x != nil {
		return x.DeadlockRecoveryBehavior
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_Dcb) GetPfcMappingType() *Devm_LpuBoards_LpuBoard_Dcb_PfcMappingType {
	if x != nil {
		return x.PfcMappingType
	}
	return nil
}

type Devm_LpuBoards_LpuBoard_MulticastLeafCfcChecks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MulticastLeafCfcCheck []*Devm_LpuBoards_LpuBoard_MulticastLeafCfcChecks_MulticastLeafCfcCheck `protobuf:"bytes,1,rep,name=multicast_leaf_cfc_check,json=multicast-leaf-cfc-check,proto3" json:"multicast_leaf_cfc_check,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_MulticastLeafCfcChecks) Reset() {
	*x = Devm_LpuBoards_LpuBoard_MulticastLeafCfcChecks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[227]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_MulticastLeafCfcChecks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_MulticastLeafCfcChecks) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_MulticastLeafCfcChecks) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[227]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_MulticastLeafCfcChecks.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_MulticastLeafCfcChecks) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 29}
}

func (x *Devm_LpuBoards_LpuBoard_MulticastLeafCfcChecks) GetMulticastLeafCfcCheck() []*Devm_LpuBoards_LpuBoard_MulticastLeafCfcChecks_MulticastLeafCfcCheck {
	if x != nil {
		return x.MulticastLeafCfcCheck
	}
	return nil
}

type Devm_LpuBoards_LpuBoard_Bras_FlowStatisticFrequency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type Devm_LpuBoards_LpuBoard_Bras_FlowStatisticFrequency_Type `protobuf:"varint,1,opt,name=type,proto3,enum=huawei_devm.Devm_LpuBoards_LpuBoard_Bras_FlowStatisticFrequency_Type" json:"type,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Bras_FlowStatisticFrequency) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Bras_FlowStatisticFrequency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[228]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Bras_FlowStatisticFrequency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Bras_FlowStatisticFrequency) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Bras_FlowStatisticFrequency) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[228]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Bras_FlowStatisticFrequency.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Bras_FlowStatisticFrequency) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 0, 0}
}

func (x *Devm_LpuBoards_LpuBoard_Bras_FlowStatisticFrequency) GetType() Devm_LpuBoards_LpuBoard_Bras_FlowStatisticFrequency_Type {
	if x != nil {
		return x.Type
	}
	return Devm_LpuBoards_LpuBoard_Bras_FlowStatisticFrequency_INVALID_ENUM_VALUE_Type
}

type Devm_LpuBoards_LpuBoard_Bras_Vas struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatisticFrequency *Devm_LpuBoards_LpuBoard_Bras_Vas_StatisticFrequency `protobuf:"bytes,1,opt,name=statistic_frequency,json=statistic-frequency,proto3" json:"statistic_frequency,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Bras_Vas) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Bras_Vas{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[229]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Bras_Vas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Bras_Vas) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Bras_Vas) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[229]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Bras_Vas.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Bras_Vas) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 0, 1}
}

func (x *Devm_LpuBoards_LpuBoard_Bras_Vas) GetStatisticFrequency() *Devm_LpuBoards_LpuBoard_Bras_Vas_StatisticFrequency {
	if x != nil {
		return x.StatisticFrequency
	}
	return nil
}

type Devm_LpuBoards_LpuBoard_Bras_Multicast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasPolicyCac *Devm_LpuBoards_LpuBoard_Bras_Multicast_BasPolicyCac `protobuf:"bytes,1,opt,name=bas_policy_cac,json=bas-policy-cac,proto3" json:"bas_policy_cac,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Bras_Multicast) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Bras_Multicast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[230]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Bras_Multicast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Bras_Multicast) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Bras_Multicast) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[230]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Bras_Multicast.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Bras_Multicast) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 0, 2}
}

func (x *Devm_LpuBoards_LpuBoard_Bras_Multicast) GetBasPolicyCac() *Devm_LpuBoards_LpuBoard_Bras_Multicast_BasPolicyCac {
	if x != nil {
		return x.BasPolicyCac
	}
	return nil
}

type Devm_LpuBoards_LpuBoard_Bras_IpUnrHostRoute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag uint32 `protobuf:"varint,1,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Bras_IpUnrHostRoute) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Bras_IpUnrHostRoute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[231]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Bras_IpUnrHostRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Bras_IpUnrHostRoute) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Bras_IpUnrHostRoute) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[231]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Bras_IpUnrHostRoute.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Bras_IpUnrHostRoute) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 0, 3}
}

func (x *Devm_LpuBoards_LpuBoard_Bras_IpUnrHostRoute) GetTag() uint32 {
	if x != nil {
		return x.Tag
	}
	return 0
}

type Devm_LpuBoards_LpuBoard_Bras_Block struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Bras_Block) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Bras_Block{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[232]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Bras_Block) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Bras_Block) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Bras_Block) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[232]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Bras_Block.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Bras_Block) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 0, 4}
}

func (x *Devm_LpuBoards_LpuBoard_Bras_Block) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

type Devm_LpuBoards_LpuBoard_Bras_Vas_StatisticFrequency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowReadSpeed uint32 `protobuf:"varint,1,opt,name=flow_read_speed,json=flow-read-speed,proto3" json:"flow_read_speed,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Bras_Vas_StatisticFrequency) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Bras_Vas_StatisticFrequency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[233]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Bras_Vas_StatisticFrequency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Bras_Vas_StatisticFrequency) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Bras_Vas_StatisticFrequency) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[233]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Bras_Vas_StatisticFrequency.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Bras_Vas_StatisticFrequency) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 0, 1, 0}
}

func (x *Devm_LpuBoards_LpuBoard_Bras_Vas_StatisticFrequency) GetFlowReadSpeed() uint32 {
	if x != nil {
		return x.FlowReadSpeed
	}
	return 0
}

type Devm_LpuBoards_LpuBoard_Bras_Multicast_BasPolicyCac struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Bras_Multicast_BasPolicyCac) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Bras_Multicast_BasPolicyCac{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[234]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Bras_Multicast_BasPolicyCac) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Bras_Multicast_BasPolicyCac) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Bras_Multicast_BasPolicyCac) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[234]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Bras_Multicast_BasPolicyCac.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Bras_Multicast_BasPolicyCac) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 0, 2, 0}
}

func (x *Devm_LpuBoards_LpuBoard_Bras_Multicast_BasPolicyCac) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

type Devm_LpuBoards_LpuBoard_HttpsRedirect_ChastenFlow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowNumber      uint32 `protobuf:"varint,1,opt,name=flow_number,json=flow-number,proto3" json:"flow_number,omitempty"`
	FlowPeriod      uint32 `protobuf:"varint,2,opt,name=flow_period,json=flow-period,proto3" json:"flow_period,omitempty"`
	FlowBlockPeriod uint32 `protobuf:"varint,3,opt,name=flow_block_period,json=flow-block-period,proto3" json:"flow_block_period,omitempty"`
	FlowBlockRate   uint32 `protobuf:"varint,4,opt,name=flow_block_rate,json=flow-block-rate,proto3" json:"flow_block_rate,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_HttpsRedirect_ChastenFlow) Reset() {
	*x = Devm_LpuBoards_LpuBoard_HttpsRedirect_ChastenFlow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[235]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_HttpsRedirect_ChastenFlow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_HttpsRedirect_ChastenFlow) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_HttpsRedirect_ChastenFlow) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[235]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_HttpsRedirect_ChastenFlow.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_HttpsRedirect_ChastenFlow) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 1, 0}
}

func (x *Devm_LpuBoards_LpuBoard_HttpsRedirect_ChastenFlow) GetFlowNumber() uint32 {
	if x != nil {
		return x.FlowNumber
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_HttpsRedirect_ChastenFlow) GetFlowPeriod() uint32 {
	if x != nil {
		return x.FlowPeriod
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_HttpsRedirect_ChastenFlow) GetFlowBlockPeriod() uint32 {
	if x != nil {
		return x.FlowBlockPeriod
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_HttpsRedirect_ChastenFlow) GetFlowBlockRate() uint32 {
	if x != nil {
		return x.FlowBlockRate
	}
	return 0
}

type Devm_LpuBoards_LpuBoard_HttpsRedirect_ChastenRedirect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RedirectNumber      uint32 `protobuf:"varint,1,opt,name=redirect_number,json=redirect-number,proto3" json:"redirect_number,omitempty"`
	RedirectPeriod      uint32 `protobuf:"varint,2,opt,name=redirect_period,json=redirect-period,proto3" json:"redirect_period,omitempty"`
	RedirectBlockPeriod uint32 `protobuf:"varint,3,opt,name=redirect_block_period,json=redirect-block-period,proto3" json:"redirect_block_period,omitempty"`
	RedirectBlockRate   uint32 `protobuf:"varint,4,opt,name=redirect_block_rate,json=redirect-block-rate,proto3" json:"redirect_block_rate,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_HttpsRedirect_ChastenRedirect) Reset() {
	*x = Devm_LpuBoards_LpuBoard_HttpsRedirect_ChastenRedirect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[236]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_HttpsRedirect_ChastenRedirect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_HttpsRedirect_ChastenRedirect) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_HttpsRedirect_ChastenRedirect) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[236]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_HttpsRedirect_ChastenRedirect.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_HttpsRedirect_ChastenRedirect) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 1, 1}
}

func (x *Devm_LpuBoards_LpuBoard_HttpsRedirect_ChastenRedirect) GetRedirectNumber() uint32 {
	if x != nil {
		return x.RedirectNumber
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_HttpsRedirect_ChastenRedirect) GetRedirectPeriod() uint32 {
	if x != nil {
		return x.RedirectPeriod
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_HttpsRedirect_ChastenRedirect) GetRedirectBlockPeriod() uint32 {
	if x != nil {
		return x.RedirectBlockPeriod
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_HttpsRedirect_ChastenRedirect) GetRedirectBlockRate() uint32 {
	if x != nil {
		return x.RedirectBlockRate
	}
	return 0
}

type Devm_LpuBoards_LpuBoard_L2Tp_IcrqLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SetValue uint32 `protobuf:"varint,1,opt,name=set_value,json=set-value,proto3" json:"set_value,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_L2Tp_IcrqLimit) Reset() {
	*x = Devm_LpuBoards_LpuBoard_L2Tp_IcrqLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[237]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_L2Tp_IcrqLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_L2Tp_IcrqLimit) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_L2Tp_IcrqLimit) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[237]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_L2Tp_IcrqLimit.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_L2Tp_IcrqLimit) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 2, 0}
}

func (x *Devm_LpuBoards_LpuBoard_L2Tp_IcrqLimit) GetSetValue() uint32 {
	if x != nil {
		return x.SetValue
	}
	return 0
}

type Devm_LpuBoards_LpuBoard_L2Tp_ForwardMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModeValue Devm_LpuBoards_LpuBoard_L2Tp_ForwardMode_ModeValue `protobuf:"varint,1,opt,name=mode_value,json=mode-value,proto3,enum=huawei_devm.Devm_LpuBoards_LpuBoard_L2Tp_ForwardMode_ModeValue" json:"mode_value,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_L2Tp_ForwardMode) Reset() {
	*x = Devm_LpuBoards_LpuBoard_L2Tp_ForwardMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[238]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_L2Tp_ForwardMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_L2Tp_ForwardMode) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_L2Tp_ForwardMode) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[238]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_L2Tp_ForwardMode.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_L2Tp_ForwardMode) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 2, 1}
}

func (x *Devm_LpuBoards_LpuBoard_L2Tp_ForwardMode) GetModeValue() Devm_LpuBoards_LpuBoard_L2Tp_ForwardMode_ModeValue {
	if x != nil {
		return x.ModeValue
	}
	return Devm_LpuBoards_LpuBoard_L2Tp_ForwardMode_ModeValue_LOOPBACK
}

type Devm_LpuBoards_LpuBoard_BrasPppox_SlotAccessLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessUserLimit uint32 `protobuf:"varint,1,opt,name=access_user_limit,json=access-user-limit,proto3" json:"access_user_limit,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_SlotAccessLimit) Reset() {
	*x = Devm_LpuBoards_LpuBoard_BrasPppox_SlotAccessLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[239]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_SlotAccessLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_BrasPppox_SlotAccessLimit) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_SlotAccessLimit) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[239]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_BrasPppox_SlotAccessLimit.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_BrasPppox_SlotAccessLimit) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 3, 0}
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_SlotAccessLimit) GetAccessUserLimit() uint32 {
	if x != nil {
		return x.AccessUserLimit
	}
	return 0
}

type Devm_LpuBoards_LpuBoard_BrasPppox_AccessIp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessIpNumber uint32 `protobuf:"varint,1,opt,name=access_ip_number,json=access-ip-number,proto3" json:"access_ip_number,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_AccessIp) Reset() {
	*x = Devm_LpuBoards_LpuBoard_BrasPppox_AccessIp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[240]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_AccessIp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_BrasPppox_AccessIp) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_AccessIp) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[240]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_BrasPppox_AccessIp.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_BrasPppox_AccessIp) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 3, 1}
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_AccessIp) GetAccessIpNumber() uint32 {
	if x != nil {
		return x.AccessIpNumber
	}
	return 0
}

type Devm_LpuBoards_LpuBoard_BrasPppox_AccessIpLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FailNumber uint32 `protobuf:"varint,1,opt,name=fail_number,json=fail-number,proto3" json:"fail_number,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_AccessIpLimit) Reset() {
	*x = Devm_LpuBoards_LpuBoard_BrasPppox_AccessIpLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[241]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_AccessIpLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_BrasPppox_AccessIpLimit) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_AccessIpLimit) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[241]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_BrasPppox_AccessIpLimit.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_BrasPppox_AccessIpLimit) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 3, 2}
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_AccessIpLimit) GetFailNumber() uint32 {
	if x != nil {
		return x.FailNumber
	}
	return 0
}

type Devm_LpuBoards_LpuBoard_BrasPppox_LoadBalanceIdentifyPppoe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LoadBalanceEnable bool `protobuf:"varint,1,opt,name=load_balance_enable,json=load-balance-enable,proto3" json:"load_balance_enable,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_LoadBalanceIdentifyPppoe) Reset() {
	*x = Devm_LpuBoards_LpuBoard_BrasPppox_LoadBalanceIdentifyPppoe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[242]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_LoadBalanceIdentifyPppoe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_BrasPppox_LoadBalanceIdentifyPppoe) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_LoadBalanceIdentifyPppoe) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[242]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_BrasPppox_LoadBalanceIdentifyPppoe.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_BrasPppox_LoadBalanceIdentifyPppoe) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 3, 3}
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_LoadBalanceIdentifyPppoe) GetLoadBalanceEnable() bool {
	if x != nil {
		return x.LoadBalanceEnable
	}
	return false
}

type Devm_LpuBoards_LpuBoard_BrasPppox_MaxSessions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxSessionNumber uint32 `protobuf:"varint,1,opt,name=max_session_number,json=max-session-number,proto3" json:"max_session_number,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_MaxSessions) Reset() {
	*x = Devm_LpuBoards_LpuBoard_BrasPppox_MaxSessions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[243]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_MaxSessions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_BrasPppox_MaxSessions) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_MaxSessions) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[243]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_BrasPppox_MaxSessions.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_BrasPppox_MaxSessions) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 3, 4}
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_MaxSessions) GetMaxSessionNumber() uint32 {
	if x != nil {
		return x.MaxSessionNumber
	}
	return 0
}

type Devm_LpuBoards_LpuBoard_BrasPppox_PppoeSlotStatistic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActiveSessions         uint32 `protobuf:"varint,1,opt,name=active_sessions,json=active-sessions,proto3" json:"active_sessions,omitempty"`
	TotalSessions          uint32 `protobuf:"varint,2,opt,name=total_sessions,json=total-sessions,proto3" json:"total_sessions,omitempty"`
	ReceivePadiPackets     uint32 `protobuf:"varint,3,opt,name=receive_padi_packets,json=receive-padi-packets,proto3" json:"receive_padi_packets,omitempty"`
	DiscardPadiPackets     uint32 `protobuf:"varint,4,opt,name=discard_padi_packets,json=discard-padi-packets,proto3" json:"discard_padi_packets,omitempty"`
	SendPadoPackets        uint32 `protobuf:"varint,5,opt,name=send_pado_packets,json=send-pado-packets,proto3" json:"send_pado_packets,omitempty"`
	ReceivePadrPackets     uint32 `protobuf:"varint,6,opt,name=receive_padr_packets,json=receive-padr-packets,proto3" json:"receive_padr_packets,omitempty"`
	DiscardPadrPackets     uint32 `protobuf:"varint,7,opt,name=discard_padr_packets,json=discard-padr-packets,proto3" json:"discard_padr_packets,omitempty"`
	SendPadsPackets        uint32 `protobuf:"varint,8,opt,name=send_pads_packets,json=send-pads-packets,proto3" json:"send_pads_packets,omitempty"`
	DiscardPadrSameMac     uint32 `protobuf:"varint,9,opt,name=discard_padr_same_mac,json=discard-padr-same-mac,proto3" json:"discard_padr_same_mac,omitempty"`
	ReceivePadtPackets     uint32 `protobuf:"varint,10,opt,name=receive_padt_packets,json=receive-padt-packets,proto3" json:"receive_padt_packets,omitempty"`
	DiscardPadtPackets     uint32 `protobuf:"varint,11,opt,name=discard_padt_packets,json=discard-padt-packets,proto3" json:"discard_padt_packets,omitempty"`
	SendPadtPackets        uint32 `protobuf:"varint,12,opt,name=send_padt_packets,json=send-padt-packets,proto3" json:"send_padt_packets,omitempty"`
	SendPadmPackets        uint32 `protobuf:"varint,13,opt,name=send_padm_packets,json=send-padm-packets,proto3" json:"send_padm_packets,omitempty"`
	SendPadmUrlPackets     uint32 `protobuf:"varint,14,opt,name=send_padm_url_packets,json=send-padm-url-packets,proto3" json:"send_padm_url_packets,omitempty"`
	SendPadmMotmPackets    uint32 `protobuf:"varint,15,opt,name=send_padm_motm_packets,json=send-padm-motm-packets,proto3" json:"send_padm_motm_packets,omitempty"`
	SendPadnPackets        uint32 `protobuf:"varint,16,opt,name=send_padn_packets,json=send-padn-packets,proto3" json:"send_padn_packets,omitempty"`
	ReceiveSessionPackets  uint32 `protobuf:"varint,17,opt,name=receive_session_packets,json=receive-session-packets,proto3" json:"receive_session_packets,omitempty"`
	DiscardSessionPackets  uint32 `protobuf:"varint,18,opt,name=discard_session_packets,json=discard-session-packets,proto3" json:"discard_session_packets,omitempty"`
	SendSessionPackets     uint32 `protobuf:"varint,19,opt,name=send_session_packets,json=send-session-packets,proto3" json:"send_session_packets,omitempty"`
	ReceivePackets         uint32 `protobuf:"varint,20,opt,name=receive_packets,json=receive-packets,proto3" json:"receive_packets,omitempty"`
	DiscardPackets         uint32 `protobuf:"varint,21,opt,name=discard_packets,json=discard-packets,proto3" json:"discard_packets,omitempty"`
	InvalidVersion         uint32 `protobuf:"varint,22,opt,name=invalid_version,json=invalid-version,proto3" json:"invalid_version,omitempty"`
	InvalidPadCode         uint32 `protobuf:"varint,23,opt,name=invalid_pad_code,json=invalid-pad-code,proto3" json:"invalid_pad_code,omitempty"`
	InvalidPadTags         uint32 `protobuf:"varint,24,opt,name=invalid_pad_tags,json=invalid-pad-tags,proto3" json:"invalid_pad_tags,omitempty"`
	InvalidPadTagLength    uint32 `protobuf:"varint,25,opt,name=invalid_pad_tag_length,json=invalid-pad-tag-length,proto3" json:"invalid_pad_tag_length,omitempty"`
	InvalidPadType         uint32 `protobuf:"varint,26,opt,name=invalid_pad_type,json=invalid-pad-type,proto3" json:"invalid_pad_type,omitempty"`
	InvalidPadiSessions    uint32 `protobuf:"varint,27,opt,name=invalid_padi_sessions,json=invalid-padi-sessions,proto3" json:"invalid_padi_sessions,omitempty"`
	InvalidPadrSessions    uint32 `protobuf:"varint,28,opt,name=invalid_padr_sessions,json=invalid-padr-sessions,proto3" json:"invalid_padr_sessions,omitempty"`
	InvalidPadPacketLength uint32 `protobuf:"varint,29,opt,name=invalid_pad_packet_length,json=invalid-pad-packet-length,proto3" json:"invalid_pad_packet_length,omitempty"`
	OtherInvalidPadPackets uint32 `protobuf:"varint,30,opt,name=other_invalid_pad_packets,json=other-invalid-pad-packets,proto3" json:"other_invalid_pad_packets,omitempty"`
	TotalInvalidPadPackets uint32 `protobuf:"varint,31,opt,name=total_invalid_pad_packets,json=total-invalid-pad-packets,proto3" json:"total_invalid_pad_packets,omitempty"`
	SendNullPadsPackets    uint32 `protobuf:"varint,32,opt,name=send_null_pads_packets,json=send-null-pads-packets,proto3" json:"send_null_pads_packets,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppoeSlotStatistic) Reset() {
	*x = Devm_LpuBoards_LpuBoard_BrasPppox_PppoeSlotStatistic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[244]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppoeSlotStatistic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_BrasPppox_PppoeSlotStatistic) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppoeSlotStatistic) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[244]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_BrasPppox_PppoeSlotStatistic.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_BrasPppox_PppoeSlotStatistic) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 3, 5}
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppoeSlotStatistic) GetActiveSessions() uint32 {
	if x != nil {
		return x.ActiveSessions
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppoeSlotStatistic) GetTotalSessions() uint32 {
	if x != nil {
		return x.TotalSessions
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppoeSlotStatistic) GetReceivePadiPackets() uint32 {
	if x != nil {
		return x.ReceivePadiPackets
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppoeSlotStatistic) GetDiscardPadiPackets() uint32 {
	if x != nil {
		return x.DiscardPadiPackets
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppoeSlotStatistic) GetSendPadoPackets() uint32 {
	if x != nil {
		return x.SendPadoPackets
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppoeSlotStatistic) GetReceivePadrPackets() uint32 {
	if x != nil {
		return x.ReceivePadrPackets
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppoeSlotStatistic) GetDiscardPadrPackets() uint32 {
	if x != nil {
		return x.DiscardPadrPackets
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppoeSlotStatistic) GetSendPadsPackets() uint32 {
	if x != nil {
		return x.SendPadsPackets
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppoeSlotStatistic) GetDiscardPadrSameMac() uint32 {
	if x != nil {
		return x.DiscardPadrSameMac
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppoeSlotStatistic) GetReceivePadtPackets() uint32 {
	if x != nil {
		return x.ReceivePadtPackets
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppoeSlotStatistic) GetDiscardPadtPackets() uint32 {
	if x != nil {
		return x.DiscardPadtPackets
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppoeSlotStatistic) GetSendPadtPackets() uint32 {
	if x != nil {
		return x.SendPadtPackets
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppoeSlotStatistic) GetSendPadmPackets() uint32 {
	if x != nil {
		return x.SendPadmPackets
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppoeSlotStatistic) GetSendPadmUrlPackets() uint32 {
	if x != nil {
		return x.SendPadmUrlPackets
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppoeSlotStatistic) GetSendPadmMotmPackets() uint32 {
	if x != nil {
		return x.SendPadmMotmPackets
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppoeSlotStatistic) GetSendPadnPackets() uint32 {
	if x != nil {
		return x.SendPadnPackets
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppoeSlotStatistic) GetReceiveSessionPackets() uint32 {
	if x != nil {
		return x.ReceiveSessionPackets
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppoeSlotStatistic) GetDiscardSessionPackets() uint32 {
	if x != nil {
		return x.DiscardSessionPackets
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppoeSlotStatistic) GetSendSessionPackets() uint32 {
	if x != nil {
		return x.SendSessionPackets
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppoeSlotStatistic) GetReceivePackets() uint32 {
	if x != nil {
		return x.ReceivePackets
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppoeSlotStatistic) GetDiscardPackets() uint32 {
	if x != nil {
		return x.DiscardPackets
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppoeSlotStatistic) GetInvalidVersion() uint32 {
	if x != nil {
		return x.InvalidVersion
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppoeSlotStatistic) GetInvalidPadCode() uint32 {
	if x != nil {
		return x.InvalidPadCode
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppoeSlotStatistic) GetInvalidPadTags() uint32 {
	if x != nil {
		return x.InvalidPadTags
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppoeSlotStatistic) GetInvalidPadTagLength() uint32 {
	if x != nil {
		return x.InvalidPadTagLength
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppoeSlotStatistic) GetInvalidPadType() uint32 {
	if x != nil {
		return x.InvalidPadType
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppoeSlotStatistic) GetInvalidPadiSessions() uint32 {
	if x != nil {
		return x.InvalidPadiSessions
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppoeSlotStatistic) GetInvalidPadrSessions() uint32 {
	if x != nil {
		return x.InvalidPadrSessions
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppoeSlotStatistic) GetInvalidPadPacketLength() uint32 {
	if x != nil {
		return x.InvalidPadPacketLength
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppoeSlotStatistic) GetOtherInvalidPadPackets() uint32 {
	if x != nil {
		return x.OtherInvalidPadPackets
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppoeSlotStatistic) GetTotalInvalidPadPackets() uint32 {
	if x != nil {
		return x.TotalInvalidPadPackets
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppoeSlotStatistic) GetSendNullPadsPackets() uint32 {
	if x != nil {
		return x.SendNullPadsPackets
	}
	return 0
}

type Devm_LpuBoards_LpuBoard_BrasPppox_PppSlotStatistic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SendEchoRequest                 uint32 `protobuf:"varint,1,opt,name=send_echo_request,json=send-echo-request,proto3" json:"send_echo_request,omitempty"`
	SendEchoReply                   uint32 `protobuf:"varint,2,opt,name=send_echo_reply,json=send-echo-reply,proto3" json:"send_echo_reply,omitempty"`
	SendEchoFailed                  uint32 `protobuf:"varint,3,opt,name=send_echo_failed,json=send-echo-failed,proto3" json:"send_echo_failed,omitempty"`
	ReceiveEchoReply                uint32 `protobuf:"varint,4,opt,name=receive_echo_reply,json=receive-echo-reply,proto3" json:"receive_echo_reply,omitempty"`
	ReceiveEchoRequest              uint32 `protobuf:"varint,5,opt,name=receive_echo_request,json=receive-echo-request,proto3" json:"receive_echo_request,omitempty"`
	SendLcpConnectionRequest        uint32 `protobuf:"varint,6,opt,name=send_lcp_connection_request,json=send-lcp-connection-request,proto3" json:"send_lcp_connection_request,omitempty"`
	SendLcpConnectionNak            uint32 `protobuf:"varint,7,opt,name=send_lcp_connection_nak,json=send-lcp-connection-nak,proto3" json:"send_lcp_connection_nak,omitempty"`
	SendLcpConnectionRejection      uint32 `protobuf:"varint,8,opt,name=send_lcp_connection_rejection,json=send-lcp-connection-rejection,proto3" json:"send_lcp_connection_rejection,omitempty"`
	SendLcpConnectionAck            uint32 `protobuf:"varint,9,opt,name=send_lcp_connection_ack,json=send-lcp-connection-ack,proto3" json:"send_lcp_connection_ack,omitempty"`
	SendLcpCodeRejection            uint32 `protobuf:"varint,10,opt,name=send_lcp_code_rejection,json=send-lcp-code-rejection,proto3" json:"send_lcp_code_rejection,omitempty"`
	SendLcpProtocolRejection        uint32 `protobuf:"varint,11,opt,name=send_lcp_protocol_rejection,json=send-lcp-protocol-rejection,proto3" json:"send_lcp_protocol_rejection,omitempty"`
	SendLcpTerminationRequest       uint32 `protobuf:"varint,12,opt,name=send_lcp_termination_request,json=send-lcp-termination-request,proto3" json:"send_lcp_termination_request,omitempty"`
	SendLcpTerminationAck           uint32 `protobuf:"varint,13,opt,name=send_lcp_termination_ack,json=send-lcp-termination-ack,proto3" json:"send_lcp_termination_ack,omitempty"`
	ReceiveLcpConnectionRequest     uint32 `protobuf:"varint,14,opt,name=receive_lcp_connection_request,json=receive-lcp-connection-request,proto3" json:"receive_lcp_connection_request,omitempty"`
	ReceiveLcpConnectionNak         uint32 `protobuf:"varint,15,opt,name=receive_lcp_connection_nak,json=receive-lcp-connection-nak,proto3" json:"receive_lcp_connection_nak,omitempty"`
	ReceiveLcpConnectionRejection   uint32 `protobuf:"varint,16,opt,name=receive_lcp_connection_rejection,json=receive-lcp-connection-rejection,proto3" json:"receive_lcp_connection_rejection,omitempty"`
	ReceiveLcpConnectionAck         uint32 `protobuf:"varint,17,opt,name=receive_lcp_connection_ack,json=receive-lcp-connection-ack,proto3" json:"receive_lcp_connection_ack,omitempty"`
	ReceiveLcpCodeRejection         uint32 `protobuf:"varint,18,opt,name=receive_lcp_code_rejection,json=receive-lcp-code-rejection,proto3" json:"receive_lcp_code_rejection,omitempty"`
	ReceiveLcpProtocolRejection     uint32 `protobuf:"varint,19,opt,name=receive_lcp_protocol_rejection,json=receive-lcp-protocol-rejection,proto3" json:"receive_lcp_protocol_rejection,omitempty"`
	ReceiveLcpTerminationRequest    uint32 `protobuf:"varint,20,opt,name=receive_lcp_termination_request,json=receive-lcp-termination-request,proto3" json:"receive_lcp_termination_request,omitempty"`
	ReceiveLcpTerminationAck        uint32 `protobuf:"varint,21,opt,name=receive_lcp_termination_ack,json=receive-lcp-termination-ack,proto3" json:"receive_lcp_termination_ack,omitempty"`
	SendIpcpConnectionRequest       uint32 `protobuf:"varint,22,opt,name=send_ipcp_connection_request,json=send-ipcp-connection-request,proto3" json:"send_ipcp_connection_request,omitempty"`
	SendIpcpConnectionNak           uint32 `protobuf:"varint,23,opt,name=send_ipcp_connection_nak,json=send-ipcp-connection-nak,proto3" json:"send_ipcp_connection_nak,omitempty"`
	SendIpcpConnectionRejection     uint32 `protobuf:"varint,24,opt,name=send_ipcp_connection_rejection,json=send-ipcp-connection-rejection,proto3" json:"send_ipcp_connection_rejection,omitempty"`
	SendIpcpConnectionAck           uint32 `protobuf:"varint,25,opt,name=send_ipcp_connection_ack,json=send-ipcp-connection-ack,proto3" json:"send_ipcp_connection_ack,omitempty"`
	SendIpcpCodeRejection           uint32 `protobuf:"varint,26,opt,name=send_ipcp_code_rejection,json=send-ipcp-code-rejection,proto3" json:"send_ipcp_code_rejection,omitempty"`
	SendIpcpProtocolRejection       uint32 `protobuf:"varint,27,opt,name=send_ipcp_protocol_rejection,json=send-ipcp-protocol-rejection,proto3" json:"send_ipcp_protocol_rejection,omitempty"`
	SendIpcpTerminationRequest      uint32 `protobuf:"varint,28,opt,name=send_ipcp_termination_request,json=send-ipcp-termination-request,proto3" json:"send_ipcp_termination_request,omitempty"`
	SendIpccpTerminationAck         uint32 `protobuf:"varint,29,opt,name=send_ipccp_termination_ack,json=send-ipccp-termination-ack,proto3" json:"send_ipccp_termination_ack,omitempty"`
	ReceiveIpcpConnectionRequest    uint32 `protobuf:"varint,30,opt,name=receive_ipcp_connection_request,json=receive-ipcp-connection-request,proto3" json:"receive_ipcp_connection_request,omitempty"`
	ReceiveIpcpConnectionNak        uint32 `protobuf:"varint,31,opt,name=receive_ipcp_connection_nak,json=receive-ipcp-connection-nak,proto3" json:"receive_ipcp_connection_nak,omitempty"`
	ReceiveIpcpConnectionRejection  uint32 `protobuf:"varint,32,opt,name=receive_ipcp_connection_rejection,json=receive-ipcp-connection-rejection,proto3" json:"receive_ipcp_connection_rejection,omitempty"`
	ReceiveIpcpConnectionAck        uint32 `protobuf:"varint,33,opt,name=receive_ipcp_connection_ack,json=receive-ipcp-connection-ack,proto3" json:"receive_ipcp_connection_ack,omitempty"`
	ReceiveIpcpCodeRejection        uint32 `protobuf:"varint,34,opt,name=receive_ipcp_code_rejection,json=receive-ipcp-code-rejection,proto3" json:"receive_ipcp_code_rejection,omitempty"`
	ReceiveIpcpProtocolRejection    uint32 `protobuf:"varint,35,opt,name=receive_ipcp_protocol_rejection,json=receive-ipcp-protocol-rejection,proto3" json:"receive_ipcp_protocol_rejection,omitempty"`
	ReceiveIpcpTerminationRequest   uint32 `protobuf:"varint,36,opt,name=receive_ipcp_termination_request,json=receive-ipcp-termination-request,proto3" json:"receive_ipcp_termination_request,omitempty"`
	ReceiveIpcpTerminationAck       uint32 `protobuf:"varint,37,opt,name=receive_ipcp_termination_ack,json=receive-ipcp-termination-ack,proto3" json:"receive_ipcp_termination_ack,omitempty"`
	SendIp6CpConnectionRequest      uint32 `protobuf:"varint,38,opt,name=send_ip6cp_connection_request,json=send-ip6cp-connection-request,proto3" json:"send_ip6cp_connection_request,omitempty"`
	SendIp6CpConnectionNak          uint32 `protobuf:"varint,39,opt,name=send_ip6cp_connection_nak,json=send-ip6cp-connection-nak,proto3" json:"send_ip6cp_connection_nak,omitempty"`
	SendIp6CpConnectionRejection    uint32 `protobuf:"varint,40,opt,name=send_ip6cp_connection_rejection,json=send-ip6cp-connection-rejection,proto3" json:"send_ip6cp_connection_rejection,omitempty"`
	SendIp6CpConnectionAck          uint32 `protobuf:"varint,41,opt,name=send_ip6cp_connection_ack,json=send-ip6cp-connection-ack,proto3" json:"send_ip6cp_connection_ack,omitempty"`
	SendIp6CpCodeRejection          uint32 `protobuf:"varint,42,opt,name=send_ip6cp_code_rejection,json=send-ip6cp-code-rejection,proto3" json:"send_ip6cp_code_rejection,omitempty"`
	SendIp6CpProtocolRejection      uint32 `protobuf:"varint,43,opt,name=send_ip6cp_protocol_rejection,json=send-ip6cp-protocol-rejection,proto3" json:"send_ip6cp_protocol_rejection,omitempty"`
	SendIp6CpTerminationRequest     uint32 `protobuf:"varint,44,opt,name=send_ip6cp_termination_request,json=send-ip6cp-termination-request,proto3" json:"send_ip6cp_termination_request,omitempty"`
	SendIp6CpTerminationAck         uint32 `protobuf:"varint,45,opt,name=send_ip6cp_termination_ack,json=send-ip6cp-termination-ack,proto3" json:"send_ip6cp_termination_ack,omitempty"`
	ReceiveIp6CpConnectionRequest   uint32 `protobuf:"varint,46,opt,name=receive_ip6cp_connection_request,json=receive-ip6cp-connection-request,proto3" json:"receive_ip6cp_connection_request,omitempty"`
	ReceiveIp6CpConnectionNak       uint32 `protobuf:"varint,47,opt,name=receive_ip6cp_connection_nak,json=receive-ip6cp-connection-nak,proto3" json:"receive_ip6cp_connection_nak,omitempty"`
	ReceiveIp6CpConnectionReject    uint32 `protobuf:"varint,48,opt,name=receive_ip6cp_connection_reject,json=receive-ip6cp-connection-reject,proto3" json:"receive_ip6cp_connection_reject,omitempty"`
	ReceiveIp6CpConnectionAck       uint32 `protobuf:"varint,49,opt,name=receive_ip6cp_connection_ack,json=receive-ip6cp-connection-ack,proto3" json:"receive_ip6cp_connection_ack,omitempty"`
	ReceiveIp6CpCodeRejection       uint32 `protobuf:"varint,50,opt,name=receive_ip6cp_code_rejection,json=receive-ip6cp-code-rejection,proto3" json:"receive_ip6cp_code_rejection,omitempty"`
	ReceiveIp6CpProtocolRejection   uint32 `protobuf:"varint,51,opt,name=receive_ip6cp_protocol_rejection,json=receive-ip6cp-protocol-rejection,proto3" json:"receive_ip6cp_protocol_rejection,omitempty"`
	ReceiveIp6CpTerminationRequest  uint32 `protobuf:"varint,52,opt,name=receive_ip6cp_termination_request,json=receive-ip6cp-termination-request,proto3" json:"receive_ip6cp_termination_request,omitempty"`
	ReceiveIp6CpTerminationAck      uint32 `protobuf:"varint,53,opt,name=receive_ip6cp_termination_ack,json=receive-ip6cp-termination-ack,proto3" json:"receive_ip6cp_termination_ack,omitempty"`
	SendPapAuthenticationAck        uint32 `protobuf:"varint,54,opt,name=send_pap_authentication_ack,json=send-pap-authentication-ack,proto3" json:"send_pap_authentication_ack,omitempty"`
	SendPapAuthenticationNak        uint32 `protobuf:"varint,55,opt,name=send_pap_authentication_nak,json=send-pap-authentication-nak,proto3" json:"send_pap_authentication_nak,omitempty"`
	SendChapChallenge               uint32 `protobuf:"varint,56,opt,name=send_chap_challenge,json=send-chap-challenge,proto3" json:"send_chap_challenge,omitempty"`
	SendChapAuthenticationAck       uint32 `protobuf:"varint,57,opt,name=send_chap_authentication_ack,json=send-chap-authentication-ack,proto3" json:"send_chap_authentication_ack,omitempty"`
	SendChapAuthenticationFail      uint32 `protobuf:"varint,58,opt,name=send_chap_authentication_fail,json=send-chap-authentication-fail,proto3" json:"send_chap_authentication_fail,omitempty"`
	DiscardDailFast                 uint32 `protobuf:"varint,59,opt,name=discard_dail_fast,json=discard-dail-fast,proto3" json:"discard_dail_fast,omitempty"`
	DiscardChasten                  uint32 `protobuf:"varint,60,opt,name=discard_chasten,json=discard-chasten,proto3" json:"discard_chasten,omitempty"`
	ReceivePapAuthenticationRequest uint32 `protobuf:"varint,61,opt,name=receive_pap_authentication_request,json=receive-pap-authentication-request,proto3" json:"receive_pap_authentication_request,omitempty"`
	ReceiveChapResponse             uint32 `protobuf:"varint,62,opt,name=receive_chap_response,json=receive-chap-response,proto3" json:"receive_chap_response,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppSlotStatistic) Reset() {
	*x = Devm_LpuBoards_LpuBoard_BrasPppox_PppSlotStatistic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[245]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppSlotStatistic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_BrasPppox_PppSlotStatistic) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppSlotStatistic) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[245]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_BrasPppox_PppSlotStatistic.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_BrasPppox_PppSlotStatistic) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 3, 6}
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppSlotStatistic) GetSendEchoRequest() uint32 {
	if x != nil {
		return x.SendEchoRequest
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppSlotStatistic) GetSendEchoReply() uint32 {
	if x != nil {
		return x.SendEchoReply
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppSlotStatistic) GetSendEchoFailed() uint32 {
	if x != nil {
		return x.SendEchoFailed
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppSlotStatistic) GetReceiveEchoReply() uint32 {
	if x != nil {
		return x.ReceiveEchoReply
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppSlotStatistic) GetReceiveEchoRequest() uint32 {
	if x != nil {
		return x.ReceiveEchoRequest
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppSlotStatistic) GetSendLcpConnectionRequest() uint32 {
	if x != nil {
		return x.SendLcpConnectionRequest
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppSlotStatistic) GetSendLcpConnectionNak() uint32 {
	if x != nil {
		return x.SendLcpConnectionNak
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppSlotStatistic) GetSendLcpConnectionRejection() uint32 {
	if x != nil {
		return x.SendLcpConnectionRejection
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppSlotStatistic) GetSendLcpConnectionAck() uint32 {
	if x != nil {
		return x.SendLcpConnectionAck
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppSlotStatistic) GetSendLcpCodeRejection() uint32 {
	if x != nil {
		return x.SendLcpCodeRejection
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppSlotStatistic) GetSendLcpProtocolRejection() uint32 {
	if x != nil {
		return x.SendLcpProtocolRejection
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppSlotStatistic) GetSendLcpTerminationRequest() uint32 {
	if x != nil {
		return x.SendLcpTerminationRequest
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppSlotStatistic) GetSendLcpTerminationAck() uint32 {
	if x != nil {
		return x.SendLcpTerminationAck
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppSlotStatistic) GetReceiveLcpConnectionRequest() uint32 {
	if x != nil {
		return x.ReceiveLcpConnectionRequest
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppSlotStatistic) GetReceiveLcpConnectionNak() uint32 {
	if x != nil {
		return x.ReceiveLcpConnectionNak
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppSlotStatistic) GetReceiveLcpConnectionRejection() uint32 {
	if x != nil {
		return x.ReceiveLcpConnectionRejection
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppSlotStatistic) GetReceiveLcpConnectionAck() uint32 {
	if x != nil {
		return x.ReceiveLcpConnectionAck
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppSlotStatistic) GetReceiveLcpCodeRejection() uint32 {
	if x != nil {
		return x.ReceiveLcpCodeRejection
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppSlotStatistic) GetReceiveLcpProtocolRejection() uint32 {
	if x != nil {
		return x.ReceiveLcpProtocolRejection
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppSlotStatistic) GetReceiveLcpTerminationRequest() uint32 {
	if x != nil {
		return x.ReceiveLcpTerminationRequest
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppSlotStatistic) GetReceiveLcpTerminationAck() uint32 {
	if x != nil {
		return x.ReceiveLcpTerminationAck
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppSlotStatistic) GetSendIpcpConnectionRequest() uint32 {
	if x != nil {
		return x.SendIpcpConnectionRequest
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppSlotStatistic) GetSendIpcpConnectionNak() uint32 {
	if x != nil {
		return x.SendIpcpConnectionNak
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppSlotStatistic) GetSendIpcpConnectionRejection() uint32 {
	if x != nil {
		return x.SendIpcpConnectionRejection
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppSlotStatistic) GetSendIpcpConnectionAck() uint32 {
	if x != nil {
		return x.SendIpcpConnectionAck
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppSlotStatistic) GetSendIpcpCodeRejection() uint32 {
	if x != nil {
		return x.SendIpcpCodeRejection
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppSlotStatistic) GetSendIpcpProtocolRejection() uint32 {
	if x != nil {
		return x.SendIpcpProtocolRejection
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppSlotStatistic) GetSendIpcpTerminationRequest() uint32 {
	if x != nil {
		return x.SendIpcpTerminationRequest
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppSlotStatistic) GetSendIpccpTerminationAck() uint32 {
	if x != nil {
		return x.SendIpccpTerminationAck
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppSlotStatistic) GetReceiveIpcpConnectionRequest() uint32 {
	if x != nil {
		return x.ReceiveIpcpConnectionRequest
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppSlotStatistic) GetReceiveIpcpConnectionNak() uint32 {
	if x != nil {
		return x.ReceiveIpcpConnectionNak
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppSlotStatistic) GetReceiveIpcpConnectionRejection() uint32 {
	if x != nil {
		return x.ReceiveIpcpConnectionRejection
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppSlotStatistic) GetReceiveIpcpConnectionAck() uint32 {
	if x != nil {
		return x.ReceiveIpcpConnectionAck
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppSlotStatistic) GetReceiveIpcpCodeRejection() uint32 {
	if x != nil {
		return x.ReceiveIpcpCodeRejection
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppSlotStatistic) GetReceiveIpcpProtocolRejection() uint32 {
	if x != nil {
		return x.ReceiveIpcpProtocolRejection
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppSlotStatistic) GetReceiveIpcpTerminationRequest() uint32 {
	if x != nil {
		return x.ReceiveIpcpTerminationRequest
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppSlotStatistic) GetReceiveIpcpTerminationAck() uint32 {
	if x != nil {
		return x.ReceiveIpcpTerminationAck
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppSlotStatistic) GetSendIp6CpConnectionRequest() uint32 {
	if x != nil {
		return x.SendIp6CpConnectionRequest
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppSlotStatistic) GetSendIp6CpConnectionNak() uint32 {
	if x != nil {
		return x.SendIp6CpConnectionNak
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppSlotStatistic) GetSendIp6CpConnectionRejection() uint32 {
	if x != nil {
		return x.SendIp6CpConnectionRejection
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppSlotStatistic) GetSendIp6CpConnectionAck() uint32 {
	if x != nil {
		return x.SendIp6CpConnectionAck
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppSlotStatistic) GetSendIp6CpCodeRejection() uint32 {
	if x != nil {
		return x.SendIp6CpCodeRejection
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppSlotStatistic) GetSendIp6CpProtocolRejection() uint32 {
	if x != nil {
		return x.SendIp6CpProtocolRejection
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppSlotStatistic) GetSendIp6CpTerminationRequest() uint32 {
	if x != nil {
		return x.SendIp6CpTerminationRequest
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppSlotStatistic) GetSendIp6CpTerminationAck() uint32 {
	if x != nil {
		return x.SendIp6CpTerminationAck
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppSlotStatistic) GetReceiveIp6CpConnectionRequest() uint32 {
	if x != nil {
		return x.ReceiveIp6CpConnectionRequest
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppSlotStatistic) GetReceiveIp6CpConnectionNak() uint32 {
	if x != nil {
		return x.ReceiveIp6CpConnectionNak
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppSlotStatistic) GetReceiveIp6CpConnectionReject() uint32 {
	if x != nil {
		return x.ReceiveIp6CpConnectionReject
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppSlotStatistic) GetReceiveIp6CpConnectionAck() uint32 {
	if x != nil {
		return x.ReceiveIp6CpConnectionAck
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppSlotStatistic) GetReceiveIp6CpCodeRejection() uint32 {
	if x != nil {
		return x.ReceiveIp6CpCodeRejection
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppSlotStatistic) GetReceiveIp6CpProtocolRejection() uint32 {
	if x != nil {
		return x.ReceiveIp6CpProtocolRejection
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppSlotStatistic) GetReceiveIp6CpTerminationRequest() uint32 {
	if x != nil {
		return x.ReceiveIp6CpTerminationRequest
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppSlotStatistic) GetReceiveIp6CpTerminationAck() uint32 {
	if x != nil {
		return x.ReceiveIp6CpTerminationAck
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppSlotStatistic) GetSendPapAuthenticationAck() uint32 {
	if x != nil {
		return x.SendPapAuthenticationAck
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppSlotStatistic) GetSendPapAuthenticationNak() uint32 {
	if x != nil {
		return x.SendPapAuthenticationNak
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppSlotStatistic) GetSendChapChallenge() uint32 {
	if x != nil {
		return x.SendChapChallenge
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppSlotStatistic) GetSendChapAuthenticationAck() uint32 {
	if x != nil {
		return x.SendChapAuthenticationAck
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppSlotStatistic) GetSendChapAuthenticationFail() uint32 {
	if x != nil {
		return x.SendChapAuthenticationFail
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppSlotStatistic) GetDiscardDailFast() uint32 {
	if x != nil {
		return x.DiscardDailFast
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppSlotStatistic) GetDiscardChasten() uint32 {
	if x != nil {
		return x.DiscardChasten
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppSlotStatistic) GetReceivePapAuthenticationRequest() uint32 {
	if x != nil {
		return x.ReceivePapAuthenticationRequest
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppSlotStatistic) GetReceiveChapResponse() uint32 {
	if x != nil {
		return x.ReceiveChapResponse
	}
	return 0
}

type Devm_LpuBoards_LpuBoard_BrasPppox_UrpfDiscardStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UrpfIpv4DiscardStatistic *Devm_LpuBoards_LpuBoard_BrasPppox_UrpfDiscardStatistics_UrpfIpv4DiscardStatistic `protobuf:"bytes,1,opt,name=urpf_ipv4_discard_statistic,json=urpf-ipv4-discard-statistic,proto3" json:"urpf_ipv4_discard_statistic,omitempty"`
	UrpfIpv6DiscardStatistic *Devm_LpuBoards_LpuBoard_BrasPppox_UrpfDiscardStatistics_UrpfIpv6DiscardStatistic `protobuf:"bytes,2,opt,name=urpf_ipv6_discard_statistic,json=urpf-ipv6-discard-statistic,proto3" json:"urpf_ipv6_discard_statistic,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_UrpfDiscardStatistics) Reset() {
	*x = Devm_LpuBoards_LpuBoard_BrasPppox_UrpfDiscardStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[246]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_UrpfDiscardStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_BrasPppox_UrpfDiscardStatistics) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_UrpfDiscardStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[246]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_BrasPppox_UrpfDiscardStatistics.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_BrasPppox_UrpfDiscardStatistics) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 3, 7}
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_UrpfDiscardStatistics) GetUrpfIpv4DiscardStatistic() *Devm_LpuBoards_LpuBoard_BrasPppox_UrpfDiscardStatistics_UrpfIpv4DiscardStatistic {
	if x != nil {
		return x.UrpfIpv4DiscardStatistic
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_UrpfDiscardStatistics) GetUrpfIpv6DiscardStatistic() *Devm_LpuBoards_LpuBoard_BrasPppox_UrpfDiscardStatistics_UrpfIpv6DiscardStatistic {
	if x != nil {
		return x.UrpfIpv6DiscardStatistic
	}
	return nil
}

type Devm_LpuBoards_LpuBoard_BrasPppox_PppEchoDeployMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeparateMode bool `protobuf:"varint,1,opt,name=separate_mode,json=separate-mode,proto3" json:"separate_mode,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppEchoDeployMode) Reset() {
	*x = Devm_LpuBoards_LpuBoard_BrasPppox_PppEchoDeployMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[247]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppEchoDeployMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_BrasPppox_PppEchoDeployMode) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppEchoDeployMode) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[247]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_BrasPppox_PppEchoDeployMode.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_BrasPppox_PppEchoDeployMode) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 3, 8}
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_PppEchoDeployMode) GetSeparateMode() bool {
	if x != nil {
		return x.SeparateMode
	}
	return false
}

type Devm_LpuBoards_LpuBoard_BrasPppox_UrpfDiscardStatistics_UrpfIpv4DiscardStatistic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PppIpv4PacketHighBits uint32 `protobuf:"varint,1,opt,name=ppp_ipv4_packet_high_bits,json=ppp-ipv4-packet-high-bits,proto3" json:"ppp_ipv4_packet_high_bits,omitempty"`
	PppIpv4PacketLowBits  uint32 `protobuf:"varint,2,opt,name=ppp_ipv4_packet_low_bits,json=ppp-ipv4-packet-low-bits,proto3" json:"ppp_ipv4_packet_low_bits,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_UrpfDiscardStatistics_UrpfIpv4DiscardStatistic) Reset() {
	*x = Devm_LpuBoards_LpuBoard_BrasPppox_UrpfDiscardStatistics_UrpfIpv4DiscardStatistic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[248]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_UrpfDiscardStatistics_UrpfIpv4DiscardStatistic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_BrasPppox_UrpfDiscardStatistics_UrpfIpv4DiscardStatistic) ProtoMessage() {
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_UrpfDiscardStatistics_UrpfIpv4DiscardStatistic) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[248]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_BrasPppox_UrpfDiscardStatistics_UrpfIpv4DiscardStatistic.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_BrasPppox_UrpfDiscardStatistics_UrpfIpv4DiscardStatistic) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 3, 7, 0}
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_UrpfDiscardStatistics_UrpfIpv4DiscardStatistic) GetPppIpv4PacketHighBits() uint32 {
	if x != nil {
		return x.PppIpv4PacketHighBits
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_UrpfDiscardStatistics_UrpfIpv4DiscardStatistic) GetPppIpv4PacketLowBits() uint32 {
	if x != nil {
		return x.PppIpv4PacketLowBits
	}
	return 0
}

type Devm_LpuBoards_LpuBoard_BrasPppox_UrpfDiscardStatistics_UrpfIpv6DiscardStatistic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PppIpv6PacketHighBits uint32 `protobuf:"varint,1,opt,name=ppp_ipv6_packet_high_bits,json=ppp-ipv6-packet-high-bits,proto3" json:"ppp_ipv6_packet_high_bits,omitempty"`
	PppIpv6PacketLowBits  uint32 `protobuf:"varint,2,opt,name=ppp_ipv6_packet_low_bits,json=ppp-ipv6-packet-low-bits,proto3" json:"ppp_ipv6_packet_low_bits,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_UrpfDiscardStatistics_UrpfIpv6DiscardStatistic) Reset() {
	*x = Devm_LpuBoards_LpuBoard_BrasPppox_UrpfDiscardStatistics_UrpfIpv6DiscardStatistic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[249]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_UrpfDiscardStatistics_UrpfIpv6DiscardStatistic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_BrasPppox_UrpfDiscardStatistics_UrpfIpv6DiscardStatistic) ProtoMessage() {
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_UrpfDiscardStatistics_UrpfIpv6DiscardStatistic) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[249]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_BrasPppox_UrpfDiscardStatistics_UrpfIpv6DiscardStatistic.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_BrasPppox_UrpfDiscardStatistics_UrpfIpv6DiscardStatistic) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 3, 7, 1}
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_UrpfDiscardStatistics_UrpfIpv6DiscardStatistic) GetPppIpv6PacketHighBits() uint32 {
	if x != nil {
		return x.PppIpv6PacketHighBits
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_BrasPppox_UrpfDiscardStatistics_UrpfIpv6DiscardStatistic) GetPppIpv6PacketLowBits() uint32 {
	if x != nil {
		return x.PppIpv6PacketLowBits
	}
	return 0
}

type Devm_LpuBoards_LpuBoard_CpudefendDevm_IgnoreHostcarAcl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ipv4Acl string `protobuf:"bytes,1,opt,name=ipv4_acl,json=ipv4-acl,proto3" json:"ipv4_acl,omitempty"`
	Ipv6Acl string `protobuf:"bytes,2,opt,name=ipv6_acl,json=ipv6-acl,proto3" json:"ipv6_acl,omitempty"`
	// Types that are assignable to Ipv4AclType:
	//	*Devm_LpuBoards_LpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclTypeByIdentity
	//	*Devm_LpuBoards_LpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclTypeByNumber
	Ipv4AclType isDevm_LpuBoards_LpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclType `protobuf_oneof:"Ipv4AclType"`
}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_IgnoreHostcarAcl) Reset() {
	*x = Devm_LpuBoards_LpuBoard_CpudefendDevm_IgnoreHostcarAcl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[250]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_IgnoreHostcarAcl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_CpudefendDevm_IgnoreHostcarAcl) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_IgnoreHostcarAcl) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[250]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_CpudefendDevm_IgnoreHostcarAcl.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_CpudefendDevm_IgnoreHostcarAcl) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 5, 0}
}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_IgnoreHostcarAcl) GetIpv4Acl() string {
	if x != nil {
		return x.Ipv4Acl
	}
	return ""
}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_IgnoreHostcarAcl) GetIpv6Acl() string {
	if x != nil {
		return x.Ipv6Acl
	}
	return ""
}

func (m *Devm_LpuBoards_LpuBoard_CpudefendDevm_IgnoreHostcarAcl) GetIpv4AclType() isDevm_LpuBoards_LpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclType {
	if m != nil {
		return m.Ipv4AclType
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_IgnoreHostcarAcl) GetIpv4AclTypeByIdentity() *Devm_LpuBoards_LpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclType_ByIdentity {
	if x, ok := x.GetIpv4AclType().(*Devm_LpuBoards_LpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclTypeByIdentity); ok {
		return x.Ipv4AclTypeByIdentity
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_IgnoreHostcarAcl) GetIpv4AclTypeByNumber() *Devm_LpuBoards_LpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclType_ByNumber {
	if x, ok := x.GetIpv4AclType().(*Devm_LpuBoards_LpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclTypeByNumber); ok {
		return x.Ipv4AclTypeByNumber
	}
	return nil
}

type isDevm_LpuBoards_LpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclType interface {
	isDevm_LpuBoards_LpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclType()
}

type Devm_LpuBoards_LpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclTypeByIdentity struct {
	Ipv4AclTypeByIdentity *Devm_LpuBoards_LpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclType_ByIdentity `protobuf:"bytes,3,opt,name=ipv4_acl_type_by_identity,json=by-identity,proto3,oneof"`
}

type Devm_LpuBoards_LpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclTypeByNumber struct {
	Ipv4AclTypeByNumber *Devm_LpuBoards_LpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclType_ByNumber `protobuf:"bytes,4,opt,name=ipv4_acl_type_by_number,json=by-number,proto3,oneof"`
}

func (*Devm_LpuBoards_LpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclTypeByIdentity) isDevm_LpuBoards_LpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclType() {
}

func (*Devm_LpuBoards_LpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclTypeByNumber) isDevm_LpuBoards_LpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclType() {
}

type Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrasHostCar []*Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar `protobuf:"bytes,1,rep,name=bras_host_car,json=bras-host-car,proto3" json:"bras_host_car,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars) Reset() {
	*x = Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[251]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[251]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 5, 1}
}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars) GetBrasHostCar() []*Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar {
	if x != nil {
		return x.BrasHostCar
	}
	return nil
}

type Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpuCar []*Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar `protobuf:"bytes,1,rep,name=spu_car,json=spu-car,proto3" json:"spu_car,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars) Reset() {
	*x = Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[252]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[252]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 5, 2}
}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars) GetSpuCar() []*Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar {
	if x != nil {
		return x.SpuCar
	}
	return nil
}

type Devm_LpuBoards_LpuBoard_CpudefendDevm_ArpVlanCar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlarmDropRate bool                                                        `protobuf:"varint,1,opt,name=alarm_drop_rate,json=alarm-drop-rate,proto3" json:"alarm_drop_rate,omitempty"`
	Level_2Car    *Devm_LpuBoards_LpuBoard_CpudefendDevm_ArpVlanCar_Level2Car `protobuf:"bytes,2,opt,name=level_2_car,json=level-2-car,proto3" json:"level_2_car,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_ArpVlanCar) Reset() {
	*x = Devm_LpuBoards_LpuBoard_CpudefendDevm_ArpVlanCar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[253]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_ArpVlanCar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_CpudefendDevm_ArpVlanCar) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_ArpVlanCar) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[253]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_CpudefendDevm_ArpVlanCar.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_CpudefendDevm_ArpVlanCar) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 5, 3}
}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_ArpVlanCar) GetAlarmDropRate() bool {
	if x != nil {
		return x.AlarmDropRate
	}
	return false
}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_ArpVlanCar) GetLevel_2Car() *Devm_LpuBoards_LpuBoard_CpudefendDevm_ArpVlanCar_Level2Car {
	if x != nil {
		return x.Level_2Car
	}
	return nil
}

type Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NdAttackAlarms *Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms `protobuf:"bytes,1,opt,name=nd_attack_alarms,json=nd-attack-alarms,proto3" json:"nd_attack_alarms,omitempty"`
	Level_2Cars    *Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_Level2Cars     `protobuf:"bytes,2,opt,name=level_2_cars,json=level-2-cars,proto3" json:"level_2_cars,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar) Reset() {
	*x = Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[254]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[254]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 5, 4}
}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar) GetNdAttackAlarms() *Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms {
	if x != nil {
		return x.NdAttackAlarms
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar) GetLevel_2Cars() *Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_Level2Cars {
	if x != nil {
		return x.Level_2Cars
	}
	return nil
}

type Devm_LpuBoards_LpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclType_ByIdentity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ipv4Acl string `protobuf:"bytes,1,opt,name=ipv4_acl,json=ipv4-acl,proto3" json:"ipv4_acl,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclType_ByIdentity) Reset() {
	*x = Devm_LpuBoards_LpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclType_ByIdentity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[255]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclType_ByIdentity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclType_ByIdentity) ProtoMessage() {
}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclType_ByIdentity) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[255]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclType_ByIdentity.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclType_ByIdentity) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 5, 0, 0}
}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclType_ByIdentity) GetIpv4Acl() string {
	if x != nil {
		return x.Ipv4Acl
	}
	return ""
}

type Devm_LpuBoards_LpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclType_ByNumber struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ipv4AclNumber uint32 `protobuf:"varint,1,opt,name=ipv4_acl_number,json=ipv4-acl-number,proto3" json:"ipv4_acl_number,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclType_ByNumber) Reset() {
	*x = Devm_LpuBoards_LpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclType_ByNumber{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[256]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclType_ByNumber) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclType_ByNumber) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclType_ByNumber) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[256]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclType_ByNumber.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclType_ByNumber) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 5, 0, 1}
}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclType_ByNumber) GetIpv4AclNumber() uint32 {
	if x != nil {
		return x.Ipv4AclNumber
	}
	return 0
}

type Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type         Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_Type          `protobuf:"varint,1,opt,name=type,proto3,enum=huawei_devm.Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_Type" json:"type,omitempty"`
	RateLimit    *Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_RateLimit    `protobuf:"bytes,2,opt,name=rate_limit,json=rate-limit,proto3" json:"rate_limit,omitempty"`
	Logging      *Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_Logging      `protobuf:"bytes,3,opt,name=logging,proto3" json:"logging,omitempty"`
	AttackDetect *Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_AttackDetect `protobuf:"bytes,4,opt,name=attack_detect,json=attack-detect,proto3" json:"attack_detect,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar) Reset() {
	*x = Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[257]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[257]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 5, 1, 0}
}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar) GetType() Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_Type {
	if x != nil {
		return x.Type
	}
	return Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_INVALID_ENUM_VALUE_Type
}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar) GetRateLimit() *Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_RateLimit {
	if x != nil {
		return x.RateLimit
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar) GetLogging() *Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_Logging {
	if x != nil {
		return x.Logging
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar) GetAttackDetect() *Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_AttackDetect {
	if x != nil {
		return x.AttackDetect
	}
	return nil
}

type Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_RateLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cir              uint32 `protobuf:"varint,1,opt,name=cir,proto3" json:"cir,omitempty"`
	Cbs              uint32 `protobuf:"varint,2,opt,name=cbs,proto3" json:"cbs,omitempty"`
	Pir              uint32 `protobuf:"varint,3,opt,name=pir,proto3" json:"pir,omitempty"`
	Pbs              uint32 `protobuf:"varint,4,opt,name=pbs,proto3" json:"pbs,omitempty"`
	AutoAdjustEnable bool   `protobuf:"varint,5,opt,name=auto_adjust_enable,json=auto-adjust-enable,proto3" json:"auto_adjust_enable,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_RateLimit) Reset() {
	*x = Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_RateLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[258]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_RateLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_RateLimit) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_RateLimit) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[258]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_RateLimit.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_RateLimit) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 5, 1, 0, 0}
}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_RateLimit) GetCir() uint32 {
	if x != nil {
		return x.Cir
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_RateLimit) GetCbs() uint32 {
	if x != nil {
		return x.Cbs
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_RateLimit) GetPir() uint32 {
	if x != nil {
		return x.Pir
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_RateLimit) GetPbs() uint32 {
	if x != nil {
		return x.Pbs
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_RateLimit) GetAutoAdjustEnable() bool {
	if x != nil {
		return x.AutoAdjustEnable
	}
	return false
}

type Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_Logging struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interval         uint32 `protobuf:"varint,1,opt,name=interval,proto3" json:"interval,omitempty"`
	DiscardThreshold uint32 `protobuf:"varint,2,opt,name=discard_threshold,json=discard-threshold,proto3" json:"discard_threshold,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_Logging) Reset() {
	*x = Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_Logging{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[259]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_Logging) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_Logging) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_Logging) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[259]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_Logging.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_Logging) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 5, 1, 0, 1}
}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_Logging) GetInterval() uint32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_Logging) GetDiscardThreshold() uint32 {
	if x != nil {
		return x.DiscardThreshold
	}
	return 0
}

type Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_AttackDetect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DropRateThreshold uint32 `protobuf:"varint,1,opt,name=drop_rate_threshold,json=drop-rate-threshold,proto3" json:"drop_rate_threshold,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_AttackDetect) Reset() {
	*x = Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_AttackDetect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[260]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_AttackDetect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_AttackDetect) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_AttackDetect) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[260]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_AttackDetect.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_AttackDetect) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 5, 1, 0, 2}
}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_AttackDetect) GetDropRateThreshold() uint32 {
	if x != nil {
		return x.DropRateThreshold
	}
	return 0
}

type Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CarType Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType `protobuf:"varint,1,opt,name=car_type,json=car-type,proto3,enum=huawei_devm.Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType" json:"car_type,omitempty"`
	Cir     uint32                                                       `protobuf:"varint,2,opt,name=cir,proto3" json:"cir,omitempty"`
	Cbs     uint32                                                       `protobuf:"varint,3,opt,name=cbs,proto3" json:"cbs,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar) Reset() {
	*x = Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[261]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[261]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 5, 2, 0}
}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar) GetCarType() Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType {
	if x != nil {
		return x.CarType
	}
	return Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar_INVALID_ENUM_VALUE_CarType
}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar) GetCir() uint32 {
	if x != nil {
		return x.Cir
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar) GetCbs() uint32 {
	if x != nil {
		return x.Cbs
	}
	return 0
}

type Devm_LpuBoards_LpuBoard_CpudefendDevm_ArpVlanCar_Level2Car struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RateLimitPercent uint32 `protobuf:"varint,1,opt,name=rate_limit_percent,json=rate-limit-percent,proto3" json:"rate_limit_percent,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_ArpVlanCar_Level2Car) Reset() {
	*x = Devm_LpuBoards_LpuBoard_CpudefendDevm_ArpVlanCar_Level2Car{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[262]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_ArpVlanCar_Level2Car) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_CpudefendDevm_ArpVlanCar_Level2Car) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_ArpVlanCar_Level2Car) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[262]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_CpudefendDevm_ArpVlanCar_Level2Car.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_CpudefendDevm_ArpVlanCar_Level2Car) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 5, 3, 0}
}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_ArpVlanCar_Level2Car) GetRateLimitPercent() uint32 {
	if x != nil {
		return x.RateLimitPercent
	}
	return 0
}

type Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NdAttackAlarm []*Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms_NdAttackAlarm `protobuf:"bytes,1,rep,name=nd_attack_alarm,json=nd-attack-alarm,proto3" json:"nd_attack_alarm,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms) Reset() {
	*x = Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[263]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[263]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 5, 4, 0}
}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms) GetNdAttackAlarm() []*Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms_NdAttackAlarm {
	if x != nil {
		return x.NdAttackAlarm
	}
	return nil
}

type Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_Level2Cars struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level_2Car []*Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_Level2Cars_Level2Car `protobuf:"bytes,1,rep,name=level_2_car,json=level-2-car,proto3" json:"level_2_car,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_Level2Cars) Reset() {
	*x = Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_Level2Cars{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[264]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_Level2Cars) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_Level2Cars) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_Level2Cars) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[264]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_Level2Cars.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_Level2Cars) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 5, 4, 1}
}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_Level2Cars) GetLevel_2Car() []*Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_Level2Cars_Level2Car {
	if x != nil {
		return x.Level_2Car
	}
	return nil
}

type Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms_NdAttackAlarm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms_NdAttackAlarm_Type `protobuf:"varint,1,opt,name=type,proto3,enum=huawei_devm.Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms_NdAttackAlarm_Type" json:"type,omitempty"`
	AlarmEnable bool                                                                              `protobuf:"varint,2,opt,name=alarm_enable,json=alarm-enable,proto3" json:"alarm_enable,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms_NdAttackAlarm) Reset() {
	*x = Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms_NdAttackAlarm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[265]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms_NdAttackAlarm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms_NdAttackAlarm) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms_NdAttackAlarm) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[265]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms_NdAttackAlarm.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms_NdAttackAlarm) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 5, 4, 0, 0}
}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms_NdAttackAlarm) GetType() Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms_NdAttackAlarm_Type {
	if x != nil {
		return x.Type
	}
	return Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms_NdAttackAlarm_INVALID_ENUM_VALUE_Type
}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms_NdAttackAlarm) GetAlarmEnable() bool {
	if x != nil {
		return x.AlarmEnable
	}
	return false
}

type Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_Level2Cars_Level2Car struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type             Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_Level2Cars_Level2Car_Type `protobuf:"varint,1,opt,name=type,proto3,enum=huawei_devm.Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_Level2Cars_Level2Car_Type" json:"type,omitempty"`
	RateLimitPercent uint32                                                                    `protobuf:"varint,2,opt,name=rate_limit_percent,json=rate-limit-percent,proto3" json:"rate_limit_percent,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_Level2Cars_Level2Car) Reset() {
	*x = Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_Level2Cars_Level2Car{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[266]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_Level2Cars_Level2Car) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_Level2Cars_Level2Car) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_Level2Cars_Level2Car) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[266]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_Level2Cars_Level2Car.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_Level2Cars_Level2Car) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 5, 4, 1, 0}
}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_Level2Cars_Level2Car) GetType() Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_Level2Cars_Level2Car_Type {
	if x != nil {
		return x.Type
	}
	return Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_Level2Cars_Level2Car_INVALID_ENUM_VALUE_Type
}

func (x *Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_Level2Cars_Level2Car) GetRateLimitPercent() uint32 {
	if x != nil {
		return x.RateLimitPercent
	}
	return 0
}

type Devm_LpuBoards_LpuBoard_Driver_L3Clocks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	L3Clock []*Devm_LpuBoards_LpuBoard_Driver_L3Clocks_L3Clock `protobuf:"bytes,1,rep,name=l3_clock,json=l3-clock,proto3" json:"l3_clock,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Driver_L3Clocks) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Driver_L3Clocks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[267]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Driver_L3Clocks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Driver_L3Clocks) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Driver_L3Clocks) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[267]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Driver_L3Clocks.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Driver_L3Clocks) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 6, 0}
}

func (x *Devm_LpuBoards_LpuBoard_Driver_L3Clocks) GetL3Clock() []*Devm_LpuBoards_LpuBoard_Driver_L3Clocks_L3Clock {
	if x != nil {
		return x.L3Clock
	}
	return nil
}

type Devm_LpuBoards_LpuBoard_Driver_L3Clocks_L3Clock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClockId      string                                                       `protobuf:"bytes,1,opt,name=clock_id,json=clock-id,proto3" json:"clock_id,omitempty"`
	L3ClockState Devm_LpuBoards_LpuBoard_Driver_L3Clocks_L3Clock_L3ClockState `protobuf:"varint,2,opt,name=l3_clock_state,json=l3-clock-state,proto3,enum=huawei_devm.Devm_LpuBoards_LpuBoard_Driver_L3Clocks_L3Clock_L3ClockState" json:"l3_clock_state,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Driver_L3Clocks_L3Clock) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Driver_L3Clocks_L3Clock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[268]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Driver_L3Clocks_L3Clock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Driver_L3Clocks_L3Clock) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Driver_L3Clocks_L3Clock) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[268]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Driver_L3Clocks_L3Clock.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Driver_L3Clocks_L3Clock) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 6, 0, 0}
}

func (x *Devm_LpuBoards_LpuBoard_Driver_L3Clocks_L3Clock) GetClockId() string {
	if x != nil {
		return x.ClockId
	}
	return ""
}

func (x *Devm_LpuBoards_LpuBoard_Driver_L3Clocks_L3Clock) GetL3ClockState() Devm_LpuBoards_LpuBoard_Driver_L3Clocks_L3Clock_L3ClockState {
	if x != nil {
		return x.L3ClockState
	}
	return Devm_LpuBoards_LpuBoard_Driver_L3Clocks_L3Clock_L3ClockState_ABNORMAL
}

type Devm_LpuBoards_LpuBoard_FlowspecForward_Ipv6FlowspecEnable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Devm_LpuBoards_LpuBoard_FlowspecForward_Ipv6FlowspecEnable) Reset() {
	*x = Devm_LpuBoards_LpuBoard_FlowspecForward_Ipv6FlowspecEnable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[269]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_FlowspecForward_Ipv6FlowspecEnable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_FlowspecForward_Ipv6FlowspecEnable) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_FlowspecForward_Ipv6FlowspecEnable) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[269]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_FlowspecForward_Ipv6FlowspecEnable.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_FlowspecForward_Ipv6FlowspecEnable) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 11, 0}
}

type Devm_LpuBoards_LpuBoard_Loadbalance_DynamicAdjust struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Loadbalance_DynamicAdjust) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Loadbalance_DynamicAdjust{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[270]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Loadbalance_DynamicAdjust) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Loadbalance_DynamicAdjust) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Loadbalance_DynamicAdjust) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[270]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Loadbalance_DynamicAdjust.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Loadbalance_DynamicAdjust) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 14, 0}
}

func (x *Devm_LpuBoards_LpuBoard_Loadbalance_DynamicAdjust) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

type Devm_LpuBoards_LpuBoard_Loadbalance_HashArithmetic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arithmetic     Devm_LpuBoards_LpuBoard_Loadbalance_HashArithmetic_Arithmetic `protobuf:"varint,1,opt,name=arithmetic,proto3,enum=huawei_devm.Devm_LpuBoards_LpuBoard_Loadbalance_HashArithmetic_Arithmetic" json:"arithmetic,omitempty"`
	SecondHashFlag bool                                                          `protobuf:"varint,2,opt,name=second_hash_flag,json=second-hash-flag,proto3" json:"second_hash_flag,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Loadbalance_HashArithmetic) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Loadbalance_HashArithmetic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[271]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Loadbalance_HashArithmetic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Loadbalance_HashArithmetic) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Loadbalance_HashArithmetic) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[271]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Loadbalance_HashArithmetic.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Loadbalance_HashArithmetic) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 14, 1}
}

func (x *Devm_LpuBoards_LpuBoard_Loadbalance_HashArithmetic) GetArithmetic() Devm_LpuBoards_LpuBoard_Loadbalance_HashArithmetic_Arithmetic {
	if x != nil {
		return x.Arithmetic
	}
	return Devm_LpuBoards_LpuBoard_Loadbalance_HashArithmetic_INVALID_ENUM_VALUE_Arithmetic
}

func (x *Devm_LpuBoards_LpuBoard_Loadbalance_HashArithmetic) GetSecondHashFlag() bool {
	if x != nil {
		return x.SecondHashFlag
	}
	return false
}

type Devm_LpuBoards_LpuBoard_Loadbalance_HashFields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HashField []*Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField `protobuf:"bytes,1,rep,name=hash_field,json=hash-field,proto3" json:"hash_field,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Loadbalance_HashFields) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Loadbalance_HashFields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[272]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Loadbalance_HashFields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Loadbalance_HashFields) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Loadbalance_HashFields) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[272]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Loadbalance_HashFields.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Loadbalance_HashFields) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 14, 2}
}

func (x *Devm_LpuBoards_LpuBoard_Loadbalance_HashFields) GetHashField() []*Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField {
	if x != nil {
		return x.HashField
	}
	return nil
}

type Devm_LpuBoards_LpuBoard_Loadbalance_HashSeed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RandomFlag bool   `protobuf:"varint,1,opt,name=random_flag,json=random-flag,proto3" json:"random_flag,omitempty"`
	CustomSeed string `protobuf:"bytes,2,opt,name=custom_seed,json=custom-seed,proto3" json:"custom_seed,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Loadbalance_HashSeed) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Loadbalance_HashSeed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[273]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Loadbalance_HashSeed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Loadbalance_HashSeed) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Loadbalance_HashSeed) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[273]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Loadbalance_HashSeed.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Loadbalance_HashSeed) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 14, 3}
}

func (x *Devm_LpuBoards_LpuBoard_Loadbalance_HashSeed) GetRandomFlag() bool {
	if x != nil {
		return x.RandomFlag
	}
	return false
}

func (x *Devm_LpuBoards_LpuBoard_Loadbalance_HashSeed) GetCustomSeed() string {
	if x != nil {
		return x.CustomSeed
	}
	return ""
}

type Devm_LpuBoards_LpuBoard_Loadbalance_HashMultipe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MultipeFlag Devm_LpuBoards_LpuBoard_Loadbalance_HashMultipe_MultipeFlag `protobuf:"varint,1,opt,name=multipe_flag,json=multipe-flag,proto3,enum=huawei_devm.Devm_LpuBoards_LpuBoard_Loadbalance_HashMultipe_MultipeFlag" json:"multipe_flag,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Loadbalance_HashMultipe) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Loadbalance_HashMultipe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[274]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Loadbalance_HashMultipe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Loadbalance_HashMultipe) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Loadbalance_HashMultipe) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[274]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Loadbalance_HashMultipe.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Loadbalance_HashMultipe) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 14, 4}
}

func (x *Devm_LpuBoards_LpuBoard_Loadbalance_HashMultipe) GetMultipeFlag() Devm_LpuBoards_LpuBoard_Loadbalance_HashMultipe_MultipeFlag {
	if x != nil {
		return x.MultipeFlag
	}
	return Devm_LpuBoards_LpuBoard_Loadbalance_HashMultipe_MultipeFlag_ENABLE
}

type Devm_LpuBoards_LpuBoard_Loadbalance_Hashs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash []*Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash `protobuf:"bytes,1,rep,name=hash,proto3" json:"hash,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Loadbalance_Hashs) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Loadbalance_Hashs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[275]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Loadbalance_Hashs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Loadbalance_Hashs) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Loadbalance_Hashs) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[275]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Loadbalance_Hashs.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Loadbalance_Hashs) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 14, 5}
}

func (x *Devm_LpuBoards_LpuBoard_Loadbalance_Hashs) GetHash() []*Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash {
	if x != nil {
		return x.Hash
	}
	return nil
}

type Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrunkEcmp Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField_TrunkEcmp `protobuf:"varint,1,opt,name=trunk_ecmp,json=trunk-ecmp,proto3,enum=huawei_devm.Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField_TrunkEcmp" json:"trunk_ecmp,omitempty"`
	Material  Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField_Material  `protobuf:"varint,2,opt,name=material,proto3,enum=huawei_devm.Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField_Material" json:"material,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[276]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[276]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 14, 2, 0}
}

func (x *Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField) GetTrunkEcmp() Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField_TrunkEcmp {
	if x != nil {
		return x.TrunkEcmp
	}
	return Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField_INVALID_ENUM_VALUE_TrunkEcmp
}

func (x *Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField) GetMaterial() Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField_Material {
	if x != nil {
		return x.Material
	}
	return Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField_INVALID_ENUM_VALUE_Material
}

type Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_Type       `protobuf:"varint,1,opt,name=type,proto3,enum=huawei_devm.Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_Type" json:"type,omitempty"`
	TrunkEcmp  Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_TrunkEcmp  `protobuf:"varint,2,opt,name=trunk_ecmp,json=trunk-ecmp,proto3,enum=huawei_devm.Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_TrunkEcmp" json:"trunk_ecmp,omitempty"`
	Arithmetic Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_Arithmetic `protobuf:"varint,3,opt,name=arithmetic,proto3,enum=huawei_devm.Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_Arithmetic" json:"arithmetic,omitempty"`
	Box1       string                                                    `protobuf:"bytes,4,opt,name=box1,proto3" json:"box1,omitempty"`
	Box2       string                                                    `protobuf:"bytes,5,opt,name=box2,proto3" json:"box2,omitempty"`
	Material   Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_Material   `protobuf:"varint,6,opt,name=material,proto3,enum=huawei_devm.Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_Material" json:"material,omitempty"`
	RandomFlag bool                                                      `protobuf:"varint,7,opt,name=random_flag,json=random-flag,proto3" json:"random_flag,omitempty"`
	CustomSeed string                                                    `protobuf:"bytes,8,opt,name=custom_seed,json=custom-seed,proto3" json:"custom_seed,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[277]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[277]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 14, 5, 0}
}

func (x *Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash) GetType() Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_Type {
	if x != nil {
		return x.Type
	}
	return Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_INVALID_ENUM_VALUE_Type
}

func (x *Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash) GetTrunkEcmp() Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_TrunkEcmp {
	if x != nil {
		return x.TrunkEcmp
	}
	return Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_TrunkEcmp_INVALID
}

func (x *Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash) GetArithmetic() Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_Arithmetic {
	if x != nil {
		return x.Arithmetic
	}
	return Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_INVALID_ENUM_VALUE_Arithmetic
}

func (x *Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash) GetBox1() string {
	if x != nil {
		return x.Box1
	}
	return ""
}

func (x *Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash) GetBox2() string {
	if x != nil {
		return x.Box2
	}
	return ""
}

func (x *Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash) GetMaterial() Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_Material {
	if x != nil {
		return x.Material
	}
	return Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_Material_INVALID
}

func (x *Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash) GetRandomFlag() bool {
	if x != nil {
		return x.RandomFlag
	}
	return false
}

func (x *Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash) GetCustomSeed() string {
	if x != nil {
		return x.CustomSeed
	}
	return ""
}

type Devm_LpuBoards_LpuBoard_Mirror_SlotObserve struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObserveIndex uint32 `protobuf:"varint,1,opt,name=observe_index,json=observe-index,proto3" json:"observe_index,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Mirror_SlotObserve) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Mirror_SlotObserve{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[278]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Mirror_SlotObserve) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Mirror_SlotObserve) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Mirror_SlotObserve) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[278]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Mirror_SlotObserve.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Mirror_SlotObserve) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 16, 0}
}

func (x *Devm_LpuBoards_LpuBoard_Mirror_SlotObserve) GetObserveIndex() uint32 {
	if x != nil {
		return x.ObserveIndex
	}
	return 0
}

type Devm_LpuBoards_LpuBoard_Mirror_RateLimitPercent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RateValue uint32 `protobuf:"varint,1,opt,name=rate_value,json=rate-value,proto3" json:"rate_value,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Mirror_RateLimitPercent) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Mirror_RateLimitPercent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[279]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Mirror_RateLimitPercent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Mirror_RateLimitPercent) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Mirror_RateLimitPercent) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[279]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Mirror_RateLimitPercent.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Mirror_RateLimitPercent) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 16, 1}
}

func (x *Devm_LpuBoards_LpuBoard_Mirror_RateLimitPercent) GetRateValue() uint32 {
	if x != nil {
		return x.RateValue
	}
	return 0
}

type Devm_LpuBoards_LpuBoard_Mirror_ObserveFilters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObserveFilter []*Devm_LpuBoards_LpuBoard_Mirror_ObserveFilters_ObserveFilter `protobuf:"bytes,1,rep,name=observe_filter,json=observe-filter,proto3" json:"observe_filter,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Mirror_ObserveFilters) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Mirror_ObserveFilters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[280]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Mirror_ObserveFilters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Mirror_ObserveFilters) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Mirror_ObserveFilters) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[280]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Mirror_ObserveFilters.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Mirror_ObserveFilters) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 16, 2}
}

func (x *Devm_LpuBoards_LpuBoard_Mirror_ObserveFilters) GetObserveFilter() []*Devm_LpuBoards_LpuBoard_Mirror_ObserveFilters_ObserveFilter {
	if x != nil {
		return x.ObserveFilter
	}
	return nil
}

type Devm_LpuBoards_LpuBoard_Mirror_ObserveFilters_ObserveFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilterId       uint32 `protobuf:"varint,1,opt,name=filter_id,json=filter-id,proto3" json:"filter_id,omitempty"`
	SrcIpaddr      string `protobuf:"bytes,2,opt,name=src_ipaddr,json=src-ipaddr,proto3" json:"src_ipaddr,omitempty"`
	SrcIpaddrMask  string `protobuf:"bytes,3,opt,name=src_ipaddr_mask,json=src-ipaddr-mask,proto3" json:"src_ipaddr_mask,omitempty"`
	DstIpaddr      string `protobuf:"bytes,4,opt,name=dst_ipaddr,json=dst-ipaddr,proto3" json:"dst_ipaddr,omitempty"`
	DstIpaddrMask  string `protobuf:"bytes,5,opt,name=dst_ipaddr_mask,json=dst-ipaddr-mask,proto3" json:"dst_ipaddr_mask,omitempty"`
	SrcPort        uint32 `protobuf:"varint,6,opt,name=src_port,json=src-port,proto3" json:"src_port,omitempty"`
	DstPort        uint32 `protobuf:"varint,7,opt,name=dst_port,json=dst-port,proto3" json:"dst_port,omitempty"`
	SrcMacaddr     string `protobuf:"bytes,8,opt,name=src_macaddr,json=src-macaddr,proto3" json:"src_macaddr,omitempty"`
	PppoeSessionId uint32 `protobuf:"varint,9,opt,name=pppoe_session_id,json=pppoe-session-id,proto3" json:"pppoe_session_id,omitempty"`
	DstMacaddr     string `protobuf:"bytes,10,opt,name=dst_macaddr,json=dst-macaddr,proto3" json:"dst_macaddr,omitempty"`
	Vlan           uint32 `protobuf:"varint,11,opt,name=vlan,proto3" json:"vlan,omitempty"`
	EthType        string `protobuf:"bytes,12,opt,name=eth_type,json=eth-type,proto3" json:"eth_type,omitempty"`
	// Types that are assignable to ProtocolType:
	//	*Devm_LpuBoards_LpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolTypePpp
	//	*Devm_LpuBoards_LpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolTypeIp
	ProtocolType isDevm_LpuBoards_LpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolType `protobuf_oneof:"ProtocolType"`
}

func (x *Devm_LpuBoards_LpuBoard_Mirror_ObserveFilters_ObserveFilter) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Mirror_ObserveFilters_ObserveFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[281]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Mirror_ObserveFilters_ObserveFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Mirror_ObserveFilters_ObserveFilter) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Mirror_ObserveFilters_ObserveFilter) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[281]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Mirror_ObserveFilters_ObserveFilter.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Mirror_ObserveFilters_ObserveFilter) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 16, 2, 0}
}

func (x *Devm_LpuBoards_LpuBoard_Mirror_ObserveFilters_ObserveFilter) GetFilterId() uint32 {
	if x != nil {
		return x.FilterId
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_Mirror_ObserveFilters_ObserveFilter) GetSrcIpaddr() string {
	if x != nil {
		return x.SrcIpaddr
	}
	return ""
}

func (x *Devm_LpuBoards_LpuBoard_Mirror_ObserveFilters_ObserveFilter) GetSrcIpaddrMask() string {
	if x != nil {
		return x.SrcIpaddrMask
	}
	return ""
}

func (x *Devm_LpuBoards_LpuBoard_Mirror_ObserveFilters_ObserveFilter) GetDstIpaddr() string {
	if x != nil {
		return x.DstIpaddr
	}
	return ""
}

func (x *Devm_LpuBoards_LpuBoard_Mirror_ObserveFilters_ObserveFilter) GetDstIpaddrMask() string {
	if x != nil {
		return x.DstIpaddrMask
	}
	return ""
}

func (x *Devm_LpuBoards_LpuBoard_Mirror_ObserveFilters_ObserveFilter) GetSrcPort() uint32 {
	if x != nil {
		return x.SrcPort
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_Mirror_ObserveFilters_ObserveFilter) GetDstPort() uint32 {
	if x != nil {
		return x.DstPort
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_Mirror_ObserveFilters_ObserveFilter) GetSrcMacaddr() string {
	if x != nil {
		return x.SrcMacaddr
	}
	return ""
}

func (x *Devm_LpuBoards_LpuBoard_Mirror_ObserveFilters_ObserveFilter) GetPppoeSessionId() uint32 {
	if x != nil {
		return x.PppoeSessionId
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_Mirror_ObserveFilters_ObserveFilter) GetDstMacaddr() string {
	if x != nil {
		return x.DstMacaddr
	}
	return ""
}

func (x *Devm_LpuBoards_LpuBoard_Mirror_ObserveFilters_ObserveFilter) GetVlan() uint32 {
	if x != nil {
		return x.Vlan
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_Mirror_ObserveFilters_ObserveFilter) GetEthType() string {
	if x != nil {
		return x.EthType
	}
	return ""
}

func (m *Devm_LpuBoards_LpuBoard_Mirror_ObserveFilters_ObserveFilter) GetProtocolType() isDevm_LpuBoards_LpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolType {
	if m != nil {
		return m.ProtocolType
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_Mirror_ObserveFilters_ObserveFilter) GetProtocolTypePpp() *Devm_LpuBoards_LpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolType_Ppp {
	if x, ok := x.GetProtocolType().(*Devm_LpuBoards_LpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolTypePpp); ok {
		return x.ProtocolTypePpp
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_Mirror_ObserveFilters_ObserveFilter) GetProtocolTypeIp() *Devm_LpuBoards_LpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolType_Ip {
	if x, ok := x.GetProtocolType().(*Devm_LpuBoards_LpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolTypeIp); ok {
		return x.ProtocolTypeIp
	}
	return nil
}

type isDevm_LpuBoards_LpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolType interface {
	isDevm_LpuBoards_LpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolType()
}

type Devm_LpuBoards_LpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolTypePpp struct {
	ProtocolTypePpp *Devm_LpuBoards_LpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolType_Ppp `protobuf:"bytes,13,opt,name=protocol_type_ppp,json=ppp,proto3,oneof"`
}

type Devm_LpuBoards_LpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolTypeIp struct {
	ProtocolTypeIp *Devm_LpuBoards_LpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolType_Ip `protobuf:"bytes,14,opt,name=protocol_type_ip,json=ip,proto3,oneof"`
}

func (*Devm_LpuBoards_LpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolTypePpp) isDevm_LpuBoards_LpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolType() {
}

func (*Devm_LpuBoards_LpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolTypeIp) isDevm_LpuBoards_LpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolType() {
}

type Devm_LpuBoards_LpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolType_Ppp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PppProtocol string `protobuf:"bytes,1,opt,name=ppp_protocol,json=ppp-protocol,proto3" json:"ppp_protocol,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolType_Ppp) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolType_Ppp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[282]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolType_Ppp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolType_Ppp) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolType_Ppp) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[282]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolType_Ppp.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolType_Ppp) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 16, 2, 0, 0}
}

func (x *Devm_LpuBoards_LpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolType_Ppp) GetPppProtocol() string {
	if x != nil {
		return x.PppProtocol
	}
	return ""
}

type Devm_LpuBoards_LpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolType_Ip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpProtocol uint32 `protobuf:"varint,1,opt,name=ip_protocol,json=ip-protocol,proto3" json:"ip_protocol,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolType_Ip) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolType_Ip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[283]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolType_Ip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolType_Ip) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolType_Ip) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[283]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolType_Ip.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolType_Ip) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 16, 2, 0, 1}
}

func (x *Devm_LpuBoards_LpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolType_Ip) GetIpProtocol() uint32 {
	if x != nil {
		return x.IpProtocol
	}
	return 0
}

type Devm_LpuBoards_LpuBoard_MplsForward_MplsHashMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hashcfg Devm_LpuBoards_LpuBoard_MplsForward_MplsHashMode_Hashcfg `protobuf:"varint,1,opt,name=hashcfg,proto3,enum=huawei_devm.Devm_LpuBoards_LpuBoard_MplsForward_MplsHashMode_Hashcfg" json:"hashcfg,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_MplsForward_MplsHashMode) Reset() {
	*x = Devm_LpuBoards_LpuBoard_MplsForward_MplsHashMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[284]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_MplsForward_MplsHashMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_MplsForward_MplsHashMode) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_MplsForward_MplsHashMode) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[284]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_MplsForward_MplsHashMode.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_MplsForward_MplsHashMode) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 17, 0}
}

func (x *Devm_LpuBoards_LpuBoard_MplsForward_MplsHashMode) GetHashcfg() Devm_LpuBoards_LpuBoard_MplsForward_MplsHashMode_Hashcfg {
	if x != nil {
		return x.Hashcfg
	}
	return Devm_LpuBoards_LpuBoard_MplsForward_MplsHashMode_INVALID_ENUM_VALUE_Hashcfg
}

type Devm_LpuBoards_LpuBoard_MplsForward_Mplsfrags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MplsfragEnable Devm_LpuBoards_LpuBoard_MplsForward_Mplsfrags_MplsfragEnable `protobuf:"varint,1,opt,name=mplsfrag_enable,json=mplsfrag-enable,proto3,enum=huawei_devm.Devm_LpuBoards_LpuBoard_MplsForward_Mplsfrags_MplsfragEnable" json:"mplsfrag_enable,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_MplsForward_Mplsfrags) Reset() {
	*x = Devm_LpuBoards_LpuBoard_MplsForward_Mplsfrags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[285]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_MplsForward_Mplsfrags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_MplsForward_Mplsfrags) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_MplsForward_Mplsfrags) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[285]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_MplsForward_Mplsfrags.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_MplsForward_Mplsfrags) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 17, 1}
}

func (x *Devm_LpuBoards_LpuBoard_MplsForward_Mplsfrags) GetMplsfragEnable() Devm_LpuBoards_LpuBoard_MplsForward_Mplsfrags_MplsfragEnable {
	if x != nil {
		return x.MplsfragEnable
	}
	return Devm_LpuBoards_LpuBoard_MplsForward_Mplsfrags_MplsfragEnable_DISABLE
}

type Devm_LpuBoards_LpuBoard_MplsForward_MplsLoadCtrwords struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MplsloadCtrwordDisable Devm_LpuBoards_LpuBoard_MplsForward_MplsLoadCtrwords_MplsloadCtrwordDisable `protobuf:"varint,1,opt,name=mplsload_ctrword_disable,json=mplsload-ctrword-disable,proto3,enum=huawei_devm.Devm_LpuBoards_LpuBoard_MplsForward_MplsLoadCtrwords_MplsloadCtrwordDisable" json:"mplsload_ctrword_disable,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_MplsForward_MplsLoadCtrwords) Reset() {
	*x = Devm_LpuBoards_LpuBoard_MplsForward_MplsLoadCtrwords{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[286]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_MplsForward_MplsLoadCtrwords) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_MplsForward_MplsLoadCtrwords) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_MplsForward_MplsLoadCtrwords) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[286]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_MplsForward_MplsLoadCtrwords.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_MplsForward_MplsLoadCtrwords) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 17, 2}
}

func (x *Devm_LpuBoards_LpuBoard_MplsForward_MplsLoadCtrwords) GetMplsloadCtrwordDisable() Devm_LpuBoards_LpuBoard_MplsForward_MplsLoadCtrwords_MplsloadCtrwordDisable {
	if x != nil {
		return x.MplsloadCtrwordDisable
	}
	return Devm_LpuBoards_LpuBoard_MplsForward_MplsLoadCtrwords_MplsloadCtrwordDisable_DISABLE
}

type Devm_LpuBoards_LpuBoard_Netstream_SamplerModes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SamplerMode []*Devm_LpuBoards_LpuBoard_Netstream_SamplerModes_SamplerMode `protobuf:"bytes,1,rep,name=sampler_mode,json=sampler-mode,proto3" json:"sampler_mode,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Netstream_SamplerModes) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Netstream_SamplerModes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[287]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Netstream_SamplerModes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Netstream_SamplerModes) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Netstream_SamplerModes) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[287]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Netstream_SamplerModes.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Netstream_SamplerModes) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 18, 0}
}

func (x *Devm_LpuBoards_LpuBoard_Netstream_SamplerModes) GetSamplerMode() []*Devm_LpuBoards_LpuBoard_Netstream_SamplerModes_SamplerMode {
	if x != nil {
		return x.SamplerMode
	}
	return nil
}

type Devm_LpuBoards_LpuBoard_Netstream_SequenceMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode Devm_LpuBoards_LpuBoard_Netstream_SequenceMode_Mode `protobuf:"varint,1,opt,name=mode,proto3,enum=huawei_devm.Devm_LpuBoards_LpuBoard_Netstream_SequenceMode_Mode" json:"mode,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Netstream_SequenceMode) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Netstream_SequenceMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[288]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Netstream_SequenceMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Netstream_SequenceMode) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Netstream_SequenceMode) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[288]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Netstream_SequenceMode.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Netstream_SequenceMode) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 18, 1}
}

func (x *Devm_LpuBoards_LpuBoard_Netstream_SequenceMode) GetMode() Devm_LpuBoards_LpuBoard_Netstream_SequenceMode_Mode {
	if x != nil {
		return x.Mode
	}
	return Devm_LpuBoards_LpuBoard_Netstream_SequenceMode_INVALID_ENUM_VALUE_Mode
}

type Devm_LpuBoards_LpuBoard_Netstream_ExportHosts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExportHost []*Devm_LpuBoards_LpuBoard_Netstream_ExportHosts_ExportHost `protobuf:"bytes,1,rep,name=export_host,json=export-host,proto3" json:"export_host,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Netstream_ExportHosts) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Netstream_ExportHosts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[289]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Netstream_ExportHosts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Netstream_ExportHosts) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Netstream_ExportHosts) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[289]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Netstream_ExportHosts.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Netstream_ExportHosts) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 18, 2}
}

func (x *Devm_LpuBoards_LpuBoard_Netstream_ExportHosts) GetExportHost() []*Devm_LpuBoards_LpuBoard_Netstream_ExportHosts_ExportHost {
	if x != nil {
		return x.ExportHost
	}
	return nil
}

type Devm_LpuBoards_LpuBoard_Netstream_SamplerModes_SamplerMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowType    Devm_LpuBoards_LpuBoard_Netstream_SamplerModes_SamplerMode_FlowType     `protobuf:"varint,1,opt,name=flow_type,json=flow-type,proto3,enum=huawei_devm.Devm_LpuBoards_LpuBoard_Netstream_SamplerModes_SamplerMode_FlowType" json:"flow_type,omitempty"`
	DestSlot    string                                                                  `protobuf:"bytes,3,opt,name=dest_slot,json=dest-slot,proto3" json:"dest_slot,omitempty"`
	SamplerMode Devm_LpuBoards_LpuBoard_Netstream_SamplerModes_SamplerMode_SamplerMode7 `protobuf:"varint,4,opt,name=sampler_mode,json=sampler-mode,proto3,enum=huawei_devm.Devm_LpuBoards_LpuBoard_Netstream_SamplerModes_SamplerMode_SamplerMode7" json:"sampler_mode,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Netstream_SamplerModes_SamplerMode) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Netstream_SamplerModes_SamplerMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[290]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Netstream_SamplerModes_SamplerMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Netstream_SamplerModes_SamplerMode) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Netstream_SamplerModes_SamplerMode) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[290]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Netstream_SamplerModes_SamplerMode.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Netstream_SamplerModes_SamplerMode) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 18, 0, 0}
}

func (x *Devm_LpuBoards_LpuBoard_Netstream_SamplerModes_SamplerMode) GetFlowType() Devm_LpuBoards_LpuBoard_Netstream_SamplerModes_SamplerMode_FlowType {
	if x != nil {
		return x.FlowType
	}
	return Devm_LpuBoards_LpuBoard_Netstream_SamplerModes_SamplerMode_FlowType_IPX_FLOW
}

func (x *Devm_LpuBoards_LpuBoard_Netstream_SamplerModes_SamplerMode) GetDestSlot() string {
	if x != nil {
		return x.DestSlot
	}
	return ""
}

func (x *Devm_LpuBoards_LpuBoard_Netstream_SamplerModes_SamplerMode) GetSamplerMode() Devm_LpuBoards_LpuBoard_Netstream_SamplerModes_SamplerMode_SamplerMode7 {
	if x != nil {
		return x.SamplerMode
	}
	return Devm_LpuBoards_LpuBoard_Netstream_SamplerModes_SamplerMode_SamplerMode7_SELF
}

type Devm_LpuBoards_LpuBoard_Netstream_ExportHosts_ExportHost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowType        Devm_LpuBoards_LpuBoard_Netstream_ExportHosts_ExportHost_FlowType    `protobuf:"varint,1,opt,name=flow_type,json=flow-type,proto3,enum=huawei_devm.Devm_LpuBoards_LpuBoard_Netstream_ExportHosts_ExportHost_FlowType" json:"flow_type,omitempty"`
	AddressType     Devm_LpuBoards_LpuBoard_Netstream_ExportHosts_ExportHost_AddressType `protobuf:"varint,2,opt,name=address_type,json=address-type,proto3,enum=huawei_devm.Devm_LpuBoards_LpuBoard_Netstream_ExportHosts_ExportHost_AddressType" json:"address_type,omitempty"`
	IpAddress       string                                                               `protobuf:"bytes,3,opt,name=ip_address,json=ip-address,proto3" json:"ip_address,omitempty"`
	DestinationPort uint32                                                               `protobuf:"varint,4,opt,name=destination_port,json=destination-port,proto3" json:"destination_port,omitempty"`
	VpnName         string                                                               `protobuf:"bytes,5,opt,name=vpn_name,json=vpn-name,proto3" json:"vpn_name,omitempty"`
	Dscp            uint32                                                               `protobuf:"varint,6,opt,name=dscp,proto3" json:"dscp,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Netstream_ExportHosts_ExportHost) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Netstream_ExportHosts_ExportHost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[291]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Netstream_ExportHosts_ExportHost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Netstream_ExportHosts_ExportHost) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Netstream_ExportHosts_ExportHost) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[291]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Netstream_ExportHosts_ExportHost.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Netstream_ExportHosts_ExportHost) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 18, 2, 0}
}

func (x *Devm_LpuBoards_LpuBoard_Netstream_ExportHosts_ExportHost) GetFlowType() Devm_LpuBoards_LpuBoard_Netstream_ExportHosts_ExportHost_FlowType {
	if x != nil {
		return x.FlowType
	}
	return Devm_LpuBoards_LpuBoard_Netstream_ExportHosts_ExportHost_FlowType_IPX_FLOW
}

func (x *Devm_LpuBoards_LpuBoard_Netstream_ExportHosts_ExportHost) GetAddressType() Devm_LpuBoards_LpuBoard_Netstream_ExportHosts_ExportHost_AddressType {
	if x != nil {
		return x.AddressType
	}
	return Devm_LpuBoards_LpuBoard_Netstream_ExportHosts_ExportHost_AddressType_IPV4
}

func (x *Devm_LpuBoards_LpuBoard_Netstream_ExportHosts_ExportHost) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *Devm_LpuBoards_LpuBoard_Netstream_ExportHosts_ExportHost) GetDestinationPort() uint32 {
	if x != nil {
		return x.DestinationPort
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_Netstream_ExportHosts_ExportHost) GetVpnName() string {
	if x != nil {
		return x.VpnName
	}
	return ""
}

func (x *Devm_LpuBoards_LpuBoard_Netstream_ExportHosts_ExportHost) GetDscp() uint32 {
	if x != nil {
		return x.Dscp
	}
	return 0
}

type Devm_LpuBoards_LpuBoard_Pbr_RoutingFilters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoutingFilter []*Devm_LpuBoards_LpuBoard_Pbr_RoutingFilters_RoutingFilter `protobuf:"bytes,1,rep,name=routing_filter,json=routing-filter,proto3" json:"routing_filter,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Pbr_RoutingFilters) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Pbr_RoutingFilters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[292]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Pbr_RoutingFilters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Pbr_RoutingFilters) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Pbr_RoutingFilters) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[292]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Pbr_RoutingFilters.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Pbr_RoutingFilters) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 19, 0}
}

func (x *Devm_LpuBoards_LpuBoard_Pbr_RoutingFilters) GetRoutingFilter() []*Devm_LpuBoards_LpuBoard_Pbr_RoutingFilters_RoutingFilter {
	if x != nil {
		return x.RoutingFilter
	}
	return nil
}

type Devm_LpuBoards_LpuBoard_Pbr_RoutingFilters_RoutingFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        Devm_LpuBoards_LpuBoard_Pbr_RoutingFilters_RoutingFilter_Type        `protobuf:"varint,1,opt,name=type,proto3,enum=huawei_devm.Devm_LpuBoards_LpuBoard_Pbr_RoutingFilters_RoutingFilter_Type" json:"type,omitempty"`
	RoutingType Devm_LpuBoards_LpuBoard_Pbr_RoutingFilters_RoutingFilter_RoutingType `protobuf:"varint,2,opt,name=routing_type,json=routing-type,proto3,enum=huawei_devm.Devm_LpuBoards_LpuBoard_Pbr_RoutingFilters_RoutingFilter_RoutingType" json:"routing_type,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Pbr_RoutingFilters_RoutingFilter) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Pbr_RoutingFilters_RoutingFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[293]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Pbr_RoutingFilters_RoutingFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Pbr_RoutingFilters_RoutingFilter) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Pbr_RoutingFilters_RoutingFilter) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[293]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Pbr_RoutingFilters_RoutingFilter.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Pbr_RoutingFilters_RoutingFilter) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 19, 0, 0}
}

func (x *Devm_LpuBoards_LpuBoard_Pbr_RoutingFilters_RoutingFilter) GetType() Devm_LpuBoards_LpuBoard_Pbr_RoutingFilters_RoutingFilter_Type {
	if x != nil {
		return x.Type
	}
	return Devm_LpuBoards_LpuBoard_Pbr_RoutingFilters_RoutingFilter_Type_IPV4
}

func (x *Devm_LpuBoards_LpuBoard_Pbr_RoutingFilters_RoutingFilter) GetRoutingType() Devm_LpuBoards_LpuBoard_Pbr_RoutingFilters_RoutingFilter_RoutingType {
	if x != nil {
		return x.RoutingType
	}
	return Devm_LpuBoards_LpuBoard_Pbr_RoutingFilters_RoutingFilter_INVALID_ENUM_VALUE_RoutingType
}

type Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrafficPolicyMatch []*Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch `protobuf:"bytes,1,rep,name=traffic_policy_match,json=traffic-policy-match,proto3" json:"traffic_policy_match,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchs) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[294]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchs) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchs) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[294]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchs.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchs) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 0}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchs) GetTrafficPolicyMatch() []*Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch {
	if x != nil {
		return x.TrafficPolicyMatch
	}
	return nil
}

type Devm_LpuBoards_LpuBoard_Qos_PqSchedulePrioritys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PqSchedulePriority []*Devm_LpuBoards_LpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority `protobuf:"bytes,1,rep,name=pq_schedule_priority,json=pq-schedule-priority,proto3" json:"pq_schedule_priority,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Qos_PqSchedulePrioritys) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Qos_PqSchedulePrioritys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[295]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_PqSchedulePrioritys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Qos_PqSchedulePrioritys) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Qos_PqSchedulePrioritys) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[295]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_PqSchedulePrioritys.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Qos_PqSchedulePrioritys) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 1}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_PqSchedulePrioritys) GetPqSchedulePriority() []*Devm_LpuBoards_LpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority {
	if x != nil {
		return x.PqSchedulePriority
	}
	return nil
}

type Devm_LpuBoards_LpuBoard_Qos_PqSchedulePriorityOnCards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PqSchedulePriorityOnCard []*Devm_LpuBoards_LpuBoard_Qos_PqSchedulePriorityOnCards_PqSchedulePriorityOnCard `protobuf:"bytes,1,rep,name=pq_schedule_priority_on_card,json=pq-schedule-priority-on-card,proto3" json:"pq_schedule_priority_on_card,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Qos_PqSchedulePriorityOnCards) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Qos_PqSchedulePriorityOnCards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[296]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_PqSchedulePriorityOnCards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Qos_PqSchedulePriorityOnCards) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Qos_PqSchedulePriorityOnCards) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[296]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_PqSchedulePriorityOnCards.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Qos_PqSchedulePriorityOnCards) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 2}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_PqSchedulePriorityOnCards) GetPqSchedulePriorityOnCard() []*Devm_LpuBoards_LpuBoard_Qos_PqSchedulePriorityOnCards_PqSchedulePriorityOnCard {
	if x != nil {
		return x.PqSchedulePriorityOnCard
	}
	return nil
}

type Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MulticastPortQueue []*Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue `protobuf:"bytes,1,rep,name=multicast_port_queue,json=multicast-port-queue,proto3" json:"multicast_port_queue,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[297]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[297]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 3}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues) GetMulticastPortQueue() []*Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue {
	if x != nil {
		return x.MulticastPortQueue
	}
	return nil
}

type Devm_LpuBoards_LpuBoard_Qos_MulticastPortShaping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ShapingParameters:
	//	*Devm_LpuBoards_LpuBoard_Qos_MulticastPortShaping_ShapingParametersShapingTypeMode
	//	*Devm_LpuBoards_LpuBoard_Qos_MulticastPortShaping_ShapingParametersShapingValueMode
	ShapingParameters isDevm_LpuBoards_LpuBoard_Qos_MulticastPortShaping_ShapingParameters `protobuf_oneof:"ShapingParameters"`
}

func (x *Devm_LpuBoards_LpuBoard_Qos_MulticastPortShaping) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Qos_MulticastPortShaping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[298]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_MulticastPortShaping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Qos_MulticastPortShaping) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Qos_MulticastPortShaping) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[298]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_MulticastPortShaping.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Qos_MulticastPortShaping) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 4}
}

func (m *Devm_LpuBoards_LpuBoard_Qos_MulticastPortShaping) GetShapingParameters() isDevm_LpuBoards_LpuBoard_Qos_MulticastPortShaping_ShapingParameters {
	if m != nil {
		return m.ShapingParameters
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_Qos_MulticastPortShaping) GetShapingParametersShapingTypeMode() *Devm_LpuBoards_LpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingTypeMode {
	if x, ok := x.GetShapingParameters().(*Devm_LpuBoards_LpuBoard_Qos_MulticastPortShaping_ShapingParametersShapingTypeMode); ok {
		return x.ShapingParametersShapingTypeMode
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_Qos_MulticastPortShaping) GetShapingParametersShapingValueMode() *Devm_LpuBoards_LpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingValueMode {
	if x, ok := x.GetShapingParameters().(*Devm_LpuBoards_LpuBoard_Qos_MulticastPortShaping_ShapingParametersShapingValueMode); ok {
		return x.ShapingParametersShapingValueMode
	}
	return nil
}

type isDevm_LpuBoards_LpuBoard_Qos_MulticastPortShaping_ShapingParameters interface {
	isDevm_LpuBoards_LpuBoard_Qos_MulticastPortShaping_ShapingParameters()
}

type Devm_LpuBoards_LpuBoard_Qos_MulticastPortShaping_ShapingParametersShapingTypeMode struct {
	ShapingParametersShapingTypeMode *Devm_LpuBoards_LpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingTypeMode `protobuf:"bytes,1,opt,name=shaping_parameters_shaping_type_mode,json=shaping-type-mode,proto3,oneof"`
}

type Devm_LpuBoards_LpuBoard_Qos_MulticastPortShaping_ShapingParametersShapingValueMode struct {
	ShapingParametersShapingValueMode *Devm_LpuBoards_LpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingValueMode `protobuf:"bytes,2,opt,name=shaping_parameters_shaping_value_mode,json=shaping-value-mode,proto3,oneof"`
}

func (*Devm_LpuBoards_LpuBoard_Qos_MulticastPortShaping_ShapingParametersShapingTypeMode) isDevm_LpuBoards_LpuBoard_Qos_MulticastPortShaping_ShapingParameters() {
}

func (*Devm_LpuBoards_LpuBoard_Qos_MulticastPortShaping_ShapingParametersShapingValueMode) isDevm_LpuBoards_LpuBoard_Qos_MulticastPortShaping_ShapingParameters() {
}

type Devm_LpuBoards_LpuBoard_Qos_UserQueuePirPrecision struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Precision uint32 `protobuf:"varint,1,opt,name=precision,proto3" json:"precision,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Qos_UserQueuePirPrecision) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Qos_UserQueuePirPrecision{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[299]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_UserQueuePirPrecision) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Qos_UserQueuePirPrecision) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Qos_UserQueuePirPrecision) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[299]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_UserQueuePirPrecision.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Qos_UserQueuePirPrecision) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 5}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_UserQueuePirPrecision) GetPrecision() uint32 {
	if x != nil {
		return x.Precision
	}
	return 0
}

type Devm_LpuBoards_LpuBoard_Qos_ExpPhbDisable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ForwardType Devm_LpuBoards_LpuBoard_Qos_ExpPhbDisable_ForwardType `protobuf:"varint,1,opt,name=forward_type,json=forward-type,proto3,enum=huawei_devm.Devm_LpuBoards_LpuBoard_Qos_ExpPhbDisable_ForwardType" json:"forward_type,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Qos_ExpPhbDisable) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Qos_ExpPhbDisable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[300]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_ExpPhbDisable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Qos_ExpPhbDisable) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Qos_ExpPhbDisable) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[300]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_ExpPhbDisable.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Qos_ExpPhbDisable) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 6}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_ExpPhbDisable) GetForwardType() Devm_LpuBoards_LpuBoard_Qos_ExpPhbDisable_ForwardType {
	if x != nil {
		return x.ForwardType
	}
	return Devm_LpuBoards_LpuBoard_Qos_ExpPhbDisable_INVALID_ENUM_VALUE_ForwardType
}

type Devm_LpuBoards_LpuBoard_Qos_PacketBlockThresholds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PacketBlockThreshold []*Devm_LpuBoards_LpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold `protobuf:"bytes,1,rep,name=packet_block_threshold,json=packet-block-threshold,proto3" json:"packet_block_threshold,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Qos_PacketBlockThresholds) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Qos_PacketBlockThresholds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[301]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_PacketBlockThresholds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Qos_PacketBlockThresholds) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Qos_PacketBlockThresholds) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[301]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_PacketBlockThresholds.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Qos_PacketBlockThresholds) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 7}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_PacketBlockThresholds) GetPacketBlockThreshold() []*Devm_LpuBoards_LpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold {
	if x != nil {
		return x.PacketBlockThreshold
	}
	return nil
}

type Devm_LpuBoards_LpuBoard_Qos_PacketBlockThresholdAll struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size uint32 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Qos_PacketBlockThresholdAll) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Qos_PacketBlockThresholdAll{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[302]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_PacketBlockThresholdAll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Qos_PacketBlockThresholdAll) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Qos_PacketBlockThresholdAll) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[302]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_PacketBlockThresholdAll.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Qos_PacketBlockThresholdAll) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 8}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_PacketBlockThresholdAll) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

type Devm_LpuBoards_LpuBoard_Qos_ChannelAlarms struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelAlarm []*Devm_LpuBoards_LpuBoard_Qos_ChannelAlarms_ChannelAlarm `protobuf:"bytes,1,rep,name=channel_alarm,json=channel-alarm,proto3" json:"channel_alarm,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Qos_ChannelAlarms) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Qos_ChannelAlarms{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[303]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_ChannelAlarms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Qos_ChannelAlarms) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Qos_ChannelAlarms) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[303]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_ChannelAlarms.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Qos_ChannelAlarms) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 9}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_ChannelAlarms) GetChannelAlarm() []*Devm_LpuBoards_LpuBoard_Qos_ChannelAlarms_ChannelAlarm {
	if x != nil {
		return x.ChannelAlarm
	}
	return nil
}

type Devm_LpuBoards_LpuBoard_Qos_ChannelProfilePrecision struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type Devm_LpuBoards_LpuBoard_Qos_ChannelProfilePrecision_Type `protobuf:"varint,1,opt,name=type,proto3,enum=huawei_devm.Devm_LpuBoards_LpuBoard_Qos_ChannelProfilePrecision_Type" json:"type,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Qos_ChannelProfilePrecision) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Qos_ChannelProfilePrecision{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[304]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_ChannelProfilePrecision) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Qos_ChannelProfilePrecision) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Qos_ChannelProfilePrecision) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[304]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_ChannelProfilePrecision.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Qos_ChannelProfilePrecision) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 10}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_ChannelProfilePrecision) GetType() Devm_LpuBoards_LpuBoard_Qos_ChannelProfilePrecision_Type {
	if x != nil {
		return x.Type
	}
	return Devm_LpuBoards_LpuBoard_Qos_ChannelProfilePrecision_INVALID_ENUM_VALUE_Type
}

type Devm_LpuBoards_LpuBoard_Qos_ChannelProfileApply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Qos_ChannelProfileApply) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Qos_ChannelProfileApply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[305]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_ChannelProfileApply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Qos_ChannelProfileApply) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Qos_ChannelProfileApply) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[305]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_ChannelProfileApply.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Qos_ChannelProfileApply) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 11}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_ChannelProfileApply) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Devm_LpuBoards_LpuBoard_Qos_FabricQueueStatisticEnable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Qos_FabricQueueStatisticEnable) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Qos_FabricQueueStatisticEnable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[306]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_FabricQueueStatisticEnable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Qos_FabricQueueStatisticEnable) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Qos_FabricQueueStatisticEnable) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[306]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_FabricQueueStatisticEnable.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Qos_FabricQueueStatisticEnable) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 12}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_FabricQueueStatisticEnable) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

type Devm_LpuBoards_LpuBoard_Qos_OverRideAdjustNumber struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdjustNumber uint32 `protobuf:"varint,1,opt,name=adjust_number,json=adjust-number,proto3" json:"adjust_number,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Qos_OverRideAdjustNumber) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Qos_OverRideAdjustNumber{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[307]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_OverRideAdjustNumber) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Qos_OverRideAdjustNumber) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Qos_OverRideAdjustNumber) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[307]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_OverRideAdjustNumber.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Qos_OverRideAdjustNumber) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 13}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_OverRideAdjustNumber) GetAdjustNumber() uint32 {
	if x != nil {
		return x.AdjustNumber
	}
	return 0
}

type Devm_LpuBoards_LpuBoard_Qos_OverRideDegradeCycle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DegradeCycle uint32 `protobuf:"varint,1,opt,name=degrade_cycle,json=degrade-cycle,proto3" json:"degrade_cycle,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Qos_OverRideDegradeCycle) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Qos_OverRideDegradeCycle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[308]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_OverRideDegradeCycle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Qos_OverRideDegradeCycle) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Qos_OverRideDegradeCycle) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[308]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_OverRideDegradeCycle.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Qos_OverRideDegradeCycle) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 14}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_OverRideDegradeCycle) GetDegradeCycle() uint32 {
	if x != nil {
		return x.DegradeCycle
	}
	return 0
}

type Devm_LpuBoards_LpuBoard_Qos_OverRideUpgradeCycle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpgradeCycle uint32 `protobuf:"varint,1,opt,name=upgrade_cycle,json=upgrade-cycle,proto3" json:"upgrade_cycle,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Qos_OverRideUpgradeCycle) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Qos_OverRideUpgradeCycle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[309]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_OverRideUpgradeCycle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Qos_OverRideUpgradeCycle) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Qos_OverRideUpgradeCycle) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[309]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_OverRideUpgradeCycle.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Qos_OverRideUpgradeCycle) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 15}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_OverRideUpgradeCycle) GetUpgradeCycle() uint32 {
	if x != nil {
		return x.UpgradeCycle
	}
	return 0
}

type Devm_LpuBoards_LpuBoard_Qos_OverRideSwitch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisablePercent uint32 `protobuf:"varint,1,opt,name=disable_percent,json=disable-percent,proto3" json:"disable_percent,omitempty"`
	EnablePercent  uint32 `protobuf:"varint,2,opt,name=enable_percent,json=enable-percent,proto3" json:"enable_percent,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Qos_OverRideSwitch) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Qos_OverRideSwitch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[310]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_OverRideSwitch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Qos_OverRideSwitch) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Qos_OverRideSwitch) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[310]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_OverRideSwitch.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Qos_OverRideSwitch) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 16}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_OverRideSwitch) GetDisablePercent() uint32 {
	if x != nil {
		return x.DisablePercent
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_Qos_OverRideSwitch) GetEnablePercent() uint32 {
	if x != nil {
		return x.EnablePercent
	}
	return 0
}

type Devm_LpuBoards_LpuBoard_Qos_OverRideInboundThresholdAdjust struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpgradeThreshold uint32 `protobuf:"varint,1,opt,name=upgrade_threshold,json=upgrade-threshold,proto3" json:"upgrade_threshold,omitempty"`
	DegradeThreshold uint32 `protobuf:"varint,2,opt,name=degrade_threshold,json=degrade-threshold,proto3" json:"degrade_threshold,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Qos_OverRideInboundThresholdAdjust) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Qos_OverRideInboundThresholdAdjust{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[311]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_OverRideInboundThresholdAdjust) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Qos_OverRideInboundThresholdAdjust) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Qos_OverRideInboundThresholdAdjust) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[311]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_OverRideInboundThresholdAdjust.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Qos_OverRideInboundThresholdAdjust) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 17}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_OverRideInboundThresholdAdjust) GetUpgradeThreshold() uint32 {
	if x != nil {
		return x.UpgradeThreshold
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_Qos_OverRideInboundThresholdAdjust) GetDegradeThreshold() uint32 {
	if x != nil {
		return x.DegradeThreshold
	}
	return 0
}

type Devm_LpuBoards_LpuBoard_Qos_OverRideOutboundThresholdAdjust struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpgradeThreshold uint32 `protobuf:"varint,1,opt,name=upgrade_threshold,json=upgrade-threshold,proto3" json:"upgrade_threshold,omitempty"`
	DegradeThreshold uint32 `protobuf:"varint,2,opt,name=degrade_threshold,json=degrade-threshold,proto3" json:"degrade_threshold,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Qos_OverRideOutboundThresholdAdjust) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Qos_OverRideOutboundThresholdAdjust{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[312]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_OverRideOutboundThresholdAdjust) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Qos_OverRideOutboundThresholdAdjust) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Qos_OverRideOutboundThresholdAdjust) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[312]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_OverRideOutboundThresholdAdjust.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Qos_OverRideOutboundThresholdAdjust) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 18}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_OverRideOutboundThresholdAdjust) GetUpgradeThreshold() uint32 {
	if x != nil {
		return x.UpgradeThreshold
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_Qos_OverRideOutboundThresholdAdjust) GetDegradeThreshold() uint32 {
	if x != nil {
		return x.DegradeThreshold
	}
	return 0
}

type Devm_LpuBoards_LpuBoard_Qos_OverRideMonitorNumber struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MonitorNumber uint32 `protobuf:"varint,1,opt,name=monitor_number,json=monitor-number,proto3" json:"monitor_number,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Qos_OverRideMonitorNumber) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Qos_OverRideMonitorNumber{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[313]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_OverRideMonitorNumber) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Qos_OverRideMonitorNumber) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Qos_OverRideMonitorNumber) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[313]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_OverRideMonitorNumber.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Qos_OverRideMonitorNumber) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 19}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_OverRideMonitorNumber) GetMonitorNumber() uint32 {
	if x != nil {
		return x.MonitorNumber
	}
	return 0
}

type Devm_LpuBoards_LpuBoard_Qos_OverRideEnableSwitch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Outbound bool `protobuf:"varint,1,opt,name=outbound,proto3" json:"outbound,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Qos_OverRideEnableSwitch) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Qos_OverRideEnableSwitch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[314]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_OverRideEnableSwitch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Qos_OverRideEnableSwitch) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Qos_OverRideEnableSwitch) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[314]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_OverRideEnableSwitch.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Qos_OverRideEnableSwitch) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 20}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_OverRideEnableSwitch) GetOutbound() bool {
	if x != nil {
		return x.Outbound
	}
	return false
}

type Devm_LpuBoards_LpuBoard_Qos_MulticastShaping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShapingValue uint32 `protobuf:"varint,1,opt,name=shaping_value,json=shaping-value,proto3" json:"shaping_value,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Qos_MulticastShaping) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Qos_MulticastShaping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[315]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_MulticastShaping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Qos_MulticastShaping) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Qos_MulticastShaping) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[315]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_MulticastShaping.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Qos_MulticastShaping) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 21}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_MulticastShaping) GetShapingValue() uint32 {
	if x != nil {
		return x.ShapingValue
	}
	return 0
}

type Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllServiceClass       *Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate_AllServiceClass       `protobuf:"bytes,1,opt,name=all_service_class,json=all-service-class,proto3" json:"all_service_class,omitempty"`
	SpecificServiceClasss *Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate_SpecificServiceClasss `protobuf:"bytes,2,opt,name=specific_service_classs,json=specific-service-classs,proto3" json:"specific_service_classs,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[316]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[316]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 22}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate) GetAllServiceClass() *Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate_AllServiceClass {
	if x != nil {
		return x.AllServiceClass
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate) GetSpecificServiceClasss() *Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate_SpecificServiceClasss {
	if x != nil {
		return x.SpecificServiceClasss
	}
	return nil
}

type Devm_LpuBoards_LpuBoard_Qos_PortQueueAlarms struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortQueueAlarm []*Devm_LpuBoards_LpuBoard_Qos_PortQueueAlarms_PortQueueAlarm `protobuf:"bytes,1,rep,name=port_queue_alarm,json=port-queue-alarm,proto3" json:"port_queue_alarm,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Qos_PortQueueAlarms) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Qos_PortQueueAlarms{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[317]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_PortQueueAlarms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Qos_PortQueueAlarms) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Qos_PortQueueAlarms) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[317]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_PortQueueAlarms.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Qos_PortQueueAlarms) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 23}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_PortQueueAlarms) GetPortQueueAlarm() []*Devm_LpuBoards_LpuBoard_Qos_PortQueueAlarms_PortQueueAlarm {
	if x != nil {
		return x.PortQueueAlarm
	}
	return nil
}

type Devm_LpuBoards_LpuBoard_Qos_UserQueueRecoveryDisable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Devm_LpuBoards_LpuBoard_Qos_UserQueueRecoveryDisable) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Qos_UserQueueRecoveryDisable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[318]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_UserQueueRecoveryDisable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Qos_UserQueueRecoveryDisable) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Qos_UserQueueRecoveryDisable) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[318]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_UserQueueRecoveryDisable.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Qos_UserQueueRecoveryDisable) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 24}
}

type Devm_LpuBoards_LpuBoard_Qos_MulticastShapers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MulticastShaper []*Devm_LpuBoards_LpuBoard_Qos_MulticastShapers_MulticastShaper `protobuf:"bytes,1,rep,name=multicast_shaper,json=multicast-shaper,proto3" json:"multicast_shaper,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Qos_MulticastShapers) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Qos_MulticastShapers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[319]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_MulticastShapers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Qos_MulticastShapers) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Qos_MulticastShapers) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[319]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_MulticastShapers.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Qos_MulticastShapers) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 25}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_MulticastShapers) GetMulticastShaper() []*Devm_LpuBoards_LpuBoard_Qos_MulticastShapers_MulticastShaper {
	if x != nil {
		return x.MulticastShaper
	}
	return nil
}

type Devm_LpuBoards_LpuBoard_Qos_AccessUserBoardScheduleEnable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Devm_LpuBoards_LpuBoard_Qos_AccessUserBoardScheduleEnable) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Qos_AccessUserBoardScheduleEnable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[320]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_AccessUserBoardScheduleEnable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Qos_AccessUserBoardScheduleEnable) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Qos_AccessUserBoardScheduleEnable) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[320]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_AccessUserBoardScheduleEnable.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Qos_AccessUserBoardScheduleEnable) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 26}
}

type Devm_LpuBoards_LpuBoard_Qos_ConvergentPrecedenceHighs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConvergentPrecedenceHigh []*Devm_LpuBoards_LpuBoard_Qos_ConvergentPrecedenceHighs_ConvergentPrecedenceHigh `protobuf:"bytes,1,rep,name=convergent_precedence_high,json=convergent-precedence-high,proto3" json:"convergent_precedence_high,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Qos_ConvergentPrecedenceHighs) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Qos_ConvergentPrecedenceHighs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[321]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_ConvergentPrecedenceHighs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Qos_ConvergentPrecedenceHighs) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Qos_ConvergentPrecedenceHighs) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[321]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_ConvergentPrecedenceHighs.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Qos_ConvergentPrecedenceHighs) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 27}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_ConvergentPrecedenceHighs) GetConvergentPrecedenceHigh() []*Devm_LpuBoards_LpuBoard_Qos_ConvergentPrecedenceHighs_ConvergentPrecedenceHigh {
	if x != nil {
		return x.ConvergentPrecedenceHigh
	}
	return nil
}

type Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueueDiscardAlarm []*Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm `protobuf:"bytes,1,rep,name=queue_discard_alarm,json=queue-discard-alarm,proto3" json:"queue_discard_alarm,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[322]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[322]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 28}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms) GetQueueDiscardAlarm() []*Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm {
	if x != nil {
		return x.QueueDiscardAlarm
	}
	return nil
}

type Devm_LpuBoards_LpuBoard_Qos_UserQueueBurst struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinimumBurstSize uint32 `protobuf:"varint,1,opt,name=minimum_burst_size,json=minimum-burst-size,proto3" json:"minimum_burst_size,omitempty"`
	Time             uint32 `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Qos_UserQueueBurst) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Qos_UserQueueBurst{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[323]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_UserQueueBurst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Qos_UserQueueBurst) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Qos_UserQueueBurst) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[323]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_UserQueueBurst.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Qos_UserQueueBurst) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 29}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_UserQueueBurst) GetMinimumBurstSize() uint32 {
	if x != nil {
		return x.MinimumBurstSize
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_Qos_UserQueueBurst) GetTime() uint32 {
	if x != nil {
		return x.Time
	}
	return 0
}

type Devm_LpuBoards_LpuBoard_Qos_BurstSizes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BurstSize []*Devm_LpuBoards_LpuBoard_Qos_BurstSizes_BurstSize `protobuf:"bytes,1,rep,name=burst_size,json=burst-size,proto3" json:"burst_size,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Qos_BurstSizes) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Qos_BurstSizes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[324]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_BurstSizes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Qos_BurstSizes) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Qos_BurstSizes) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[324]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_BurstSizes.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Qos_BurstSizes) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 30}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_BurstSizes) GetBurstSize() []*Devm_LpuBoards_LpuBoard_Qos_BurstSizes_BurstSize {
	if x != nil {
		return x.BurstSize
	}
	return nil
}

type Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareThresholds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GlobalBufferShareThreshold []*Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareThresholds_GlobalBufferShareThreshold `protobuf:"bytes,1,rep,name=global_buffer_share_threshold,json=global-buffer-share-threshold,proto3" json:"global_buffer_share_threshold,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareThresholds) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareThresholds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[325]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareThresholds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareThresholds) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareThresholds) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[325]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareThresholds.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareThresholds) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 31}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareThresholds) GetGlobalBufferShareThreshold() []*Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareThresholds_GlobalBufferShareThreshold {
	if x != nil {
		return x.GlobalBufferShareThreshold
	}
	return nil
}

type Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GlobalBufferShareQueue []*Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue `protobuf:"bytes,1,rep,name=global_buffer_share_queue,json=global-buffer-share-queue,proto3" json:"global_buffer_share_queue,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[326]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[326]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 32}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues) GetGlobalBufferShareQueue() []*Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue {
	if x != nil {
		return x.GlobalBufferShareQueue
	}
	return nil
}

type Devm_LpuBoards_LpuBoard_Qos_FlowQueueBackpressureOff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Devm_LpuBoards_LpuBoard_Qos_FlowQueueBackpressureOff) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Qos_FlowQueueBackpressureOff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[327]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_FlowQueueBackpressureOff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Qos_FlowQueueBackpressureOff) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Qos_FlowQueueBackpressureOff) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[327]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_FlowQueueBackpressureOff.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Qos_FlowQueueBackpressureOff) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 33}
}

type Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestinationUser *Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchType_DestinationUser `protobuf:"bytes,1,opt,name=destination_user,json=destination-user,proto3" json:"destination_user,omitempty"`
	InterfaceAcl    *Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchType_InterfaceAcl    `protobuf:"bytes,2,opt,name=interface_acl,json=interface-acl,proto3" json:"interface_acl,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchType) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[328]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchType) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchType) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[328]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchType.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchType) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 34}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchType) GetDestinationUser() *Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchType_DestinationUser {
	if x != nil {
		return x.DestinationUser
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchType) GetInterfaceAcl() *Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchType_InterfaceAcl {
	if x != nil {
		return x.InterfaceAcl
	}
	return nil
}

type Devm_LpuBoards_LpuBoard_Qos_UserQueueResource4Cos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CosValue uint32 `protobuf:"varint,1,opt,name=cos_value,json=cos-value,proto3" json:"cos_value,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Qos_UserQueueResource4Cos) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Qos_UserQueueResource4Cos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[329]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_UserQueueResource4Cos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Qos_UserQueueResource4Cos) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Qos_UserQueueResource4Cos) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[329]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_UserQueueResource4Cos.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Qos_UserQueueResource4Cos) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 35}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_UserQueueResource4Cos) GetCosValue() uint32 {
	if x != nil {
		return x.CosValue
	}
	return 0
}

type Devm_LpuBoards_LpuBoard_Qos_UserQueueResource8CosEnhances struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserQueueResource_8CosEnhance []*Devm_LpuBoards_LpuBoard_Qos_UserQueueResource8CosEnhances_UserQueueResource8CosEnhance `protobuf:"bytes,1,rep,name=user_queue_resource_8cos_enhance,json=user-queue-resource-8cos-enhance,proto3" json:"user_queue_resource_8cos_enhance,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Qos_UserQueueResource8CosEnhances) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Qos_UserQueueResource8CosEnhances{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[330]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_UserQueueResource8CosEnhances) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Qos_UserQueueResource8CosEnhances) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Qos_UserQueueResource8CosEnhances) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[330]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_UserQueueResource8CosEnhances.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Qos_UserQueueResource8CosEnhances) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 36}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_UserQueueResource8CosEnhances) GetUserQueueResource_8CosEnhance() []*Devm_LpuBoards_LpuBoard_Qos_UserQueueResource8CosEnhances_UserQueueResource8CosEnhance {
	if x != nil {
		return x.UserQueueResource_8CosEnhance
	}
	return nil
}

type Devm_LpuBoards_LpuBoard_Qos_ChannelAutoAdjustSwitch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AutoAdjustQuantity Devm_LpuBoards_LpuBoard_Qos_ChannelAutoAdjustSwitch_AutoAdjustQuantity `protobuf:"varint,1,opt,name=auto_adjust_quantity,json=auto-adjust-quantity,proto3,enum=huawei_devm.Devm_LpuBoards_LpuBoard_Qos_ChannelAutoAdjustSwitch_AutoAdjustQuantity" json:"auto_adjust_quantity,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Qos_ChannelAutoAdjustSwitch) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Qos_ChannelAutoAdjustSwitch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[331]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_ChannelAutoAdjustSwitch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Qos_ChannelAutoAdjustSwitch) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Qos_ChannelAutoAdjustSwitch) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[331]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_ChannelAutoAdjustSwitch.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Qos_ChannelAutoAdjustSwitch) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 37}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_ChannelAutoAdjustSwitch) GetAutoAdjustQuantity() Devm_LpuBoards_LpuBoard_Qos_ChannelAutoAdjustSwitch_AutoAdjustQuantity {
	if x != nil {
		return x.AutoAdjustQuantity
	}
	return Devm_LpuBoards_LpuBoard_Qos_ChannelAutoAdjustSwitch_AutoAdjustQuantity_ENABLE
}

type Devm_LpuBoards_LpuBoard_Qos_OverRideEnableInboundSwitch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inbound bool `protobuf:"varint,1,opt,name=inbound,proto3" json:"inbound,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Qos_OverRideEnableInboundSwitch) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Qos_OverRideEnableInboundSwitch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[332]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_OverRideEnableInboundSwitch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Qos_OverRideEnableInboundSwitch) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Qos_OverRideEnableInboundSwitch) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[332]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_OverRideEnableInboundSwitch.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Qos_OverRideEnableInboundSwitch) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 38}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_OverRideEnableInboundSwitch) GetInbound() bool {
	if x != nil {
		return x.Inbound
	}
	return false
}

type Devm_LpuBoards_LpuBoard_Qos_OverRideInitialGrade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GradeId uint32 `protobuf:"varint,1,opt,name=grade_id,json=grade-id,proto3" json:"grade_id,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Qos_OverRideInitialGrade) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Qos_OverRideInitialGrade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[333]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_OverRideInitialGrade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Qos_OverRideInitialGrade) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Qos_OverRideInitialGrade) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[333]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_OverRideInitialGrade.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Qos_OverRideInitialGrade) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 39}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_OverRideInitialGrade) GetGradeId() uint32 {
	if x != nil {
		return x.GradeId
	}
	return 0
}

type Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch_Type `protobuf:"varint,1,opt,name=type,proto3,enum=huawei_devm.Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch_Type" json:"type,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[334]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[334]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 0, 0}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch) GetType() Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch_Type {
	if x != nil {
		return x.Type
	}
	return Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch_Type_IPX_LAYERX_PUSH
}

type Devm_LpuBoards_LpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Direction Devm_LpuBoards_LpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Direction `protobuf:"varint,1,opt,name=direction,proto3,enum=huawei_devm.Devm_LpuBoards_LpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Direction" json:"direction,omitempty"`
	Mode      Devm_LpuBoards_LpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Mode      `protobuf:"varint,2,opt,name=mode,proto3,enum=huawei_devm.Devm_LpuBoards_LpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Mode" json:"mode,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[335]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[335]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 1, 0}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority) GetDirection() Devm_LpuBoards_LpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Direction {
	if x != nil {
		return x.Direction
	}
	return Devm_LpuBoards_LpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Direction_INBOUND
}

func (x *Devm_LpuBoards_LpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority) GetMode() Devm_LpuBoards_LpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Mode {
	if x != nil {
		return x.Mode
	}
	return Devm_LpuBoards_LpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Mode_HIGH
}

type Devm_LpuBoards_LpuBoard_Qos_PqSchedulePriorityOnCards_PqSchedulePriorityOnCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardId string                                                                              `protobuf:"bytes,1,opt,name=card_id,json=card-id,proto3" json:"card_id,omitempty"`
	Mode   Devm_LpuBoards_LpuBoard_Qos_PqSchedulePriorityOnCards_PqSchedulePriorityOnCard_Mode `protobuf:"varint,2,opt,name=mode,proto3,enum=huawei_devm.Devm_LpuBoards_LpuBoard_Qos_PqSchedulePriorityOnCards_PqSchedulePriorityOnCard_Mode" json:"mode,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Qos_PqSchedulePriorityOnCards_PqSchedulePriorityOnCard) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Qos_PqSchedulePriorityOnCards_PqSchedulePriorityOnCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[336]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_PqSchedulePriorityOnCards_PqSchedulePriorityOnCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Qos_PqSchedulePriorityOnCards_PqSchedulePriorityOnCard) ProtoMessage() {
}

func (x *Devm_LpuBoards_LpuBoard_Qos_PqSchedulePriorityOnCards_PqSchedulePriorityOnCard) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[336]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_PqSchedulePriorityOnCards_PqSchedulePriorityOnCard.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Qos_PqSchedulePriorityOnCards_PqSchedulePriorityOnCard) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 2, 0}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_PqSchedulePriorityOnCards_PqSchedulePriorityOnCard) GetCardId() string {
	if x != nil {
		return x.CardId
	}
	return ""
}

func (x *Devm_LpuBoards_LpuBoard_Qos_PqSchedulePriorityOnCards_PqSchedulePriorityOnCard) GetMode() Devm_LpuBoards_LpuBoard_Qos_PqSchedulePriorityOnCards_PqSchedulePriorityOnCard_Mode {
	if x != nil {
		return x.Mode
	}
	return Devm_LpuBoards_LpuBoard_Qos_PqSchedulePriorityOnCards_PqSchedulePriorityOnCard_Mode_HIGH
}

type Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceClass      Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ServiceClass      `protobuf:"varint,1,opt,name=service_class,json=service-class,proto3,enum=huawei_devm.Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ServiceClass" json:"service_class,omitempty"`
	QueueScheduleMode Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_QueueScheduleMode `protobuf:"varint,2,opt,name=queue_schedule_mode,json=queue-schedule-mode,proto3,enum=huawei_devm.Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_QueueScheduleMode" json:"queue_schedule_mode,omitempty"`
	Weight            uint32                                                                               `protobuf:"varint,3,opt,name=weight,proto3" json:"weight,omitempty"`
	PortWredName      string                                                                               `protobuf:"bytes,4,opt,name=port_wred_name,json=port-wred-name,proto3" json:"port_wred_name,omitempty"`
	// Types that are assignable to ShapingParameters:
	//	*Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParametersShaping
	//	*Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParametersShapingPercent
	ShapingParameters isDevm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParameters `protobuf_oneof:"ShapingParameters"`
}

func (x *Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[337]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[337]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 3, 0}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue) GetServiceClass() Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ServiceClass {
	if x != nil {
		return x.ServiceClass
	}
	return Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ServiceClass_BE
}

func (x *Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue) GetQueueScheduleMode() Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_QueueScheduleMode {
	if x != nil {
		return x.QueueScheduleMode
	}
	return Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_QueueScheduleMode_PQ
}

func (x *Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue) GetPortWredName() string {
	if x != nil {
		return x.PortWredName
	}
	return ""
}

func (m *Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue) GetShapingParameters() isDevm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParameters {
	if m != nil {
		return m.ShapingParameters
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue) GetShapingParametersShaping() *Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParameters_Shaping {
	if x, ok := x.GetShapingParameters().(*Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParametersShaping); ok {
		return x.ShapingParametersShaping
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue) GetShapingParametersShapingPercent() *Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParameters_ShapingPercent {
	if x, ok := x.GetShapingParameters().(*Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParametersShapingPercent); ok {
		return x.ShapingParametersShapingPercent
	}
	return nil
}

type isDevm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParameters interface {
	isDevm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParameters()
}

type Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParametersShaping struct {
	ShapingParametersShaping *Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParameters_Shaping `protobuf:"bytes,5,opt,name=shaping_parameters_shaping,json=shaping,proto3,oneof"`
}

type Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParametersShapingPercent struct {
	ShapingParametersShapingPercent *Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParameters_ShapingPercent `protobuf:"bytes,6,opt,name=shaping_parameters_shaping_percent,json=shaping-percent,proto3,oneof"`
}

func (*Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParametersShaping) isDevm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParameters() {
}

func (*Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParametersShapingPercent) isDevm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParameters() {
}

type Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParameters_Shaping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShapingValue uint32 `protobuf:"varint,1,opt,name=shaping_value,json=shaping-value,proto3" json:"shaping_value,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParameters_Shaping) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParameters_Shaping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[338]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParameters_Shaping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParameters_Shaping) ProtoMessage() {
}

func (x *Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParameters_Shaping) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[338]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParameters_Shaping.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParameters_Shaping) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 3, 0, 0}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParameters_Shaping) GetShapingValue() uint32 {
	if x != nil {
		return x.ShapingValue
	}
	return 0
}

type Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParameters_ShapingPercent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShapingPercentage uint32 `protobuf:"varint,1,opt,name=shaping_percentage,json=shaping-percentage,proto3" json:"shaping_percentage,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParameters_ShapingPercent) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParameters_ShapingPercent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[339]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParameters_ShapingPercent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParameters_ShapingPercent) ProtoMessage() {
}

func (x *Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParameters_ShapingPercent) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[339]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParameters_ShapingPercent.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParameters_ShapingPercent) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 3, 0, 1}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParameters_ShapingPercent) GetShapingPercentage() uint32 {
	if x != nil {
		return x.ShapingPercentage
	}
	return 0
}

type Devm_LpuBoards_LpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingTypeMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShapingType Devm_LpuBoards_LpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingTypeMode_ShapingType `protobuf:"varint,1,opt,name=shaping_type,json=shaping-type,proto3,enum=huawei_devm.Devm_LpuBoards_LpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingTypeMode_ShapingType" json:"shaping_type,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingTypeMode) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingTypeMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[340]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingTypeMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingTypeMode) ProtoMessage() {
}

func (x *Devm_LpuBoards_LpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingTypeMode) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[340]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingTypeMode.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingTypeMode) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 4, 0}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingTypeMode) GetShapingType() Devm_LpuBoards_LpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingTypeMode_ShapingType {
	if x != nil {
		return x.ShapingType
	}
	return Devm_LpuBoards_LpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingTypeMode_ShapingType_X_256K
}

type Devm_LpuBoards_LpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingValueMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShapingValue uint32 `protobuf:"varint,1,opt,name=shaping_value,json=shaping-value,proto3" json:"shaping_value,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingValueMode) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingValueMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[341]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingValueMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingValueMode) ProtoMessage() {
}

func (x *Devm_LpuBoards_LpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingValueMode) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[341]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingValueMode.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingValueMode) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 4, 1}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingValueMode) GetShapingValue() uint32 {
	if x != nil {
		return x.ShapingValue
	}
	return 0
}

type Devm_LpuBoards_LpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceClass Devm_LpuBoards_LpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold_ServiceClass `protobuf:"varint,1,opt,name=service_class,json=service-class,proto3,enum=huawei_devm.Devm_LpuBoards_LpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold_ServiceClass" json:"service_class,omitempty"`
	Size         uint32                                                                              `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[342]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[342]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 7, 0}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold) GetServiceClass() Devm_LpuBoards_LpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold_ServiceClass {
	if x != nil {
		return x.ServiceClass
	}
	return Devm_LpuBoards_LpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold_ServiceClass_BE
}

func (x *Devm_LpuBoards_LpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

type Devm_LpuBoards_LpuBoard_Qos_ChannelAlarms_ChannelAlarm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlarmType Devm_LpuBoards_LpuBoard_Qos_ChannelAlarms_ChannelAlarm_AlarmType `protobuf:"varint,1,opt,name=alarm_type,json=alarm-type,proto3,enum=huawei_devm.Devm_LpuBoards_LpuBoard_Qos_ChannelAlarms_ChannelAlarm_AlarmType" json:"alarm_type,omitempty"`
	Pool      Devm_LpuBoards_LpuBoard_Qos_ChannelAlarms_ChannelAlarm_Pool      `protobuf:"varint,2,opt,name=pool,proto3,enum=huawei_devm.Devm_LpuBoards_LpuBoard_Qos_ChannelAlarms_ChannelAlarm_Pool" json:"pool,omitempty"`
	Threshold uint32                                                           `protobuf:"varint,3,opt,name=threshold,proto3" json:"threshold,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Qos_ChannelAlarms_ChannelAlarm) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Qos_ChannelAlarms_ChannelAlarm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[343]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_ChannelAlarms_ChannelAlarm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Qos_ChannelAlarms_ChannelAlarm) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Qos_ChannelAlarms_ChannelAlarm) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[343]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_ChannelAlarms_ChannelAlarm.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Qos_ChannelAlarms_ChannelAlarm) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 9, 0}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_ChannelAlarms_ChannelAlarm) GetAlarmType() Devm_LpuBoards_LpuBoard_Qos_ChannelAlarms_ChannelAlarm_AlarmType {
	if x != nil {
		return x.AlarmType
	}
	return Devm_LpuBoards_LpuBoard_Qos_ChannelAlarms_ChannelAlarm_AlarmType_QUANTITY
}

func (x *Devm_LpuBoards_LpuBoard_Qos_ChannelAlarms_ChannelAlarm) GetPool() Devm_LpuBoards_LpuBoard_Qos_ChannelAlarms_ChannelAlarm_Pool {
	if x != nil {
		return x.Pool
	}
	return Devm_LpuBoards_LpuBoard_Qos_ChannelAlarms_ChannelAlarm_INVALID_ENUM_VALUE_Pool
}

func (x *Devm_LpuBoards_LpuBoard_Qos_ChannelAlarms_ChannelAlarm) GetThreshold() uint32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

type Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate_AllServiceClass struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceTemplateName string `protobuf:"bytes,1,opt,name=service_template_name,json=service-template-name,proto3" json:"service_template_name,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate_AllServiceClass) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate_AllServiceClass{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[344]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate_AllServiceClass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate_AllServiceClass) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate_AllServiceClass) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[344]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate_AllServiceClass.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate_AllServiceClass) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 22, 0}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate_AllServiceClass) GetServiceTemplateName() string {
	if x != nil {
		return x.ServiceTemplateName
	}
	return ""
}

type Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate_SpecificServiceClasss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpecificServiceClass []*Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate_SpecificServiceClasss_SpecificServiceClass `protobuf:"bytes,1,rep,name=specific_service_class,json=specific-service-class,proto3" json:"specific_service_class,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate_SpecificServiceClasss) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate_SpecificServiceClasss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[345]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate_SpecificServiceClasss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate_SpecificServiceClasss) ProtoMessage() {
}

func (x *Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate_SpecificServiceClasss) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[345]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate_SpecificServiceClasss.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate_SpecificServiceClasss) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 22, 1}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate_SpecificServiceClasss) GetSpecificServiceClass() []*Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate_SpecificServiceClasss_SpecificServiceClass {
	if x != nil {
		return x.SpecificServiceClass
	}
	return nil
}

type Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate_SpecificServiceClasss_SpecificServiceClass struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceClass        Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate_SpecificServiceClasss_SpecificServiceClass_ServiceClass `protobuf:"varint,1,opt,name=service_class,json=service-class,proto3,enum=huawei_devm.Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate_SpecificServiceClasss_SpecificServiceClass_ServiceClass" json:"service_class,omitempty"`
	ServiceTemplateName string                                                                                                              `protobuf:"bytes,2,opt,name=service_template_name,json=service-template-name,proto3" json:"service_template_name,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate_SpecificServiceClasss_SpecificServiceClass) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate_SpecificServiceClasss_SpecificServiceClass{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[346]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate_SpecificServiceClasss_SpecificServiceClass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate_SpecificServiceClasss_SpecificServiceClass) ProtoMessage() {
}

func (x *Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate_SpecificServiceClasss_SpecificServiceClass) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[346]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate_SpecificServiceClasss_SpecificServiceClass.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate_SpecificServiceClasss_SpecificServiceClass) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 22, 1, 0}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate_SpecificServiceClasss_SpecificServiceClass) GetServiceClass() Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate_SpecificServiceClasss_SpecificServiceClass_ServiceClass {
	if x != nil {
		return x.ServiceClass
	}
	return Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate_SpecificServiceClasss_SpecificServiceClass_ServiceClass_BE
}

func (x *Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate_SpecificServiceClasss_SpecificServiceClass) GetServiceTemplateName() string {
	if x != nil {
		return x.ServiceTemplateName
	}
	return ""
}

type Devm_LpuBoards_LpuBoard_Qos_PortQueueAlarms_PortQueueAlarm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceClass     Devm_LpuBoards_LpuBoard_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass `protobuf:"varint,1,opt,name=service_class,json=service-class,proto3,enum=huawei_devm.Devm_LpuBoards_LpuBoard_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass" json:"service_class,omitempty"`
	BufferPercentage uint32                                                                  `protobuf:"varint,2,opt,name=buffer_percentage,json=buffer-percentage,proto3" json:"buffer_percentage,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Qos_PortQueueAlarms_PortQueueAlarm) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Qos_PortQueueAlarms_PortQueueAlarm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[347]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_PortQueueAlarms_PortQueueAlarm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Qos_PortQueueAlarms_PortQueueAlarm) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Qos_PortQueueAlarms_PortQueueAlarm) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[347]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_PortQueueAlarms_PortQueueAlarm.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Qos_PortQueueAlarms_PortQueueAlarm) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 23, 0}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_PortQueueAlarms_PortQueueAlarm) GetServiceClass() Devm_LpuBoards_LpuBoard_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass {
	if x != nil {
		return x.ServiceClass
	}
	return Devm_LpuBoards_LpuBoard_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass_BE
}

func (x *Devm_LpuBoards_LpuBoard_Qos_PortQueueAlarms_PortQueueAlarm) GetBufferPercentage() uint32 {
	if x != nil {
		return x.BufferPercentage
	}
	return 0
}

type Devm_LpuBoards_LpuBoard_Qos_MulticastShapers_MulticastShaper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Priority     Devm_LpuBoards_LpuBoard_Qos_MulticastShapers_MulticastShaper_Priority `protobuf:"varint,1,opt,name=priority,proto3,enum=huawei_devm.Devm_LpuBoards_LpuBoard_Qos_MulticastShapers_MulticastShaper_Priority" json:"priority,omitempty"`
	ShapingValue uint32                                                                `protobuf:"varint,2,opt,name=shaping_value,json=shaping-value,proto3" json:"shaping_value,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Qos_MulticastShapers_MulticastShaper) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Qos_MulticastShapers_MulticastShaper{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[348]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_MulticastShapers_MulticastShaper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Qos_MulticastShapers_MulticastShaper) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Qos_MulticastShapers_MulticastShaper) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[348]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_MulticastShapers_MulticastShaper.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Qos_MulticastShapers_MulticastShaper) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 25, 0}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_MulticastShapers_MulticastShaper) GetPriority() Devm_LpuBoards_LpuBoard_Qos_MulticastShapers_MulticastShaper_Priority {
	if x != nil {
		return x.Priority
	}
	return Devm_LpuBoards_LpuBoard_Qos_MulticastShapers_MulticastShaper_Priority_LOW
}

func (x *Devm_LpuBoards_LpuBoard_Qos_MulticastShapers_MulticastShaper) GetShapingValue() uint32 {
	if x != nil {
		return x.ShapingValue
	}
	return 0
}

type Devm_LpuBoards_LpuBoard_Qos_ConvergentPrecedenceHighs_ConvergentPrecedenceHigh struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceClassValue uint32 `protobuf:"varint,1,opt,name=service_class_value,json=service-class-value,proto3" json:"service_class_value,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Qos_ConvergentPrecedenceHighs_ConvergentPrecedenceHigh) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Qos_ConvergentPrecedenceHighs_ConvergentPrecedenceHigh{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[349]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_ConvergentPrecedenceHighs_ConvergentPrecedenceHigh) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Qos_ConvergentPrecedenceHighs_ConvergentPrecedenceHigh) ProtoMessage() {
}

func (x *Devm_LpuBoards_LpuBoard_Qos_ConvergentPrecedenceHighs_ConvergentPrecedenceHigh) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[349]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_ConvergentPrecedenceHighs_ConvergentPrecedenceHigh.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Qos_ConvergentPrecedenceHighs_ConvergentPrecedenceHigh) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 27, 0}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_ConvergentPrecedenceHighs_ConvergentPrecedenceHigh) GetServiceClassValue() uint32 {
	if x != nil {
		return x.ServiceClassValue
	}
	return 0
}

type Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceClass Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_ServiceClass `protobuf:"varint,1,opt,name=service_class,json=service-class,proto3,enum=huawei_devm.Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_ServiceClass" json:"service_class,omitempty"`
	IntervalTime uint32                                                                        `protobuf:"varint,2,opt,name=interval_time,json=interval-time,proto3" json:"interval_time,omitempty"`
	// Types that are assignable to DiscardType:
	//	*Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardTypeBytes
	//	*Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardTypePackets
	//	*Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardTypePacketRatio
	DiscardType isDevm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType `protobuf_oneof:"DiscardType"`
}

func (x *Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[350]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[350]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 28, 0}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm) GetServiceClass() Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_ServiceClass {
	if x != nil {
		return x.ServiceClass
	}
	return Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_ServiceClass_BE
}

func (x *Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm) GetIntervalTime() uint32 {
	if x != nil {
		return x.IntervalTime
	}
	return 0
}

func (m *Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm) GetDiscardType() isDevm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType {
	if m != nil {
		return m.DiscardType
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm) GetDiscardTypeBytes() *Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType_Bytes {
	if x, ok := x.GetDiscardType().(*Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardTypeBytes); ok {
		return x.DiscardTypeBytes
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm) GetDiscardTypePackets() *Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType_Packets {
	if x, ok := x.GetDiscardType().(*Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardTypePackets); ok {
		return x.DiscardTypePackets
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm) GetDiscardTypePacketRatio() *Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType_PacketRatio {
	if x, ok := x.GetDiscardType().(*Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardTypePacketRatio); ok {
		return x.DiscardTypePacketRatio
	}
	return nil
}

type isDevm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType interface {
	isDevm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType()
}

type Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardTypeBytes struct {
	DiscardTypeBytes *Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType_Bytes `protobuf:"bytes,3,opt,name=discard_type_bytes,json=bytes,proto3,oneof"`
}

type Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardTypePackets struct {
	DiscardTypePackets *Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType_Packets `protobuf:"bytes,4,opt,name=discard_type_packets,json=packets,proto3,oneof"`
}

type Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardTypePacketRatio struct {
	DiscardTypePacketRatio *Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType_PacketRatio `protobuf:"bytes,5,opt,name=discard_type_packet_ratio,json=packet-ratio,proto3,oneof"`
}

func (*Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardTypeBytes) isDevm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType() {
}

func (*Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardTypePackets) isDevm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType() {
}

func (*Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardTypePacketRatio) isDevm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType() {
}

type Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType_Bytes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bytes8 uint32 `protobuf:"varint,1,opt,name=bytes8,json=bytes,proto3" json:"bytes8,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType_Bytes) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType_Bytes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[351]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType_Bytes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType_Bytes) ProtoMessage() {
}

func (x *Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType_Bytes) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[351]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType_Bytes.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType_Bytes) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 28, 0, 0}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType_Bytes) GetBytes8() uint32 {
	if x != nil {
		return x.Bytes8
	}
	return 0
}

type Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType_Packets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Packets8 uint32 `protobuf:"varint,1,opt,name=packets8,json=packets,proto3" json:"packets8,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType_Packets) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType_Packets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[352]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType_Packets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType_Packets) ProtoMessage() {
}

func (x *Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType_Packets) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[352]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType_Packets.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType_Packets) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 28, 0, 1}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType_Packets) GetPackets8() uint32 {
	if x != nil {
		return x.Packets8
	}
	return 0
}

type Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType_PacketRatio struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PacketCoefficient uint32 `protobuf:"varint,1,opt,name=packet_coefficient,json=packet-coefficient,proto3" json:"packet_coefficient,omitempty"`
	PacketExponent    uint32 `protobuf:"varint,2,opt,name=packet_exponent,json=packet-exponent,proto3" json:"packet_exponent,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType_PacketRatio) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType_PacketRatio{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[353]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType_PacketRatio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType_PacketRatio) ProtoMessage() {
}

func (x *Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType_PacketRatio) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[353]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType_PacketRatio.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType_PacketRatio) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 28, 0, 2}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType_PacketRatio) GetPacketCoefficient() uint32 {
	if x != nil {
		return x.PacketCoefficient
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType_PacketRatio) GetPacketExponent() uint32 {
	if x != nil {
		return x.PacketExponent
	}
	return 0
}

type Devm_LpuBoards_LpuBoard_Qos_BurstSizes_BurstSize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceClass Devm_LpuBoards_LpuBoard_Qos_BurstSizes_BurstSize_ServiceClass `protobuf:"varint,1,opt,name=service_class,json=service-class,proto3,enum=huawei_devm.Devm_LpuBoards_LpuBoard_Qos_BurstSizes_BurstSize_ServiceClass" json:"service_class,omitempty"`
	Value        uint32                                                        `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Qos_BurstSizes_BurstSize) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Qos_BurstSizes_BurstSize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[354]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_BurstSizes_BurstSize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Qos_BurstSizes_BurstSize) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Qos_BurstSizes_BurstSize) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[354]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_BurstSizes_BurstSize.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Qos_BurstSizes_BurstSize) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 30, 0}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_BurstSizes_BurstSize) GetServiceClass() Devm_LpuBoards_LpuBoard_Qos_BurstSizes_BurstSize_ServiceClass {
	if x != nil {
		return x.ServiceClass
	}
	return Devm_LpuBoards_LpuBoard_Qos_BurstSizes_BurstSize_ServiceClass_BE
}

func (x *Devm_LpuBoards_LpuBoard_Qos_BurstSizes_BurstSize) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareThresholds_GlobalBufferShareThreshold struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Direction Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareThresholds_GlobalBufferShareThreshold_Direction `protobuf:"varint,1,opt,name=direction,proto3,enum=huawei_devm.Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareThresholds_GlobalBufferShareThreshold_Direction" json:"direction,omitempty"`
	Threshold uint32                                                                                       `protobuf:"varint,2,opt,name=threshold,proto3" json:"threshold,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareThresholds_GlobalBufferShareThreshold) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareThresholds_GlobalBufferShareThreshold{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[355]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareThresholds_GlobalBufferShareThreshold) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareThresholds_GlobalBufferShareThreshold) ProtoMessage() {
}

func (x *Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareThresholds_GlobalBufferShareThreshold) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[355]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareThresholds_GlobalBufferShareThreshold.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareThresholds_GlobalBufferShareThreshold) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 31, 0}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareThresholds_GlobalBufferShareThreshold) GetDirection() Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareThresholds_GlobalBufferShareThreshold_Direction {
	if x != nil {
		return x.Direction
	}
	return Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareThresholds_GlobalBufferShareThreshold_Direction_INBOUND
}

func (x *Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareThresholds_GlobalBufferShareThreshold) GetThreshold() uint32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

type Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceClass Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_ServiceClass `protobuf:"varint,1,opt,name=service_class,json=service-class,proto3,enum=huawei_devm.Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_ServiceClass" json:"service_class,omitempty"`
	Direction    Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_Direction    `protobuf:"varint,2,opt,name=direction,proto3,enum=huawei_devm.Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_Direction" json:"direction,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[356]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[356]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 32, 0}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue) GetServiceClass() Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_ServiceClass {
	if x != nil {
		return x.ServiceClass
	}
	return Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_ServiceClass_BE
}

func (x *Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue) GetDirection() Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_Direction {
	if x != nil {
		return x.Direction
	}
	return Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_Direction_INBOUND
}

type Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchType_DestinationUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchType_DestinationUser) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchType_DestinationUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[357]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchType_DestinationUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchType_DestinationUser) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchType_DestinationUser) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[357]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchType_DestinationUser.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchType_DestinationUser) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 34, 0}
}

type Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchType_InterfaceAcl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchType_InterfaceAcl) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchType_InterfaceAcl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[358]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchType_InterfaceAcl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchType_InterfaceAcl) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchType_InterfaceAcl) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[358]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchType_InterfaceAcl.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchType_InterfaceAcl) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 34, 1}
}

type Devm_LpuBoards_LpuBoard_Qos_UserQueueResource8CosEnhances_UserQueueResource8CosEnhance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Direction Devm_LpuBoards_LpuBoard_Qos_UserQueueResource8CosEnhances_UserQueueResource8CosEnhance_Direction `protobuf:"varint,1,opt,name=direction,proto3,enum=huawei_devm.Devm_LpuBoards_LpuBoard_Qos_UserQueueResource8CosEnhances_UserQueueResource8CosEnhance_Direction" json:"direction,omitempty"`
	CosValue  uint32                                                                                           `protobuf:"varint,2,opt,name=cos_value,json=cos-value,proto3" json:"cos_value,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Qos_UserQueueResource8CosEnhances_UserQueueResource8CosEnhance) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Qos_UserQueueResource8CosEnhances_UserQueueResource8CosEnhance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[359]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_UserQueueResource8CosEnhances_UserQueueResource8CosEnhance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Qos_UserQueueResource8CosEnhances_UserQueueResource8CosEnhance) ProtoMessage() {
}

func (x *Devm_LpuBoards_LpuBoard_Qos_UserQueueResource8CosEnhances_UserQueueResource8CosEnhance) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[359]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Qos_UserQueueResource8CosEnhances_UserQueueResource8CosEnhance.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Qos_UserQueueResource8CosEnhances_UserQueueResource8CosEnhance) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 20, 36, 0}
}

func (x *Devm_LpuBoards_LpuBoard_Qos_UserQueueResource8CosEnhances_UserQueueResource8CosEnhance) GetDirection() Devm_LpuBoards_LpuBoard_Qos_UserQueueResource8CosEnhances_UserQueueResource8CosEnhance_Direction {
	if x != nil {
		return x.Direction
	}
	return Devm_LpuBoards_LpuBoard_Qos_UserQueueResource8CosEnhances_UserQueueResource8CosEnhance_Direction_INBOUND
}

func (x *Devm_LpuBoards_LpuBoard_Qos_UserQueueResource8CosEnhances_UserQueueResource8CosEnhance) GetCosValue() uint32 {
	if x != nil {
		return x.CosValue
	}
	return 0
}

type Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotL2Loopdet       *Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_SlotL2Loopdet       `protobuf:"bytes,1,opt,name=slot_l2loopdet,json=slot-l2loopdet,proto3" json:"slot_l2loopdet,omitempty"`
	Action              *Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_Action              `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
	LoopLevelThresholds *Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_LoopLevelThresholds `protobuf:"bytes,3,opt,name=loop_level_thresholds,json=loop-level-thresholds,proto3" json:"loop_level_thresholds,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[360]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[360]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 21, 0}
}

func (x *Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect) GetSlotL2Loopdet() *Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_SlotL2Loopdet {
	if x != nil {
		return x.SlotL2Loopdet
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect) GetAction() *Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_Action {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect) GetLoopLevelThresholds() *Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_LoopLevelThresholds {
	if x != nil {
		return x.LoopLevelThresholds
	}
	return nil
}

type Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_SlotL2Loopdet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable               bool   `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	PacketsDropThreshold uint32 `protobuf:"varint,2,opt,name=packets_drop_threshold,json=packets-drop-threshold,proto3" json:"packets_drop_threshold,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_SlotL2Loopdet) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_SlotL2Loopdet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[361]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_SlotL2Loopdet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_SlotL2Loopdet) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_SlotL2Loopdet) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[361]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_SlotL2Loopdet.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_SlotL2Loopdet) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 21, 0, 0}
}

func (x *Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_SlotL2Loopdet) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_SlotL2Loopdet) GetPacketsDropThreshold() uint32 {
	if x != nil {
		return x.PacketsDropThreshold
	}
	return 0
}

type Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_Action struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Shutdown *Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_Action_Shutdown `protobuf:"bytes,1,opt,name=shutdown,proto3" json:"shutdown,omitempty"`
	Trap     *Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_Action_Trap     `protobuf:"bytes,2,opt,name=trap,proto3" json:"trap,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_Action) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_Action{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[362]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_Action) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_Action) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[362]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_Action.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_Action) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 21, 0, 1}
}

func (x *Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_Action) GetShutdown() *Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_Action_Shutdown {
	if x != nil {
		return x.Shutdown
	}
	return nil
}

func (x *Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_Action) GetTrap() *Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_Action_Trap {
	if x != nil {
		return x.Trap
	}
	return nil
}

type Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_LoopLevelThresholds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LoopLevelThreshold []*Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_LoopLevelThresholds_LoopLevelThreshold `protobuf:"bytes,1,rep,name=loop_level_threshold,json=loop-level-threshold,proto3" json:"loop_level_threshold,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_LoopLevelThresholds) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_LoopLevelThresholds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[363]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_LoopLevelThresholds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_LoopLevelThresholds) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_LoopLevelThresholds) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[363]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_LoopLevelThresholds.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_LoopLevelThresholds) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 21, 0, 2}
}

func (x *Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_LoopLevelThresholds) GetLoopLevelThreshold() []*Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_LoopLevelThresholds_LoopLevelThreshold {
	if x != nil {
		return x.LoopLevelThreshold
	}
	return nil
}

type Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_Action_Shutdown struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpTimes    uint32 `protobuf:"varint,1,opt,name=up_times,json=up-times,proto3" json:"up_times,omitempty"`
	UpInterval uint32 `protobuf:"varint,2,opt,name=up_interval,json=up-interval,proto3" json:"up_interval,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_Action_Shutdown) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_Action_Shutdown{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[364]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_Action_Shutdown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_Action_Shutdown) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_Action_Shutdown) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[364]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_Action_Shutdown.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_Action_Shutdown) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 21, 0, 1, 0}
}

func (x *Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_Action_Shutdown) GetUpTimes() uint32 {
	if x != nil {
		return x.UpTimes
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_Action_Shutdown) GetUpInterval() uint32 {
	if x != nil {
		return x.UpInterval
	}
	return 0
}

type Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_Action_Trap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_Action_Trap) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_Action_Trap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[365]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_Action_Trap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_Action_Trap) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_Action_Trap) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[365]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_Action_Trap.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_Action_Trap) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 21, 0, 1, 1}
}

func (x *Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_Action_Trap) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

type Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_LoopLevelThresholds_LoopLevelThreshold struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceType Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_LoopLevelThresholds_LoopLevelThreshold_InterfaceType `protobuf:"varint,1,opt,name=interface_type,json=interface-type,proto3,enum=huawei_devm.Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_LoopLevelThresholds_LoopLevelThreshold_InterfaceType" json:"interface_type,omitempty"`
	Determined    uint32                                                                                        `protobuf:"varint,2,opt,name=determined,proto3" json:"determined,omitempty"`
	Suspect       uint32                                                                                        `protobuf:"varint,3,opt,name=suspect,proto3" json:"suspect,omitempty"`
	Notification  uint32                                                                                        `protobuf:"varint,4,opt,name=notification,proto3" json:"notification,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_LoopLevelThresholds_LoopLevelThreshold) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_LoopLevelThresholds_LoopLevelThreshold{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[366]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_LoopLevelThresholds_LoopLevelThreshold) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_LoopLevelThresholds_LoopLevelThreshold) ProtoMessage() {
}

func (x *Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_LoopLevelThresholds_LoopLevelThreshold) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[366]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_LoopLevelThresholds_LoopLevelThreshold.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_LoopLevelThresholds_LoopLevelThreshold) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 21, 0, 2, 0}
}

func (x *Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_LoopLevelThresholds_LoopLevelThreshold) GetInterfaceType() Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_LoopLevelThresholds_LoopLevelThreshold_InterfaceType {
	if x != nil {
		return x.InterfaceType
	}
	return Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_LoopLevelThresholds_LoopLevelThreshold_InterfaceType_MAINX_INTERFACE
}

func (x *Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_LoopLevelThresholds_LoopLevelThreshold) GetDetermined() uint32 {
	if x != nil {
		return x.Determined
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_LoopLevelThresholds_LoopLevelThreshold) GetSuspect() uint32 {
	if x != nil {
		return x.Suspect
	}
	return 0
}

func (x *Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_LoopLevelThresholds_LoopLevelThreshold) GetNotification() uint32 {
	if x != nil {
		return x.Notification
	}
	return 0
}

type Devm_LpuBoards_LpuBoard_UnicastForward_Ipv4Uc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ForceFrag     bool `protobuf:"varint,1,opt,name=force_frag,json=force-frag,proto3" json:"force_frag,omitempty"`
	IcmpReplyFast bool `protobuf:"varint,2,opt,name=icmp_reply_fast,json=icmp-reply-fast,proto3" json:"icmp_reply_fast,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_UnicastForward_Ipv4Uc) Reset() {
	*x = Devm_LpuBoards_LpuBoard_UnicastForward_Ipv4Uc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[367]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_UnicastForward_Ipv4Uc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_UnicastForward_Ipv4Uc) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_UnicastForward_Ipv4Uc) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[367]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_UnicastForward_Ipv4Uc.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_UnicastForward_Ipv4Uc) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 22, 0}
}

func (x *Devm_LpuBoards_LpuBoard_UnicastForward_Ipv4Uc) GetForceFrag() bool {
	if x != nil {
		return x.ForceFrag
	}
	return false
}

func (x *Devm_LpuBoards_LpuBoard_UnicastForward_Ipv4Uc) GetIcmpReplyFast() bool {
	if x != nil {
		return x.IcmpReplyFast
	}
	return false
}

type Devm_LpuBoards_LpuBoard_UnicastForward_ArpFastReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_UnicastForward_ArpFastReply) Reset() {
	*x = Devm_LpuBoards_LpuBoard_UnicastForward_ArpFastReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[368]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_UnicastForward_ArpFastReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_UnicastForward_ArpFastReply) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_UnicastForward_ArpFastReply) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[368]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_UnicastForward_ArpFastReply.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_UnicastForward_ArpFastReply) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 22, 1}
}

func (x *Devm_LpuBoards_LpuBoard_UnicastForward_ArpFastReply) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

type Devm_LpuBoards_LpuBoard_UnicastForward_GreTtlMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TtlMode Devm_LpuBoards_LpuBoard_UnicastForward_GreTtlMode_TtlMode `protobuf:"varint,1,opt,name=ttl_mode,json=ttl-mode,proto3,enum=huawei_devm.Devm_LpuBoards_LpuBoard_UnicastForward_GreTtlMode_TtlMode" json:"ttl_mode,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_UnicastForward_GreTtlMode) Reset() {
	*x = Devm_LpuBoards_LpuBoard_UnicastForward_GreTtlMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[369]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_UnicastForward_GreTtlMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_UnicastForward_GreTtlMode) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_UnicastForward_GreTtlMode) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[369]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_UnicastForward_GreTtlMode.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_UnicastForward_GreTtlMode) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 22, 2}
}

func (x *Devm_LpuBoards_LpuBoard_UnicastForward_GreTtlMode) GetTtlMode() Devm_LpuBoards_LpuBoard_UnicastForward_GreTtlMode_TtlMode {
	if x != nil {
		return x.TtlMode
	}
	return Devm_LpuBoards_LpuBoard_UnicastForward_GreTtlMode_TtlMode_PIPE
}

type Devm_LpuBoards_LpuBoard_UnicastForward_L3LcsCapacitys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotL3LcsCapacity []*Devm_LpuBoards_LpuBoard_UnicastForward_L3LcsCapacitys_SlotL3LcsCapacity `protobuf:"bytes,1,rep,name=slot_l3_lcs_capacity,json=slot-l3-lcs-capacity,proto3" json:"slot_l3_lcs_capacity,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_UnicastForward_L3LcsCapacitys) Reset() {
	*x = Devm_LpuBoards_LpuBoard_UnicastForward_L3LcsCapacitys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[370]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_UnicastForward_L3LcsCapacitys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_UnicastForward_L3LcsCapacitys) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_UnicastForward_L3LcsCapacitys) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[370]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_UnicastForward_L3LcsCapacitys.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_UnicastForward_L3LcsCapacitys) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 22, 3}
}

func (x *Devm_LpuBoards_LpuBoard_UnicastForward_L3LcsCapacitys) GetSlotL3LcsCapacity() []*Devm_LpuBoards_LpuBoard_UnicastForward_L3LcsCapacitys_SlotL3LcsCapacity {
	if x != nil {
		return x.SlotL3LcsCapacity
	}
	return nil
}

type Devm_LpuBoards_LpuBoard_UnicastForward_NdFastReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_UnicastForward_NdFastReply) Reset() {
	*x = Devm_LpuBoards_LpuBoard_UnicastForward_NdFastReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[371]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_UnicastForward_NdFastReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_UnicastForward_NdFastReply) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_UnicastForward_NdFastReply) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[371]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_UnicastForward_NdFastReply.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_UnicastForward_NdFastReply) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 22, 4}
}

func (x *Devm_LpuBoards_LpuBoard_UnicastForward_NdFastReply) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

type Devm_LpuBoards_LpuBoard_UnicastForward_VxlanRdrTrunks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VxlanRdrTrunk []*Devm_LpuBoards_LpuBoard_UnicastForward_VxlanRdrTrunks_VxlanRdrTrunk `protobuf:"bytes,1,rep,name=vxlan_rdr_trunk,json=vxlan-rdr-trunk,proto3" json:"vxlan_rdr_trunk,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_UnicastForward_VxlanRdrTrunks) Reset() {
	*x = Devm_LpuBoards_LpuBoard_UnicastForward_VxlanRdrTrunks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[372]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_UnicastForward_VxlanRdrTrunks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_UnicastForward_VxlanRdrTrunks) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_UnicastForward_VxlanRdrTrunks) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[372]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_UnicastForward_VxlanRdrTrunks.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_UnicastForward_VxlanRdrTrunks) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 22, 5}
}

func (x *Devm_LpuBoards_LpuBoard_UnicastForward_VxlanRdrTrunks) GetVxlanRdrTrunk() []*Devm_LpuBoards_LpuBoard_UnicastForward_VxlanRdrTrunks_VxlanRdrTrunk {
	if x != nil {
		return x.VxlanRdrTrunk
	}
	return nil
}

type Devm_LpuBoards_LpuBoard_UnicastForward_L3LcsCapacitys_SlotL3LcsCapacity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceType    Devm_LpuBoards_LpuBoard_UnicastForward_L3LcsCapacitys_SlotL3LcsCapacity_ServiceType `protobuf:"varint,1,opt,name=service_type,json=service-type,proto3,enum=huawei_devm.Devm_LpuBoards_LpuBoard_UnicastForward_L3LcsCapacitys_SlotL3LcsCapacity_ServiceType" json:"service_type,omitempty"`
	CapacityEnable bool                                                                                `protobuf:"varint,2,opt,name=capacity_enable,json=capacity-enable,proto3" json:"capacity_enable,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_UnicastForward_L3LcsCapacitys_SlotL3LcsCapacity) Reset() {
	*x = Devm_LpuBoards_LpuBoard_UnicastForward_L3LcsCapacitys_SlotL3LcsCapacity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[373]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_UnicastForward_L3LcsCapacitys_SlotL3LcsCapacity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_UnicastForward_L3LcsCapacitys_SlotL3LcsCapacity) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_UnicastForward_L3LcsCapacitys_SlotL3LcsCapacity) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[373]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_UnicastForward_L3LcsCapacitys_SlotL3LcsCapacity.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_UnicastForward_L3LcsCapacitys_SlotL3LcsCapacity) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 22, 3, 0}
}

func (x *Devm_LpuBoards_LpuBoard_UnicastForward_L3LcsCapacitys_SlotL3LcsCapacity) GetServiceType() Devm_LpuBoards_LpuBoard_UnicastForward_L3LcsCapacitys_SlotL3LcsCapacity_ServiceType {
	if x != nil {
		return x.ServiceType
	}
	return Devm_LpuBoards_LpuBoard_UnicastForward_L3LcsCapacitys_SlotL3LcsCapacity_ServiceType_FIB
}

func (x *Devm_LpuBoards_LpuBoard_UnicastForward_L3LcsCapacitys_SlotL3LcsCapacity) GetCapacityEnable() bool {
	if x != nil {
		return x.CapacityEnable
	}
	return false
}

type Devm_LpuBoards_LpuBoard_UnicastForward_VxlanRdrTrunks_VxlanRdrTrunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RedirectType Devm_LpuBoards_LpuBoard_UnicastForward_VxlanRdrTrunks_VxlanRdrTrunk_RedirectType `protobuf:"varint,1,opt,name=redirect_type,json=redirect-type,proto3,enum=huawei_devm.Devm_LpuBoards_LpuBoard_UnicastForward_VxlanRdrTrunks_VxlanRdrTrunk_RedirectType" json:"redirect_type,omitempty"`
	DestSlotId1  string                                                                           `protobuf:"bytes,2,opt,name=dest_slot_id1,json=dest-slot-id1,proto3" json:"dest_slot_id1,omitempty"`
	DestSlotId2  string                                                                           `protobuf:"bytes,3,opt,name=dest_slot_id2,json=dest-slot-id2,proto3" json:"dest_slot_id2,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_UnicastForward_VxlanRdrTrunks_VxlanRdrTrunk) Reset() {
	*x = Devm_LpuBoards_LpuBoard_UnicastForward_VxlanRdrTrunks_VxlanRdrTrunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[374]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_UnicastForward_VxlanRdrTrunks_VxlanRdrTrunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_UnicastForward_VxlanRdrTrunks_VxlanRdrTrunk) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_UnicastForward_VxlanRdrTrunks_VxlanRdrTrunk) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[374]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_UnicastForward_VxlanRdrTrunks_VxlanRdrTrunk.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_UnicastForward_VxlanRdrTrunks_VxlanRdrTrunk) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 22, 5, 0}
}

func (x *Devm_LpuBoards_LpuBoard_UnicastForward_VxlanRdrTrunks_VxlanRdrTrunk) GetRedirectType() Devm_LpuBoards_LpuBoard_UnicastForward_VxlanRdrTrunks_VxlanRdrTrunk_RedirectType {
	if x != nil {
		return x.RedirectType
	}
	return Devm_LpuBoards_LpuBoard_UnicastForward_VxlanRdrTrunks_VxlanRdrTrunk_INVALID_ENUM_VALUE_RedirectType
}

func (x *Devm_LpuBoards_LpuBoard_UnicastForward_VxlanRdrTrunks_VxlanRdrTrunk) GetDestSlotId1() string {
	if x != nil {
		return x.DestSlotId1
	}
	return ""
}

func (x *Devm_LpuBoards_LpuBoard_UnicastForward_VxlanRdrTrunks_VxlanRdrTrunk) GetDestSlotId2() string {
	if x != nil {
		return x.DestSlotId2
	}
	return ""
}

type Devm_LpuBoards_LpuBoard_PppNet_PppMinPacketLength struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PacketLength uint32 `protobuf:"varint,1,opt,name=packet_length,json=packet-length,proto3" json:"packet_length,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_PppNet_PppMinPacketLength) Reset() {
	*x = Devm_LpuBoards_LpuBoard_PppNet_PppMinPacketLength{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[375]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_PppNet_PppMinPacketLength) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_PppNet_PppMinPacketLength) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_PppNet_PppMinPacketLength) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[375]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_PppNet_PppMinPacketLength.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_PppNet_PppMinPacketLength) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 26, 0}
}

func (x *Devm_LpuBoards_LpuBoard_PppNet_PppMinPacketLength) GetPacketLength() uint32 {
	if x != nil {
		return x.PacketLength
	}
	return 0
}

type Devm_LpuBoards_LpuBoard_PppNet_LoadBalanceIdentifyPppoe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LoadBalanceEnable bool `protobuf:"varint,1,opt,name=load_balance_enable,json=load-balance-enable,proto3" json:"load_balance_enable,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_PppNet_LoadBalanceIdentifyPppoe) Reset() {
	*x = Devm_LpuBoards_LpuBoard_PppNet_LoadBalanceIdentifyPppoe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[376]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_PppNet_LoadBalanceIdentifyPppoe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_PppNet_LoadBalanceIdentifyPppoe) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_PppNet_LoadBalanceIdentifyPppoe) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[376]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_PppNet_LoadBalanceIdentifyPppoe.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_PppNet_LoadBalanceIdentifyPppoe) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 26, 1}
}

func (x *Devm_LpuBoards_LpuBoard_PppNet_LoadBalanceIdentifyPppoe) GetLoadBalanceEnable() bool {
	if x != nil {
		return x.LoadBalanceEnable
	}
	return false
}

type Devm_LpuBoards_LpuBoard_Sflow_SlotSampling struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Sflow_SlotSampling) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Sflow_SlotSampling{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[377]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Sflow_SlotSampling) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Sflow_SlotSampling) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Sflow_SlotSampling) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[377]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Sflow_SlotSampling.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Sflow_SlotSampling) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 27, 0}
}

func (x *Devm_LpuBoards_LpuBoard_Sflow_SlotSampling) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

type Devm_LpuBoards_LpuBoard_Dcb_HeadroomPool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pool uint32 `protobuf:"varint,1,opt,name=pool,proto3" json:"pool,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Dcb_HeadroomPool) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Dcb_HeadroomPool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[378]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Dcb_HeadroomPool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Dcb_HeadroomPool) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Dcb_HeadroomPool) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[378]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Dcb_HeadroomPool.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Dcb_HeadroomPool) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 28, 0}
}

func (x *Devm_LpuBoards_LpuBoard_Dcb_HeadroomPool) GetPool() uint32 {
	if x != nil {
		return x.Pool
	}
	return 0
}

type Devm_LpuBoards_LpuBoard_Dcb_DeadlockRecoveryBehavior struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Behavior Devm_LpuBoards_LpuBoard_Dcb_DeadlockRecoveryBehavior_Behavior `protobuf:"varint,1,opt,name=behavior,proto3,enum=huawei_devm.Devm_LpuBoards_LpuBoard_Dcb_DeadlockRecoveryBehavior_Behavior" json:"behavior,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Dcb_DeadlockRecoveryBehavior) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Dcb_DeadlockRecoveryBehavior{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[379]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Dcb_DeadlockRecoveryBehavior) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Dcb_DeadlockRecoveryBehavior) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Dcb_DeadlockRecoveryBehavior) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[379]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Dcb_DeadlockRecoveryBehavior.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Dcb_DeadlockRecoveryBehavior) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 28, 1}
}

func (x *Devm_LpuBoards_LpuBoard_Dcb_DeadlockRecoveryBehavior) GetBehavior() Devm_LpuBoards_LpuBoard_Dcb_DeadlockRecoveryBehavior_Behavior {
	if x != nil {
		return x.Behavior
	}
	return Devm_LpuBoards_LpuBoard_Dcb_DeadlockRecoveryBehavior_Behavior_FORWARDING
}

type Devm_LpuBoards_LpuBoard_Dcb_PfcMappingType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type Devm_LpuBoards_LpuBoard_Dcb_PfcMappingType_Type `protobuf:"varint,1,opt,name=type,proto3,enum=huawei_devm.Devm_LpuBoards_LpuBoard_Dcb_PfcMappingType_Type" json:"type,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_Dcb_PfcMappingType) Reset() {
	*x = Devm_LpuBoards_LpuBoard_Dcb_PfcMappingType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[380]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_Dcb_PfcMappingType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_Dcb_PfcMappingType) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_Dcb_PfcMappingType) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[380]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_Dcb_PfcMappingType.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_Dcb_PfcMappingType) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 28, 2}
}

func (x *Devm_LpuBoards_LpuBoard_Dcb_PfcMappingType) GetType() Devm_LpuBoards_LpuBoard_Dcb_PfcMappingType_Type {
	if x != nil {
		return x.Type
	}
	return Devm_LpuBoards_LpuBoard_Dcb_PfcMappingType_Type_X_8021P
}

type Devm_LpuBoards_LpuBoard_MulticastLeafCfcChecks_MulticastLeafCfcCheck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slot string `protobuf:"bytes,1,opt,name=slot,proto3" json:"slot,omitempty"`
}

func (x *Devm_LpuBoards_LpuBoard_MulticastLeafCfcChecks_MulticastLeafCfcCheck) Reset() {
	*x = Devm_LpuBoards_LpuBoard_MulticastLeafCfcChecks_MulticastLeafCfcCheck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[381]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LpuBoards_LpuBoard_MulticastLeafCfcChecks_MulticastLeafCfcCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LpuBoards_LpuBoard_MulticastLeafCfcChecks_MulticastLeafCfcCheck) ProtoMessage() {}

func (x *Devm_LpuBoards_LpuBoard_MulticastLeafCfcChecks_MulticastLeafCfcCheck) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[381]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LpuBoards_LpuBoard_MulticastLeafCfcChecks_MulticastLeafCfcCheck.ProtoReflect.Descriptor instead.
func (*Devm_LpuBoards_LpuBoard_MulticastLeafCfcChecks_MulticastLeafCfcCheck) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 6, 0, 29, 0}
}

func (x *Devm_LpuBoards_LpuBoard_MulticastLeafCfcChecks_MulticastLeafCfcCheck) GetSlot() string {
	if x != nil {
		return x.Slot
	}
	return ""
}

type Devm_SfuBoards_SfuBoard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position     string `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	Index        uint32 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	BoardType    string `protobuf:"bytes,3,opt,name=board_type,json=board-type,proto3" json:"board_type,omitempty"`
	SdramSize    uint32 `protobuf:"varint,4,opt,name=sdram_size,json=sdram-size,proto3" json:"sdram_size,omitempty"`
	FlashSize    uint32 `protobuf:"varint,5,opt,name=flash_size,json=flash-size,proto3" json:"flash_size,omitempty"`
	UpTime       uint32 `protobuf:"varint,6,opt,name=up_time,json=up-time,proto3" json:"up_time,omitempty"`
	RegisterTime string `protobuf:"bytes,7,opt,name=register_time,json=register-time,proto3" json:"register_time,omitempty"`
	IsRegister   bool   `protobuf:"varint,8,opt,name=is_register,json=is-register,proto3" json:"is_register,omitempty"`
}

func (x *Devm_SfuBoards_SfuBoard) Reset() {
	*x = Devm_SfuBoards_SfuBoard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[382]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_SfuBoards_SfuBoard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_SfuBoards_SfuBoard) ProtoMessage() {}

func (x *Devm_SfuBoards_SfuBoard) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[382]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_SfuBoards_SfuBoard.ProtoReflect.Descriptor instead.
func (*Devm_SfuBoards_SfuBoard) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 7, 0}
}

func (x *Devm_SfuBoards_SfuBoard) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *Devm_SfuBoards_SfuBoard) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Devm_SfuBoards_SfuBoard) GetBoardType() string {
	if x != nil {
		return x.BoardType
	}
	return ""
}

func (x *Devm_SfuBoards_SfuBoard) GetSdramSize() uint32 {
	if x != nil {
		return x.SdramSize
	}
	return 0
}

func (x *Devm_SfuBoards_SfuBoard) GetFlashSize() uint32 {
	if x != nil {
		return x.FlashSize
	}
	return 0
}

func (x *Devm_SfuBoards_SfuBoard) GetUpTime() uint32 {
	if x != nil {
		return x.UpTime
	}
	return 0
}

func (x *Devm_SfuBoards_SfuBoard) GetRegisterTime() string {
	if x != nil {
		return x.RegisterTime
	}
	return ""
}

func (x *Devm_SfuBoards_SfuBoard) GetIsRegister() bool {
	if x != nil {
		return x.IsRegister
	}
	return false
}

type Devm_Cards_Card struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position       string                          `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	Index          uint32                          `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	Type           string                          `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	HardType       string                          `protobuf:"bytes,4,opt,name=hard_type,json=hard-type,proto3" json:"hard_type,omitempty"`
	PortNum        uint32                          `protobuf:"varint,5,opt,name=port_num,json=port-num,proto3" json:"port_num,omitempty"`
	InitStatus     Devm_Cards_Card_InitStatus      `protobuf:"varint,6,opt,name=init_status,json=init-status,proto3,enum=huawei_devm.Devm_Cards_Card_InitStatus" json:"init_status,omitempty"`
	RegisterStatus Devm_Cards_Card_RegisterStatus  `protobuf:"varint,7,opt,name=register_status,json=register-status,proto3,enum=huawei_devm.Devm_Cards_Card_RegisterStatus" json:"register_status,omitempty"`
	Pic            *Devm_Cards_Card_Pic            `protobuf:"bytes,8,opt,name=pic,proto3" json:"pic,omitempty"`
	CardTdmParam   *Devm_Cards_Card_CardTdmParam   `protobuf:"bytes,9,opt,name=card_tdm_param,json=card-tdm-param,proto3" json:"card_tdm_param,omitempty"`
	ServiceMode    *Devm_Cards_Card_ServiceMode    `protobuf:"bytes,10,opt,name=service_mode,json=service-mode,proto3" json:"service_mode,omitempty"`
	PortGroupModes *Devm_Cards_Card_PortGroupModes `protobuf:"bytes,11,opt,name=port_group_modes,json=port-group-modes,proto3" json:"port_group_modes,omitempty"`
	QueuePriority  *Devm_Cards_Card_QueuePriority  `protobuf:"bytes,12,opt,name=queue_priority,json=queue-priority,proto3" json:"queue_priority,omitempty"`
	FrameFormat    *Devm_Cards_Card_FrameFormat    `protobuf:"bytes,13,opt,name=frame_format,json=frame-format,proto3" json:"frame_format,omitempty"`
	ProcessMode    *Devm_Cards_Card_ProcessMode    `protobuf:"bytes,14,opt,name=process_mode,json=process-mode,proto3" json:"process_mode,omitempty"`
	EmSet          *Devm_Cards_Card_EmSet          `protobuf:"bytes,15,opt,name=em_set,json=em-set,proto3" json:"em_set,omitempty"`
	ServiceSwitch  *Devm_Cards_Card_ServiceSwitch  `protobuf:"bytes,16,opt,name=service_switch,json=service-switch,proto3" json:"service_switch,omitempty"`
	PanelSlots     *Devm_Cards_Card_PanelSlots     `protobuf:"bytes,17,opt,name=panel_slots,json=panel-slots,proto3" json:"panel_slots,omitempty"`
	InvalidPorts   *Devm_Cards_Card_InvalidPorts   `protobuf:"bytes,18,opt,name=invalid_ports,json=invalid-ports,proto3" json:"invalid_ports,omitempty"`
}

func (x *Devm_Cards_Card) Reset() {
	*x = Devm_Cards_Card{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[383]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Cards_Card) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Cards_Card) ProtoMessage() {}

func (x *Devm_Cards_Card) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[383]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Cards_Card.ProtoReflect.Descriptor instead.
func (*Devm_Cards_Card) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 8, 0}
}

func (x *Devm_Cards_Card) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *Devm_Cards_Card) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Devm_Cards_Card) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Devm_Cards_Card) GetHardType() string {
	if x != nil {
		return x.HardType
	}
	return ""
}

func (x *Devm_Cards_Card) GetPortNum() uint32 {
	if x != nil {
		return x.PortNum
	}
	return 0
}

func (x *Devm_Cards_Card) GetInitStatus() Devm_Cards_Card_InitStatus {
	if x != nil {
		return x.InitStatus
	}
	return Devm_Cards_Card_InitStatus_FAIL
}

func (x *Devm_Cards_Card) GetRegisterStatus() Devm_Cards_Card_RegisterStatus {
	if x != nil {
		return x.RegisterStatus
	}
	return Devm_Cards_Card_RegisterStatus_UNREGISTERED
}

func (x *Devm_Cards_Card) GetPic() *Devm_Cards_Card_Pic {
	if x != nil {
		return x.Pic
	}
	return nil
}

func (x *Devm_Cards_Card) GetCardTdmParam() *Devm_Cards_Card_CardTdmParam {
	if x != nil {
		return x.CardTdmParam
	}
	return nil
}

func (x *Devm_Cards_Card) GetServiceMode() *Devm_Cards_Card_ServiceMode {
	if x != nil {
		return x.ServiceMode
	}
	return nil
}

func (x *Devm_Cards_Card) GetPortGroupModes() *Devm_Cards_Card_PortGroupModes {
	if x != nil {
		return x.PortGroupModes
	}
	return nil
}

func (x *Devm_Cards_Card) GetQueuePriority() *Devm_Cards_Card_QueuePriority {
	if x != nil {
		return x.QueuePriority
	}
	return nil
}

func (x *Devm_Cards_Card) GetFrameFormat() *Devm_Cards_Card_FrameFormat {
	if x != nil {
		return x.FrameFormat
	}
	return nil
}

func (x *Devm_Cards_Card) GetProcessMode() *Devm_Cards_Card_ProcessMode {
	if x != nil {
		return x.ProcessMode
	}
	return nil
}

func (x *Devm_Cards_Card) GetEmSet() *Devm_Cards_Card_EmSet {
	if x != nil {
		return x.EmSet
	}
	return nil
}

func (x *Devm_Cards_Card) GetServiceSwitch() *Devm_Cards_Card_ServiceSwitch {
	if x != nil {
		return x.ServiceSwitch
	}
	return nil
}

func (x *Devm_Cards_Card) GetPanelSlots() *Devm_Cards_Card_PanelSlots {
	if x != nil {
		return x.PanelSlots
	}
	return nil
}

func (x *Devm_Cards_Card) GetInvalidPorts() *Devm_Cards_Card_InvalidPorts {
	if x != nil {
		return x.InvalidPorts
	}
	return nil
}

type Devm_Cards_Card_Pic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogicStatus Devm_Cards_Card_Pic_LogicStatus `protobuf:"varint,1,opt,name=logic_status,json=logic-status,proto3,enum=huawei_devm.Devm_Cards_Card_Pic_LogicStatus" json:"logic_status,omitempty"`
	UpTime      string                          `protobuf:"bytes,2,opt,name=up_time,json=up-time,proto3" json:"up_time,omitempty"`
}

func (x *Devm_Cards_Card_Pic) Reset() {
	*x = Devm_Cards_Card_Pic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[384]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Cards_Card_Pic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Cards_Card_Pic) ProtoMessage() {}

func (x *Devm_Cards_Card_Pic) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[384]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Cards_Card_Pic.ProtoReflect.Descriptor instead.
func (*Devm_Cards_Card_Pic) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 8, 0, 0}
}

func (x *Devm_Cards_Card_Pic) GetLogicStatus() Devm_Cards_Card_Pic_LogicStatus {
	if x != nil {
		return x.LogicStatus
	}
	return Devm_Cards_Card_Pic_LogicStatus_FAIL
}

func (x *Devm_Cards_Card_Pic) GetUpTime() string {
	if x != nil {
		return x.UpTime
	}
	return ""
}

type Devm_Cards_Card_CardTdmParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdleCode   string                                 `protobuf:"bytes,1,opt,name=idle_code,json=idle-code,proto3" json:"idle_code,omitempty"`
	IdleCodeE1 string                                 `protobuf:"bytes,2,opt,name=idle_code_e1,json=idle-code-e1,proto3" json:"idle_code_e1,omitempty"`
	Impedance  Devm_Cards_Card_CardTdmParam_Impedance `protobuf:"varint,3,opt,name=impedance,proto3,enum=huawei_devm.Devm_Cards_Card_CardTdmParam_Impedance" json:"impedance,omitempty"`
}

func (x *Devm_Cards_Card_CardTdmParam) Reset() {
	*x = Devm_Cards_Card_CardTdmParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[385]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Cards_Card_CardTdmParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Cards_Card_CardTdmParam) ProtoMessage() {}

func (x *Devm_Cards_Card_CardTdmParam) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[385]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Cards_Card_CardTdmParam.ProtoReflect.Descriptor instead.
func (*Devm_Cards_Card_CardTdmParam) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 8, 0, 1}
}

func (x *Devm_Cards_Card_CardTdmParam) GetIdleCode() string {
	if x != nil {
		return x.IdleCode
	}
	return ""
}

func (x *Devm_Cards_Card_CardTdmParam) GetIdleCodeE1() string {
	if x != nil {
		return x.IdleCodeE1
	}
	return ""
}

func (x *Devm_Cards_Card_CardTdmParam) GetImpedance() Devm_Cards_Card_CardTdmParam_Impedance {
	if x != nil {
		return x.Impedance
	}
	return Devm_Cards_Card_CardTdmParam_INVALID_ENUM_VALUE_Impedance
}

type Devm_Cards_Card_ServiceMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Portrate      Devm_Cards_Card_ServiceMode_Portrate      `protobuf:"varint,1,opt,name=portrate,proto3,enum=huawei_devm.Devm_Cards_Card_ServiceMode_Portrate" json:"portrate,omitempty"`
	BandwidthMode Devm_Cards_Card_ServiceMode_BandwidthMode `protobuf:"varint,2,opt,name=bandwidth_mode,json=bandwidth-mode,proto3,enum=huawei_devm.Devm_Cards_Card_ServiceMode_BandwidthMode" json:"bandwidth_mode,omitempty"`
}

func (x *Devm_Cards_Card_ServiceMode) Reset() {
	*x = Devm_Cards_Card_ServiceMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[386]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Cards_Card_ServiceMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Cards_Card_ServiceMode) ProtoMessage() {}

func (x *Devm_Cards_Card_ServiceMode) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[386]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Cards_Card_ServiceMode.ProtoReflect.Descriptor instead.
func (*Devm_Cards_Card_ServiceMode) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 8, 0, 2}
}

func (x *Devm_Cards_Card_ServiceMode) GetPortrate() Devm_Cards_Card_ServiceMode_Portrate {
	if x != nil {
		return x.Portrate
	}
	return Devm_Cards_Card_ServiceMode_Portrate_X_155M
}

func (x *Devm_Cards_Card_ServiceMode) GetBandwidthMode() Devm_Cards_Card_ServiceMode_BandwidthMode {
	if x != nil {
		return x.BandwidthMode
	}
	return Devm_Cards_Card_ServiceMode_INVALID_ENUM_VALUE_BandwidthMode
}

type Devm_Cards_Card_PortGroupModes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortGroupMode []*Devm_Cards_Card_PortGroupModes_PortGroupMode `protobuf:"bytes,1,rep,name=port_group_mode,json=port-group-mode,proto3" json:"port_group_mode,omitempty"`
}

func (x *Devm_Cards_Card_PortGroupModes) Reset() {
	*x = Devm_Cards_Card_PortGroupModes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[387]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Cards_Card_PortGroupModes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Cards_Card_PortGroupModes) ProtoMessage() {}

func (x *Devm_Cards_Card_PortGroupModes) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[387]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Cards_Card_PortGroupModes.ProtoReflect.Descriptor instead.
func (*Devm_Cards_Card_PortGroupModes) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 8, 0, 3}
}

func (x *Devm_Cards_Card_PortGroupModes) GetPortGroupMode() []*Devm_Cards_Card_PortGroupModes_PortGroupMode {
	if x != nil {
		return x.PortGroupMode
	}
	return nil
}

type Devm_Cards_Card_QueuePriority struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueuePriEnable Devm_Cards_Card_QueuePriority_QueuePriEnable `protobuf:"varint,1,opt,name=queue_pri_enable,json=queue-pri-enable,proto3,enum=huawei_devm.Devm_Cards_Card_QueuePriority_QueuePriEnable" json:"queue_pri_enable,omitempty"`
}

func (x *Devm_Cards_Card_QueuePriority) Reset() {
	*x = Devm_Cards_Card_QueuePriority{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[388]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Cards_Card_QueuePriority) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Cards_Card_QueuePriority) ProtoMessage() {}

func (x *Devm_Cards_Card_QueuePriority) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[388]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Cards_Card_QueuePriority.ProtoReflect.Descriptor instead.
func (*Devm_Cards_Card_QueuePriority) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 8, 0, 4}
}

func (x *Devm_Cards_Card_QueuePriority) GetQueuePriEnable() Devm_Cards_Card_QueuePriority_QueuePriEnable {
	if x != nil {
		return x.QueuePriEnable
	}
	return Devm_Cards_Card_QueuePriority_QueuePriEnable_DISABLE
}

type Devm_Cards_Card_FrameFormat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FrameFormat Devm_Cards_Card_FrameFormat_FrameFormat5 `protobuf:"varint,1,opt,name=frame_format,json=frame-format,proto3,enum=huawei_devm.Devm_Cards_Card_FrameFormat_FrameFormat5" json:"frame_format,omitempty"`
}

func (x *Devm_Cards_Card_FrameFormat) Reset() {
	*x = Devm_Cards_Card_FrameFormat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[389]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Cards_Card_FrameFormat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Cards_Card_FrameFormat) ProtoMessage() {}

func (x *Devm_Cards_Card_FrameFormat) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[389]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Cards_Card_FrameFormat.ProtoReflect.Descriptor instead.
func (*Devm_Cards_Card_FrameFormat) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 8, 0, 5}
}

func (x *Devm_Cards_Card_FrameFormat) GetFrameFormat() Devm_Cards_Card_FrameFormat_FrameFormat5 {
	if x != nil {
		return x.FrameFormat
	}
	return Devm_Cards_Card_FrameFormat_FrameFormat5_SDH
}

type Devm_Cards_Card_ProcessMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShieldMode             Devm_Cards_Card_ProcessMode_ShieldMode             `protobuf:"varint,2,opt,name=shield_mode,json=shield-mode,proto3,enum=huawei_devm.Devm_Cards_Card_ProcessMode_ShieldMode" json:"shield_mode,omitempty"`
	FaultProcessModeStatus Devm_Cards_Card_ProcessMode_FaultProcessModeStatus `protobuf:"varint,3,opt,name=fault_process_mode_status,json=fault-process-mode-status,proto3,enum=huawei_devm.Devm_Cards_Card_ProcessMode_FaultProcessModeStatus" json:"fault_process_mode_status,omitempty"`
	ProcessMode            Devm_Cards_Card_ProcessMode_ProcessMode5           `protobuf:"varint,4,opt,name=process_mode,json=process-mode,proto3,enum=huawei_devm.Devm_Cards_Card_ProcessMode_ProcessMode5" json:"process_mode,omitempty"`
}

func (x *Devm_Cards_Card_ProcessMode) Reset() {
	*x = Devm_Cards_Card_ProcessMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[390]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Cards_Card_ProcessMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Cards_Card_ProcessMode) ProtoMessage() {}

func (x *Devm_Cards_Card_ProcessMode) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[390]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Cards_Card_ProcessMode.ProtoReflect.Descriptor instead.
func (*Devm_Cards_Card_ProcessMode) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 8, 0, 6}
}

func (x *Devm_Cards_Card_ProcessMode) GetShieldMode() Devm_Cards_Card_ProcessMode_ShieldMode {
	if x != nil {
		return x.ShieldMode
	}
	return Devm_Cards_Card_ProcessMode_ShieldMode_DISABLED
}

func (x *Devm_Cards_Card_ProcessMode) GetFaultProcessModeStatus() Devm_Cards_Card_ProcessMode_FaultProcessModeStatus {
	if x != nil {
		return x.FaultProcessModeStatus
	}
	return Devm_Cards_Card_ProcessMode_FaultProcessModeStatus_RESET
}

func (x *Devm_Cards_Card_ProcessMode) GetProcessMode() Devm_Cards_Card_ProcessMode_ProcessMode5 {
	if x != nil {
		return x.ProcessMode
	}
	return Devm_Cards_Card_ProcessMode_ProcessMode5_RESET
}

type Devm_Cards_Card_EmSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SingleMode   Devm_Cards_Card_EmSet_SingleMode   `protobuf:"varint,1,opt,name=single_mode,json=single-mode,proto3,enum=huawei_devm.Devm_Cards_Card_EmSet_SingleMode" json:"single_mode,omitempty"`
	UserlineMode Devm_Cards_Card_EmSet_UserlineMode `protobuf:"varint,2,opt,name=userline_mode,json=userline-mode,proto3,enum=huawei_devm.Devm_Cards_Card_EmSet_UserlineMode" json:"userline_mode,omitempty"`
}

func (x *Devm_Cards_Card_EmSet) Reset() {
	*x = Devm_Cards_Card_EmSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[391]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Cards_Card_EmSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Cards_Card_EmSet) ProtoMessage() {}

func (x *Devm_Cards_Card_EmSet) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[391]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Cards_Card_EmSet.ProtoReflect.Descriptor instead.
func (*Devm_Cards_Card_EmSet) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 8, 0, 7}
}

func (x *Devm_Cards_Card_EmSet) GetSingleMode() Devm_Cards_Card_EmSet_SingleMode {
	if x != nil {
		return x.SingleMode
	}
	return Devm_Cards_Card_EmSet_SingleMode_BELLX_1
}

func (x *Devm_Cards_Card_EmSet) GetUserlineMode() Devm_Cards_Card_EmSet_UserlineMode {
	if x != nil {
		return x.UserlineMode
	}
	return Devm_Cards_Card_EmSet_UserlineMode_X_2WIRE
}

type Devm_Cards_Card_ServiceSwitch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceSwitchMode Devm_Cards_Card_ServiceSwitch_ServiceSwitchMode `protobuf:"varint,1,opt,name=service_switch_mode,json=service-switch-mode,proto3,enum=huawei_devm.Devm_Cards_Card_ServiceSwitch_ServiceSwitchMode" json:"service_switch_mode,omitempty"`
}

func (x *Devm_Cards_Card_ServiceSwitch) Reset() {
	*x = Devm_Cards_Card_ServiceSwitch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[392]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Cards_Card_ServiceSwitch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Cards_Card_ServiceSwitch) ProtoMessage() {}

func (x *Devm_Cards_Card_ServiceSwitch) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[392]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Cards_Card_ServiceSwitch.ProtoReflect.Descriptor instead.
func (*Devm_Cards_Card_ServiceSwitch) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 8, 0, 8}
}

func (x *Devm_Cards_Card_ServiceSwitch) GetServiceSwitchMode() Devm_Cards_Card_ServiceSwitch_ServiceSwitchMode {
	if x != nil {
		return x.ServiceSwitchMode
	}
	return Devm_Cards_Card_ServiceSwitch_ServiceSwitchMode_P2MP
}

type Devm_Cards_Card_PanelSlots struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slot string `protobuf:"bytes,1,opt,name=slot,proto3" json:"slot,omitempty"`
}

func (x *Devm_Cards_Card_PanelSlots) Reset() {
	*x = Devm_Cards_Card_PanelSlots{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[393]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Cards_Card_PanelSlots) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Cards_Card_PanelSlots) ProtoMessage() {}

func (x *Devm_Cards_Card_PanelSlots) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[393]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Cards_Card_PanelSlots.ProtoReflect.Descriptor instead.
func (*Devm_Cards_Card_PanelSlots) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 8, 0, 9}
}

func (x *Devm_Cards_Card_PanelSlots) GetSlot() string {
	if x != nil {
		return x.Slot
	}
	return ""
}

type Devm_Cards_Card_InvalidPorts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port []*Devm_Cards_Card_InvalidPorts_Port `protobuf:"bytes,1,rep,name=port,proto3" json:"port,omitempty"`
}

func (x *Devm_Cards_Card_InvalidPorts) Reset() {
	*x = Devm_Cards_Card_InvalidPorts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[394]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Cards_Card_InvalidPorts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Cards_Card_InvalidPorts) ProtoMessage() {}

func (x *Devm_Cards_Card_InvalidPorts) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[394]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Cards_Card_InvalidPorts.ProtoReflect.Descriptor instead.
func (*Devm_Cards_Card_InvalidPorts) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 8, 0, 10}
}

func (x *Devm_Cards_Card_InvalidPorts) GetPort() []*Devm_Cards_Card_InvalidPorts_Port {
	if x != nil {
		return x.Port
	}
	return nil
}

type Devm_Cards_Card_PortGroupModes_PortGroupMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortGroupid uint32                                                `protobuf:"varint,1,opt,name=port_groupid,json=port-groupid,proto3" json:"port_groupid,omitempty"`
	PortList    string                                                `protobuf:"bytes,2,opt,name=port_list,json=port-list,proto3" json:"port_list,omitempty"`
	ModeType    Devm_Cards_Card_PortGroupModes_PortGroupMode_ModeType `protobuf:"varint,3,opt,name=mode_type,json=mode-type,proto3,enum=huawei_devm.Devm_Cards_Card_PortGroupModes_PortGroupMode_ModeType" json:"mode_type,omitempty"`
}

func (x *Devm_Cards_Card_PortGroupModes_PortGroupMode) Reset() {
	*x = Devm_Cards_Card_PortGroupModes_PortGroupMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[395]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Cards_Card_PortGroupModes_PortGroupMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Cards_Card_PortGroupModes_PortGroupMode) ProtoMessage() {}

func (x *Devm_Cards_Card_PortGroupModes_PortGroupMode) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[395]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Cards_Card_PortGroupModes_PortGroupMode.ProtoReflect.Descriptor instead.
func (*Devm_Cards_Card_PortGroupModes_PortGroupMode) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 8, 0, 3, 0}
}

func (x *Devm_Cards_Card_PortGroupModes_PortGroupMode) GetPortGroupid() uint32 {
	if x != nil {
		return x.PortGroupid
	}
	return 0
}

func (x *Devm_Cards_Card_PortGroupModes_PortGroupMode) GetPortList() string {
	if x != nil {
		return x.PortList
	}
	return ""
}

func (x *Devm_Cards_Card_PortGroupModes_PortGroupMode) GetModeType() Devm_Cards_Card_PortGroupModes_PortGroupMode_ModeType {
	if x != nil {
		return x.ModeType
	}
	return Devm_Cards_Card_PortGroupModes_PortGroupMode_INVALID_ENUM_VALUE_ModeType
}

type Devm_Cards_Card_InvalidPorts_Port struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position string `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	Slotid   string `protobuf:"bytes,2,opt,name=slotid,proto3" json:"slotid,omitempty"`
}

func (x *Devm_Cards_Card_InvalidPorts_Port) Reset() {
	*x = Devm_Cards_Card_InvalidPorts_Port{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[396]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Cards_Card_InvalidPorts_Port) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Cards_Card_InvalidPorts_Port) ProtoMessage() {}

func (x *Devm_Cards_Card_InvalidPorts_Port) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[396]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Cards_Card_InvalidPorts_Port.ProtoReflect.Descriptor instead.
func (*Devm_Cards_Card_InvalidPorts_Port) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 8, 0, 10, 0}
}

func (x *Devm_Cards_Card_InvalidPorts_Port) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *Devm_Cards_Card_InvalidPorts_Port) GetSlotid() string {
	if x != nil {
		return x.Slotid
	}
	return ""
}

type Devm_CfCards_CfCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position     string `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	SerialNumber string `protobuf:"bytes,2,opt,name=serial_number,json=serial-number,proto3" json:"serial_number,omitempty"`
	Index        uint32 `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	CardType     string `protobuf:"bytes,4,opt,name=card_type,json=card-type,proto3" json:"card_type,omitempty"`
	MemorySize   uint32 `protobuf:"varint,5,opt,name=memory_size,json=memory-size,proto3" json:"memory_size,omitempty"`
	MemoryUsed   uint32 `protobuf:"varint,6,opt,name=memory_used,json=memory-used,proto3" json:"memory_used,omitempty"`
	MemoryFree   uint32 `protobuf:"varint,7,opt,name=memory_free,json=memory-free,proto3" json:"memory_free,omitempty"`
}

func (x *Devm_CfCards_CfCard) Reset() {
	*x = Devm_CfCards_CfCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[397]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_CfCards_CfCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_CfCards_CfCard) ProtoMessage() {}

func (x *Devm_CfCards_CfCard) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[397]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_CfCards_CfCard.ProtoReflect.Descriptor instead.
func (*Devm_CfCards_CfCard) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 9, 0}
}

func (x *Devm_CfCards_CfCard) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *Devm_CfCards_CfCard) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *Devm_CfCards_CfCard) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Devm_CfCards_CfCard) GetCardType() string {
	if x != nil {
		return x.CardType
	}
	return ""
}

func (x *Devm_CfCards_CfCard) GetMemorySize() uint32 {
	if x != nil {
		return x.MemorySize
	}
	return 0
}

func (x *Devm_CfCards_CfCard) GetMemoryUsed() uint32 {
	if x != nil {
		return x.MemoryUsed
	}
	return 0
}

func (x *Devm_CfCards_CfCard) GetMemoryFree() uint32 {
	if x != nil {
		return x.MemoryFree
	}
	return 0
}

type Devm_Ports_Port struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position                string                             `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	Index                   uint32                             `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	AdminState              Devm_Ports_Port_AdminState         `protobuf:"varint,3,opt,name=admin_state,json=admin-state,proto3,enum=huawei_devm.Devm_Ports_Port_AdminState" json:"admin_state,omitempty"`
	Type                    Devm_Ports_Port_Type               `protobuf:"varint,4,opt,name=type,proto3,enum=huawei_devm.Devm_Ports_Port_Type" json:"type,omitempty"`
	HardType                Devm_Ports_Port_HardType           `protobuf:"varint,5,opt,name=hard_type,json=hard-type,proto3,enum=huawei_devm.Devm_Ports_Port_HardType" json:"hard_type,omitempty"`
	LoopbackMode            Devm_Ports_Port_LoopbackMode       `protobuf:"varint,6,opt,name=loopback_mode,json=loopback-mode,proto3,enum=huawei_devm.Devm_Ports_Port_LoopbackMode" json:"loopback_mode,omitempty"`
	EnableTransmissionDelay uint32                             `protobuf:"varint,7,opt,name=enable_transmission_delay,json=enable-transmission-delay,proto3" json:"enable_transmission_delay,omitempty"`
	LastUpTime              string                             `protobuf:"bytes,8,opt,name=last_up_time,json=last-up-time,proto3" json:"last_up_time,omitempty"`
	LastDownTime            string                             `protobuf:"bytes,9,opt,name=last_down_time,json=last-down-time,proto3" json:"last_down_time,omitempty"`
	MediumType              Devm_Ports_Port_MediumType         `protobuf:"varint,10,opt,name=medium_type,json=medium-type,proto3,enum=huawei_devm.Devm_Ports_Port_MediumType" json:"medium_type,omitempty"`
	OpticalEquipped         bool                               `protobuf:"varint,11,opt,name=optical_equipped,json=optical-equipped,proto3" json:"optical_equipped,omitempty"`
	PhysicalBandwidth       uint64                             `protobuf:"varint,12,opt,name=physical_bandwidth,json=physical-bandwidth,proto3" json:"physical_bandwidth,omitempty"`
	Ethernet                *Devm_Ports_Port_Ethernet          `protobuf:"bytes,13,opt,name=ethernet,proto3" json:"ethernet,omitempty"`
	Laser                   *Devm_Ports_Port_Laser             `protobuf:"bytes,14,opt,name=laser,proto3" json:"laser,omitempty"`
	OpticalModule           *Devm_Ports_Port_OpticalModule     `protobuf:"bytes,15,opt,name=optical_module,json=optical-module,proto3" json:"optical_module,omitempty"`
	TransmissionAlarm       *Devm_Ports_Port_TransmissionAlarm `protobuf:"bytes,16,opt,name=transmission_alarm,json=transmission-alarm,proto3" json:"transmission_alarm,omitempty"`
	Pos                     *Devm_Ports_Port_Pos               `protobuf:"bytes,17,opt,name=pos,proto3" json:"pos,omitempty"`
	Atm                     *Devm_Ports_Port_Atm               `protobuf:"bytes,18,opt,name=atm,proto3" json:"atm,omitempty"`
	Cpos                    *Devm_Ports_Port_Cpos              `protobuf:"bytes,19,opt,name=cpos,proto3" json:"cpos,omitempty"`
	PortAlarm               *Devm_Ports_Port_PortAlarm         `protobuf:"bytes,20,opt,name=port_alarm,json=port-alarm,proto3" json:"port_alarm,omitempty"`
	AdmPort                 *Devm_Ports_Port_AdmPort           `protobuf:"bytes,21,opt,name=adm_port,json=adm-port,proto3" json:"adm_port,omitempty"`
	PhySerial               *Devm_Ports_Port_PhySerial         `protobuf:"bytes,22,opt,name=phy_serial,json=phy-serial,proto3" json:"phy_serial,omitempty"`
	PhyVoice                *Devm_Ports_Port_PhyVoice          `protobuf:"bytes,23,opt,name=phy_voice,json=phy-voice,proto3" json:"phy_voice,omitempty"`
	E1T1                    *Devm_Ports_Port_E1T1              `protobuf:"bytes,24,opt,name=e1t1,proto3" json:"e1t1,omitempty"`
	E3T3                    *Devm_Ports_Port_E3T3              `protobuf:"bytes,25,opt,name=e3t3,proto3" json:"e3t3,omitempty"`
}

func (x *Devm_Ports_Port) Reset() {
	*x = Devm_Ports_Port{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[398]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Ports_Port) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Ports_Port) ProtoMessage() {}

func (x *Devm_Ports_Port) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[398]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Ports_Port.ProtoReflect.Descriptor instead.
func (*Devm_Ports_Port) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0}
}

func (x *Devm_Ports_Port) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *Devm_Ports_Port) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Devm_Ports_Port) GetAdminState() Devm_Ports_Port_AdminState {
	if x != nil {
		return x.AdminState
	}
	return Devm_Ports_Port_AdminState_INACTIVE
}

func (x *Devm_Ports_Port) GetType() Devm_Ports_Port_Type {
	if x != nil {
		return x.Type
	}
	return Devm_Ports_Port_Type_UNKNOWN
}

func (x *Devm_Ports_Port) GetHardType() Devm_Ports_Port_HardType {
	if x != nil {
		return x.HardType
	}
	return Devm_Ports_Port_HardType_UNKNOWN
}

func (x *Devm_Ports_Port) GetLoopbackMode() Devm_Ports_Port_LoopbackMode {
	if x != nil {
		return x.LoopbackMode
	}
	return Devm_Ports_Port_LoopbackMode_NOLOOPBACK
}

func (x *Devm_Ports_Port) GetEnableTransmissionDelay() uint32 {
	if x != nil {
		return x.EnableTransmissionDelay
	}
	return 0
}

func (x *Devm_Ports_Port) GetLastUpTime() string {
	if x != nil {
		return x.LastUpTime
	}
	return ""
}

func (x *Devm_Ports_Port) GetLastDownTime() string {
	if x != nil {
		return x.LastDownTime
	}
	return ""
}

func (x *Devm_Ports_Port) GetMediumType() Devm_Ports_Port_MediumType {
	if x != nil {
		return x.MediumType
	}
	return Devm_Ports_Port_MediumType_NOTSUPPORTED
}

func (x *Devm_Ports_Port) GetOpticalEquipped() bool {
	if x != nil {
		return x.OpticalEquipped
	}
	return false
}

func (x *Devm_Ports_Port) GetPhysicalBandwidth() uint64 {
	if x != nil {
		return x.PhysicalBandwidth
	}
	return 0
}

func (x *Devm_Ports_Port) GetEthernet() *Devm_Ports_Port_Ethernet {
	if x != nil {
		return x.Ethernet
	}
	return nil
}

func (x *Devm_Ports_Port) GetLaser() *Devm_Ports_Port_Laser {
	if x != nil {
		return x.Laser
	}
	return nil
}

func (x *Devm_Ports_Port) GetOpticalModule() *Devm_Ports_Port_OpticalModule {
	if x != nil {
		return x.OpticalModule
	}
	return nil
}

func (x *Devm_Ports_Port) GetTransmissionAlarm() *Devm_Ports_Port_TransmissionAlarm {
	if x != nil {
		return x.TransmissionAlarm
	}
	return nil
}

func (x *Devm_Ports_Port) GetPos() *Devm_Ports_Port_Pos {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *Devm_Ports_Port) GetAtm() *Devm_Ports_Port_Atm {
	if x != nil {
		return x.Atm
	}
	return nil
}

func (x *Devm_Ports_Port) GetCpos() *Devm_Ports_Port_Cpos {
	if x != nil {
		return x.Cpos
	}
	return nil
}

func (x *Devm_Ports_Port) GetPortAlarm() *Devm_Ports_Port_PortAlarm {
	if x != nil {
		return x.PortAlarm
	}
	return nil
}

func (x *Devm_Ports_Port) GetAdmPort() *Devm_Ports_Port_AdmPort {
	if x != nil {
		return x.AdmPort
	}
	return nil
}

func (x *Devm_Ports_Port) GetPhySerial() *Devm_Ports_Port_PhySerial {
	if x != nil {
		return x.PhySerial
	}
	return nil
}

func (x *Devm_Ports_Port) GetPhyVoice() *Devm_Ports_Port_PhyVoice {
	if x != nil {
		return x.PhyVoice
	}
	return nil
}

func (x *Devm_Ports_Port) GetE1T1() *Devm_Ports_Port_E1T1 {
	if x != nil {
		return x.E1T1
	}
	return nil
}

func (x *Devm_Ports_Port) GetE3T3() *Devm_Ports_Port_E3T3 {
	if x != nil {
		return x.E3T3
	}
	return nil
}

type Devm_Ports_Port_Ethernet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Speed                         Devm_Ports_Port_Ethernet_Speed                       `protobuf:"varint,1,opt,name=speed,proto3,enum=huawei_devm.Devm_Ports_Port_Ethernet_Speed" json:"speed,omitempty"`
	Duplex                        Devm_Ports_Port_Ethernet_Duplex                      `protobuf:"varint,2,opt,name=duplex,proto3,enum=huawei_devm.Devm_Ports_Port_Ethernet_Duplex" json:"duplex,omitempty"`
	Negotiation                   Devm_Ports_Port_Ethernet_Negotiation                 `protobuf:"varint,3,opt,name=negotiation,proto3,enum=huawei_devm.Devm_Ports_Port_Ethernet_Negotiation" json:"negotiation,omitempty"`
	NegotiationMode               Devm_Ports_Port_Ethernet_NegotiationMode             `protobuf:"varint,4,opt,name=negotiation_mode,json=negotiation-mode,proto3,enum=huawei_devm.Devm_Ports_Port_Ethernet_NegotiationMode" json:"negotiation_mode,omitempty"`
	DownHoldTime                  uint32                                               `protobuf:"varint,5,opt,name=down_hold_time,json=down-hold-time,proto3" json:"down_hold_time,omitempty"`
	UpHoldTime                    uint32                                               `protobuf:"varint,6,opt,name=up_hold_time,json=up-hold-time,proto3" json:"up_hold_time,omitempty"`
	TransMode                     Devm_Ports_Port_Ethernet_TransMode                   `protobuf:"varint,7,opt,name=trans_mode,json=trans-mode,proto3,enum=huawei_devm.Devm_Ports_Port_Ethernet_TransMode" json:"trans_mode,omitempty"`
	SpeedSwitchMode               Devm_Ports_Port_Ethernet_SpeedSwitchMode             `protobuf:"varint,8,opt,name=speed_switch_mode,json=speed-switch-mode,proto3,enum=huawei_devm.Devm_Ports_Port_Ethernet_SpeedSwitchMode" json:"speed_switch_mode,omitempty"`
	BitError                      Devm_Ports_Port_Ethernet_BitError                    `protobuf:"varint,9,opt,name=bit_error,json=bit-error,proto3,enum=huawei_devm.Devm_Ports_Port_Ethernet_BitError" json:"bit_error,omitempty"`
	TriggerTime                   uint32                                               `protobuf:"varint,10,opt,name=trigger_time,json=trigger-time,proto3" json:"trigger_time,omitempty"`
	TriggerTimeType               Devm_Ports_Port_Ethernet_TriggerTimeType             `protobuf:"varint,11,opt,name=trigger_time_type,json=trigger-time-type,proto3,enum=huawei_devm.Devm_Ports_Port_Ethernet_TriggerTimeType" json:"trigger_time_type,omitempty"`
	TxPowerCfgType                Devm_Ports_Port_Ethernet_TxPowerCfgType              `protobuf:"varint,12,opt,name=tx_power_cfg_type,json=tx-power-cfg-type,proto3,enum=huawei_devm.Devm_Ports_Port_Ethernet_TxPowerCfgType" json:"tx_power_cfg_type,omitempty"`
	TxPowerTargetValue            int32                                                `protobuf:"varint,13,opt,name=tx_power_target_value,json=tx-power-target-value,proto3" json:"tx_power_target_value,omitempty"`
	FecMode                       Devm_Ports_Port_Ethernet_FecMode                     `protobuf:"varint,14,opt,name=fec_mode,json=fec-mode,proto3,enum=huawei_devm.Devm_Ports_Port_Ethernet_FecMode" json:"fec_mode,omitempty"`
	EthFecMode                    Devm_Ports_Port_Ethernet_EthFecMode                  `protobuf:"varint,15,opt,name=eth_fec_mode,json=eth-fec-mode,proto3,enum=huawei_devm.Devm_Ports_Port_Ethernet_EthFecMode" json:"eth_fec_mode,omitempty"`
	FecPreAlmThrc                 uint32                                               `protobuf:"varint,16,opt,name=fec_pre_alm_thrc,json=fec-pre-alm-thrc,proto3" json:"fec_pre_alm_thrc,omitempty"`
	FecPreAlmThrp                 uint32                                               `protobuf:"varint,17,opt,name=fec_pre_alm_thrp,json=fec-pre-alm-thrp,proto3" json:"fec_pre_alm_thrp,omitempty"`
	FecPreRsumThrc                uint32                                               `protobuf:"varint,18,opt,name=fec_pre_rsum_thrc,json=fec-pre-rsum-thrc,proto3" json:"fec_pre_rsum_thrc,omitempty"`
	FecPreRsumThrp                uint32                                               `protobuf:"varint,19,opt,name=fec_pre_rsum_thrp,json=fec-pre-rsum-thrp,proto3" json:"fec_pre_rsum_thrp,omitempty"`
	JumboFrame                    uint32                                               `protobuf:"varint,20,opt,name=jumbo_frame,json=jumbo-frame,proto3" json:"jumbo_frame,omitempty"`
	Flowctl                       Devm_Ports_Port_Ethernet_Flowctl                     `protobuf:"varint,21,opt,name=flowctl,proto3,enum=huawei_devm.Devm_Ports_Port_Ethernet_Flowctl" json:"flowctl,omitempty"`
	GfMediaType                   Devm_Ports_Port_Ethernet_GfMediaType                 `protobuf:"varint,22,opt,name=gf_media_type,json=gf-media-type,proto3,enum=huawei_devm.Devm_Ports_Port_Ethernet_GfMediaType" json:"gf_media_type,omitempty"`
	HoldUp                        Devm_Ports_Port_Ethernet_HoldUp                      `protobuf:"varint,23,opt,name=hold_up,json=hold-up,proto3,enum=huawei_devm.Devm_Ports_Port_Ethernet_HoldUp" json:"hold_up,omitempty"`
	Txipg                         Devm_Ports_Port_Ethernet_Txipg                       `protobuf:"varint,24,opt,name=txipg,proto3,enum=huawei_devm.Devm_Ports_Port_Ethernet_Txipg" json:"txipg,omitempty"`
	SwitchSpeed                   Devm_Ports_Port_Ethernet_SwitchSpeed                 `protobuf:"varint,25,opt,name=switch_speed,json=switch-speed,proto3,enum=huawei_devm.Devm_Ports_Port_Ethernet_SwitchSpeed" json:"switch_speed,omitempty"`
	PromiscuousMode               Devm_Ports_Port_Ethernet_PromiscuousMode             `protobuf:"varint,26,opt,name=promiscuous_mode,json=promiscuous-mode,proto3,enum=huawei_devm.Devm_Ports_Port_Ethernet_PromiscuousMode" json:"promiscuous_mode,omitempty"`
	FlexphySpeed                  Devm_Ports_Port_Ethernet_FlexphySpeed                `protobuf:"varint,27,opt,name=flexphy_speed,json=flexphy-speed,proto3,enum=huawei_devm.Devm_Ports_Port_Ethernet_FlexphySpeed" json:"flexphy_speed,omitempty"`
	Mru                           uint32                                               `protobuf:"varint,28,opt,name=mru,proto3" json:"mru,omitempty"`
	InterPacketGap                uint32                                               `protobuf:"varint,29,opt,name=inter_packet_gap,json=inter-packet-gap,proto3" json:"inter_packet_gap,omitempty"`
	MacItfMode                    Devm_Ports_Port_Ethernet_MacItfMode                  `protobuf:"varint,30,opt,name=mac_itf_mode,json=mac-itf-mode,proto3,enum=huawei_devm.Devm_Ports_Port_Ethernet_MacItfMode" json:"mac_itf_mode,omitempty"`
	Attenuation                   uint32                                               `protobuf:"varint,31,opt,name=attenuation,proto3" json:"attenuation,omitempty"`
	RemoteFault                   Devm_Ports_Port_Ethernet_RemoteFault                 `protobuf:"varint,32,opt,name=remote_fault,json=remote-fault,proto3,enum=huawei_devm.Devm_Ports_Port_Ethernet_RemoteFault" json:"remote_fault,omitempty"`
	LosTrapDownHold               Devm_Ports_Port_Ethernet_LosTrapDownHold             `protobuf:"varint,33,opt,name=los_trap_down_hold,json=los-trap-down-hold,proto3,enum=huawei_devm.Devm_Ports_Port_Ethernet_LosTrapDownHold" json:"los_trap_down_hold,omitempty"`
	DownFilter                    Devm_Ports_Port_Ethernet_DownFilter                  `protobuf:"varint,34,opt,name=down_filter,json=down-filter,proto3,enum=huawei_devm.Devm_Ports_Port_Ethernet_DownFilter" json:"down_filter,omitempty"`
	LocalFaultStatus              Devm_Ports_Port_Ethernet_LocalFaultStatus            `protobuf:"varint,35,opt,name=local_fault_status,json=local-fault-status,proto3,enum=huawei_devm.Devm_Ports_Port_Ethernet_LocalFaultStatus" json:"local_fault_status,omitempty"`
	RomoteFaultStatus             Devm_Ports_Port_Ethernet_RomoteFaultStatus           `protobuf:"varint,36,opt,name=romote_fault_status,json=romote-fault-status,proto3,enum=huawei_devm.Devm_Ports_Port_Ethernet_RomoteFaultStatus" json:"romote_fault_status,omitempty"`
	EthWanAttr                    *Devm_Ports_Port_Ethernet_EthWanAttr                 `protobuf:"bytes,37,opt,name=eth_wan_attr,json=eth-wan-attr,proto3" json:"eth_wan_attr,omitempty"`
	FecErrorStatistics            *Devm_Ports_Port_Ethernet_FecErrorStatistics         `protobuf:"bytes,38,opt,name=fec_error_statistics,json=fec-error-statistics,proto3" json:"fec_error_statistics,omitempty"`
	DuplexAuto                    Devm_Ports_Port_Ethernet_DuplexAuto                  `protobuf:"varint,39,opt,name=duplex_auto,json=duplex-auto,proto3,enum=huawei_devm.Devm_Ports_Port_Ethernet_DuplexAuto" json:"duplex_auto,omitempty"`
	NegotiationCompatibleMode     *Devm_Ports_Port_Ethernet_NegotiationCompatibleMode  `protobuf:"bytes,40,opt,name=negotiation_compatible_mode,json=negotiation-compatible-mode,proto3" json:"negotiation_compatible_mode,omitempty"`
	ComboMode                     Devm_Ports_Port_Ethernet_ComboMode                   `protobuf:"varint,41,opt,name=combo_mode,json=combo-mode,proto3,enum=huawei_devm.Devm_Ports_Port_Ethernet_ComboMode" json:"combo_mode,omitempty"`
	PeerIdentity                  string                                               `protobuf:"bytes,42,opt,name=peer_identity,json=peer-identity,proto3" json:"peer_identity,omitempty"`
	FaultDetect                   Devm_Ports_Port_Ethernet_FaultDetect                 `protobuf:"varint,43,opt,name=fault_detect,json=fault-detect,proto3,enum=huawei_devm.Devm_Ports_Port_Ethernet_FaultDetect" json:"fault_detect,omitempty"`
	InterFrameGap                 uint32                                               `protobuf:"varint,44,opt,name=inter_frame_gap,json=inter-frame-gap,proto3" json:"inter_frame_gap,omitempty"`
	StatisticsIncludeInterframe   Devm_Ports_Port_Ethernet_StatisticsIncludeInterframe `protobuf:"varint,45,opt,name=statistics_include_interframe,json=statistics-include-interframe,proto3,enum=huawei_devm.Devm_Ports_Port_Ethernet_StatisticsIncludeInterframe" json:"statistics_include_interframe,omitempty"`
	LinkFlapProtection            Devm_Ports_Port_Ethernet_LinkFlapProtection          `protobuf:"varint,46,opt,name=link_flap_protection,json=link-flap-protection,proto3,enum=huawei_devm.Devm_Ports_Port_Ethernet_LinkFlapProtection" json:"link_flap_protection,omitempty"`
	LinkFlapInterval              uint32                                               `protobuf:"varint,47,opt,name=link_flap_interval,json=link-flap-interval,proto3" json:"link_flap_interval,omitempty"`
	LinkFlapThreshold             uint32                                               `protobuf:"varint,48,opt,name=link_flap_threshold,json=link-flap-threshold,proto3" json:"link_flap_threshold,omitempty"`
	LinkFlapSecondInterval        uint32                                               `protobuf:"varint,49,opt,name=link_flap_second_interval,json=link-flap-second-interval,proto3" json:"link_flap_second_interval,omitempty"`
	LinkFlapSecondThreshold       uint32                                               `protobuf:"varint,50,opt,name=link_flap_second_threshold,json=link-flap-second-threshold,proto3" json:"link_flap_second_threshold,omitempty"`
	UpDelay                       uint32                                               `protobuf:"varint,51,opt,name=up_delay,json=up-delay,proto3" json:"up_delay,omitempty"`
	FlowChangeAlarmInterval       uint32                                               `protobuf:"varint,52,opt,name=flow_change_alarm_interval,json=flow-change-alarm-interval,proto3" json:"flow_change_alarm_interval,omitempty"`
	FlowChangeAlarmRxThreshold    uint32                                               `protobuf:"varint,53,opt,name=flow_change_alarm_rx_threshold,json=flow-change-alarm-rx-threshold,proto3" json:"flow_change_alarm_rx_threshold,omitempty"`
	FlowChangeAlarmTxThreshold    uint32                                               `protobuf:"varint,54,opt,name=flow_change_alarm_tx_threshold,json=flow-change-alarm-tx-threshold,proto3" json:"flow_change_alarm_tx_threshold,omitempty"`
	FlowChangeAlarmStartBandwidth uint32                                               `protobuf:"varint,55,opt,name=flow_change_alarm_start_bandwidth,json=flow-change-alarm-start-bandwidth,proto3" json:"flow_change_alarm_start_bandwidth,omitempty"`
	SpeedAutos                    []Devm_Ports_Port_Ethernet_SpeedAutos                `protobuf:"varint,56,rep,packed,name=speed_autos,json=speed-autos,proto3,enum=huawei_devm.Devm_Ports_Port_Ethernet_SpeedAutos" json:"speed_autos,omitempty"`
	LocalLoopbackResult           *Devm_Ports_Port_Ethernet_LocalLoopbackResult        `protobuf:"bytes,57,opt,name=local_loopback_result,json=local-loopback-result,proto3" json:"local_loopback_result,omitempty"`
	B1Tca                         string                                               `protobuf:"bytes,58,opt,name=b1tca,proto3" json:"b1tca,omitempty"`
	B2Tca                         string                                               `protobuf:"bytes,59,opt,name=b2tca,proto3" json:"b2tca,omitempty"`
	B3Tca                         string                                               `protobuf:"bytes,60,opt,name=b3tca,proto3" json:"b3tca,omitempty"`
	Combo                         Devm_Ports_Port_Ethernet_Combo                       `protobuf:"varint,61,opt,name=combo,proto3,enum=huawei_devm.Devm_Ports_Port_Ethernet_Combo" json:"combo,omitempty"`
	Eee                           Devm_Ports_Port_Ethernet_Eee                         `protobuf:"varint,62,opt,name=eee,proto3,enum=huawei_devm.Devm_Ports_Port_Ethernet_Eee" json:"eee,omitempty"`
}

func (x *Devm_Ports_Port_Ethernet) Reset() {
	*x = Devm_Ports_Port_Ethernet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[399]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Ports_Port_Ethernet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Ports_Port_Ethernet) ProtoMessage() {}

func (x *Devm_Ports_Port_Ethernet) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[399]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Ports_Port_Ethernet.ProtoReflect.Descriptor instead.
func (*Devm_Ports_Port_Ethernet) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 0}
}

func (x *Devm_Ports_Port_Ethernet) GetSpeed() Devm_Ports_Port_Ethernet_Speed {
	if x != nil {
		return x.Speed
	}
	return Devm_Ports_Port_Ethernet_Speed_X_10M
}

func (x *Devm_Ports_Port_Ethernet) GetDuplex() Devm_Ports_Port_Ethernet_Duplex {
	if x != nil {
		return x.Duplex
	}
	return Devm_Ports_Port_Ethernet_Duplex_AUTO
}

func (x *Devm_Ports_Port_Ethernet) GetNegotiation() Devm_Ports_Port_Ethernet_Negotiation {
	if x != nil {
		return x.Negotiation
	}
	return Devm_Ports_Port_Ethernet_Negotiation_DISABLED
}

func (x *Devm_Ports_Port_Ethernet) GetNegotiationMode() Devm_Ports_Port_Ethernet_NegotiationMode {
	if x != nil {
		return x.NegotiationMode
	}
	return Devm_Ports_Port_Ethernet_NegotiationMode_SLAVE
}

func (x *Devm_Ports_Port_Ethernet) GetDownHoldTime() uint32 {
	if x != nil {
		return x.DownHoldTime
	}
	return 0
}

func (x *Devm_Ports_Port_Ethernet) GetUpHoldTime() uint32 {
	if x != nil {
		return x.UpHoldTime
	}
	return 0
}

func (x *Devm_Ports_Port_Ethernet) GetTransMode() Devm_Ports_Port_Ethernet_TransMode {
	if x != nil {
		return x.TransMode
	}
	return Devm_Ports_Port_Ethernet_TransMode_LANX_MODE
}

func (x *Devm_Ports_Port_Ethernet) GetSpeedSwitchMode() Devm_Ports_Port_Ethernet_SpeedSwitchMode {
	if x != nil {
		return x.SpeedSwitchMode
	}
	return Devm_Ports_Port_Ethernet_SpeedSwitchMode_MANUAL
}

func (x *Devm_Ports_Port_Ethernet) GetBitError() Devm_Ports_Port_Ethernet_BitError {
	if x != nil {
		return x.BitError
	}
	return Devm_Ports_Port_Ethernet_BitError_CRC
}

func (x *Devm_Ports_Port_Ethernet) GetTriggerTime() uint32 {
	if x != nil {
		return x.TriggerTime
	}
	return 0
}

func (x *Devm_Ports_Port_Ethernet) GetTriggerTimeType() Devm_Ports_Port_Ethernet_TriggerTimeType {
	if x != nil {
		return x.TriggerTimeType
	}
	return Devm_Ports_Port_Ethernet_TriggerTimeType_SECOND
}

func (x *Devm_Ports_Port_Ethernet) GetTxPowerCfgType() Devm_Ports_Port_Ethernet_TxPowerCfgType {
	if x != nil {
		return x.TxPowerCfgType
	}
	return Devm_Ports_Port_Ethernet_TxPowerCfgType_TXX_POWERX_TARGET
}

func (x *Devm_Ports_Port_Ethernet) GetTxPowerTargetValue() int32 {
	if x != nil {
		return x.TxPowerTargetValue
	}
	return 0
}

func (x *Devm_Ports_Port_Ethernet) GetFecMode() Devm_Ports_Port_Ethernet_FecMode {
	if x != nil {
		return x.FecMode
	}
	return Devm_Ports_Port_Ethernet_FecMode_NONE
}

func (x *Devm_Ports_Port_Ethernet) GetEthFecMode() Devm_Ports_Port_Ethernet_EthFecMode {
	if x != nil {
		return x.EthFecMode
	}
	return Devm_Ports_Port_Ethernet_EthFecMode_DISABLE
}

func (x *Devm_Ports_Port_Ethernet) GetFecPreAlmThrc() uint32 {
	if x != nil {
		return x.FecPreAlmThrc
	}
	return 0
}

func (x *Devm_Ports_Port_Ethernet) GetFecPreAlmThrp() uint32 {
	if x != nil {
		return x.FecPreAlmThrp
	}
	return 0
}

func (x *Devm_Ports_Port_Ethernet) GetFecPreRsumThrc() uint32 {
	if x != nil {
		return x.FecPreRsumThrc
	}
	return 0
}

func (x *Devm_Ports_Port_Ethernet) GetFecPreRsumThrp() uint32 {
	if x != nil {
		return x.FecPreRsumThrp
	}
	return 0
}

func (x *Devm_Ports_Port_Ethernet) GetJumboFrame() uint32 {
	if x != nil {
		return x.JumboFrame
	}
	return 0
}

func (x *Devm_Ports_Port_Ethernet) GetFlowctl() Devm_Ports_Port_Ethernet_Flowctl {
	if x != nil {
		return x.Flowctl
	}
	return Devm_Ports_Port_Ethernet_Flowctl_ALLX_DISABLED
}

func (x *Devm_Ports_Port_Ethernet) GetGfMediaType() Devm_Ports_Port_Ethernet_GfMediaType {
	if x != nil {
		return x.GfMediaType
	}
	return Devm_Ports_Port_Ethernet_GfMediaType_AUTO
}

func (x *Devm_Ports_Port_Ethernet) GetHoldUp() Devm_Ports_Port_Ethernet_HoldUp {
	if x != nil {
		return x.HoldUp
	}
	return Devm_Ports_Port_Ethernet_HoldUp_DISABLED
}

func (x *Devm_Ports_Port_Ethernet) GetTxipg() Devm_Ports_Port_Ethernet_Txipg {
	if x != nil {
		return x.Txipg
	}
	return Devm_Ports_Port_Ethernet_Txipg_SHRINK
}

func (x *Devm_Ports_Port_Ethernet) GetSwitchSpeed() Devm_Ports_Port_Ethernet_SwitchSpeed {
	if x != nil {
		return x.SwitchSpeed
	}
	return Devm_Ports_Port_Ethernet_SwitchSpeed_UNDO
}

func (x *Devm_Ports_Port_Ethernet) GetPromiscuousMode() Devm_Ports_Port_Ethernet_PromiscuousMode {
	if x != nil {
		return x.PromiscuousMode
	}
	return Devm_Ports_Port_Ethernet_PromiscuousMode_OFF
}

func (x *Devm_Ports_Port_Ethernet) GetFlexphySpeed() Devm_Ports_Port_Ethernet_FlexphySpeed {
	if x != nil {
		return x.FlexphySpeed
	}
	return Devm_Ports_Port_Ethernet_INVALID_ENUM_VALUE_FlexphySpeed
}

func (x *Devm_Ports_Port_Ethernet) GetMru() uint32 {
	if x != nil {
		return x.Mru
	}
	return 0
}

func (x *Devm_Ports_Port_Ethernet) GetInterPacketGap() uint32 {
	if x != nil {
		return x.InterPacketGap
	}
	return 0
}

func (x *Devm_Ports_Port_Ethernet) GetMacItfMode() Devm_Ports_Port_Ethernet_MacItfMode {
	if x != nil {
		return x.MacItfMode
	}
	return Devm_Ports_Port_Ethernet_MacItfMode_SGMII
}

func (x *Devm_Ports_Port_Ethernet) GetAttenuation() uint32 {
	if x != nil {
		return x.Attenuation
	}
	return 0
}

func (x *Devm_Ports_Port_Ethernet) GetRemoteFault() Devm_Ports_Port_Ethernet_RemoteFault {
	if x != nil {
		return x.RemoteFault
	}
	return Devm_Ports_Port_Ethernet_RemoteFault_DISABLE
}

func (x *Devm_Ports_Port_Ethernet) GetLosTrapDownHold() Devm_Ports_Port_Ethernet_LosTrapDownHold {
	if x != nil {
		return x.LosTrapDownHold
	}
	return Devm_Ports_Port_Ethernet_LosTrapDownHold_ENABLE
}

func (x *Devm_Ports_Port_Ethernet) GetDownFilter() Devm_Ports_Port_Ethernet_DownFilter {
	if x != nil {
		return x.DownFilter
	}
	return Devm_Ports_Port_Ethernet_DownFilter_DISABLE
}

func (x *Devm_Ports_Port_Ethernet) GetLocalFaultStatus() Devm_Ports_Port_Ethernet_LocalFaultStatus {
	if x != nil {
		return x.LocalFaultStatus
	}
	return Devm_Ports_Port_Ethernet_LocalFaultStatus_NORMAL
}

func (x *Devm_Ports_Port_Ethernet) GetRomoteFaultStatus() Devm_Ports_Port_Ethernet_RomoteFaultStatus {
	if x != nil {
		return x.RomoteFaultStatus
	}
	return Devm_Ports_Port_Ethernet_RomoteFaultStatus_NORMAL
}

func (x *Devm_Ports_Port_Ethernet) GetEthWanAttr() *Devm_Ports_Port_Ethernet_EthWanAttr {
	if x != nil {
		return x.EthWanAttr
	}
	return nil
}

func (x *Devm_Ports_Port_Ethernet) GetFecErrorStatistics() *Devm_Ports_Port_Ethernet_FecErrorStatistics {
	if x != nil {
		return x.FecErrorStatistics
	}
	return nil
}

func (x *Devm_Ports_Port_Ethernet) GetDuplexAuto() Devm_Ports_Port_Ethernet_DuplexAuto {
	if x != nil {
		return x.DuplexAuto
	}
	return Devm_Ports_Port_Ethernet_DuplexAuto_AUTO
}

func (x *Devm_Ports_Port_Ethernet) GetNegotiationCompatibleMode() *Devm_Ports_Port_Ethernet_NegotiationCompatibleMode {
	if x != nil {
		return x.NegotiationCompatibleMode
	}
	return nil
}

func (x *Devm_Ports_Port_Ethernet) GetComboMode() Devm_Ports_Port_Ethernet_ComboMode {
	if x != nil {
		return x.ComboMode
	}
	return Devm_Ports_Port_Ethernet_INVALID_ENUM_VALUE_ComboMode
}

func (x *Devm_Ports_Port_Ethernet) GetPeerIdentity() string {
	if x != nil {
		return x.PeerIdentity
	}
	return ""
}

func (x *Devm_Ports_Port_Ethernet) GetFaultDetect() Devm_Ports_Port_Ethernet_FaultDetect {
	if x != nil {
		return x.FaultDetect
	}
	return Devm_Ports_Port_Ethernet_FaultDetect_ENABLE
}

func (x *Devm_Ports_Port_Ethernet) GetInterFrameGap() uint32 {
	if x != nil {
		return x.InterFrameGap
	}
	return 0
}

func (x *Devm_Ports_Port_Ethernet) GetStatisticsIncludeInterframe() Devm_Ports_Port_Ethernet_StatisticsIncludeInterframe {
	if x != nil {
		return x.StatisticsIncludeInterframe
	}
	return Devm_Ports_Port_Ethernet_StatisticsIncludeInterframe_ENABLE
}

func (x *Devm_Ports_Port_Ethernet) GetLinkFlapProtection() Devm_Ports_Port_Ethernet_LinkFlapProtection {
	if x != nil {
		return x.LinkFlapProtection
	}
	return Devm_Ports_Port_Ethernet_LinkFlapProtection_ENABLE
}

func (x *Devm_Ports_Port_Ethernet) GetLinkFlapInterval() uint32 {
	if x != nil {
		return x.LinkFlapInterval
	}
	return 0
}

func (x *Devm_Ports_Port_Ethernet) GetLinkFlapThreshold() uint32 {
	if x != nil {
		return x.LinkFlapThreshold
	}
	return 0
}

func (x *Devm_Ports_Port_Ethernet) GetLinkFlapSecondInterval() uint32 {
	if x != nil {
		return x.LinkFlapSecondInterval
	}
	return 0
}

func (x *Devm_Ports_Port_Ethernet) GetLinkFlapSecondThreshold() uint32 {
	if x != nil {
		return x.LinkFlapSecondThreshold
	}
	return 0
}

func (x *Devm_Ports_Port_Ethernet) GetUpDelay() uint32 {
	if x != nil {
		return x.UpDelay
	}
	return 0
}

func (x *Devm_Ports_Port_Ethernet) GetFlowChangeAlarmInterval() uint32 {
	if x != nil {
		return x.FlowChangeAlarmInterval
	}
	return 0
}

func (x *Devm_Ports_Port_Ethernet) GetFlowChangeAlarmRxThreshold() uint32 {
	if x != nil {
		return x.FlowChangeAlarmRxThreshold
	}
	return 0
}

func (x *Devm_Ports_Port_Ethernet) GetFlowChangeAlarmTxThreshold() uint32 {
	if x != nil {
		return x.FlowChangeAlarmTxThreshold
	}
	return 0
}

func (x *Devm_Ports_Port_Ethernet) GetFlowChangeAlarmStartBandwidth() uint32 {
	if x != nil {
		return x.FlowChangeAlarmStartBandwidth
	}
	return 0
}

func (x *Devm_Ports_Port_Ethernet) GetSpeedAutos() []Devm_Ports_Port_Ethernet_SpeedAutos {
	if x != nil {
		return x.SpeedAutos
	}
	return nil
}

func (x *Devm_Ports_Port_Ethernet) GetLocalLoopbackResult() *Devm_Ports_Port_Ethernet_LocalLoopbackResult {
	if x != nil {
		return x.LocalLoopbackResult
	}
	return nil
}

func (x *Devm_Ports_Port_Ethernet) GetB1Tca() string {
	if x != nil {
		return x.B1Tca
	}
	return ""
}

func (x *Devm_Ports_Port_Ethernet) GetB2Tca() string {
	if x != nil {
		return x.B2Tca
	}
	return ""
}

func (x *Devm_Ports_Port_Ethernet) GetB3Tca() string {
	if x != nil {
		return x.B3Tca
	}
	return ""
}

func (x *Devm_Ports_Port_Ethernet) GetCombo() Devm_Ports_Port_Ethernet_Combo {
	if x != nil {
		return x.Combo
	}
	return Devm_Ports_Port_Ethernet_INVALID_ENUM_VALUE_Combo
}

func (x *Devm_Ports_Port_Ethernet) GetEee() Devm_Ports_Port_Ethernet_Eee {
	if x != nil {
		return x.Eee
	}
	return Devm_Ports_Port_Ethernet_Eee_ENABLE
}

type Devm_Ports_Port_Laser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AutoShutEnable Devm_Ports_Port_Laser_AutoShutEnable `protobuf:"varint,1,opt,name=auto_shut_enable,json=auto-shut-enable,proto3,enum=huawei_devm.Devm_Ports_Port_Laser_AutoShutEnable" json:"auto_shut_enable,omitempty"`
	OpenTime       uint32                               `protobuf:"varint,2,opt,name=open_time,json=open-time,proto3" json:"open_time,omitempty"`
	CloseTime      uint32                               `protobuf:"varint,3,opt,name=close_time,json=close-time,proto3" json:"close_time,omitempty"`
	Status         Devm_Ports_Port_Laser_Status         `protobuf:"varint,4,opt,name=status,proto3,enum=huawei_devm.Devm_Ports_Port_Laser_Status" json:"status,omitempty"`
}

func (x *Devm_Ports_Port_Laser) Reset() {
	*x = Devm_Ports_Port_Laser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[400]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Ports_Port_Laser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Ports_Port_Laser) ProtoMessage() {}

func (x *Devm_Ports_Port_Laser) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[400]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Ports_Port_Laser.ProtoReflect.Descriptor instead.
func (*Devm_Ports_Port_Laser) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 1}
}

func (x *Devm_Ports_Port_Laser) GetAutoShutEnable() Devm_Ports_Port_Laser_AutoShutEnable {
	if x != nil {
		return x.AutoShutEnable
	}
	return Devm_Ports_Port_Laser_AutoShutEnable_DISABLE
}

func (x *Devm_Ports_Port_Laser) GetOpenTime() uint32 {
	if x != nil {
		return x.OpenTime
	}
	return 0
}

func (x *Devm_Ports_Port_Laser) GetCloseTime() uint32 {
	if x != nil {
		return x.CloseTime
	}
	return 0
}

func (x *Devm_Ports_Port_Laser) GetStatus() Devm_Ports_Port_Laser_Status {
	if x != nil {
		return x.Status
	}
	return Devm_Ports_Port_Laser_Status_ON
}

type Devm_Ports_Port_OpticalModule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VendorName                    string                                                      `protobuf:"bytes,1,opt,name=vendor_name,json=vendor-name,proto3" json:"vendor_name,omitempty"`
	VendorPn                      string                                                      `protobuf:"bytes,2,opt,name=vendor_pn,json=vendor-pn,proto3" json:"vendor_pn,omitempty"`
	TransBw                       string                                                      `protobuf:"bytes,3,opt,name=trans_bw,json=trans-bw,proto3" json:"trans_bw,omitempty"`
	TransMode                     Devm_Ports_Port_OpticalModule_TransMode                     `protobuf:"varint,4,opt,name=trans_mode,json=trans-mode,proto3,enum=huawei_devm.Devm_Ports_Port_OpticalModule_TransMode" json:"trans_mode,omitempty"`
	HotPlug                       bool                                                        `protobuf:"varint,5,opt,name=hot_plug,json=hot-plug,proto3" json:"hot_plug,omitempty"`
	Type                          Devm_Ports_Port_OpticalModule_Type                          `protobuf:"varint,6,opt,name=type,proto3,enum=huawei_devm.Devm_Ports_Port_OpticalModule_Type" json:"type,omitempty"`
	FiberType                     Devm_Ports_Port_OpticalModule_FiberType                     `protobuf:"varint,7,opt,name=fiber_type,json=fiber-type,proto3,enum=huawei_devm.Devm_Ports_Port_OpticalModule_FiberType" json:"fiber_type,omitempty"`
	Wavelength                    string                                                      `protobuf:"bytes,8,opt,name=wavelength,proto3" json:"wavelength,omitempty"`
	TransmissionDistance          string                                                      `protobuf:"bytes,9,opt,name=transmission_distance,json=transmission-distance,proto3" json:"transmission_distance,omitempty"`
	TxPower                       string                                                      `protobuf:"bytes,10,opt,name=tx_power,json=tx-power,proto3" json:"tx_power,omitempty"`
	RxPower                       string                                                      `protobuf:"bytes,11,opt,name=rx_power,json=rx-power,proto3" json:"rx_power,omitempty"`
	RxHighWarnPower               string                                                      `protobuf:"bytes,12,opt,name=rx_high_warn_power,json=rx-high-warn-power,proto3" json:"rx_high_warn_power,omitempty"`
	RxLowWarnPower                string                                                      `protobuf:"bytes,13,opt,name=rx_low_warn_power,json=rx-low-warn-power,proto3" json:"rx_low_warn_power,omitempty"`
	TxHighWarnPower               string                                                      `protobuf:"bytes,14,opt,name=tx_high_warn_power,json=tx-high-warn-power,proto3" json:"tx_high_warn_power,omitempty"`
	TxLowWarnPower                string                                                      `protobuf:"bytes,15,opt,name=tx_low_warn_power,json=tx-low-warn-power,proto3" json:"tx_low_warn_power,omitempty"`
	RxHighAlarmPower              string                                                      `protobuf:"bytes,16,opt,name=rx_high_alarm_power,json=rx-high-alarm-power,proto3" json:"rx_high_alarm_power,omitempty"`
	RxLowAlarmPower               string                                                      `protobuf:"bytes,17,opt,name=rx_low_alarm_power,json=rx-low-alarm-power,proto3" json:"rx_low_alarm_power,omitempty"`
	TxHighAlarmPower              string                                                      `protobuf:"bytes,18,opt,name=tx_high_alarm_power,json=tx-high-alarm-power,proto3" json:"tx_high_alarm_power,omitempty"`
	TxLowAlarmPower               string                                                      `protobuf:"bytes,19,opt,name=tx_low_alarm_power,json=tx-low-alarm-power,proto3" json:"tx_low_alarm_power,omitempty"`
	Tunable                       Devm_Ports_Port_OpticalModule_Tunable                       `protobuf:"varint,20,opt,name=tunable,proto3,enum=huawei_devm.Devm_Ports_Port_OpticalModule_Tunable" json:"tunable,omitempty"`
	ChromaticDispersion           string                                                      `protobuf:"bytes,21,opt,name=chromatic_dispersion,json=chromatic-dispersion,proto3" json:"chromatic_dispersion,omitempty"`
	PolarizationModeDispersion    string                                                      `protobuf:"bytes,22,opt,name=polarization_mode_dispersion,json=polarization-mode-dispersion,proto3" json:"polarization_mode_dispersion,omitempty"`
	DirectionType                 Devm_Ports_Port_OpticalModule_DirectionType                 `protobuf:"varint,23,opt,name=direction_type,json=direction-type,proto3,enum=huawei_devm.Devm_Ports_Port_OpticalModule_DirectionType" json:"direction_type,omitempty"`
	TotalRxPower                  string                                                      `protobuf:"bytes,24,opt,name=total_rx_power,json=total-rx-power,proto3" json:"total_rx_power,omitempty"`
	TotalRxHighWarn               string                                                      `protobuf:"bytes,25,opt,name=total_rx_high_warn,json=total-rx-high-warn,proto3" json:"total_rx_high_warn,omitempty"`
	TotalRxLowWarn                string                                                      `protobuf:"bytes,26,opt,name=total_rx_low_warn,json=total-rx-low-warn,proto3" json:"total_rx_low_warn,omitempty"`
	TotalRxHighAlarm              string                                                      `protobuf:"bytes,27,opt,name=total_rx_high_alarm,json=total-rx-high-alarm,proto3" json:"total_rx_high_alarm,omitempty"`
	TotalRxLowAlarm               string                                                      `protobuf:"bytes,28,opt,name=total_rx_low_alarm,json=total-rx-low-alarm,proto3" json:"total_rx_low_alarm,omitempty"`
	Bias                          int32                                                       `protobuf:"varint,29,opt,name=bias,proto3" json:"bias,omitempty"`
	Voltage                       int32                                                       `protobuf:"varint,30,opt,name=voltage,proto3" json:"voltage,omitempty"`
	Temperature                   int32                                                       `protobuf:"varint,31,opt,name=temperature,proto3" json:"temperature,omitempty"`
	VendorOui                     string                                                      `protobuf:"bytes,32,opt,name=vendor_oui,json=vendor-oui,proto3" json:"vendor_oui,omitempty"`
	VendorRev                     string                                                      `protobuf:"bytes,33,opt,name=vendor_rev,json=vendor-rev,proto3" json:"vendor_rev,omitempty"`
	GponSn                        string                                                      `protobuf:"bytes,34,opt,name=gpon_sn,json=gpon-sn,proto3" json:"gpon_sn,omitempty"`
	Channels                      *Devm_Ports_Port_OpticalModule_Channels                     `protobuf:"bytes,35,opt,name=channels,proto3" json:"channels,omitempty"`
	RxHighPowerWarnEn             bool                                                        `protobuf:"varint,36,opt,name=rx_high_power_warn_en,json=rx-high-power-warn-en,proto3" json:"rx_high_power_warn_en,omitempty"`
	RxLowPowerWarnEn              bool                                                        `protobuf:"varint,37,opt,name=rx_low_power_warn_en,json=rx-low-power-warn-en,proto3" json:"rx_low_power_warn_en,omitempty"`
	TxHighPowerWarnEn             bool                                                        `protobuf:"varint,38,opt,name=tx_high_power_warn_en,json=tx-high-power-warn-en,proto3" json:"tx_high_power_warn_en,omitempty"`
	TxLowPowerWarnEn              bool                                                        `protobuf:"varint,39,opt,name=tx_low_power_warn_en,json=tx-low-power-warn-en,proto3" json:"tx_low_power_warn_en,omitempty"`
	VoltHighWarnEn                bool                                                        `protobuf:"varint,40,opt,name=volt_high_warn_en,json=volt-high-warn-en,proto3" json:"volt_high_warn_en,omitempty"`
	VoltLowWarnEn                 bool                                                        `protobuf:"varint,41,opt,name=volt_low_warn_en,json=volt-low-warn-en,proto3" json:"volt_low_warn_en,omitempty"`
	WaveModulationMode            Devm_Ports_Port_OpticalModule_WaveModulationMode            `protobuf:"varint,42,opt,name=wave_modulation_mode,json=wave-modulation-mode,proto3,enum=huawei_devm.Devm_Ports_Port_OpticalModule_WaveModulationMode" json:"wave_modulation_mode,omitempty"`
	WavelengthChannelNumber       Devm_Ports_Port_OpticalModule_WavelengthChannelNumber       `protobuf:"varint,43,opt,name=wavelength_channel_number,json=wavelength-channel-number,proto3,enum=huawei_devm.Devm_Ports_Port_OpticalModule_WavelengthChannelNumber" json:"wavelength_channel_number,omitempty"`
	TunableWavelength             uint32                                                      `protobuf:"varint,44,opt,name=tunable_wavelength,json=tunable-wavelength,proto3" json:"tunable_wavelength,omitempty"`
	TunableFrequency              uint32                                                      `protobuf:"varint,45,opt,name=tunable_frequency,json=tunable-frequency,proto3" json:"tunable_frequency,omitempty"`
	SignalDqpskTx                 uint32                                                      `protobuf:"varint,46,opt,name=signal_dqpsk_tx,json=signal-dqpsk-tx,proto3" json:"signal_dqpsk_tx,omitempty"`
	SignalDqpskRx                 uint32                                                      `protobuf:"varint,47,opt,name=signal_dqpsk_rx,json=signal-dqpsk-rx,proto3" json:"signal_dqpsk_rx,omitempty"`
	WaveMapping                   *Devm_Ports_Port_OpticalModule_WaveMapping                  `protobuf:"bytes,48,opt,name=wave_mapping,json=wave-mapping,proto3" json:"wave_mapping,omitempty"`
	WavelengthChannelNumberStatus Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus `protobuf:"varint,49,opt,name=wavelength_channel_number_status,json=wavelength-channel-number-status,proto3,enum=huawei_devm.Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus" json:"wavelength_channel_number_status,omitempty"`
	SignalDqpsk                   uint32                                                      `protobuf:"varint,50,opt,name=signal_dqpsk,json=signal-dqpsk,proto3" json:"signal_dqpsk,omitempty"`
	PowerLowProtection            Devm_Ports_Port_OpticalModule_PowerLowProtection            `protobuf:"varint,51,opt,name=power_low_protection,json=power-low-protection,proto3,enum=huawei_devm.Devm_Ports_Port_OpticalModule_PowerLowProtection" json:"power_low_protection,omitempty"`
	SingleFiber                   Devm_Ports_Port_OpticalModule_SingleFiber                   `protobuf:"varint,52,opt,name=single_fiber,json=single-fiber,proto3,enum=huawei_devm.Devm_Ports_Port_OpticalModule_SingleFiber" json:"single_fiber,omitempty"`
	SingleFiberRx                 Devm_Ports_Port_OpticalModule_SingleFiberRx                 `protobuf:"varint,53,opt,name=single_fiber_rx,json=single-fiber-rx,proto3,enum=huawei_devm.Devm_Ports_Port_OpticalModule_SingleFiberRx" json:"single_fiber_rx,omitempty"`
	ManufactureDate               string                                                      `protobuf:"bytes,54,opt,name=manufacture_date,json=manufacture-date,proto3" json:"manufacture_date,omitempty"`
	TransceiverMediumType         Devm_Ports_Port_OpticalModule_TransceiverMediumType         `protobuf:"varint,55,opt,name=transceiver_medium_type,json=transceiver-medium-type,proto3,enum=huawei_devm.Devm_Ports_Port_OpticalModule_TransceiverMediumType" json:"transceiver_medium_type,omitempty"`
	VoltageFloat                  string                                                      `protobuf:"bytes,56,opt,name=voltage_float,json=voltage-float,proto3" json:"voltage_float,omitempty"`
	TemperatureFloat              string                                                      `protobuf:"bytes,57,opt,name=temperature_float,json=temperature-float,proto3" json:"temperature_float,omitempty"`
	SerialNumber                  string                                                      `protobuf:"bytes,58,opt,name=serial_number,json=serial-number,proto3" json:"serial_number,omitempty"`
	GainMode                      Devm_Ports_Port_OpticalModule_GainMode                      `protobuf:"varint,59,opt,name=gain_mode,json=gain-mode,proto3,enum=huawei_devm.Devm_Ports_Port_OpticalModule_GainMode" json:"gain_mode,omitempty"`
	GainValue                     uint32                                                      `protobuf:"varint,60,opt,name=gain_value,json=gain-value,proto3" json:"gain_value,omitempty"`
	OpticalMode                   Devm_Ports_Port_OpticalModule_OpticalMode                   `protobuf:"varint,61,opt,name=optical_mode,json=optical-mode,proto3,enum=huawei_devm.Devm_Ports_Port_OpticalModule_OpticalMode" json:"optical_mode,omitempty"`
	GainModeSts                   Devm_Ports_Port_OpticalModule_GainModeSts                   `protobuf:"varint,62,opt,name=gain_mode_sts,json=gain-mode-sts,proto3,enum=huawei_devm.Devm_Ports_Port_OpticalModule_GainModeSts" json:"gain_mode_sts,omitempty"`
	GainValueSts                  uint32                                                      `protobuf:"varint,63,opt,name=gain_value_sts,json=gain-value-sts,proto3" json:"gain_value_sts,omitempty"`
	OpticalModeStatus             Devm_Ports_Port_OpticalModule_OpticalModeStatus             `protobuf:"varint,64,opt,name=optical_mode_status,json=optical-mode-status,proto3,enum=huawei_devm.Devm_Ports_Port_OpticalModule_OpticalModeStatus" json:"optical_mode_status,omitempty"`
	CertifiedState                Devm_Ports_Port_OpticalModule_CertifiedState                `protobuf:"varint,65,opt,name=certified_state,json=certified-state,proto3,enum=huawei_devm.Devm_Ports_Port_OpticalModule_CertifiedState" json:"certified_state,omitempty"`
	IsSupportDdm                  Devm_Ports_Port_OpticalModule_IsSupportDdm                  `protobuf:"varint,66,opt,name=is_support_ddm,json=is-support-ddm,proto3,enum=huawei_devm.Devm_Ports_Port_OpticalModule_IsSupportDdm" json:"is_support_ddm,omitempty"`
	BiasHighThreshold             string                                                      `protobuf:"bytes,67,opt,name=bias_high_threshold,json=bias-high-threshold,proto3" json:"bias_high_threshold,omitempty"`
	BiasLowThreshold              string                                                      `protobuf:"bytes,68,opt,name=bias_low_threshold,json=bias-low-threshold,proto3" json:"bias_low_threshold,omitempty"`
	VoltageHighThresholdFloat     string                                                      `protobuf:"bytes,69,opt,name=voltage_high_threshold_float,json=voltage-high-threshold-float,proto3" json:"voltage_high_threshold_float,omitempty"`
	VoltageLowThresholdFloat      string                                                      `protobuf:"bytes,70,opt,name=voltage_low_threshold_float,json=voltage-low-threshold-float,proto3" json:"voltage_low_threshold_float,omitempty"`
	TemperatureHighThresholdFloat string                                                      `protobuf:"bytes,71,opt,name=temperature_high_threshold_float,json=temperature-high-threshold-float,proto3" json:"temperature_high_threshold_float,omitempty"`
	TemperatureLowThresholdFloat  string                                                      `protobuf:"bytes,72,opt,name=temperature_low_threshold_float,json=temperature-low-threshold-float,proto3" json:"temperature_low_threshold_float,omitempty"`
	// Types that are assignable to GainPower:
	//	*Devm_Ports_Port_OpticalModule_GainPowerGain
	//	*Devm_Ports_Port_OpticalModule_GainPowerPower
	GainPower         isDevm_Ports_Port_OpticalModule_GainPower `protobuf_oneof:"GainPower"`
	AgcEffectiveValue uint32                                    `protobuf:"varint,75,opt,name=agc_effective_value,json=agc-effective-value,proto3" json:"agc_effective_value,omitempty"`
	ApcEffectiveValue uint32                                    `protobuf:"varint,76,opt,name=apc_effective_value,json=apc-effective-value,proto3" json:"apc_effective_value,omitempty"`
}

func (x *Devm_Ports_Port_OpticalModule) Reset() {
	*x = Devm_Ports_Port_OpticalModule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[401]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Ports_Port_OpticalModule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Ports_Port_OpticalModule) ProtoMessage() {}

func (x *Devm_Ports_Port_OpticalModule) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[401]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Ports_Port_OpticalModule.ProtoReflect.Descriptor instead.
func (*Devm_Ports_Port_OpticalModule) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 2}
}

func (x *Devm_Ports_Port_OpticalModule) GetVendorName() string {
	if x != nil {
		return x.VendorName
	}
	return ""
}

func (x *Devm_Ports_Port_OpticalModule) GetVendorPn() string {
	if x != nil {
		return x.VendorPn
	}
	return ""
}

func (x *Devm_Ports_Port_OpticalModule) GetTransBw() string {
	if x != nil {
		return x.TransBw
	}
	return ""
}

func (x *Devm_Ports_Port_OpticalModule) GetTransMode() Devm_Ports_Port_OpticalModule_TransMode {
	if x != nil {
		return x.TransMode
	}
	return Devm_Ports_Port_OpticalModule_TransMode_UNKNOWN
}

func (x *Devm_Ports_Port_OpticalModule) GetHotPlug() bool {
	if x != nil {
		return x.HotPlug
	}
	return false
}

func (x *Devm_Ports_Port_OpticalModule) GetType() Devm_Ports_Port_OpticalModule_Type {
	if x != nil {
		return x.Type
	}
	return Devm_Ports_Port_OpticalModule_Type_UNKNOWN
}

func (x *Devm_Ports_Port_OpticalModule) GetFiberType() Devm_Ports_Port_OpticalModule_FiberType {
	if x != nil {
		return x.FiberType
	}
	return Devm_Ports_Port_OpticalModule_FiberType_UNKNOWN
}

func (x *Devm_Ports_Port_OpticalModule) GetWavelength() string {
	if x != nil {
		return x.Wavelength
	}
	return ""
}

func (x *Devm_Ports_Port_OpticalModule) GetTransmissionDistance() string {
	if x != nil {
		return x.TransmissionDistance
	}
	return ""
}

func (x *Devm_Ports_Port_OpticalModule) GetTxPower() string {
	if x != nil {
		return x.TxPower
	}
	return ""
}

func (x *Devm_Ports_Port_OpticalModule) GetRxPower() string {
	if x != nil {
		return x.RxPower
	}
	return ""
}

func (x *Devm_Ports_Port_OpticalModule) GetRxHighWarnPower() string {
	if x != nil {
		return x.RxHighWarnPower
	}
	return ""
}

func (x *Devm_Ports_Port_OpticalModule) GetRxLowWarnPower() string {
	if x != nil {
		return x.RxLowWarnPower
	}
	return ""
}

func (x *Devm_Ports_Port_OpticalModule) GetTxHighWarnPower() string {
	if x != nil {
		return x.TxHighWarnPower
	}
	return ""
}

func (x *Devm_Ports_Port_OpticalModule) GetTxLowWarnPower() string {
	if x != nil {
		return x.TxLowWarnPower
	}
	return ""
}

func (x *Devm_Ports_Port_OpticalModule) GetRxHighAlarmPower() string {
	if x != nil {
		return x.RxHighAlarmPower
	}
	return ""
}

func (x *Devm_Ports_Port_OpticalModule) GetRxLowAlarmPower() string {
	if x != nil {
		return x.RxLowAlarmPower
	}
	return ""
}

func (x *Devm_Ports_Port_OpticalModule) GetTxHighAlarmPower() string {
	if x != nil {
		return x.TxHighAlarmPower
	}
	return ""
}

func (x *Devm_Ports_Port_OpticalModule) GetTxLowAlarmPower() string {
	if x != nil {
		return x.TxLowAlarmPower
	}
	return ""
}

func (x *Devm_Ports_Port_OpticalModule) GetTunable() Devm_Ports_Port_OpticalModule_Tunable {
	if x != nil {
		return x.Tunable
	}
	return Devm_Ports_Port_OpticalModule_INVALID_ENUM_VALUE_Tunable
}

func (x *Devm_Ports_Port_OpticalModule) GetChromaticDispersion() string {
	if x != nil {
		return x.ChromaticDispersion
	}
	return ""
}

func (x *Devm_Ports_Port_OpticalModule) GetPolarizationModeDispersion() string {
	if x != nil {
		return x.PolarizationModeDispersion
	}
	return ""
}

func (x *Devm_Ports_Port_OpticalModule) GetDirectionType() Devm_Ports_Port_OpticalModule_DirectionType {
	if x != nil {
		return x.DirectionType
	}
	return Devm_Ports_Port_OpticalModule_INVALID_ENUM_VALUE_DirectionType
}

func (x *Devm_Ports_Port_OpticalModule) GetTotalRxPower() string {
	if x != nil {
		return x.TotalRxPower
	}
	return ""
}

func (x *Devm_Ports_Port_OpticalModule) GetTotalRxHighWarn() string {
	if x != nil {
		return x.TotalRxHighWarn
	}
	return ""
}

func (x *Devm_Ports_Port_OpticalModule) GetTotalRxLowWarn() string {
	if x != nil {
		return x.TotalRxLowWarn
	}
	return ""
}

func (x *Devm_Ports_Port_OpticalModule) GetTotalRxHighAlarm() string {
	if x != nil {
		return x.TotalRxHighAlarm
	}
	return ""
}

func (x *Devm_Ports_Port_OpticalModule) GetTotalRxLowAlarm() string {
	if x != nil {
		return x.TotalRxLowAlarm
	}
	return ""
}

func (x *Devm_Ports_Port_OpticalModule) GetBias() int32 {
	if x != nil {
		return x.Bias
	}
	return 0
}

func (x *Devm_Ports_Port_OpticalModule) GetVoltage() int32 {
	if x != nil {
		return x.Voltage
	}
	return 0
}

func (x *Devm_Ports_Port_OpticalModule) GetTemperature() int32 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

func (x *Devm_Ports_Port_OpticalModule) GetVendorOui() string {
	if x != nil {
		return x.VendorOui
	}
	return ""
}

func (x *Devm_Ports_Port_OpticalModule) GetVendorRev() string {
	if x != nil {
		return x.VendorRev
	}
	return ""
}

func (x *Devm_Ports_Port_OpticalModule) GetGponSn() string {
	if x != nil {
		return x.GponSn
	}
	return ""
}

func (x *Devm_Ports_Port_OpticalModule) GetChannels() *Devm_Ports_Port_OpticalModule_Channels {
	if x != nil {
		return x.Channels
	}
	return nil
}

func (x *Devm_Ports_Port_OpticalModule) GetRxHighPowerWarnEn() bool {
	if x != nil {
		return x.RxHighPowerWarnEn
	}
	return false
}

func (x *Devm_Ports_Port_OpticalModule) GetRxLowPowerWarnEn() bool {
	if x != nil {
		return x.RxLowPowerWarnEn
	}
	return false
}

func (x *Devm_Ports_Port_OpticalModule) GetTxHighPowerWarnEn() bool {
	if x != nil {
		return x.TxHighPowerWarnEn
	}
	return false
}

func (x *Devm_Ports_Port_OpticalModule) GetTxLowPowerWarnEn() bool {
	if x != nil {
		return x.TxLowPowerWarnEn
	}
	return false
}

func (x *Devm_Ports_Port_OpticalModule) GetVoltHighWarnEn() bool {
	if x != nil {
		return x.VoltHighWarnEn
	}
	return false
}

func (x *Devm_Ports_Port_OpticalModule) GetVoltLowWarnEn() bool {
	if x != nil {
		return x.VoltLowWarnEn
	}
	return false
}

func (x *Devm_Ports_Port_OpticalModule) GetWaveModulationMode() Devm_Ports_Port_OpticalModule_WaveModulationMode {
	if x != nil {
		return x.WaveModulationMode
	}
	return Devm_Ports_Port_OpticalModule_WaveModulationMode_DQPSK
}

func (x *Devm_Ports_Port_OpticalModule) GetWavelengthChannelNumber() Devm_Ports_Port_OpticalModule_WavelengthChannelNumber {
	if x != nil {
		return x.WavelengthChannelNumber
	}
	return Devm_Ports_Port_OpticalModule_WavelengthChannelNumber_X_196X_10THZX_1528X_773NM
}

func (x *Devm_Ports_Port_OpticalModule) GetTunableWavelength() uint32 {
	if x != nil {
		return x.TunableWavelength
	}
	return 0
}

func (x *Devm_Ports_Port_OpticalModule) GetTunableFrequency() uint32 {
	if x != nil {
		return x.TunableFrequency
	}
	return 0
}

func (x *Devm_Ports_Port_OpticalModule) GetSignalDqpskTx() uint32 {
	if x != nil {
		return x.SignalDqpskTx
	}
	return 0
}

func (x *Devm_Ports_Port_OpticalModule) GetSignalDqpskRx() uint32 {
	if x != nil {
		return x.SignalDqpskRx
	}
	return 0
}

func (x *Devm_Ports_Port_OpticalModule) GetWaveMapping() *Devm_Ports_Port_OpticalModule_WaveMapping {
	if x != nil {
		return x.WaveMapping
	}
	return nil
}

func (x *Devm_Ports_Port_OpticalModule) GetWavelengthChannelNumberStatus() Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus {
	if x != nil {
		return x.WavelengthChannelNumberStatus
	}
	return Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus_X_196X_10THZX_1528X_773NM
}

func (x *Devm_Ports_Port_OpticalModule) GetSignalDqpsk() uint32 {
	if x != nil {
		return x.SignalDqpsk
	}
	return 0
}

func (x *Devm_Ports_Port_OpticalModule) GetPowerLowProtection() Devm_Ports_Port_OpticalModule_PowerLowProtection {
	if x != nil {
		return x.PowerLowProtection
	}
	return Devm_Ports_Port_OpticalModule_PowerLowProtection_ENABLE
}

func (x *Devm_Ports_Port_OpticalModule) GetSingleFiber() Devm_Ports_Port_OpticalModule_SingleFiber {
	if x != nil {
		return x.SingleFiber
	}
	return Devm_Ports_Port_OpticalModule_SingleFiber_ENABLE
}

func (x *Devm_Ports_Port_OpticalModule) GetSingleFiberRx() Devm_Ports_Port_OpticalModule_SingleFiberRx {
	if x != nil {
		return x.SingleFiberRx
	}
	return Devm_Ports_Port_OpticalModule_SingleFiberRx_ENABLE
}

func (x *Devm_Ports_Port_OpticalModule) GetManufactureDate() string {
	if x != nil {
		return x.ManufactureDate
	}
	return ""
}

func (x *Devm_Ports_Port_OpticalModule) GetTransceiverMediumType() Devm_Ports_Port_OpticalModule_TransceiverMediumType {
	if x != nil {
		return x.TransceiverMediumType
	}
	return Devm_Ports_Port_OpticalModule_TransceiverMediumType_SFPX_1000BASEX_X
}

func (x *Devm_Ports_Port_OpticalModule) GetVoltageFloat() string {
	if x != nil {
		return x.VoltageFloat
	}
	return ""
}

func (x *Devm_Ports_Port_OpticalModule) GetTemperatureFloat() string {
	if x != nil {
		return x.TemperatureFloat
	}
	return ""
}

func (x *Devm_Ports_Port_OpticalModule) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *Devm_Ports_Port_OpticalModule) GetGainMode() Devm_Ports_Port_OpticalModule_GainMode {
	if x != nil {
		return x.GainMode
	}
	return Devm_Ports_Port_OpticalModule_INVALID_ENUM_VALUE_GainMode
}

func (x *Devm_Ports_Port_OpticalModule) GetGainValue() uint32 {
	if x != nil {
		return x.GainValue
	}
	return 0
}

func (x *Devm_Ports_Port_OpticalModule) GetOpticalMode() Devm_Ports_Port_OpticalModule_OpticalMode {
	if x != nil {
		return x.OpticalMode
	}
	return Devm_Ports_Port_OpticalModule_INVALID_ENUM_VALUE_OpticalMode
}

func (x *Devm_Ports_Port_OpticalModule) GetGainModeSts() Devm_Ports_Port_OpticalModule_GainModeSts {
	if x != nil {
		return x.GainModeSts
	}
	return Devm_Ports_Port_OpticalModule_INVALID_ENUM_VALUE_GainModeSts
}

func (x *Devm_Ports_Port_OpticalModule) GetGainValueSts() uint32 {
	if x != nil {
		return x.GainValueSts
	}
	return 0
}

func (x *Devm_Ports_Port_OpticalModule) GetOpticalModeStatus() Devm_Ports_Port_OpticalModule_OpticalModeStatus {
	if x != nil {
		return x.OpticalModeStatus
	}
	return Devm_Ports_Port_OpticalModule_INVALID_ENUM_VALUE_OpticalModeStatus
}

func (x *Devm_Ports_Port_OpticalModule) GetCertifiedState() Devm_Ports_Port_OpticalModule_CertifiedState {
	if x != nil {
		return x.CertifiedState
	}
	return Devm_Ports_Port_OpticalModule_CertifiedState_CERTIFIED
}

func (x *Devm_Ports_Port_OpticalModule) GetIsSupportDdm() Devm_Ports_Port_OpticalModule_IsSupportDdm {
	if x != nil {
		return x.IsSupportDdm
	}
	return Devm_Ports_Port_OpticalModule_IsSupportDdm_NONX_SUPPORT
}

func (x *Devm_Ports_Port_OpticalModule) GetBiasHighThreshold() string {
	if x != nil {
		return x.BiasHighThreshold
	}
	return ""
}

func (x *Devm_Ports_Port_OpticalModule) GetBiasLowThreshold() string {
	if x != nil {
		return x.BiasLowThreshold
	}
	return ""
}

func (x *Devm_Ports_Port_OpticalModule) GetVoltageHighThresholdFloat() string {
	if x != nil {
		return x.VoltageHighThresholdFloat
	}
	return ""
}

func (x *Devm_Ports_Port_OpticalModule) GetVoltageLowThresholdFloat() string {
	if x != nil {
		return x.VoltageLowThresholdFloat
	}
	return ""
}

func (x *Devm_Ports_Port_OpticalModule) GetTemperatureHighThresholdFloat() string {
	if x != nil {
		return x.TemperatureHighThresholdFloat
	}
	return ""
}

func (x *Devm_Ports_Port_OpticalModule) GetTemperatureLowThresholdFloat() string {
	if x != nil {
		return x.TemperatureLowThresholdFloat
	}
	return ""
}

func (m *Devm_Ports_Port_OpticalModule) GetGainPower() isDevm_Ports_Port_OpticalModule_GainPower {
	if m != nil {
		return m.GainPower
	}
	return nil
}

func (x *Devm_Ports_Port_OpticalModule) GetGainPowerGain() *Devm_Ports_Port_OpticalModule_GainPower_Gain {
	if x, ok := x.GetGainPower().(*Devm_Ports_Port_OpticalModule_GainPowerGain); ok {
		return x.GainPowerGain
	}
	return nil
}

func (x *Devm_Ports_Port_OpticalModule) GetGainPowerPower() *Devm_Ports_Port_OpticalModule_GainPower_Power {
	if x, ok := x.GetGainPower().(*Devm_Ports_Port_OpticalModule_GainPowerPower); ok {
		return x.GainPowerPower
	}
	return nil
}

func (x *Devm_Ports_Port_OpticalModule) GetAgcEffectiveValue() uint32 {
	if x != nil {
		return x.AgcEffectiveValue
	}
	return 0
}

func (x *Devm_Ports_Port_OpticalModule) GetApcEffectiveValue() uint32 {
	if x != nil {
		return x.ApcEffectiveValue
	}
	return 0
}

type isDevm_Ports_Port_OpticalModule_GainPower interface {
	isDevm_Ports_Port_OpticalModule_GainPower()
}

type Devm_Ports_Port_OpticalModule_GainPowerGain struct {
	GainPowerGain *Devm_Ports_Port_OpticalModule_GainPower_Gain `protobuf:"bytes,73,opt,name=gain_power_gain,json=gain,proto3,oneof"`
}

type Devm_Ports_Port_OpticalModule_GainPowerPower struct {
	GainPowerPower *Devm_Ports_Port_OpticalModule_GainPower_Power `protobuf:"bytes,74,opt,name=gain_power_power,json=power,proto3,oneof"`
}

func (*Devm_Ports_Port_OpticalModule_GainPowerGain) isDevm_Ports_Port_OpticalModule_GainPower() {}

func (*Devm_Ports_Port_OpticalModule_GainPowerPower) isDevm_Ports_Port_OpticalModule_GainPower() {}

type Devm_Ports_Port_TransmissionAlarm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransAlarmIfdowns *Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns `protobuf:"bytes,1,opt,name=trans_alarm_ifdowns,json=trans-alarm-ifdowns,proto3" json:"trans_alarm_ifdowns,omitempty"`
	HoldoffTimer      uint32                                               `protobuf:"varint,2,opt,name=holdoff_timer,json=holdoff-timer,proto3" json:"holdoff_timer,omitempty"`
	HoldupTimer       uint32                                               `protobuf:"varint,3,opt,name=holdup_timer,json=holdup-timer,proto3" json:"holdup_timer,omitempty"`
	ThresholdB3Tca    uint32                                               `protobuf:"varint,4,opt,name=threshold_b3tca,json=threshold-b3tca,proto3" json:"threshold_b3tca,omitempty"`
	ThresholdB1Tca    uint32                                               `protobuf:"varint,5,opt,name=threshold_b1tca,json=threshold-b1tca,proto3" json:"threshold_b1tca,omitempty"`
	ThresholdB2Tca    uint32                                               `protobuf:"varint,6,opt,name=threshold_b2tca,json=threshold-b2tca,proto3" json:"threshold_b2tca,omitempty"`
	ThresholdBip2Tca  uint32                                               `protobuf:"varint,7,opt,name=threshold_bip2tca,json=threshold-bip2tca,proto3" json:"threshold_bip2tca,omitempty"`
	ThresholdSdbere   uint32                                               `protobuf:"varint,8,opt,name=threshold_sdbere,json=threshold-sdbere,proto3" json:"threshold_sdbere,omitempty"`
	ThresholdSfbere   uint32                                               `protobuf:"varint,9,opt,name=threshold_sfbere,json=threshold-sfbere,proto3" json:"threshold_sfbere,omitempty"`
	DampSuppress      uint32                                               `protobuf:"varint,10,opt,name=damp_suppress,json=damp-suppress,proto3" json:"damp_suppress,omitempty"`
	DampReuse         uint32                                               `protobuf:"varint,11,opt,name=damp_reuse,json=damp-reuse,proto3" json:"damp_reuse,omitempty"`
	DampCeiling       uint32                                               `protobuf:"varint,12,opt,name=damp_ceiling,json=damp-ceiling,proto3" json:"damp_ceiling,omitempty"`
	DampDecayok       uint32                                               `protobuf:"varint,13,opt,name=damp_decayok,json=damp-decayok,proto3" json:"damp_decayok,omitempty"`
	DampDecayng       uint32                                               `protobuf:"varint,14,opt,name=damp_decayng,json=damp-decayng,proto3" json:"damp_decayng,omitempty"`
	AlmLastResetTime  string                                               `protobuf:"bytes,15,opt,name=alm_last_reset_time,json=alm-last-reset-time,proto3" json:"alm_last_reset_time,omitempty"`
	FilterFunction    bool                                                 `protobuf:"varint,16,opt,name=filter_function,json=filter-function,proto3" json:"filter_function,omitempty"`
	DampingFunction   bool                                                 `protobuf:"varint,17,opt,name=damping_function,json=damping-function,proto3" json:"damping_function,omitempty"`
}

func (x *Devm_Ports_Port_TransmissionAlarm) Reset() {
	*x = Devm_Ports_Port_TransmissionAlarm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[402]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Ports_Port_TransmissionAlarm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Ports_Port_TransmissionAlarm) ProtoMessage() {}

func (x *Devm_Ports_Port_TransmissionAlarm) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[402]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Ports_Port_TransmissionAlarm.ProtoReflect.Descriptor instead.
func (*Devm_Ports_Port_TransmissionAlarm) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 3}
}

func (x *Devm_Ports_Port_TransmissionAlarm) GetTransAlarmIfdowns() *Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns {
	if x != nil {
		return x.TransAlarmIfdowns
	}
	return nil
}

func (x *Devm_Ports_Port_TransmissionAlarm) GetHoldoffTimer() uint32 {
	if x != nil {
		return x.HoldoffTimer
	}
	return 0
}

func (x *Devm_Ports_Port_TransmissionAlarm) GetHoldupTimer() uint32 {
	if x != nil {
		return x.HoldupTimer
	}
	return 0
}

func (x *Devm_Ports_Port_TransmissionAlarm) GetThresholdB3Tca() uint32 {
	if x != nil {
		return x.ThresholdB3Tca
	}
	return 0
}

func (x *Devm_Ports_Port_TransmissionAlarm) GetThresholdB1Tca() uint32 {
	if x != nil {
		return x.ThresholdB1Tca
	}
	return 0
}

func (x *Devm_Ports_Port_TransmissionAlarm) GetThresholdB2Tca() uint32 {
	if x != nil {
		return x.ThresholdB2Tca
	}
	return 0
}

func (x *Devm_Ports_Port_TransmissionAlarm) GetThresholdBip2Tca() uint32 {
	if x != nil {
		return x.ThresholdBip2Tca
	}
	return 0
}

func (x *Devm_Ports_Port_TransmissionAlarm) GetThresholdSdbere() uint32 {
	if x != nil {
		return x.ThresholdSdbere
	}
	return 0
}

func (x *Devm_Ports_Port_TransmissionAlarm) GetThresholdSfbere() uint32 {
	if x != nil {
		return x.ThresholdSfbere
	}
	return 0
}

func (x *Devm_Ports_Port_TransmissionAlarm) GetDampSuppress() uint32 {
	if x != nil {
		return x.DampSuppress
	}
	return 0
}

func (x *Devm_Ports_Port_TransmissionAlarm) GetDampReuse() uint32 {
	if x != nil {
		return x.DampReuse
	}
	return 0
}

func (x *Devm_Ports_Port_TransmissionAlarm) GetDampCeiling() uint32 {
	if x != nil {
		return x.DampCeiling
	}
	return 0
}

func (x *Devm_Ports_Port_TransmissionAlarm) GetDampDecayok() uint32 {
	if x != nil {
		return x.DampDecayok
	}
	return 0
}

func (x *Devm_Ports_Port_TransmissionAlarm) GetDampDecayng() uint32 {
	if x != nil {
		return x.DampDecayng
	}
	return 0
}

func (x *Devm_Ports_Port_TransmissionAlarm) GetAlmLastResetTime() string {
	if x != nil {
		return x.AlmLastResetTime
	}
	return ""
}

func (x *Devm_Ports_Port_TransmissionAlarm) GetFilterFunction() bool {
	if x != nil {
		return x.FilterFunction
	}
	return false
}

func (x *Devm_Ports_Port_TransmissionAlarm) GetDampingFunction() bool {
	if x != nil {
		return x.DampingFunction
	}
	return false
}

type Devm_Ports_Port_Pos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FrameFormat Devm_Ports_Port_Pos_FrameFormat `protobuf:"varint,1,opt,name=frame_format,json=frame-format,proto3,enum=huawei_devm.Devm_Ports_Port_Pos_FrameFormat" json:"frame_format,omitempty"`
	Crc         Devm_Ports_Port_Pos_Crc         `protobuf:"varint,2,opt,name=crc,proto3,enum=huawei_devm.Devm_Ports_Port_Pos_Crc" json:"crc,omitempty"`
	HoldUp      Devm_Ports_Port_Pos_HoldUp      `protobuf:"varint,3,opt,name=hold_up,json=hold-up,proto3,enum=huawei_devm.Devm_Ports_Port_Pos_HoldUp" json:"hold_up,omitempty"`
	Speed       Devm_Ports_Port_Pos_Speed       `protobuf:"varint,4,opt,name=speed,proto3,enum=huawei_devm.Devm_Ports_Port_Pos_Speed" json:"speed,omitempty"`
	J0Mode      Devm_Ports_Port_Pos_J0Mode      `protobuf:"varint,5,opt,name=j0_mode,json=j0-mode,proto3,enum=huawei_devm.Devm_Ports_Port_Pos_J0Mode" json:"j0_mode,omitempty"`
	J0Value     uint32                          `protobuf:"varint,6,opt,name=j0_value,json=j0-value,proto3" json:"j0_value,omitempty"`
	J0Trace     string                          `protobuf:"bytes,7,opt,name=j0_trace,json=j0-trace,proto3" json:"j0_trace,omitempty"`
	J1Mode      Devm_Ports_Port_Pos_J1Mode      `protobuf:"varint,8,opt,name=j1_mode,json=j1-mode,proto3,enum=huawei_devm.Devm_Ports_Port_Pos_J1Mode" json:"j1_mode,omitempty"`
	J1Value     uint32                          `protobuf:"varint,9,opt,name=j1_value,json=j1-value,proto3" json:"j1_value,omitempty"`
	J1Trace     string                          `protobuf:"bytes,10,opt,name=j1_trace,json=j1-trace,proto3" json:"j1_trace,omitempty"`
	C2          uint32                          `protobuf:"varint,11,opt,name=c2,proto3" json:"c2,omitempty"`
	Clock       Devm_Ports_Port_Pos_Clock       `protobuf:"varint,12,opt,name=clock,proto3,enum=huawei_devm.Devm_Ports_Port_Pos_Clock" json:"clock,omitempty"`
	Scramble    Devm_Ports_Port_Pos_Scramble    `protobuf:"varint,13,opt,name=scramble,proto3,enum=huawei_devm.Devm_Ports_Port_Pos_Scramble" json:"scramble,omitempty"`
	RxJ0Value   uint32                          `protobuf:"varint,14,opt,name=rx_j0_value,json=rx-j0-value,proto3" json:"rx_j0_value,omitempty"`
	RxJ0Trace   string                          `protobuf:"bytes,15,opt,name=rx_j0_trace,json=rx-j0-trace,proto3" json:"rx_j0_trace,omitempty"`
	RxJ1Value   uint32                          `protobuf:"varint,16,opt,name=rx_j1_value,json=rx-j1-value,proto3" json:"rx_j1_value,omitempty"`
	RxJ1Trace   string                          `protobuf:"bytes,17,opt,name=rx_j1_trace,json=rx-j1-trace,proto3" json:"rx_j1_trace,omitempty"`
	RxC2        uint32                          `protobuf:"varint,18,opt,name=rx_c2,json=rx-c2,proto3" json:"rx_c2,omitempty"`
	RxJ0Mode    Devm_Ports_Port_Pos_RxJ0Mode    `protobuf:"varint,19,opt,name=rx_j0_mode,json=rx-j0-mode,proto3,enum=huawei_devm.Devm_Ports_Port_Pos_RxJ0Mode" json:"rx_j0_mode,omitempty"`
	RxJ1Mode    Devm_Ports_Port_Pos_RxJ1Mode    `protobuf:"varint,20,opt,name=rx_j1_mode,json=rx-j1-mode,proto3,enum=huawei_devm.Devm_Ports_Port_Pos_RxJ1Mode" json:"rx_j1_mode,omitempty"`
	B1Tca       string                          `protobuf:"bytes,21,opt,name=b1tca,proto3" json:"b1tca,omitempty"`
	B2Tca       string                          `protobuf:"bytes,22,opt,name=b2tca,proto3" json:"b2tca,omitempty"`
	B3Tca       string                          `protobuf:"bytes,23,opt,name=b3tca,proto3" json:"b3tca,omitempty"`
}

func (x *Devm_Ports_Port_Pos) Reset() {
	*x = Devm_Ports_Port_Pos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[403]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Ports_Port_Pos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Ports_Port_Pos) ProtoMessage() {}

func (x *Devm_Ports_Port_Pos) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[403]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Ports_Port_Pos.ProtoReflect.Descriptor instead.
func (*Devm_Ports_Port_Pos) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 4}
}

func (x *Devm_Ports_Port_Pos) GetFrameFormat() Devm_Ports_Port_Pos_FrameFormat {
	if x != nil {
		return x.FrameFormat
	}
	return Devm_Ports_Port_Pos_FrameFormat_SDH
}

func (x *Devm_Ports_Port_Pos) GetCrc() Devm_Ports_Port_Pos_Crc {
	if x != nil {
		return x.Crc
	}
	return Devm_Ports_Port_Pos_Crc_X_16BIT
}

func (x *Devm_Ports_Port_Pos) GetHoldUp() Devm_Ports_Port_Pos_HoldUp {
	if x != nil {
		return x.HoldUp
	}
	return Devm_Ports_Port_Pos_HoldUp_DISABLED
}

func (x *Devm_Ports_Port_Pos) GetSpeed() Devm_Ports_Port_Pos_Speed {
	if x != nil {
		return x.Speed
	}
	return Devm_Ports_Port_Pos_Speed_UNDO
}

func (x *Devm_Ports_Port_Pos) GetJ0Mode() Devm_Ports_Port_Pos_J0Mode {
	if x != nil {
		return x.J0Mode
	}
	return Devm_Ports_Port_Pos_INVALID_ENUM_VALUE_J0Mode
}

func (x *Devm_Ports_Port_Pos) GetJ0Value() uint32 {
	if x != nil {
		return x.J0Value
	}
	return 0
}

func (x *Devm_Ports_Port_Pos) GetJ0Trace() string {
	if x != nil {
		return x.J0Trace
	}
	return ""
}

func (x *Devm_Ports_Port_Pos) GetJ1Mode() Devm_Ports_Port_Pos_J1Mode {
	if x != nil {
		return x.J1Mode
	}
	return Devm_Ports_Port_Pos_INVALID_ENUM_VALUE_J1Mode
}

func (x *Devm_Ports_Port_Pos) GetJ1Value() uint32 {
	if x != nil {
		return x.J1Value
	}
	return 0
}

func (x *Devm_Ports_Port_Pos) GetJ1Trace() string {
	if x != nil {
		return x.J1Trace
	}
	return ""
}

func (x *Devm_Ports_Port_Pos) GetC2() uint32 {
	if x != nil {
		return x.C2
	}
	return 0
}

func (x *Devm_Ports_Port_Pos) GetClock() Devm_Ports_Port_Pos_Clock {
	if x != nil {
		return x.Clock
	}
	return Devm_Ports_Port_Pos_Clock_MASTER
}

func (x *Devm_Ports_Port_Pos) GetScramble() Devm_Ports_Port_Pos_Scramble {
	if x != nil {
		return x.Scramble
	}
	return Devm_Ports_Port_Pos_Scramble_DISABLED
}

func (x *Devm_Ports_Port_Pos) GetRxJ0Value() uint32 {
	if x != nil {
		return x.RxJ0Value
	}
	return 0
}

func (x *Devm_Ports_Port_Pos) GetRxJ0Trace() string {
	if x != nil {
		return x.RxJ0Trace
	}
	return ""
}

func (x *Devm_Ports_Port_Pos) GetRxJ1Value() uint32 {
	if x != nil {
		return x.RxJ1Value
	}
	return 0
}

func (x *Devm_Ports_Port_Pos) GetRxJ1Trace() string {
	if x != nil {
		return x.RxJ1Trace
	}
	return ""
}

func (x *Devm_Ports_Port_Pos) GetRxC2() uint32 {
	if x != nil {
		return x.RxC2
	}
	return 0
}

func (x *Devm_Ports_Port_Pos) GetRxJ0Mode() Devm_Ports_Port_Pos_RxJ0Mode {
	if x != nil {
		return x.RxJ0Mode
	}
	return Devm_Ports_Port_Pos_INVALID_ENUM_VALUE_RxJ0Mode
}

func (x *Devm_Ports_Port_Pos) GetRxJ1Mode() Devm_Ports_Port_Pos_RxJ1Mode {
	if x != nil {
		return x.RxJ1Mode
	}
	return Devm_Ports_Port_Pos_INVALID_ENUM_VALUE_RxJ1Mode
}

func (x *Devm_Ports_Port_Pos) GetB1Tca() string {
	if x != nil {
		return x.B1Tca
	}
	return ""
}

func (x *Devm_Ports_Port_Pos) GetB2Tca() string {
	if x != nil {
		return x.B2Tca
	}
	return ""
}

func (x *Devm_Ports_Port_Pos) GetB3Tca() string {
	if x != nil {
		return x.B3Tca
	}
	return ""
}

type Devm_Ports_Port_Atm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HoldUp           Devm_Ports_Port_Atm_HoldUp           `protobuf:"varint,1,opt,name=hold_up,json=hold-up,proto3,enum=huawei_devm.Devm_Ports_Port_Atm_HoldUp" json:"hold_up,omitempty"`
	J0Mode           Devm_Ports_Port_Atm_J0Mode           `protobuf:"varint,2,opt,name=j0_mode,json=j0-mode,proto3,enum=huawei_devm.Devm_Ports_Port_Atm_J0Mode" json:"j0_mode,omitempty"`
	J0Trace          string                               `protobuf:"bytes,3,opt,name=j0_trace,json=j0-trace,proto3" json:"j0_trace,omitempty"`
	J1Mode           Devm_Ports_Port_Atm_J1Mode           `protobuf:"varint,4,opt,name=j1_mode,json=j1-mode,proto3,enum=huawei_devm.Devm_Ports_Port_Atm_J1Mode" json:"j1_mode,omitempty"`
	J1Trace          string                               `protobuf:"bytes,5,opt,name=j1_trace,json=j1-trace,proto3" json:"j1_trace,omitempty"`
	C2               uint32                               `protobuf:"varint,6,opt,name=c2,proto3" json:"c2,omitempty"`
	Clock            Devm_Ports_Port_Atm_Clock            `protobuf:"varint,7,opt,name=clock,proto3,enum=huawei_devm.Devm_Ports_Port_Atm_Clock" json:"clock,omitempty"`
	Scramble         Devm_Ports_Port_Atm_Scramble         `protobuf:"varint,8,opt,name=scramble,proto3,enum=huawei_devm.Devm_Ports_Port_Atm_Scramble" json:"scramble,omitempty"`
	FlagSpacePadding Devm_Ports_Port_Atm_FlagSpacePadding `protobuf:"varint,9,opt,name=flag_space_padding,json=flag-space-padding,proto3,enum=huawei_devm.Devm_Ports_Port_Atm_FlagSpacePadding" json:"flag_space_padding,omitempty"`
	RxJ0Trace        string                               `protobuf:"bytes,10,opt,name=rx_j0_trace,json=rx-j0-trace,proto3" json:"rx_j0_trace,omitempty"`
	RxJ1Trace        string                               `protobuf:"bytes,11,opt,name=rx_j1_trace,json=rx-j1-trace,proto3" json:"rx_j1_trace,omitempty"`
	RxC2             uint32                               `protobuf:"varint,12,opt,name=rx_c2,json=rx-c2,proto3" json:"rx_c2,omitempty"`
	RxJ0Mode         Devm_Ports_Port_Atm_RxJ0Mode         `protobuf:"varint,13,opt,name=rx_j0_mode,json=rx-j0-mode,proto3,enum=huawei_devm.Devm_Ports_Port_Atm_RxJ0Mode" json:"rx_j0_mode,omitempty"`
	RxJ1Mode         Devm_Ports_Port_Atm_RxJ1Mode         `protobuf:"varint,14,opt,name=rx_j1_mode,json=rx-j1-mode,proto3,enum=huawei_devm.Devm_Ports_Port_Atm_RxJ1Mode" json:"rx_j1_mode,omitempty"`
	LbHoldTime       uint32                               `protobuf:"varint,15,opt,name=lb_hold_time,json=lb-hold-time,proto3" json:"lb_hold_time,omitempty"`
}

func (x *Devm_Ports_Port_Atm) Reset() {
	*x = Devm_Ports_Port_Atm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[404]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Ports_Port_Atm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Ports_Port_Atm) ProtoMessage() {}

func (x *Devm_Ports_Port_Atm) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[404]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Ports_Port_Atm.ProtoReflect.Descriptor instead.
func (*Devm_Ports_Port_Atm) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 5}
}

func (x *Devm_Ports_Port_Atm) GetHoldUp() Devm_Ports_Port_Atm_HoldUp {
	if x != nil {
		return x.HoldUp
	}
	return Devm_Ports_Port_Atm_HoldUp_DISABLED
}

func (x *Devm_Ports_Port_Atm) GetJ0Mode() Devm_Ports_Port_Atm_J0Mode {
	if x != nil {
		return x.J0Mode
	}
	return Devm_Ports_Port_Atm_INVALID_ENUM_VALUE_J0Mode
}

func (x *Devm_Ports_Port_Atm) GetJ0Trace() string {
	if x != nil {
		return x.J0Trace
	}
	return ""
}

func (x *Devm_Ports_Port_Atm) GetJ1Mode() Devm_Ports_Port_Atm_J1Mode {
	if x != nil {
		return x.J1Mode
	}
	return Devm_Ports_Port_Atm_INVALID_ENUM_VALUE_J1Mode
}

func (x *Devm_Ports_Port_Atm) GetJ1Trace() string {
	if x != nil {
		return x.J1Trace
	}
	return ""
}

func (x *Devm_Ports_Port_Atm) GetC2() uint32 {
	if x != nil {
		return x.C2
	}
	return 0
}

func (x *Devm_Ports_Port_Atm) GetClock() Devm_Ports_Port_Atm_Clock {
	if x != nil {
		return x.Clock
	}
	return Devm_Ports_Port_Atm_Clock_MASTER
}

func (x *Devm_Ports_Port_Atm) GetScramble() Devm_Ports_Port_Atm_Scramble {
	if x != nil {
		return x.Scramble
	}
	return Devm_Ports_Port_Atm_Scramble_DISABLED
}

func (x *Devm_Ports_Port_Atm) GetFlagSpacePadding() Devm_Ports_Port_Atm_FlagSpacePadding {
	if x != nil {
		return x.FlagSpacePadding
	}
	return Devm_Ports_Port_Atm_FlagSpacePadding_DISABLE
}

func (x *Devm_Ports_Port_Atm) GetRxJ0Trace() string {
	if x != nil {
		return x.RxJ0Trace
	}
	return ""
}

func (x *Devm_Ports_Port_Atm) GetRxJ1Trace() string {
	if x != nil {
		return x.RxJ1Trace
	}
	return ""
}

func (x *Devm_Ports_Port_Atm) GetRxC2() uint32 {
	if x != nil {
		return x.RxC2
	}
	return 0
}

func (x *Devm_Ports_Port_Atm) GetRxJ0Mode() Devm_Ports_Port_Atm_RxJ0Mode {
	if x != nil {
		return x.RxJ0Mode
	}
	return Devm_Ports_Port_Atm_INVALID_ENUM_VALUE_RxJ0Mode
}

func (x *Devm_Ports_Port_Atm) GetRxJ1Mode() Devm_Ports_Port_Atm_RxJ1Mode {
	if x != nil {
		return x.RxJ1Mode
	}
	return Devm_Ports_Port_Atm_INVALID_ENUM_VALUE_RxJ1Mode
}

func (x *Devm_Ports_Port_Atm) GetLbHoldTime() uint32 {
	if x != nil {
		return x.LbHoldTime
	}
	return 0
}

type Devm_Ports_Port_Cpos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MappingMode      Devm_Ports_Port_Cpos_MappingMode      `protobuf:"varint,1,opt,name=mapping_mode,json=mapping-mode,proto3,enum=huawei_devm.Devm_Ports_Port_Cpos_MappingMode" json:"mapping_mode,omitempty"`
	FrameFormat      Devm_Ports_Port_Cpos_FrameFormat      `protobuf:"varint,2,opt,name=frame_format,json=frame-format,proto3,enum=huawei_devm.Devm_Ports_Port_Cpos_FrameFormat" json:"frame_format,omitempty"`
	Multiplex        Devm_Ports_Port_Cpos_Multiplex        `protobuf:"varint,3,opt,name=multiplex,proto3,enum=huawei_devm.Devm_Ports_Port_Cpos_Multiplex" json:"multiplex,omitempty"`
	LbHoldTime       uint32                                `protobuf:"varint,4,opt,name=lb_hold_time,json=lb-hold-time,proto3" json:"lb_hold_time,omitempty"`
	HoldUp           Devm_Ports_Port_Cpos_HoldUp           `protobuf:"varint,5,opt,name=hold_up,json=hold-up,proto3,enum=huawei_devm.Devm_Ports_Port_Cpos_HoldUp" json:"hold_up,omitempty"`
	HpMappingMode    Devm_Ports_Port_Cpos_HpMappingMode    `protobuf:"varint,6,opt,name=hp_mapping_mode,json=hp-mapping-mode,proto3,enum=huawei_devm.Devm_Ports_Port_Cpos_HpMappingMode" json:"hp_mapping_mode,omitempty"`
	AisFlag          Devm_Ports_Port_Cpos_AisFlag          `protobuf:"varint,7,opt,name=ais_flag,json=ais-flag,proto3,enum=huawei_devm.Devm_Ports_Port_Cpos_AisFlag" json:"ais_flag,omitempty"`
	TuaisFlag        Devm_Ports_Port_Cpos_TuaisFlag        `protobuf:"varint,8,opt,name=tuais_flag,json=tuais-flag,proto3,enum=huawei_devm.Devm_Ports_Port_Cpos_TuaisFlag" json:"tuais_flag,omitempty"`
	J0Mode           Devm_Ports_Port_Cpos_J0Mode           `protobuf:"varint,9,opt,name=j0_mode,json=j0-mode,proto3,enum=huawei_devm.Devm_Ports_Port_Cpos_J0Mode" json:"j0_mode,omitempty"`
	J0Value          uint32                                `protobuf:"varint,10,opt,name=j0_value,json=j0-value,proto3" json:"j0_value,omitempty"`
	J0Trace          string                                `protobuf:"bytes,11,opt,name=j0_trace,json=j0-trace,proto3" json:"j0_trace,omitempty"`
	J1Mode           Devm_Ports_Port_Cpos_J1Mode           `protobuf:"varint,12,opt,name=j1_mode,json=j1-mode,proto3,enum=huawei_devm.Devm_Ports_Port_Cpos_J1Mode" json:"j1_mode,omitempty"`
	J1Value          uint32                                `protobuf:"varint,13,opt,name=j1_value,json=j1-value,proto3" json:"j1_value,omitempty"`
	J1Trace          string                                `protobuf:"bytes,14,opt,name=j1_trace,json=j1-trace,proto3" json:"j1_trace,omitempty"`
	C2               uint32                                `protobuf:"varint,15,opt,name=c2,proto3" json:"c2,omitempty"`
	Clock            Devm_Ports_Port_Cpos_Clock            `protobuf:"varint,16,opt,name=clock,proto3,enum=huawei_devm.Devm_Ports_Port_Cpos_Clock" json:"clock,omitempty"`
	FlagSpacePadding Devm_Ports_Port_Cpos_FlagSpacePadding `protobuf:"varint,17,opt,name=flag_space_padding,json=flag-space-padding,proto3,enum=huawei_devm.Devm_Ports_Port_Cpos_FlagSpacePadding" json:"flag_space_padding,omitempty"`
	RxJ0Value        uint32                                `protobuf:"varint,18,opt,name=rx_j0_value,json=rx-j0-value,proto3" json:"rx_j0_value,omitempty"`
	RxJ0Trace        string                                `protobuf:"bytes,19,opt,name=rx_j0_trace,json=rx-j0-trace,proto3" json:"rx_j0_trace,omitempty"`
	RxJ1Value        uint32                                `protobuf:"varint,20,opt,name=rx_j1_value,json=rx-j1-value,proto3" json:"rx_j1_value,omitempty"`
	RxJ1Trace        string                                `protobuf:"bytes,21,opt,name=rx_j1_trace,json=rx-j1-trace,proto3" json:"rx_j1_trace,omitempty"`
	RxC2             uint32                                `protobuf:"varint,22,opt,name=rx_c2,json=rx-c2,proto3" json:"rx_c2,omitempty"`
	E1T1S            *Devm_Ports_Port_Cpos_E1T1S           `protobuf:"bytes,23,opt,name=e1t1s,proto3" json:"e1t1s,omitempty"`
}

func (x *Devm_Ports_Port_Cpos) Reset() {
	*x = Devm_Ports_Port_Cpos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[405]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Ports_Port_Cpos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Ports_Port_Cpos) ProtoMessage() {}

func (x *Devm_Ports_Port_Cpos) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[405]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Ports_Port_Cpos.ProtoReflect.Descriptor instead.
func (*Devm_Ports_Port_Cpos) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 6}
}

func (x *Devm_Ports_Port_Cpos) GetMappingMode() Devm_Ports_Port_Cpos_MappingMode {
	if x != nil {
		return x.MappingMode
	}
	return Devm_Ports_Port_Cpos_MappingMode_HX_MODE
}

func (x *Devm_Ports_Port_Cpos) GetFrameFormat() Devm_Ports_Port_Cpos_FrameFormat {
	if x != nil {
		return x.FrameFormat
	}
	return Devm_Ports_Port_Cpos_FrameFormat_SDH
}

func (x *Devm_Ports_Port_Cpos) GetMultiplex() Devm_Ports_Port_Cpos_Multiplex {
	if x != nil {
		return x.Multiplex
	}
	return Devm_Ports_Port_Cpos_Multiplex_AUX_4
}

func (x *Devm_Ports_Port_Cpos) GetLbHoldTime() uint32 {
	if x != nil {
		return x.LbHoldTime
	}
	return 0
}

func (x *Devm_Ports_Port_Cpos) GetHoldUp() Devm_Ports_Port_Cpos_HoldUp {
	if x != nil {
		return x.HoldUp
	}
	return Devm_Ports_Port_Cpos_HoldUp_DISABLED
}

func (x *Devm_Ports_Port_Cpos) GetHpMappingMode() Devm_Ports_Port_Cpos_HpMappingMode {
	if x != nil {
		return x.HpMappingMode
	}
	return Devm_Ports_Port_Cpos_HpMappingMode_VC12
}

func (x *Devm_Ports_Port_Cpos) GetAisFlag() Devm_Ports_Port_Cpos_AisFlag {
	if x != nil {
		return x.AisFlag
	}
	return Devm_Ports_Port_Cpos_AisFlag_DISABLE
}

func (x *Devm_Ports_Port_Cpos) GetTuaisFlag() Devm_Ports_Port_Cpos_TuaisFlag {
	if x != nil {
		return x.TuaisFlag
	}
	return Devm_Ports_Port_Cpos_TuaisFlag_DISABLE
}

func (x *Devm_Ports_Port_Cpos) GetJ0Mode() Devm_Ports_Port_Cpos_J0Mode {
	if x != nil {
		return x.J0Mode
	}
	return Devm_Ports_Port_Cpos_J0Mode_SDH
}

func (x *Devm_Ports_Port_Cpos) GetJ0Value() uint32 {
	if x != nil {
		return x.J0Value
	}
	return 0
}

func (x *Devm_Ports_Port_Cpos) GetJ0Trace() string {
	if x != nil {
		return x.J0Trace
	}
	return ""
}

func (x *Devm_Ports_Port_Cpos) GetJ1Mode() Devm_Ports_Port_Cpos_J1Mode {
	if x != nil {
		return x.J1Mode
	}
	return Devm_Ports_Port_Cpos_INVALID_ENUM_VALUE_J1Mode
}

func (x *Devm_Ports_Port_Cpos) GetJ1Value() uint32 {
	if x != nil {
		return x.J1Value
	}
	return 0
}

func (x *Devm_Ports_Port_Cpos) GetJ1Trace() string {
	if x != nil {
		return x.J1Trace
	}
	return ""
}

func (x *Devm_Ports_Port_Cpos) GetC2() uint32 {
	if x != nil {
		return x.C2
	}
	return 0
}

func (x *Devm_Ports_Port_Cpos) GetClock() Devm_Ports_Port_Cpos_Clock {
	if x != nil {
		return x.Clock
	}
	return Devm_Ports_Port_Cpos_Clock_MASTER
}

func (x *Devm_Ports_Port_Cpos) GetFlagSpacePadding() Devm_Ports_Port_Cpos_FlagSpacePadding {
	if x != nil {
		return x.FlagSpacePadding
	}
	return Devm_Ports_Port_Cpos_FlagSpacePadding_DISABLE
}

func (x *Devm_Ports_Port_Cpos) GetRxJ0Value() uint32 {
	if x != nil {
		return x.RxJ0Value
	}
	return 0
}

func (x *Devm_Ports_Port_Cpos) GetRxJ0Trace() string {
	if x != nil {
		return x.RxJ0Trace
	}
	return ""
}

func (x *Devm_Ports_Port_Cpos) GetRxJ1Value() uint32 {
	if x != nil {
		return x.RxJ1Value
	}
	return 0
}

func (x *Devm_Ports_Port_Cpos) GetRxJ1Trace() string {
	if x != nil {
		return x.RxJ1Trace
	}
	return ""
}

func (x *Devm_Ports_Port_Cpos) GetRxC2() uint32 {
	if x != nil {
		return x.RxC2
	}
	return 0
}

func (x *Devm_Ports_Port_Cpos) GetE1T1S() *Devm_Ports_Port_Cpos_E1T1S {
	if x != nil {
		return x.E1T1S
	}
	return nil
}

type Devm_Ports_Port_PortAlarm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CrcEnabledDown           bool                                    `protobuf:"varint,1,opt,name=crc_enabled_down,json=crc-enabled-down,proto3" json:"crc_enabled_down,omitempty"`
	InputEnabledDown         bool                                    `protobuf:"varint,2,opt,name=input_enabled_down,json=input-enabled-down,proto3" json:"input_enabled_down,omitempty"`
	InputErrorHighThreshold  uint32                                  `protobuf:"varint,3,opt,name=input_error_high_threshold,json=input-error-high-threshold,proto3" json:"input_error_high_threshold,omitempty"`
	InputErrorLowThreshold   uint32                                  `protobuf:"varint,4,opt,name=input_error_low_threshold,json=input-error-low-threshold,proto3" json:"input_error_low_threshold,omitempty"`
	InputErrorInterval       uint32                                  `protobuf:"varint,5,opt,name=input_error_interval,json=input-error-interval,proto3" json:"input_error_interval,omitempty"`
	OutputEnabledDown        bool                                    `protobuf:"varint,6,opt,name=output_enabled_down,json=output-enabled-down,proto3" json:"output_enabled_down,omitempty"`
	OutputErrorHighThreshold uint32                                  `protobuf:"varint,7,opt,name=output_error_high_threshold,json=output-error-high-threshold,proto3" json:"output_error_high_threshold,omitempty"`
	OutputErrorLowThreshold  uint32                                  `protobuf:"varint,8,opt,name=output_error_low_threshold,json=output-error-low-threshold,proto3" json:"output_error_low_threshold,omitempty"`
	OutputErrorInterval      uint32                                  `protobuf:"varint,9,opt,name=output_error_interval,json=output-error-interval,proto3" json:"output_error_interval,omitempty"`
	PhyUpdownEn              bool                                    `protobuf:"varint,10,opt,name=phy_updown_en,json=phy-updown-en,proto3" json:"phy_updown_en,omitempty"`
	CrcPerCur                string                                  `protobuf:"bytes,11,opt,name=crc_per_cur,json=crc-per-cur,proto3" json:"crc_per_cur,omitempty"`
	EthPortAlarm             *Devm_Ports_Port_PortAlarm_EthPortAlarm `protobuf:"bytes,12,opt,name=eth_port_alarm,json=eth-port-alarm,proto3" json:"eth_port_alarm,omitempty"`
	SdhPortAlarm             *Devm_Ports_Port_PortAlarm_SdhPortAlarm `protobuf:"bytes,13,opt,name=sdh_port_alarm,json=sdh-port-alarm,proto3" json:"sdh_port_alarm,omitempty"`
	PdhPortAlarm             *Devm_Ports_Port_PortAlarm_PdhPortAlarm `protobuf:"bytes,14,opt,name=pdh_port_alarm,json=pdh-port-alarm,proto3" json:"pdh_port_alarm,omitempty"`
	CrcMfeAlarm              *Devm_Ports_Port_PortAlarm_CrcMfeAlarm  `protobuf:"bytes,15,opt,name=crc_mfe_alarm,json=crc-mfe-alarm,proto3" json:"crc_mfe_alarm,omitempty"`
	CrcSample                *Devm_Ports_Port_PortAlarm_CrcSample    `protobuf:"bytes,16,opt,name=crc_sample,json=crc-sample,proto3" json:"crc_sample,omitempty"`
	// Types that are assignable to AlarmType:
	//	*Devm_Ports_Port_PortAlarm_AlarmTypeCrcErrorThreshold
	//	*Devm_Ports_Port_PortAlarm_AlarmTypeLinkCrc
	//	*Devm_Ports_Port_PortAlarm_AlarmTypeCrcMfsAlarm
	AlarmType isDevm_Ports_Port_PortAlarm_AlarmType `protobuf_oneof:"AlarmType"`
}

func (x *Devm_Ports_Port_PortAlarm) Reset() {
	*x = Devm_Ports_Port_PortAlarm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[406]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Ports_Port_PortAlarm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Ports_Port_PortAlarm) ProtoMessage() {}

func (x *Devm_Ports_Port_PortAlarm) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[406]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Ports_Port_PortAlarm.ProtoReflect.Descriptor instead.
func (*Devm_Ports_Port_PortAlarm) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 7}
}

func (x *Devm_Ports_Port_PortAlarm) GetCrcEnabledDown() bool {
	if x != nil {
		return x.CrcEnabledDown
	}
	return false
}

func (x *Devm_Ports_Port_PortAlarm) GetInputEnabledDown() bool {
	if x != nil {
		return x.InputEnabledDown
	}
	return false
}

func (x *Devm_Ports_Port_PortAlarm) GetInputErrorHighThreshold() uint32 {
	if x != nil {
		return x.InputErrorHighThreshold
	}
	return 0
}

func (x *Devm_Ports_Port_PortAlarm) GetInputErrorLowThreshold() uint32 {
	if x != nil {
		return x.InputErrorLowThreshold
	}
	return 0
}

func (x *Devm_Ports_Port_PortAlarm) GetInputErrorInterval() uint32 {
	if x != nil {
		return x.InputErrorInterval
	}
	return 0
}

func (x *Devm_Ports_Port_PortAlarm) GetOutputEnabledDown() bool {
	if x != nil {
		return x.OutputEnabledDown
	}
	return false
}

func (x *Devm_Ports_Port_PortAlarm) GetOutputErrorHighThreshold() uint32 {
	if x != nil {
		return x.OutputErrorHighThreshold
	}
	return 0
}

func (x *Devm_Ports_Port_PortAlarm) GetOutputErrorLowThreshold() uint32 {
	if x != nil {
		return x.OutputErrorLowThreshold
	}
	return 0
}

func (x *Devm_Ports_Port_PortAlarm) GetOutputErrorInterval() uint32 {
	if x != nil {
		return x.OutputErrorInterval
	}
	return 0
}

func (x *Devm_Ports_Port_PortAlarm) GetPhyUpdownEn() bool {
	if x != nil {
		return x.PhyUpdownEn
	}
	return false
}

func (x *Devm_Ports_Port_PortAlarm) GetCrcPerCur() string {
	if x != nil {
		return x.CrcPerCur
	}
	return ""
}

func (x *Devm_Ports_Port_PortAlarm) GetEthPortAlarm() *Devm_Ports_Port_PortAlarm_EthPortAlarm {
	if x != nil {
		return x.EthPortAlarm
	}
	return nil
}

func (x *Devm_Ports_Port_PortAlarm) GetSdhPortAlarm() *Devm_Ports_Port_PortAlarm_SdhPortAlarm {
	if x != nil {
		return x.SdhPortAlarm
	}
	return nil
}

func (x *Devm_Ports_Port_PortAlarm) GetPdhPortAlarm() *Devm_Ports_Port_PortAlarm_PdhPortAlarm {
	if x != nil {
		return x.PdhPortAlarm
	}
	return nil
}

func (x *Devm_Ports_Port_PortAlarm) GetCrcMfeAlarm() *Devm_Ports_Port_PortAlarm_CrcMfeAlarm {
	if x != nil {
		return x.CrcMfeAlarm
	}
	return nil
}

func (x *Devm_Ports_Port_PortAlarm) GetCrcSample() *Devm_Ports_Port_PortAlarm_CrcSample {
	if x != nil {
		return x.CrcSample
	}
	return nil
}

func (m *Devm_Ports_Port_PortAlarm) GetAlarmType() isDevm_Ports_Port_PortAlarm_AlarmType {
	if m != nil {
		return m.AlarmType
	}
	return nil
}

func (x *Devm_Ports_Port_PortAlarm) GetAlarmTypeCrcErrorThreshold() *Devm_Ports_Port_PortAlarm_AlarmType_CrcErrorThreshold {
	if x, ok := x.GetAlarmType().(*Devm_Ports_Port_PortAlarm_AlarmTypeCrcErrorThreshold); ok {
		return x.AlarmTypeCrcErrorThreshold
	}
	return nil
}

func (x *Devm_Ports_Port_PortAlarm) GetAlarmTypeLinkCrc() *Devm_Ports_Port_PortAlarm_AlarmType_LinkCrc {
	if x, ok := x.GetAlarmType().(*Devm_Ports_Port_PortAlarm_AlarmTypeLinkCrc); ok {
		return x.AlarmTypeLinkCrc
	}
	return nil
}

func (x *Devm_Ports_Port_PortAlarm) GetAlarmTypeCrcMfsAlarm() *Devm_Ports_Port_PortAlarm_AlarmType_CrcMfsAlarm {
	if x, ok := x.GetAlarmType().(*Devm_Ports_Port_PortAlarm_AlarmTypeCrcMfsAlarm); ok {
		return x.AlarmTypeCrcMfsAlarm
	}
	return nil
}

type isDevm_Ports_Port_PortAlarm_AlarmType interface {
	isDevm_Ports_Port_PortAlarm_AlarmType()
}

type Devm_Ports_Port_PortAlarm_AlarmTypeCrcErrorThreshold struct {
	AlarmTypeCrcErrorThreshold *Devm_Ports_Port_PortAlarm_AlarmType_CrcErrorThreshold `protobuf:"bytes,17,opt,name=alarm_type_crc_error_threshold,json=crc-error-threshold,proto3,oneof"`
}

type Devm_Ports_Port_PortAlarm_AlarmTypeLinkCrc struct {
	AlarmTypeLinkCrc *Devm_Ports_Port_PortAlarm_AlarmType_LinkCrc `protobuf:"bytes,18,opt,name=alarm_type_link_crc,json=link-crc,proto3,oneof"`
}

type Devm_Ports_Port_PortAlarm_AlarmTypeCrcMfsAlarm struct {
	AlarmTypeCrcMfsAlarm *Devm_Ports_Port_PortAlarm_AlarmType_CrcMfsAlarm `protobuf:"bytes,19,opt,name=alarm_type_crc_mfs_alarm,json=crc-mfs-alarm,proto3,oneof"`
}

func (*Devm_Ports_Port_PortAlarm_AlarmTypeCrcErrorThreshold) isDevm_Ports_Port_PortAlarm_AlarmType() {
}

func (*Devm_Ports_Port_PortAlarm_AlarmTypeLinkCrc) isDevm_Ports_Port_PortAlarm_AlarmType() {}

func (*Devm_Ports_Port_PortAlarm_AlarmTypeCrcMfsAlarm) isDevm_Ports_Port_PortAlarm_AlarmType() {}

type Devm_Ports_Port_AdmPort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RxPower         string `protobuf:"bytes,1,opt,name=rx_power,json=rx-power,proto3" json:"rx_power,omitempty"`
	TxPower         string `protobuf:"bytes,2,opt,name=tx_power,json=tx-power,proto3" json:"tx_power,omitempty"`
	Descriton       string `protobuf:"bytes,3,opt,name=descriton,proto3" json:"descriton,omitempty"`
	Wavelength      string `protobuf:"bytes,4,opt,name=wavelength,proto3" json:"wavelength,omitempty"`
	ConectRelation  string `protobuf:"bytes,5,opt,name=conect_relation,json=conect-relation,proto3" json:"conect_relation,omitempty"`
	Direction       string `protobuf:"bytes,6,opt,name=direction,proto3" json:"direction,omitempty"`
	WaveBand        string `protobuf:"bytes,7,opt,name=wave_band,json=wave-band,proto3" json:"wave_band,omitempty"`
	WavelengthNum   string `protobuf:"bytes,8,opt,name=wavelength_num,json=wavelength-num,proto3" json:"wavelength_num,omitempty"`
	TxWavelength    string `protobuf:"bytes,9,opt,name=tx_wavelength,json=tx-wavelength,proto3" json:"tx_wavelength,omitempty"`
	RxWavelength    string `protobuf:"bytes,10,opt,name=rx_wavelength,json=rx-wavelength,proto3" json:"rx_wavelength,omitempty"`
	TxWavelengthNum string `protobuf:"bytes,11,opt,name=tx_wavelength_num,json=tx-wavelength-num,proto3" json:"tx_wavelength_num,omitempty"`
	RxWavelengthNum string `protobuf:"bytes,12,opt,name=rx_wavelength_num,json=rx-wavelength-num,proto3" json:"rx_wavelength_num,omitempty"`
}

func (x *Devm_Ports_Port_AdmPort) Reset() {
	*x = Devm_Ports_Port_AdmPort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[407]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Ports_Port_AdmPort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Ports_Port_AdmPort) ProtoMessage() {}

func (x *Devm_Ports_Port_AdmPort) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[407]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Ports_Port_AdmPort.ProtoReflect.Descriptor instead.
func (*Devm_Ports_Port_AdmPort) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 8}
}

func (x *Devm_Ports_Port_AdmPort) GetRxPower() string {
	if x != nil {
		return x.RxPower
	}
	return ""
}

func (x *Devm_Ports_Port_AdmPort) GetTxPower() string {
	if x != nil {
		return x.TxPower
	}
	return ""
}

func (x *Devm_Ports_Port_AdmPort) GetDescriton() string {
	if x != nil {
		return x.Descriton
	}
	return ""
}

func (x *Devm_Ports_Port_AdmPort) GetWavelength() string {
	if x != nil {
		return x.Wavelength
	}
	return ""
}

func (x *Devm_Ports_Port_AdmPort) GetConectRelation() string {
	if x != nil {
		return x.ConectRelation
	}
	return ""
}

func (x *Devm_Ports_Port_AdmPort) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *Devm_Ports_Port_AdmPort) GetWaveBand() string {
	if x != nil {
		return x.WaveBand
	}
	return ""
}

func (x *Devm_Ports_Port_AdmPort) GetWavelengthNum() string {
	if x != nil {
		return x.WavelengthNum
	}
	return ""
}

func (x *Devm_Ports_Port_AdmPort) GetTxWavelength() string {
	if x != nil {
		return x.TxWavelength
	}
	return ""
}

func (x *Devm_Ports_Port_AdmPort) GetRxWavelength() string {
	if x != nil {
		return x.RxWavelength
	}
	return ""
}

func (x *Devm_Ports_Port_AdmPort) GetTxWavelengthNum() string {
	if x != nil {
		return x.TxWavelengthNum
	}
	return ""
}

func (x *Devm_Ports_Port_AdmPort) GetRxWavelengthNum() string {
	if x != nil {
		return x.RxWavelengthNum
	}
	return ""
}

type Devm_Ports_Port_PhySerial struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Baudrate        Devm_Ports_Port_PhySerial_Baudrate        `protobuf:"varint,1,opt,name=baudrate,proto3,enum=huawei_devm.Devm_Ports_Port_PhySerial_Baudrate" json:"baudrate,omitempty"`
	ClockSourceMode Devm_Ports_Port_PhySerial_ClockSourceMode `protobuf:"varint,2,opt,name=clock_source_mode,json=clock-source-mode,proto3,enum=huawei_devm.Devm_Ports_Port_PhySerial_ClockSourceMode" json:"clock_source_mode,omitempty"`
	DataBits        uint32                                    `protobuf:"varint,3,opt,name=data_bits,json=data-bits,proto3" json:"data_bits,omitempty"`
	MuxProtocol     Devm_Ports_Port_PhySerial_MuxProtocol     `protobuf:"varint,4,opt,name=mux_protocol,json=mux-protocol,proto3,enum=huawei_devm.Devm_Ports_Port_PhySerial_MuxProtocol" json:"mux_protocol,omitempty"`
	Parity          Devm_Ports_Port_PhySerial_Parity          `protobuf:"varint,5,opt,name=parity,proto3,enum=huawei_devm.Devm_Ports_Port_PhySerial_Parity" json:"parity,omitempty"`
	PhaseClockSend  Devm_Ports_Port_PhySerial_PhaseClockSend  `protobuf:"varint,6,opt,name=phase_clock_send,json=phase-clock-send,proto3,enum=huawei_devm.Devm_Ports_Port_PhySerial_PhaseClockSend" json:"phase_clock_send,omitempty"`
	PhaseClockRec   Devm_Ports_Port_PhySerial_PhaseClockRec   `protobuf:"varint,7,opt,name=phase_clock_rec,json=phase-clock-rec,proto3,enum=huawei_devm.Devm_Ports_Port_PhySerial_PhaseClockRec" json:"phase_clock_rec,omitempty"`
	PhysicalMode    Devm_Ports_Port_PhySerial_PhysicalMode    `protobuf:"varint,8,opt,name=physical_mode,json=physical-mode,proto3,enum=huawei_devm.Devm_Ports_Port_PhySerial_PhysicalMode" json:"physical_mode,omitempty"`
	PortMode        Devm_Ports_Port_PhySerial_PortMode        `protobuf:"varint,9,opt,name=port_mode,json=port-mode,proto3,enum=huawei_devm.Devm_Ports_Port_PhySerial_PortMode" json:"port_mode,omitempty"`
	StopBits        uint32                                    `protobuf:"varint,10,opt,name=stop_bits,json=stop-bits,proto3" json:"stop_bits,omitempty"`
	WorkMode        Devm_Ports_Port_PhySerial_WorkMode        `protobuf:"varint,11,opt,name=work_mode,json=work-mode,proto3,enum=huawei_devm.Devm_Ports_Port_PhySerial_WorkMode" json:"work_mode,omitempty"`
	PhaseMode       Devm_Ports_Port_PhySerial_PhaseMode       `protobuf:"varint,12,opt,name=phase_mode,json=phase-mode,proto3,enum=huawei_devm.Devm_Ports_Port_PhySerial_PhaseMode" json:"phase_mode,omitempty"`
	DetectDsrSignal Devm_Ports_Port_PhySerial_DetectDsrSignal `protobuf:"varint,13,opt,name=detect_dsr_signal,json=detect-dsr-signal,proto3,enum=huawei_devm.Devm_Ports_Port_PhySerial_DetectDsrSignal" json:"detect_dsr_signal,omitempty"`
	DetectDtrSignal Devm_Ports_Port_PhySerial_DetectDtrSignal `protobuf:"varint,14,opt,name=detect_dtr_signal,json=detect-dtr-signal,proto3,enum=huawei_devm.Devm_Ports_Port_PhySerial_DetectDtrSignal" json:"detect_dtr_signal,omitempty"`
	DetectDcdSignal Devm_Ports_Port_PhySerial_DetectDcdSignal `protobuf:"varint,15,opt,name=detect_dcd_signal,json=detect-dcd-signal,proto3,enum=huawei_devm.Devm_Ports_Port_PhySerial_DetectDcdSignal" json:"detect_dcd_signal,omitempty"`
	DetectCtsSignal Devm_Ports_Port_PhySerial_DetectCtsSignal `protobuf:"varint,16,opt,name=detect_cts_signal,json=detect-cts-signal,proto3,enum=huawei_devm.Devm_Ports_Port_PhySerial_DetectCtsSignal" json:"detect_cts_signal,omitempty"`
	DetectRtsSignal Devm_Ports_Port_PhySerial_DetectRtsSignal `protobuf:"varint,17,opt,name=detect_rts_signal,json=detect-rts-signal,proto3,enum=huawei_devm.Devm_Ports_Port_PhySerial_DetectRtsSignal" json:"detect_rts_signal,omitempty"`
	SerAttrs        *Devm_Ports_Port_PhySerial_SerAttrs       `protobuf:"bytes,18,opt,name=ser_attrs,json=ser-attrs,proto3" json:"ser_attrs,omitempty"`
}

func (x *Devm_Ports_Port_PhySerial) Reset() {
	*x = Devm_Ports_Port_PhySerial{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[408]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Ports_Port_PhySerial) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Ports_Port_PhySerial) ProtoMessage() {}

func (x *Devm_Ports_Port_PhySerial) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[408]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Ports_Port_PhySerial.ProtoReflect.Descriptor instead.
func (*Devm_Ports_Port_PhySerial) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 9}
}

func (x *Devm_Ports_Port_PhySerial) GetBaudrate() Devm_Ports_Port_PhySerial_Baudrate {
	if x != nil {
		return x.Baudrate
	}
	return Devm_Ports_Port_PhySerial_Baudrate_X_600BIT
}

func (x *Devm_Ports_Port_PhySerial) GetClockSourceMode() Devm_Ports_Port_PhySerial_ClockSourceMode {
	if x != nil {
		return x.ClockSourceMode
	}
	return Devm_Ports_Port_PhySerial_ClockSourceMode_INTERNAL
}

func (x *Devm_Ports_Port_PhySerial) GetDataBits() uint32 {
	if x != nil {
		return x.DataBits
	}
	return 0
}

func (x *Devm_Ports_Port_PhySerial) GetMuxProtocol() Devm_Ports_Port_PhySerial_MuxProtocol {
	if x != nil {
		return x.MuxProtocol
	}
	return Devm_Ports_Port_PhySerial_MuxProtocol_SX_BITX_LOOPBACK
}

func (x *Devm_Ports_Port_PhySerial) GetParity() Devm_Ports_Port_PhySerial_Parity {
	if x != nil {
		return x.Parity
	}
	return Devm_Ports_Port_PhySerial_Parity_NONE
}

func (x *Devm_Ports_Port_PhySerial) GetPhaseClockSend() Devm_Ports_Port_PhySerial_PhaseClockSend {
	if x != nil {
		return x.PhaseClockSend
	}
	return Devm_Ports_Port_PhySerial_PhaseClockSend_INX_PHASE
}

func (x *Devm_Ports_Port_PhySerial) GetPhaseClockRec() Devm_Ports_Port_PhySerial_PhaseClockRec {
	if x != nil {
		return x.PhaseClockRec
	}
	return Devm_Ports_Port_PhySerial_PhaseClockRec_INX_PHASE
}

func (x *Devm_Ports_Port_PhySerial) GetPhysicalMode() Devm_Ports_Port_PhySerial_PhysicalMode {
	if x != nil {
		return x.PhysicalMode
	}
	return Devm_Ports_Port_PhySerial_PhysicalMode_ASYNC
}

func (x *Devm_Ports_Port_PhySerial) GetPortMode() Devm_Ports_Port_PhySerial_PortMode {
	if x != nil {
		return x.PortMode
	}
	return Devm_Ports_Port_PhySerial_PortMode_RSX_232
}

func (x *Devm_Ports_Port_PhySerial) GetStopBits() uint32 {
	if x != nil {
		return x.StopBits
	}
	return 0
}

func (x *Devm_Ports_Port_PhySerial) GetWorkMode() Devm_Ports_Port_PhySerial_WorkMode {
	if x != nil {
		return x.WorkMode
	}
	return Devm_Ports_Port_PhySerial_WorkMode_DCE
}

func (x *Devm_Ports_Port_PhySerial) GetPhaseMode() Devm_Ports_Port_PhySerial_PhaseMode {
	if x != nil {
		return x.PhaseMode
	}
	return Devm_Ports_Port_PhySerial_PhaseMode_SEQUENCE
}

func (x *Devm_Ports_Port_PhySerial) GetDetectDsrSignal() Devm_Ports_Port_PhySerial_DetectDsrSignal {
	if x != nil {
		return x.DetectDsrSignal
	}
	return Devm_Ports_Port_PhySerial_DetectDsrSignal_DETECT
}

func (x *Devm_Ports_Port_PhySerial) GetDetectDtrSignal() Devm_Ports_Port_PhySerial_DetectDtrSignal {
	if x != nil {
		return x.DetectDtrSignal
	}
	return Devm_Ports_Port_PhySerial_DetectDtrSignal_DETECT
}

func (x *Devm_Ports_Port_PhySerial) GetDetectDcdSignal() Devm_Ports_Port_PhySerial_DetectDcdSignal {
	if x != nil {
		return x.DetectDcdSignal
	}
	return Devm_Ports_Port_PhySerial_DetectDcdSignal_DETECT
}

func (x *Devm_Ports_Port_PhySerial) GetDetectCtsSignal() Devm_Ports_Port_PhySerial_DetectCtsSignal {
	if x != nil {
		return x.DetectCtsSignal
	}
	return Devm_Ports_Port_PhySerial_DetectCtsSignal_DETECT
}

func (x *Devm_Ports_Port_PhySerial) GetDetectRtsSignal() Devm_Ports_Port_PhySerial_DetectRtsSignal {
	if x != nil {
		return x.DetectRtsSignal
	}
	return Devm_Ports_Port_PhySerial_DetectRtsSignal_DETECT
}

func (x *Devm_Ports_Port_PhySerial) GetSerAttrs() *Devm_Ports_Port_PhySerial_SerAttrs {
	if x != nil {
		return x.SerAttrs
	}
	return nil
}

type Devm_Ports_Port_PhyVoice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PcmLawVaule                       Devm_Ports_Port_PhyVoice_PcmLawVaule                       `protobuf:"varint,1,opt,name=pcm_law_vaule,json=pcm-law-vaule,proto3,enum=huawei_devm.Devm_Ports_Port_PhyVoice_PcmLawVaule" json:"pcm_law_vaule,omitempty"`
	Fxo                               *Devm_Ports_Port_PhyVoice_Fxo                              `protobuf:"bytes,2,opt,name=fxo,proto3" json:"fxo,omitempty"`
	Fxs                               *Devm_Ports_Port_PhyVoice_Fxs                              `protobuf:"bytes,3,opt,name=fxs,proto3" json:"fxs,omitempty"`
	Em                                *Devm_Ports_Port_PhyVoice_Em                               `protobuf:"bytes,4,opt,name=em,proto3" json:"em,omitempty"`
	OnHook                            uint32                                                     `protobuf:"varint,5,opt,name=on_hook,json=on-hook,proto3" json:"on_hook,omitempty"`
	OffHook                           uint32                                                     `protobuf:"varint,6,opt,name=off_hook,json=off-hook,proto3" json:"off_hook,omitempty"`
	ChannelAssociatedSignallingEnable Devm_Ports_Port_PhyVoice_ChannelAssociatedSignallingEnable `protobuf:"varint,7,opt,name=channel_associated_signalling_enable,json=channel-associated-signalling-enable,proto3,enum=huawei_devm.Devm_Ports_Port_PhyVoice_ChannelAssociatedSignallingEnable" json:"channel_associated_signalling_enable,omitempty"`
}

func (x *Devm_Ports_Port_PhyVoice) Reset() {
	*x = Devm_Ports_Port_PhyVoice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[409]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Ports_Port_PhyVoice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Ports_Port_PhyVoice) ProtoMessage() {}

func (x *Devm_Ports_Port_PhyVoice) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[409]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Ports_Port_PhyVoice.ProtoReflect.Descriptor instead.
func (*Devm_Ports_Port_PhyVoice) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 10}
}

func (x *Devm_Ports_Port_PhyVoice) GetPcmLawVaule() Devm_Ports_Port_PhyVoice_PcmLawVaule {
	if x != nil {
		return x.PcmLawVaule
	}
	return Devm_Ports_Port_PhyVoice_PcmLawVaule_AX_LAW
}

func (x *Devm_Ports_Port_PhyVoice) GetFxo() *Devm_Ports_Port_PhyVoice_Fxo {
	if x != nil {
		return x.Fxo
	}
	return nil
}

func (x *Devm_Ports_Port_PhyVoice) GetFxs() *Devm_Ports_Port_PhyVoice_Fxs {
	if x != nil {
		return x.Fxs
	}
	return nil
}

func (x *Devm_Ports_Port_PhyVoice) GetEm() *Devm_Ports_Port_PhyVoice_Em {
	if x != nil {
		return x.Em
	}
	return nil
}

func (x *Devm_Ports_Port_PhyVoice) GetOnHook() uint32 {
	if x != nil {
		return x.OnHook
	}
	return 0
}

func (x *Devm_Ports_Port_PhyVoice) GetOffHook() uint32 {
	if x != nil {
		return x.OffHook
	}
	return 0
}

func (x *Devm_Ports_Port_PhyVoice) GetChannelAssociatedSignallingEnable() Devm_Ports_Port_PhyVoice_ChannelAssociatedSignallingEnable {
	if x != nil {
		return x.ChannelAssociatedSignallingEnable
	}
	return Devm_Ports_Port_PhyVoice_ChannelAssociatedSignallingEnable_DISABLE
}

type Devm_Ports_Port_E1T1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkMode         Devm_Ports_Port_E1T1_WorkMode     `protobuf:"varint,1,opt,name=work_mode,json=work-mode,proto3,enum=huawei_devm.Devm_Ports_Port_E1T1_WorkMode" json:"work_mode,omitempty"`
	FrameFormat      Devm_Ports_Port_E1T1_FrameFormat  `protobuf:"varint,2,opt,name=frame_format,json=frame-format,proto3,enum=huawei_devm.Devm_Ports_Port_E1T1_FrameFormat" json:"frame_format,omitempty"`
	Clock            Devm_Ports_Port_E1T1_Clock        `protobuf:"varint,3,opt,name=clock,proto3,enum=huawei_devm.Devm_Ports_Port_E1T1_Clock" json:"clock,omitempty"`
	Code             Devm_Ports_Port_E1T1_Code         `protobuf:"varint,4,opt,name=code,proto3,enum=huawei_devm.Devm_Ports_Port_E1T1_Code" json:"code,omitempty"`
	LoopbackHoldtime uint32                            `protobuf:"varint,5,opt,name=loopback_holdtime,json=loopback-holdtime,proto3" json:"loopback_holdtime,omitempty"`
	BipvStatic       uint64                            `protobuf:"varint,6,opt,name=bipv_static,json=bipv-static,proto3" json:"bipv_static,omitempty"`
	FasStatic        uint64                            `protobuf:"varint,7,opt,name=fas_static,json=fas-static,proto3" json:"fas_static,omitempty"`
	CrcStatic        uint64                            `protobuf:"varint,8,opt,name=crc_static,json=crc-static,proto3" json:"crc_static,omitempty"`
	ChannelSets      *Devm_Ports_Port_E1T1_ChannelSets `protobuf:"bytes,9,opt,name=channel_sets,json=channel-sets,proto3" json:"channel_sets,omitempty"`
}

func (x *Devm_Ports_Port_E1T1) Reset() {
	*x = Devm_Ports_Port_E1T1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[410]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Ports_Port_E1T1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Ports_Port_E1T1) ProtoMessage() {}

func (x *Devm_Ports_Port_E1T1) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[410]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Ports_Port_E1T1.ProtoReflect.Descriptor instead.
func (*Devm_Ports_Port_E1T1) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 11}
}

func (x *Devm_Ports_Port_E1T1) GetWorkMode() Devm_Ports_Port_E1T1_WorkMode {
	if x != nil {
		return x.WorkMode
	}
	return Devm_Ports_Port_E1T1_WorkMode_FRAMED
}

func (x *Devm_Ports_Port_E1T1) GetFrameFormat() Devm_Ports_Port_E1T1_FrameFormat {
	if x != nil {
		return x.FrameFormat
	}
	return Devm_Ports_Port_E1T1_FrameFormat_NOX_CRC4
}

func (x *Devm_Ports_Port_E1T1) GetClock() Devm_Ports_Port_E1T1_Clock {
	if x != nil {
		return x.Clock
	}
	return Devm_Ports_Port_E1T1_Clock_MASTER
}

func (x *Devm_Ports_Port_E1T1) GetCode() Devm_Ports_Port_E1T1_Code {
	if x != nil {
		return x.Code
	}
	return Devm_Ports_Port_E1T1_Code_HDB3
}

func (x *Devm_Ports_Port_E1T1) GetLoopbackHoldtime() uint32 {
	if x != nil {
		return x.LoopbackHoldtime
	}
	return 0
}

func (x *Devm_Ports_Port_E1T1) GetBipvStatic() uint64 {
	if x != nil {
		return x.BipvStatic
	}
	return 0
}

func (x *Devm_Ports_Port_E1T1) GetFasStatic() uint64 {
	if x != nil {
		return x.FasStatic
	}
	return 0
}

func (x *Devm_Ports_Port_E1T1) GetCrcStatic() uint64 {
	if x != nil {
		return x.CrcStatic
	}
	return 0
}

func (x *Devm_Ports_Port_E1T1) GetChannelSets() *Devm_Ports_Port_E1T1_ChannelSets {
	if x != nil {
		return x.ChannelSets
	}
	return nil
}

type Devm_Ports_Port_E3T3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkMode    Devm_Ports_Port_E3T3_WorkMode    `protobuf:"varint,1,opt,name=work_mode,json=work-mode,proto3,enum=huawei_devm.Devm_Ports_Port_E3T3_WorkMode" json:"work_mode,omitempty"`
	IfFramed    bool                             `protobuf:"varint,2,opt,name=if_framed,json=if-framed,proto3" json:"if_framed,omitempty"`
	Clock       Devm_Ports_Port_E3T3_Clock       `protobuf:"varint,3,opt,name=clock,proto3,enum=huawei_devm.Devm_Ports_Port_E3T3_Clock" json:"clock,omitempty"`
	FrameFormat Devm_Ports_Port_E3T3_FrameFormat `protobuf:"varint,4,opt,name=frame_format,json=frame-format,proto3,enum=huawei_devm.Devm_Ports_Port_E3T3_FrameFormat" json:"frame_format,omitempty"`
	E3T3Flag    Devm_Ports_Port_E3T3_E3T3Flag    `protobuf:"varint,5,opt,name=e3t3_flag,json=e3t3-flag,proto3,enum=huawei_devm.Devm_Ports_Port_E3T3_E3T3Flag" json:"e3t3_flag,omitempty"`
}

func (x *Devm_Ports_Port_E3T3) Reset() {
	*x = Devm_Ports_Port_E3T3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[411]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Ports_Port_E3T3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Ports_Port_E3T3) ProtoMessage() {}

func (x *Devm_Ports_Port_E3T3) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[411]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Ports_Port_E3T3.ProtoReflect.Descriptor instead.
func (*Devm_Ports_Port_E3T3) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 12}
}

func (x *Devm_Ports_Port_E3T3) GetWorkMode() Devm_Ports_Port_E3T3_WorkMode {
	if x != nil {
		return x.WorkMode
	}
	return Devm_Ports_Port_E3T3_WorkMode_FRAMED
}

func (x *Devm_Ports_Port_E3T3) GetIfFramed() bool {
	if x != nil {
		return x.IfFramed
	}
	return false
}

func (x *Devm_Ports_Port_E3T3) GetClock() Devm_Ports_Port_E3T3_Clock {
	if x != nil {
		return x.Clock
	}
	return Devm_Ports_Port_E3T3_Clock_MASTER
}

func (x *Devm_Ports_Port_E3T3) GetFrameFormat() Devm_Ports_Port_E3T3_FrameFormat {
	if x != nil {
		return x.FrameFormat
	}
	return Devm_Ports_Port_E3T3_FrameFormat_GX_751
}

func (x *Devm_Ports_Port_E3T3) GetE3T3Flag() Devm_Ports_Port_E3T3_E3T3Flag {
	if x != nil {
		return x.E3T3Flag
	}
	return Devm_Ports_Port_E3T3_E3T3Flag_E3
}

type Devm_Ports_Port_Ethernet_EthWanAttr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FrameFormat Devm_Ports_Port_Ethernet_EthWanAttr_FrameFormat `protobuf:"varint,1,opt,name=frame_format,json=frame-format,proto3,enum=huawei_devm.Devm_Ports_Port_Ethernet_EthWanAttr_FrameFormat" json:"frame_format,omitempty"`
	J0Mode      Devm_Ports_Port_Ethernet_EthWanAttr_J0Mode      `protobuf:"varint,2,opt,name=j0_mode,json=j0-mode,proto3,enum=huawei_devm.Devm_Ports_Port_Ethernet_EthWanAttr_J0Mode" json:"j0_mode,omitempty"`
	J0Value     uint32                                          `protobuf:"varint,3,opt,name=j0_value,json=j0-value,proto3" json:"j0_value,omitempty"`
	J0Trace     string                                          `protobuf:"bytes,4,opt,name=j0_trace,json=j0-trace,proto3" json:"j0_trace,omitempty"`
	J1Mode      Devm_Ports_Port_Ethernet_EthWanAttr_J1Mode      `protobuf:"varint,5,opt,name=j1_mode,json=j1-mode,proto3,enum=huawei_devm.Devm_Ports_Port_Ethernet_EthWanAttr_J1Mode" json:"j1_mode,omitempty"`
	J1Value     uint32                                          `protobuf:"varint,6,opt,name=j1_value,json=j1-value,proto3" json:"j1_value,omitempty"`
	J1Trace     string                                          `protobuf:"bytes,7,opt,name=j1_trace,json=j1-trace,proto3" json:"j1_trace,omitempty"`
	C2          uint32                                          `protobuf:"varint,8,opt,name=c2,proto3" json:"c2,omitempty"`
	Clock       Devm_Ports_Port_Ethernet_EthWanAttr_Clock       `protobuf:"varint,9,opt,name=clock,proto3,enum=huawei_devm.Devm_Ports_Port_Ethernet_EthWanAttr_Clock" json:"clock,omitempty"`
	Scramble    Devm_Ports_Port_Ethernet_EthWanAttr_Scramble    `protobuf:"varint,10,opt,name=scramble,proto3,enum=huawei_devm.Devm_Ports_Port_Ethernet_EthWanAttr_Scramble" json:"scramble,omitempty"`
	RxJ0Value   uint32                                          `protobuf:"varint,11,opt,name=rx_j0_value,json=rx-j0-value,proto3" json:"rx_j0_value,omitempty"`
	RxJ0Trace   string                                          `protobuf:"bytes,12,opt,name=rx_j0_trace,json=rx-j0-trace,proto3" json:"rx_j0_trace,omitempty"`
	RxJ1Value   uint32                                          `protobuf:"varint,13,opt,name=rx_j1_value,json=rx-j1-value,proto3" json:"rx_j1_value,omitempty"`
	RxJ1Trace   string                                          `protobuf:"bytes,14,opt,name=rx_j1_trace,json=rx-j1-trace,proto3" json:"rx_j1_trace,omitempty"`
	RxC2        uint32                                          `protobuf:"varint,15,opt,name=rx_c2,json=rx-c2,proto3" json:"rx_c2,omitempty"`
	RxJ0Mode    Devm_Ports_Port_Ethernet_EthWanAttr_RxJ0Mode    `protobuf:"varint,16,opt,name=rx_j0_mode,json=rx-j0-mode,proto3,enum=huawei_devm.Devm_Ports_Port_Ethernet_EthWanAttr_RxJ0Mode" json:"rx_j0_mode,omitempty"`
	RxJ1Mode    Devm_Ports_Port_Ethernet_EthWanAttr_RxJ1Mode    `protobuf:"varint,17,opt,name=rx_j1_mode,json=rx-j1-mode,proto3,enum=huawei_devm.Devm_Ports_Port_Ethernet_EthWanAttr_RxJ1Mode" json:"rx_j1_mode,omitempty"`
	B1Tca       string                                          `protobuf:"bytes,18,opt,name=b1tca,proto3" json:"b1tca,omitempty"`
	B2Tca       string                                          `protobuf:"bytes,19,opt,name=b2tca,proto3" json:"b2tca,omitempty"`
	B3Tca       string                                          `protobuf:"bytes,20,opt,name=b3tca,proto3" json:"b3tca,omitempty"`
}

func (x *Devm_Ports_Port_Ethernet_EthWanAttr) Reset() {
	*x = Devm_Ports_Port_Ethernet_EthWanAttr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[412]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Ports_Port_Ethernet_EthWanAttr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Ports_Port_Ethernet_EthWanAttr) ProtoMessage() {}

func (x *Devm_Ports_Port_Ethernet_EthWanAttr) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[412]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Ports_Port_Ethernet_EthWanAttr.ProtoReflect.Descriptor instead.
func (*Devm_Ports_Port_Ethernet_EthWanAttr) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 0, 0}
}

func (x *Devm_Ports_Port_Ethernet_EthWanAttr) GetFrameFormat() Devm_Ports_Port_Ethernet_EthWanAttr_FrameFormat {
	if x != nil {
		return x.FrameFormat
	}
	return Devm_Ports_Port_Ethernet_EthWanAttr_FrameFormat_SDH
}

func (x *Devm_Ports_Port_Ethernet_EthWanAttr) GetJ0Mode() Devm_Ports_Port_Ethernet_EthWanAttr_J0Mode {
	if x != nil {
		return x.J0Mode
	}
	return Devm_Ports_Port_Ethernet_EthWanAttr_INVALID_ENUM_VALUE_J0Mode
}

func (x *Devm_Ports_Port_Ethernet_EthWanAttr) GetJ0Value() uint32 {
	if x != nil {
		return x.J0Value
	}
	return 0
}

func (x *Devm_Ports_Port_Ethernet_EthWanAttr) GetJ0Trace() string {
	if x != nil {
		return x.J0Trace
	}
	return ""
}

func (x *Devm_Ports_Port_Ethernet_EthWanAttr) GetJ1Mode() Devm_Ports_Port_Ethernet_EthWanAttr_J1Mode {
	if x != nil {
		return x.J1Mode
	}
	return Devm_Ports_Port_Ethernet_EthWanAttr_INVALID_ENUM_VALUE_J1Mode
}

func (x *Devm_Ports_Port_Ethernet_EthWanAttr) GetJ1Value() uint32 {
	if x != nil {
		return x.J1Value
	}
	return 0
}

func (x *Devm_Ports_Port_Ethernet_EthWanAttr) GetJ1Trace() string {
	if x != nil {
		return x.J1Trace
	}
	return ""
}

func (x *Devm_Ports_Port_Ethernet_EthWanAttr) GetC2() uint32 {
	if x != nil {
		return x.C2
	}
	return 0
}

func (x *Devm_Ports_Port_Ethernet_EthWanAttr) GetClock() Devm_Ports_Port_Ethernet_EthWanAttr_Clock {
	if x != nil {
		return x.Clock
	}
	return Devm_Ports_Port_Ethernet_EthWanAttr_Clock_MASTER
}

func (x *Devm_Ports_Port_Ethernet_EthWanAttr) GetScramble() Devm_Ports_Port_Ethernet_EthWanAttr_Scramble {
	if x != nil {
		return x.Scramble
	}
	return Devm_Ports_Port_Ethernet_EthWanAttr_Scramble_DISABLED
}

func (x *Devm_Ports_Port_Ethernet_EthWanAttr) GetRxJ0Value() uint32 {
	if x != nil {
		return x.RxJ0Value
	}
	return 0
}

func (x *Devm_Ports_Port_Ethernet_EthWanAttr) GetRxJ0Trace() string {
	if x != nil {
		return x.RxJ0Trace
	}
	return ""
}

func (x *Devm_Ports_Port_Ethernet_EthWanAttr) GetRxJ1Value() uint32 {
	if x != nil {
		return x.RxJ1Value
	}
	return 0
}

func (x *Devm_Ports_Port_Ethernet_EthWanAttr) GetRxJ1Trace() string {
	if x != nil {
		return x.RxJ1Trace
	}
	return ""
}

func (x *Devm_Ports_Port_Ethernet_EthWanAttr) GetRxC2() uint32 {
	if x != nil {
		return x.RxC2
	}
	return 0
}

func (x *Devm_Ports_Port_Ethernet_EthWanAttr) GetRxJ0Mode() Devm_Ports_Port_Ethernet_EthWanAttr_RxJ0Mode {
	if x != nil {
		return x.RxJ0Mode
	}
	return Devm_Ports_Port_Ethernet_EthWanAttr_INVALID_ENUM_VALUE_RxJ0Mode
}

func (x *Devm_Ports_Port_Ethernet_EthWanAttr) GetRxJ1Mode() Devm_Ports_Port_Ethernet_EthWanAttr_RxJ1Mode {
	if x != nil {
		return x.RxJ1Mode
	}
	return Devm_Ports_Port_Ethernet_EthWanAttr_INVALID_ENUM_VALUE_RxJ1Mode
}

func (x *Devm_Ports_Port_Ethernet_EthWanAttr) GetB1Tca() string {
	if x != nil {
		return x.B1Tca
	}
	return ""
}

func (x *Devm_Ports_Port_Ethernet_EthWanAttr) GetB2Tca() string {
	if x != nil {
		return x.B2Tca
	}
	return ""
}

func (x *Devm_Ports_Port_Ethernet_EthWanAttr) GetB3Tca() string {
	if x != nil {
		return x.B3Tca
	}
	return ""
}

type Devm_Ports_Port_Ethernet_FecErrorStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bit0ErrorCount          uint64 `protobuf:"varint,1,opt,name=bit0_error_count,json=bit0-error-count,proto3" json:"bit0_error_count,omitempty"`
	Bit1ErrorCount          uint64 `protobuf:"varint,2,opt,name=bit1_error_count,json=bit1-error-count,proto3" json:"bit1_error_count,omitempty"`
	Bit0AndBit1ErrorCount   uint64 `protobuf:"varint,3,opt,name=bit0_and_bit1_error_count,json=bit0-and-bit1-error-count,proto3" json:"bit0_and_bit1_error_count,omitempty"`
	SymbolErrorCount        uint64 `protobuf:"varint,4,opt,name=symbol_error_count,json=symbol-error-count,proto3" json:"symbol_error_count,omitempty"`
	UncorrectableErrorCount uint64 `protobuf:"varint,5,opt,name=uncorrectable_error_count,json=uncorrectable-error-count,proto3" json:"uncorrectable_error_count,omitempty"`
	PreFec                  string `protobuf:"bytes,6,opt,name=pre_fec,json=pre-fec,proto3" json:"pre_fec,omitempty"`
}

func (x *Devm_Ports_Port_Ethernet_FecErrorStatistics) Reset() {
	*x = Devm_Ports_Port_Ethernet_FecErrorStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[413]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Ports_Port_Ethernet_FecErrorStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Ports_Port_Ethernet_FecErrorStatistics) ProtoMessage() {}

func (x *Devm_Ports_Port_Ethernet_FecErrorStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[413]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Ports_Port_Ethernet_FecErrorStatistics.ProtoReflect.Descriptor instead.
func (*Devm_Ports_Port_Ethernet_FecErrorStatistics) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 0, 1}
}

func (x *Devm_Ports_Port_Ethernet_FecErrorStatistics) GetBit0ErrorCount() uint64 {
	if x != nil {
		return x.Bit0ErrorCount
	}
	return 0
}

func (x *Devm_Ports_Port_Ethernet_FecErrorStatistics) GetBit1ErrorCount() uint64 {
	if x != nil {
		return x.Bit1ErrorCount
	}
	return 0
}

func (x *Devm_Ports_Port_Ethernet_FecErrorStatistics) GetBit0AndBit1ErrorCount() uint64 {
	if x != nil {
		return x.Bit0AndBit1ErrorCount
	}
	return 0
}

func (x *Devm_Ports_Port_Ethernet_FecErrorStatistics) GetSymbolErrorCount() uint64 {
	if x != nil {
		return x.SymbolErrorCount
	}
	return 0
}

func (x *Devm_Ports_Port_Ethernet_FecErrorStatistics) GetUncorrectableErrorCount() uint64 {
	if x != nil {
		return x.UncorrectableErrorCount
	}
	return 0
}

func (x *Devm_Ports_Port_Ethernet_FecErrorStatistics) GetPreFec() string {
	if x != nil {
		return x.PreFec
	}
	return ""
}

type Devm_Ports_Port_Ethernet_NegotiationCompatibleMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NegotiationCompatibleMode Devm_Ports_Port_Ethernet_NegotiationCompatibleMode_NegotiationCompatibleMode6 `protobuf:"varint,1,opt,name=negotiation_compatible_mode,json=negotiation-compatible-mode,proto3,enum=huawei_devm.Devm_Ports_Port_Ethernet_NegotiationCompatibleMode_NegotiationCompatibleMode6" json:"negotiation_compatible_mode,omitempty"`
	Precursor                 int32                                                                         `protobuf:"varint,2,opt,name=precursor,proto3" json:"precursor,omitempty"`
	Postcursor                int32                                                                         `protobuf:"varint,3,opt,name=postcursor,proto3" json:"postcursor,omitempty"`
}

func (x *Devm_Ports_Port_Ethernet_NegotiationCompatibleMode) Reset() {
	*x = Devm_Ports_Port_Ethernet_NegotiationCompatibleMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[414]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Ports_Port_Ethernet_NegotiationCompatibleMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Ports_Port_Ethernet_NegotiationCompatibleMode) ProtoMessage() {}

func (x *Devm_Ports_Port_Ethernet_NegotiationCompatibleMode) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[414]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Ports_Port_Ethernet_NegotiationCompatibleMode.ProtoReflect.Descriptor instead.
func (*Devm_Ports_Port_Ethernet_NegotiationCompatibleMode) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 0, 2}
}

func (x *Devm_Ports_Port_Ethernet_NegotiationCompatibleMode) GetNegotiationCompatibleMode() Devm_Ports_Port_Ethernet_NegotiationCompatibleMode_NegotiationCompatibleMode6 {
	if x != nil {
		return x.NegotiationCompatibleMode
	}
	return Devm_Ports_Port_Ethernet_NegotiationCompatibleMode_NegotiationCompatibleMode6_ENABLE
}

func (x *Devm_Ports_Port_Ethernet_NegotiationCompatibleMode) GetPrecursor() int32 {
	if x != nil {
		return x.Precursor
	}
	return 0
}

func (x *Devm_Ports_Port_Ethernet_NegotiationCompatibleMode) GetPostcursor() int32 {
	if x != nil {
		return x.Postcursor
	}
	return 0
}

type Devm_Ports_Port_Ethernet_LocalLoopbackResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result           Devm_Ports_Port_Ethernet_LocalLoopbackResult_Result     `protobuf:"varint,1,opt,name=result,proto3,enum=huawei_devm.Devm_Ports_Port_Ethernet_LocalLoopbackResult_Result" json:"result,omitempty"`
	LastTestTime     string                                                  `protobuf:"bytes,2,opt,name=last_test_time,json=last-test-time,proto3" json:"last_test_time,omitempty"`
	LinkStatus       Devm_Ports_Port_Ethernet_LocalLoopbackResult_LinkStatus `protobuf:"varint,3,opt,name=link_status,json=link-status,proto3,enum=huawei_devm.Devm_Ports_Port_Ethernet_LocalLoopbackResult_LinkStatus" json:"link_status,omitempty"`
	CrcErrorPacket   bool                                                    `protobuf:"varint,4,opt,name=crc_error_packet,json=crc-error-packet,proto3" json:"crc_error_packet,omitempty"`
	OtherErrorPacket bool                                                    `protobuf:"varint,5,opt,name=other_error_packet,json=other-error-packet,proto3" json:"other_error_packet,omitempty"`
}

func (x *Devm_Ports_Port_Ethernet_LocalLoopbackResult) Reset() {
	*x = Devm_Ports_Port_Ethernet_LocalLoopbackResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[415]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Ports_Port_Ethernet_LocalLoopbackResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Ports_Port_Ethernet_LocalLoopbackResult) ProtoMessage() {}

func (x *Devm_Ports_Port_Ethernet_LocalLoopbackResult) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[415]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Ports_Port_Ethernet_LocalLoopbackResult.ProtoReflect.Descriptor instead.
func (*Devm_Ports_Port_Ethernet_LocalLoopbackResult) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 0, 3}
}

func (x *Devm_Ports_Port_Ethernet_LocalLoopbackResult) GetResult() Devm_Ports_Port_Ethernet_LocalLoopbackResult_Result {
	if x != nil {
		return x.Result
	}
	return Devm_Ports_Port_Ethernet_LocalLoopbackResult_Result_SUCCESS
}

func (x *Devm_Ports_Port_Ethernet_LocalLoopbackResult) GetLastTestTime() string {
	if x != nil {
		return x.LastTestTime
	}
	return ""
}

func (x *Devm_Ports_Port_Ethernet_LocalLoopbackResult) GetLinkStatus() Devm_Ports_Port_Ethernet_LocalLoopbackResult_LinkStatus {
	if x != nil {
		return x.LinkStatus
	}
	return Devm_Ports_Port_Ethernet_LocalLoopbackResult_LinkStatus_DOWN
}

func (x *Devm_Ports_Port_Ethernet_LocalLoopbackResult) GetCrcErrorPacket() bool {
	if x != nil {
		return x.CrcErrorPacket
	}
	return false
}

func (x *Devm_Ports_Port_Ethernet_LocalLoopbackResult) GetOtherErrorPacket() bool {
	if x != nil {
		return x.OtherErrorPacket
	}
	return false
}

type Devm_Ports_Port_OpticalModule_Channels struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel []*Devm_Ports_Port_OpticalModule_Channels_Channel `protobuf:"bytes,1,rep,name=channel,proto3" json:"channel,omitempty"`
}

func (x *Devm_Ports_Port_OpticalModule_Channels) Reset() {
	*x = Devm_Ports_Port_OpticalModule_Channels{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[416]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Ports_Port_OpticalModule_Channels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Ports_Port_OpticalModule_Channels) ProtoMessage() {}

func (x *Devm_Ports_Port_OpticalModule_Channels) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[416]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Ports_Port_OpticalModule_Channels.ProtoReflect.Descriptor instead.
func (*Devm_Ports_Port_OpticalModule_Channels) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 2, 0}
}

func (x *Devm_Ports_Port_OpticalModule_Channels) GetChannel() []*Devm_Ports_Port_OpticalModule_Channels_Channel {
	if x != nil {
		return x.Channel
	}
	return nil
}

type Devm_Ports_Port_OpticalModule_WaveMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WaveMap []*Devm_Ports_Port_OpticalModule_WaveMapping_WaveMap `protobuf:"bytes,1,rep,name=wave_map,json=wave-map,proto3" json:"wave_map,omitempty"`
}

func (x *Devm_Ports_Port_OpticalModule_WaveMapping) Reset() {
	*x = Devm_Ports_Port_OpticalModule_WaveMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[417]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Ports_Port_OpticalModule_WaveMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Ports_Port_OpticalModule_WaveMapping) ProtoMessage() {}

func (x *Devm_Ports_Port_OpticalModule_WaveMapping) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[417]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Ports_Port_OpticalModule_WaveMapping.ProtoReflect.Descriptor instead.
func (*Devm_Ports_Port_OpticalModule_WaveMapping) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 2, 1}
}

func (x *Devm_Ports_Port_OpticalModule_WaveMapping) GetWaveMap() []*Devm_Ports_Port_OpticalModule_WaveMapping_WaveMap {
	if x != nil {
		return x.WaveMap
	}
	return nil
}

type Devm_Ports_Port_OpticalModule_GainPower_Gain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgcValue uint32 `protobuf:"varint,1,opt,name=agc_value,json=agc-value,proto3" json:"agc_value,omitempty"`
}

func (x *Devm_Ports_Port_OpticalModule_GainPower_Gain) Reset() {
	*x = Devm_Ports_Port_OpticalModule_GainPower_Gain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[418]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Ports_Port_OpticalModule_GainPower_Gain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Ports_Port_OpticalModule_GainPower_Gain) ProtoMessage() {}

func (x *Devm_Ports_Port_OpticalModule_GainPower_Gain) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[418]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Ports_Port_OpticalModule_GainPower_Gain.ProtoReflect.Descriptor instead.
func (*Devm_Ports_Port_OpticalModule_GainPower_Gain) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 2, 2}
}

func (x *Devm_Ports_Port_OpticalModule_GainPower_Gain) GetAgcValue() uint32 {
	if x != nil {
		return x.AgcValue
	}
	return 0
}

type Devm_Ports_Port_OpticalModule_GainPower_Power struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApcValue uint32 `protobuf:"varint,1,opt,name=apc_value,json=apc-value,proto3" json:"apc_value,omitempty"`
}

func (x *Devm_Ports_Port_OpticalModule_GainPower_Power) Reset() {
	*x = Devm_Ports_Port_OpticalModule_GainPower_Power{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[419]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Ports_Port_OpticalModule_GainPower_Power) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Ports_Port_OpticalModule_GainPower_Power) ProtoMessage() {}

func (x *Devm_Ports_Port_OpticalModule_GainPower_Power) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[419]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Ports_Port_OpticalModule_GainPower_Power.ProtoReflect.Descriptor instead.
func (*Devm_Ports_Port_OpticalModule_GainPower_Power) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 2, 3}
}

func (x *Devm_Ports_Port_OpticalModule_GainPower_Power) GetApcValue() uint32 {
	if x != nil {
		return x.ApcValue
	}
	return 0
}

type Devm_Ports_Port_OpticalModule_Channels_Channel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number7    uint32 `protobuf:"varint,1,opt,name=number7,json=number,proto3" json:"number7,omitempty"`
	TxPower    string `protobuf:"bytes,2,opt,name=tx_power,json=tx-power,proto3" json:"tx_power,omitempty"`
	RxPower    string `protobuf:"bytes,3,opt,name=rx_power,json=rx-power,proto3" json:"rx_power,omitempty"`
	Wavelength string `protobuf:"bytes,4,opt,name=wavelength,proto3" json:"wavelength,omitempty"`
	Bias       string `protobuf:"bytes,6,opt,name=bias,proto3" json:"bias,omitempty"`
}

func (x *Devm_Ports_Port_OpticalModule_Channels_Channel) Reset() {
	*x = Devm_Ports_Port_OpticalModule_Channels_Channel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[420]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Ports_Port_OpticalModule_Channels_Channel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Ports_Port_OpticalModule_Channels_Channel) ProtoMessage() {}

func (x *Devm_Ports_Port_OpticalModule_Channels_Channel) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[420]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Ports_Port_OpticalModule_Channels_Channel.ProtoReflect.Descriptor instead.
func (*Devm_Ports_Port_OpticalModule_Channels_Channel) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 2, 0, 0}
}

func (x *Devm_Ports_Port_OpticalModule_Channels_Channel) GetNumber7() uint32 {
	if x != nil {
		return x.Number7
	}
	return 0
}

func (x *Devm_Ports_Port_OpticalModule_Channels_Channel) GetTxPower() string {
	if x != nil {
		return x.TxPower
	}
	return ""
}

func (x *Devm_Ports_Port_OpticalModule_Channels_Channel) GetRxPower() string {
	if x != nil {
		return x.RxPower
	}
	return ""
}

func (x *Devm_Ports_Port_OpticalModule_Channels_Channel) GetWavelength() string {
	if x != nil {
		return x.Wavelength
	}
	return ""
}

func (x *Devm_Ports_Port_OpticalModule_Channels_Channel) GetBias() string {
	if x != nil {
		return x.Bias
	}
	return ""
}

type Devm_Ports_Port_OpticalModule_WaveMapping_WaveMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index      uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Frequency  string `protobuf:"bytes,2,opt,name=frequency,proto3" json:"frequency,omitempty"`
	Wavelength string `protobuf:"bytes,3,opt,name=wavelength,proto3" json:"wavelength,omitempty"`
}

func (x *Devm_Ports_Port_OpticalModule_WaveMapping_WaveMap) Reset() {
	*x = Devm_Ports_Port_OpticalModule_WaveMapping_WaveMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[421]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Ports_Port_OpticalModule_WaveMapping_WaveMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Ports_Port_OpticalModule_WaveMapping_WaveMap) ProtoMessage() {}

func (x *Devm_Ports_Port_OpticalModule_WaveMapping_WaveMap) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[421]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Ports_Port_OpticalModule_WaveMapping_WaveMap.ProtoReflect.Descriptor instead.
func (*Devm_Ports_Port_OpticalModule_WaveMapping_WaveMap) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 2, 1, 0}
}

func (x *Devm_Ports_Port_OpticalModule_WaveMapping_WaveMap) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Devm_Ports_Port_OpticalModule_WaveMapping_WaveMap) GetFrequency() string {
	if x != nil {
		return x.Frequency
	}
	return ""
}

func (x *Devm_Ports_Port_OpticalModule_WaveMapping_WaveMap) GetWavelength() string {
	if x != nil {
		return x.Wavelength
	}
	return ""
}

type Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransAlarmIfdown []*Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown `protobuf:"bytes,1,rep,name=trans_alarm_ifdown,json=trans-alarm-ifdown,proto3" json:"trans_alarm_ifdown,omitempty"`
}

func (x *Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns) Reset() {
	*x = Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[422]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns) ProtoMessage() {}

func (x *Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[422]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns.ProtoReflect.Descriptor instead.
func (*Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 3, 0}
}

func (x *Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns) GetTransAlarmIfdown() []*Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown {
	if x != nil {
		return x.TransAlarmIfdown
	}
	return nil
}

type Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlarmType        Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown_AlarmType `protobuf:"varint,1,opt,name=alarm_type,json=alarm-type,proto3,enum=huawei_devm.Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown_AlarmType" json:"alarm_type,omitempty"`
	Ifdown           bool                                                                           `protobuf:"varint,2,opt,name=ifdown,proto3" json:"ifdown,omitempty"`
	AlarmStatus      bool                                                                           `protobuf:"varint,3,opt,name=alarm_status,json=alarm-status,proto3" json:"alarm_status,omitempty"`
	IsInFiltering    bool                                                                           `protobuf:"varint,4,opt,name=is_in_filtering,json=is-in-filtering,proto3" json:"is_in_filtering,omitempty"`
	IsInSuppressing  bool                                                                           `protobuf:"varint,5,opt,name=is_in_suppressing,json=is-in-suppressing,proto3" json:"is_in_suppressing,omitempty"`
	IsInAging        bool                                                                           `protobuf:"varint,6,opt,name=is_in_aging,json=is-in-aging,proto3" json:"is_in_aging,omitempty"`
	FlappingCount    uint32                                                                         `protobuf:"varint,7,opt,name=flapping_count,json=flapping-count,proto3" json:"flapping_count,omitempty"`
	SuppressingCount uint32                                                                         `protobuf:"varint,8,opt,name=suppressing_count,json=suppressing-count,proto3" json:"suppressing_count,omitempty"`
	FigureOfMerit    string                                                                         `protobuf:"bytes,9,opt,name=figure_of_merit,json=figure-of-merit,proto3" json:"figure_of_merit,omitempty"`
}

func (x *Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown) Reset() {
	*x = Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[423]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown) ProtoMessage() {}

func (x *Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[423]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown.ProtoReflect.Descriptor instead.
func (*Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 3, 0, 0}
}

func (x *Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown) GetAlarmType() Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown_AlarmType {
	if x != nil {
		return x.AlarmType
	}
	return Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown_AlarmType_AUAIS
}

func (x *Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown) GetIfdown() bool {
	if x != nil {
		return x.Ifdown
	}
	return false
}

func (x *Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown) GetAlarmStatus() bool {
	if x != nil {
		return x.AlarmStatus
	}
	return false
}

func (x *Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown) GetIsInFiltering() bool {
	if x != nil {
		return x.IsInFiltering
	}
	return false
}

func (x *Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown) GetIsInSuppressing() bool {
	if x != nil {
		return x.IsInSuppressing
	}
	return false
}

func (x *Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown) GetIsInAging() bool {
	if x != nil {
		return x.IsInAging
	}
	return false
}

func (x *Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown) GetFlappingCount() uint32 {
	if x != nil {
		return x.FlappingCount
	}
	return 0
}

func (x *Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown) GetSuppressingCount() uint32 {
	if x != nil {
		return x.SuppressingCount
	}
	return 0
}

func (x *Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown) GetFigureOfMerit() string {
	if x != nil {
		return x.FigureOfMerit
	}
	return ""
}

type Devm_Ports_Port_Cpos_E1T1S struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	E1T1 []*Devm_Ports_Port_Cpos_E1T1S_E1T1 `protobuf:"bytes,1,rep,name=e1t1,proto3" json:"e1t1,omitempty"`
}

func (x *Devm_Ports_Port_Cpos_E1T1S) Reset() {
	*x = Devm_Ports_Port_Cpos_E1T1S{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[424]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Ports_Port_Cpos_E1T1S) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Ports_Port_Cpos_E1T1S) ProtoMessage() {}

func (x *Devm_Ports_Port_Cpos_E1T1S) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[424]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Ports_Port_Cpos_E1T1S.ProtoReflect.Descriptor instead.
func (*Devm_Ports_Port_Cpos_E1T1S) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 6, 0}
}

func (x *Devm_Ports_Port_Cpos_E1T1S) GetE1T1() []*Devm_Ports_Port_Cpos_E1T1S_E1T1 {
	if x != nil {
		return x.E1T1
	}
	return nil
}

type Devm_Ports_Port_Cpos_E1T1S_E1T1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number7             uint32                                       `protobuf:"varint,1,opt,name=number7,json=number,proto3" json:"number7,omitempty"`
	WorkMode            Devm_Ports_Port_Cpos_E1T1S_E1T1_WorkMode     `protobuf:"varint,2,opt,name=work_mode,json=work-mode,proto3,enum=huawei_devm.Devm_Ports_Port_Cpos_E1T1S_E1T1_WorkMode" json:"work_mode,omitempty"`
	Clock               Devm_Ports_Port_Cpos_E1T1S_E1T1_Clock        `protobuf:"varint,3,opt,name=clock,proto3,enum=huawei_devm.Devm_Ports_Port_Cpos_E1T1S_E1T1_Clock" json:"clock,omitempty"`
	ClockRecoveryDomain uint32                                       `protobuf:"varint,4,opt,name=clock_recovery_domain,json=clock-recovery-domain,proto3" json:"clock_recovery_domain,omitempty"`
	ClockMasterDomain   uint32                                       `protobuf:"varint,5,opt,name=clock_master_domain,json=clock-master-domain,proto3" json:"clock_master_domain,omitempty"`
	FrameFormat         Devm_Ports_Port_Cpos_E1T1S_E1T1_FrameFormat  `protobuf:"varint,6,opt,name=frame_format,json=frame-format,proto3,enum=huawei_devm.Devm_Ports_Port_Cpos_E1T1S_E1T1_FrameFormat" json:"frame_format,omitempty"`
	Loopback            Devm_Ports_Port_Cpos_E1T1S_E1T1_Loopback     `protobuf:"varint,7,opt,name=loopback,proto3,enum=huawei_devm.Devm_Ports_Port_Cpos_E1T1S_E1T1_Loopback" json:"loopback,omitempty"`
	J2Trace             string                                       `protobuf:"bytes,8,opt,name=j2_trace,json=j2-trace,proto3" json:"j2_trace,omitempty"`
	V5Trace             uint32                                       `protobuf:"varint,9,opt,name=v5_trace,json=v5-trace,proto3" json:"v5_trace,omitempty"`
	AutoClrPeriod       uint32                                       `protobuf:"varint,10,opt,name=auto_clr_period,json=auto-clr-period,proto3" json:"auto_clr_period,omitempty"`
	RxJ2Trace           string                                       `protobuf:"bytes,11,opt,name=rx_j2_trace,json=rx-j2-trace,proto3" json:"rx_j2_trace,omitempty"`
	ChannelSets         *Devm_Ports_Port_Cpos_E1T1S_E1T1_ChannelSets `protobuf:"bytes,12,opt,name=channel_sets,json=channel-sets,proto3" json:"channel_sets,omitempty"`
}

func (x *Devm_Ports_Port_Cpos_E1T1S_E1T1) Reset() {
	*x = Devm_Ports_Port_Cpos_E1T1S_E1T1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[425]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Ports_Port_Cpos_E1T1S_E1T1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Ports_Port_Cpos_E1T1S_E1T1) ProtoMessage() {}

func (x *Devm_Ports_Port_Cpos_E1T1S_E1T1) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[425]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Ports_Port_Cpos_E1T1S_E1T1.ProtoReflect.Descriptor instead.
func (*Devm_Ports_Port_Cpos_E1T1S_E1T1) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 6, 0, 0}
}

func (x *Devm_Ports_Port_Cpos_E1T1S_E1T1) GetNumber7() uint32 {
	if x != nil {
		return x.Number7
	}
	return 0
}

func (x *Devm_Ports_Port_Cpos_E1T1S_E1T1) GetWorkMode() Devm_Ports_Port_Cpos_E1T1S_E1T1_WorkMode {
	if x != nil {
		return x.WorkMode
	}
	return Devm_Ports_Port_Cpos_E1T1S_E1T1_WorkMode_FRAMED
}

func (x *Devm_Ports_Port_Cpos_E1T1S_E1T1) GetClock() Devm_Ports_Port_Cpos_E1T1S_E1T1_Clock {
	if x != nil {
		return x.Clock
	}
	return Devm_Ports_Port_Cpos_E1T1S_E1T1_Clock_MASTER
}

func (x *Devm_Ports_Port_Cpos_E1T1S_E1T1) GetClockRecoveryDomain() uint32 {
	if x != nil {
		return x.ClockRecoveryDomain
	}
	return 0
}

func (x *Devm_Ports_Port_Cpos_E1T1S_E1T1) GetClockMasterDomain() uint32 {
	if x != nil {
		return x.ClockMasterDomain
	}
	return 0
}

func (x *Devm_Ports_Port_Cpos_E1T1S_E1T1) GetFrameFormat() Devm_Ports_Port_Cpos_E1T1S_E1T1_FrameFormat {
	if x != nil {
		return x.FrameFormat
	}
	return Devm_Ports_Port_Cpos_E1T1S_E1T1_FrameFormat_NOX_CRC4
}

func (x *Devm_Ports_Port_Cpos_E1T1S_E1T1) GetLoopback() Devm_Ports_Port_Cpos_E1T1S_E1T1_Loopback {
	if x != nil {
		return x.Loopback
	}
	return Devm_Ports_Port_Cpos_E1T1S_E1T1_Loopback_NONE
}

func (x *Devm_Ports_Port_Cpos_E1T1S_E1T1) GetJ2Trace() string {
	if x != nil {
		return x.J2Trace
	}
	return ""
}

func (x *Devm_Ports_Port_Cpos_E1T1S_E1T1) GetV5Trace() uint32 {
	if x != nil {
		return x.V5Trace
	}
	return 0
}

func (x *Devm_Ports_Port_Cpos_E1T1S_E1T1) GetAutoClrPeriod() uint32 {
	if x != nil {
		return x.AutoClrPeriod
	}
	return 0
}

func (x *Devm_Ports_Port_Cpos_E1T1S_E1T1) GetRxJ2Trace() string {
	if x != nil {
		return x.RxJ2Trace
	}
	return ""
}

func (x *Devm_Ports_Port_Cpos_E1T1S_E1T1) GetChannelSets() *Devm_Ports_Port_Cpos_E1T1S_E1T1_ChannelSets {
	if x != nil {
		return x.ChannelSets
	}
	return nil
}

type Devm_Ports_Port_Cpos_E1T1S_E1T1_ChannelSets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelSet []*Devm_Ports_Port_Cpos_E1T1S_E1T1_ChannelSets_ChannelSet `protobuf:"bytes,1,rep,name=channel_set,json=channel-set,proto3" json:"channel_set,omitempty"`
}

func (x *Devm_Ports_Port_Cpos_E1T1S_E1T1_ChannelSets) Reset() {
	*x = Devm_Ports_Port_Cpos_E1T1S_E1T1_ChannelSets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[426]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Ports_Port_Cpos_E1T1S_E1T1_ChannelSets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Ports_Port_Cpos_E1T1S_E1T1_ChannelSets) ProtoMessage() {}

func (x *Devm_Ports_Port_Cpos_E1T1S_E1T1_ChannelSets) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[426]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Ports_Port_Cpos_E1T1S_E1T1_ChannelSets.ProtoReflect.Descriptor instead.
func (*Devm_Ports_Port_Cpos_E1T1S_E1T1_ChannelSets) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 6, 0, 0, 0}
}

func (x *Devm_Ports_Port_Cpos_E1T1S_E1T1_ChannelSets) GetChannelSet() []*Devm_Ports_Port_Cpos_E1T1S_E1T1_ChannelSets_ChannelSet {
	if x != nil {
		return x.ChannelSet
	}
	return nil
}

type Devm_Ports_Port_Cpos_E1T1S_E1T1_ChannelSets_ChannelSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number9      uint32 `protobuf:"varint,1,opt,name=number9,json=number,proto3" json:"number9,omitempty"`
	TimeslotList string `protobuf:"bytes,2,opt,name=timeslot_list,json=timeslot-list,proto3" json:"timeslot_list,omitempty"`
}

func (x *Devm_Ports_Port_Cpos_E1T1S_E1T1_ChannelSets_ChannelSet) Reset() {
	*x = Devm_Ports_Port_Cpos_E1T1S_E1T1_ChannelSets_ChannelSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[427]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Ports_Port_Cpos_E1T1S_E1T1_ChannelSets_ChannelSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Ports_Port_Cpos_E1T1S_E1T1_ChannelSets_ChannelSet) ProtoMessage() {}

func (x *Devm_Ports_Port_Cpos_E1T1S_E1T1_ChannelSets_ChannelSet) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[427]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Ports_Port_Cpos_E1T1S_E1T1_ChannelSets_ChannelSet.ProtoReflect.Descriptor instead.
func (*Devm_Ports_Port_Cpos_E1T1S_E1T1_ChannelSets_ChannelSet) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 6, 0, 0, 0, 0}
}

func (x *Devm_Ports_Port_Cpos_E1T1S_E1T1_ChannelSets_ChannelSet) GetNumber9() uint32 {
	if x != nil {
		return x.Number9
	}
	return 0
}

func (x *Devm_Ports_Port_Cpos_E1T1S_E1T1_ChannelSets_ChannelSet) GetTimeslotList() string {
	if x != nil {
		return x.TimeslotList
	}
	return ""
}

type Devm_Ports_Port_PortAlarm_EthPortAlarm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SymbolEnabledDown         bool   `protobuf:"varint,1,opt,name=symbol_enabled_down,json=symbol-enabled-down,proto3" json:"symbol_enabled_down,omitempty"`
	SymbolErrorHighThreshold  uint32 `protobuf:"varint,2,opt,name=symbol_error_high_threshold,json=symbol-error-high-threshold,proto3" json:"symbol_error_high_threshold,omitempty"`
	SymbolErrorLowThreshold   uint32 `protobuf:"varint,3,opt,name=symbol_error_low_threshold,json=symbol-error-low-threshold,proto3" json:"symbol_error_low_threshold,omitempty"`
	SymbolErrorInterval       uint32 `protobuf:"varint,4,opt,name=symbol_error_interval,json=symbol-error-interval,proto3" json:"symbol_error_interval,omitempty"`
	Bip8SdEnabledDown         bool   `protobuf:"varint,5,opt,name=bip8_sd_enabled_down,json=bip8-sd-enabled-down,proto3" json:"bip8_sd_enabled_down,omitempty"`
	Bip8SdErrorHighThreshold  uint32 `protobuf:"varint,6,opt,name=bip8_sd_error_high_threshold,json=bip8-sd-error-high-threshold,proto3" json:"bip8_sd_error_high_threshold,omitempty"`
	BadBytesThreshold         uint32 `protobuf:"varint,7,opt,name=bad_bytes_threshold,json=bad-bytes-threshold,proto3" json:"bad_bytes_threshold,omitempty"`
	BadBytesInterval          uint32 `protobuf:"varint,8,opt,name=bad_bytes_interval,json=bad-bytes-interval,proto3" json:"bad_bytes_interval,omitempty"`
	TxPauseErrorHighThreshold uint32 `protobuf:"varint,9,opt,name=tx_pause_error_high_threshold,json=tx-pause-error-high-threshold,proto3" json:"tx_pause_error_high_threshold,omitempty"`
	TxPauseErrorLowThreshold  uint32 `protobuf:"varint,10,opt,name=tx_pause_error_low_threshold,json=tx-pause-error-low-threshold,proto3" json:"tx_pause_error_low_threshold,omitempty"`
	TxPauseErrorInterval      uint32 `protobuf:"varint,11,opt,name=tx_pause_error_interval,json=tx-pause-error-interval,proto3" json:"tx_pause_error_interval,omitempty"`
	RxPauseErrorHighThreshold uint32 `protobuf:"varint,12,opt,name=rx_pause_error_high_threshold,json=rx-pause-error-high-threshold,proto3" json:"rx_pause_error_high_threshold,omitempty"`
	RxPauseErrorLowThreshold  uint32 `protobuf:"varint,13,opt,name=rx_pause_error_low_threshold,json=rx-pause-error-low-threshold,proto3" json:"rx_pause_error_low_threshold,omitempty"`
	RxPauseErrorInterval      uint32 `protobuf:"varint,14,opt,name=rx_pause_error_interval,json=rx-pause-error-interval,proto3" json:"rx_pause_error_interval,omitempty"`
}

func (x *Devm_Ports_Port_PortAlarm_EthPortAlarm) Reset() {
	*x = Devm_Ports_Port_PortAlarm_EthPortAlarm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[428]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Ports_Port_PortAlarm_EthPortAlarm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Ports_Port_PortAlarm_EthPortAlarm) ProtoMessage() {}

func (x *Devm_Ports_Port_PortAlarm_EthPortAlarm) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[428]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Ports_Port_PortAlarm_EthPortAlarm.ProtoReflect.Descriptor instead.
func (*Devm_Ports_Port_PortAlarm_EthPortAlarm) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 7, 0}
}

func (x *Devm_Ports_Port_PortAlarm_EthPortAlarm) GetSymbolEnabledDown() bool {
	if x != nil {
		return x.SymbolEnabledDown
	}
	return false
}

func (x *Devm_Ports_Port_PortAlarm_EthPortAlarm) GetSymbolErrorHighThreshold() uint32 {
	if x != nil {
		return x.SymbolErrorHighThreshold
	}
	return 0
}

func (x *Devm_Ports_Port_PortAlarm_EthPortAlarm) GetSymbolErrorLowThreshold() uint32 {
	if x != nil {
		return x.SymbolErrorLowThreshold
	}
	return 0
}

func (x *Devm_Ports_Port_PortAlarm_EthPortAlarm) GetSymbolErrorInterval() uint32 {
	if x != nil {
		return x.SymbolErrorInterval
	}
	return 0
}

func (x *Devm_Ports_Port_PortAlarm_EthPortAlarm) GetBip8SdEnabledDown() bool {
	if x != nil {
		return x.Bip8SdEnabledDown
	}
	return false
}

func (x *Devm_Ports_Port_PortAlarm_EthPortAlarm) GetBip8SdErrorHighThreshold() uint32 {
	if x != nil {
		return x.Bip8SdErrorHighThreshold
	}
	return 0
}

func (x *Devm_Ports_Port_PortAlarm_EthPortAlarm) GetBadBytesThreshold() uint32 {
	if x != nil {
		return x.BadBytesThreshold
	}
	return 0
}

func (x *Devm_Ports_Port_PortAlarm_EthPortAlarm) GetBadBytesInterval() uint32 {
	if x != nil {
		return x.BadBytesInterval
	}
	return 0
}

func (x *Devm_Ports_Port_PortAlarm_EthPortAlarm) GetTxPauseErrorHighThreshold() uint32 {
	if x != nil {
		return x.TxPauseErrorHighThreshold
	}
	return 0
}

func (x *Devm_Ports_Port_PortAlarm_EthPortAlarm) GetTxPauseErrorLowThreshold() uint32 {
	if x != nil {
		return x.TxPauseErrorLowThreshold
	}
	return 0
}

func (x *Devm_Ports_Port_PortAlarm_EthPortAlarm) GetTxPauseErrorInterval() uint32 {
	if x != nil {
		return x.TxPauseErrorInterval
	}
	return 0
}

func (x *Devm_Ports_Port_PortAlarm_EthPortAlarm) GetRxPauseErrorHighThreshold() uint32 {
	if x != nil {
		return x.RxPauseErrorHighThreshold
	}
	return 0
}

func (x *Devm_Ports_Port_PortAlarm_EthPortAlarm) GetRxPauseErrorLowThreshold() uint32 {
	if x != nil {
		return x.RxPauseErrorLowThreshold
	}
	return 0
}

func (x *Devm_Ports_Port_PortAlarm_EthPortAlarm) GetRxPauseErrorInterval() uint32 {
	if x != nil {
		return x.RxPauseErrorInterval
	}
	return 0
}

type Devm_Ports_Port_PortAlarm_SdhPortAlarm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SdhEnabledDown        bool   `protobuf:"varint,1,opt,name=sdh_enabled_down,json=sdh-enabled-down,proto3" json:"sdh_enabled_down,omitempty"`
	SdhErrorHighThreshold uint32 `protobuf:"varint,2,opt,name=sdh_error_high_threshold,json=sdh-error-high-threshold,proto3" json:"sdh_error_high_threshold,omitempty"`
	SdhErrorLowThreshold  uint32 `protobuf:"varint,3,opt,name=sdh_error_low_threshold,json=sdh-error-low-threshold,proto3" json:"sdh_error_low_threshold,omitempty"`
	SdhErrorInterval      uint32 `protobuf:"varint,4,opt,name=sdh_error_interval,json=sdh-error-interval,proto3" json:"sdh_error_interval,omitempty"`
	SdhB1ErrThreshold     uint32 `protobuf:"varint,5,opt,name=sdh_b1_err_threshold,json=sdh-b1-err-threshold,proto3" json:"sdh_b1_err_threshold,omitempty"`
	SdhB2ErrThreshold     uint32 `protobuf:"varint,6,opt,name=sdh_b2_err_threshold,json=sdh-b2-err-threshold,proto3" json:"sdh_b2_err_threshold,omitempty"`
	SdhB1ErrInterval      uint32 `protobuf:"varint,7,opt,name=sdh_b1_err_interval,json=sdh-b1-err-interval,proto3" json:"sdh_b1_err_interval,omitempty"`
	SdhB2ErrInterval      uint32 `protobuf:"varint,8,opt,name=sdh_b2_err_interval,json=sdh-b2-err-interval,proto3" json:"sdh_b2_err_interval,omitempty"`
}

func (x *Devm_Ports_Port_PortAlarm_SdhPortAlarm) Reset() {
	*x = Devm_Ports_Port_PortAlarm_SdhPortAlarm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[429]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Ports_Port_PortAlarm_SdhPortAlarm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Ports_Port_PortAlarm_SdhPortAlarm) ProtoMessage() {}

func (x *Devm_Ports_Port_PortAlarm_SdhPortAlarm) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[429]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Ports_Port_PortAlarm_SdhPortAlarm.ProtoReflect.Descriptor instead.
func (*Devm_Ports_Port_PortAlarm_SdhPortAlarm) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 7, 1}
}

func (x *Devm_Ports_Port_PortAlarm_SdhPortAlarm) GetSdhEnabledDown() bool {
	if x != nil {
		return x.SdhEnabledDown
	}
	return false
}

func (x *Devm_Ports_Port_PortAlarm_SdhPortAlarm) GetSdhErrorHighThreshold() uint32 {
	if x != nil {
		return x.SdhErrorHighThreshold
	}
	return 0
}

func (x *Devm_Ports_Port_PortAlarm_SdhPortAlarm) GetSdhErrorLowThreshold() uint32 {
	if x != nil {
		return x.SdhErrorLowThreshold
	}
	return 0
}

func (x *Devm_Ports_Port_PortAlarm_SdhPortAlarm) GetSdhErrorInterval() uint32 {
	if x != nil {
		return x.SdhErrorInterval
	}
	return 0
}

func (x *Devm_Ports_Port_PortAlarm_SdhPortAlarm) GetSdhB1ErrThreshold() uint32 {
	if x != nil {
		return x.SdhB1ErrThreshold
	}
	return 0
}

func (x *Devm_Ports_Port_PortAlarm_SdhPortAlarm) GetSdhB2ErrThreshold() uint32 {
	if x != nil {
		return x.SdhB2ErrThreshold
	}
	return 0
}

func (x *Devm_Ports_Port_PortAlarm_SdhPortAlarm) GetSdhB1ErrInterval() uint32 {
	if x != nil {
		return x.SdhB1ErrInterval
	}
	return 0
}

func (x *Devm_Ports_Port_PortAlarm_SdhPortAlarm) GetSdhB2ErrInterval() uint32 {
	if x != nil {
		return x.SdhB2ErrInterval
	}
	return 0
}

type Devm_Ports_Port_PortAlarm_PdhPortAlarm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TriggerThres uint32 `protobuf:"varint,1,opt,name=trigger_thres,json=trigger-thres,proto3" json:"trigger_thres,omitempty"`
	ResumeThres  uint32 `protobuf:"varint,2,opt,name=resume_thres,json=resume-thres,proto3" json:"resume_thres,omitempty"`
}

func (x *Devm_Ports_Port_PortAlarm_PdhPortAlarm) Reset() {
	*x = Devm_Ports_Port_PortAlarm_PdhPortAlarm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[430]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Ports_Port_PortAlarm_PdhPortAlarm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Ports_Port_PortAlarm_PdhPortAlarm) ProtoMessage() {}

func (x *Devm_Ports_Port_PortAlarm_PdhPortAlarm) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[430]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Ports_Port_PortAlarm_PdhPortAlarm.ProtoReflect.Descriptor instead.
func (*Devm_Ports_Port_PortAlarm_PdhPortAlarm) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 7, 2}
}

func (x *Devm_Ports_Port_PortAlarm_PdhPortAlarm) GetTriggerThres() uint32 {
	if x != nil {
		return x.TriggerThres
	}
	return 0
}

func (x *Devm_Ports_Port_PortAlarm_PdhPortAlarm) GetResumeThres() uint32 {
	if x != nil {
		return x.ResumeThres
	}
	return 0
}

type Devm_Ports_Port_PortAlarm_CrcMfeAlarm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CrcMfeAlmThrCoefficient  uint32 `protobuf:"varint,1,opt,name=crc_mfe_alm_thr_coefficient,json=crc-mfe-alm-thr-coefficient,proto3" json:"crc_mfe_alm_thr_coefficient,omitempty"`
	CrcMfeAlmThrPower        uint32 `protobuf:"varint,2,opt,name=crc_mfe_alm_thr_power,json=crc-mfe-alm-thr-power,proto3" json:"crc_mfe_alm_thr_power,omitempty"`
	CrcMfeRsumThrCoefficient uint32 `protobuf:"varint,3,opt,name=crc_mfe_rsum_thr_coefficient,json=crc-mfe-rsum-thr-coefficient,proto3" json:"crc_mfe_rsum_thr_coefficient,omitempty"`
	CrcMfeRsumThrPower       uint32 `protobuf:"varint,4,opt,name=crc_mfe_rsum_thr_power,json=crc-mfe-rsum-thr-power,proto3" json:"crc_mfe_rsum_thr_power,omitempty"`
	CrcMfeAlmLspEn           bool   `protobuf:"varint,5,opt,name=crc_mfe_alm_lsp_en,json=crc-mfe-alm-lsp-en,proto3" json:"crc_mfe_alm_lsp_en,omitempty"`
}

func (x *Devm_Ports_Port_PortAlarm_CrcMfeAlarm) Reset() {
	*x = Devm_Ports_Port_PortAlarm_CrcMfeAlarm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[431]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Ports_Port_PortAlarm_CrcMfeAlarm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Ports_Port_PortAlarm_CrcMfeAlarm) ProtoMessage() {}

func (x *Devm_Ports_Port_PortAlarm_CrcMfeAlarm) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[431]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Ports_Port_PortAlarm_CrcMfeAlarm.ProtoReflect.Descriptor instead.
func (*Devm_Ports_Port_PortAlarm_CrcMfeAlarm) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 7, 3}
}

func (x *Devm_Ports_Port_PortAlarm_CrcMfeAlarm) GetCrcMfeAlmThrCoefficient() uint32 {
	if x != nil {
		return x.CrcMfeAlmThrCoefficient
	}
	return 0
}

func (x *Devm_Ports_Port_PortAlarm_CrcMfeAlarm) GetCrcMfeAlmThrPower() uint32 {
	if x != nil {
		return x.CrcMfeAlmThrPower
	}
	return 0
}

func (x *Devm_Ports_Port_PortAlarm_CrcMfeAlarm) GetCrcMfeRsumThrCoefficient() uint32 {
	if x != nil {
		return x.CrcMfeRsumThrCoefficient
	}
	return 0
}

func (x *Devm_Ports_Port_PortAlarm_CrcMfeAlarm) GetCrcMfeRsumThrPower() uint32 {
	if x != nil {
		return x.CrcMfeRsumThrPower
	}
	return 0
}

func (x *Devm_Ports_Port_PortAlarm_CrcMfeAlarm) GetCrcMfeAlmLspEn() bool {
	if x != nil {
		return x.CrcMfeAlmLspEn
	}
	return false
}

type Devm_Ports_Port_PortAlarm_CrcSample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CrcPerSampWinFactor     uint32 `protobuf:"varint,1,opt,name=crc_per_samp_win_factor,json=crc-per-samp-win-factor,proto3" json:"crc_per_samp_win_factor,omitempty"`
	CrcPerChildWinMaxNum    uint32 `protobuf:"varint,2,opt,name=crc_per_child_win_max_num,json=crc-per-child-win-max-num,proto3" json:"crc_per_child_win_max_num,omitempty"`
	CrcPerChildWinAlarmNum  uint32 `protobuf:"varint,3,opt,name=crc_per_child_win_alarm_num,json=crc-per-child-win-alarm-num,proto3" json:"crc_per_child_win_alarm_num,omitempty"`
	CrcPerChildWinResumeNum uint32 `protobuf:"varint,4,opt,name=crc_per_child_win_resume_num,json=crc-per-child-win-resume-num,proto3" json:"crc_per_child_win_resume_num,omitempty"`
	CrcAlgRealtimeFactor    uint32 `protobuf:"varint,5,opt,name=crc_alg_realtime_factor,json=crc-alg-realtime-factor,proto3" json:"crc_alg_realtime_factor,omitempty"`
}

func (x *Devm_Ports_Port_PortAlarm_CrcSample) Reset() {
	*x = Devm_Ports_Port_PortAlarm_CrcSample{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[432]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Ports_Port_PortAlarm_CrcSample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Ports_Port_PortAlarm_CrcSample) ProtoMessage() {}

func (x *Devm_Ports_Port_PortAlarm_CrcSample) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[432]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Ports_Port_PortAlarm_CrcSample.ProtoReflect.Descriptor instead.
func (*Devm_Ports_Port_PortAlarm_CrcSample) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 7, 4}
}

func (x *Devm_Ports_Port_PortAlarm_CrcSample) GetCrcPerSampWinFactor() uint32 {
	if x != nil {
		return x.CrcPerSampWinFactor
	}
	return 0
}

func (x *Devm_Ports_Port_PortAlarm_CrcSample) GetCrcPerChildWinMaxNum() uint32 {
	if x != nil {
		return x.CrcPerChildWinMaxNum
	}
	return 0
}

func (x *Devm_Ports_Port_PortAlarm_CrcSample) GetCrcPerChildWinAlarmNum() uint32 {
	if x != nil {
		return x.CrcPerChildWinAlarmNum
	}
	return 0
}

func (x *Devm_Ports_Port_PortAlarm_CrcSample) GetCrcPerChildWinResumeNum() uint32 {
	if x != nil {
		return x.CrcPerChildWinResumeNum
	}
	return 0
}

func (x *Devm_Ports_Port_PortAlarm_CrcSample) GetCrcAlgRealtimeFactor() uint32 {
	if x != nil {
		return x.CrcAlgRealtimeFactor
	}
	return 0
}

type Devm_Ports_Port_PortAlarm_AlarmType_CrcErrorThreshold struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CrcErrorThreshold *Devm_Ports_Port_PortAlarm_AlarmType_CrcErrorThreshold_CrcErrorThreshold6 `protobuf:"bytes,1,opt,name=crc_error_threshold,json=crc-error-threshold,proto3" json:"crc_error_threshold,omitempty"`
}

func (x *Devm_Ports_Port_PortAlarm_AlarmType_CrcErrorThreshold) Reset() {
	*x = Devm_Ports_Port_PortAlarm_AlarmType_CrcErrorThreshold{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[433]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Ports_Port_PortAlarm_AlarmType_CrcErrorThreshold) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Ports_Port_PortAlarm_AlarmType_CrcErrorThreshold) ProtoMessage() {}

func (x *Devm_Ports_Port_PortAlarm_AlarmType_CrcErrorThreshold) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[433]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Ports_Port_PortAlarm_AlarmType_CrcErrorThreshold.ProtoReflect.Descriptor instead.
func (*Devm_Ports_Port_PortAlarm_AlarmType_CrcErrorThreshold) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 7, 5}
}

func (x *Devm_Ports_Port_PortAlarm_AlarmType_CrcErrorThreshold) GetCrcErrorThreshold() *Devm_Ports_Port_PortAlarm_AlarmType_CrcErrorThreshold_CrcErrorThreshold6 {
	if x != nil {
		return x.CrcErrorThreshold
	}
	return nil
}

type Devm_Ports_Port_PortAlarm_AlarmType_LinkCrc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LinkQuality *Devm_Ports_Port_PortAlarm_AlarmType_LinkCrc_LinkQuality `protobuf:"bytes,1,opt,name=link_quality,json=link-quality,proto3" json:"link_quality,omitempty"`
	CrcPerAlarm *Devm_Ports_Port_PortAlarm_AlarmType_LinkCrc_CrcPerAlarm `protobuf:"bytes,2,opt,name=crc_per_alarm,json=crc-per-alarm,proto3" json:"crc_per_alarm,omitempty"`
	CrcPerWarn  *Devm_Ports_Port_PortAlarm_AlarmType_LinkCrc_CrcPerWarn  `protobuf:"bytes,3,opt,name=crc_per_warn,json=crc-per-warn,proto3" json:"crc_per_warn,omitempty"`
}

func (x *Devm_Ports_Port_PortAlarm_AlarmType_LinkCrc) Reset() {
	*x = Devm_Ports_Port_PortAlarm_AlarmType_LinkCrc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[434]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Ports_Port_PortAlarm_AlarmType_LinkCrc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Ports_Port_PortAlarm_AlarmType_LinkCrc) ProtoMessage() {}

func (x *Devm_Ports_Port_PortAlarm_AlarmType_LinkCrc) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[434]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Ports_Port_PortAlarm_AlarmType_LinkCrc.ProtoReflect.Descriptor instead.
func (*Devm_Ports_Port_PortAlarm_AlarmType_LinkCrc) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 7, 6}
}

func (x *Devm_Ports_Port_PortAlarm_AlarmType_LinkCrc) GetLinkQuality() *Devm_Ports_Port_PortAlarm_AlarmType_LinkCrc_LinkQuality {
	if x != nil {
		return x.LinkQuality
	}
	return nil
}

func (x *Devm_Ports_Port_PortAlarm_AlarmType_LinkCrc) GetCrcPerAlarm() *Devm_Ports_Port_PortAlarm_AlarmType_LinkCrc_CrcPerAlarm {
	if x != nil {
		return x.CrcPerAlarm
	}
	return nil
}

func (x *Devm_Ports_Port_PortAlarm_AlarmType_LinkCrc) GetCrcPerWarn() *Devm_Ports_Port_PortAlarm_AlarmType_LinkCrc_CrcPerWarn {
	if x != nil {
		return x.CrcPerWarn
	}
	return nil
}

type Devm_Ports_Port_PortAlarm_AlarmType_CrcMfsAlarm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CrcMfsAlarm *Devm_Ports_Port_PortAlarm_AlarmType_CrcMfsAlarm_CrcMfsAlarm6 `protobuf:"bytes,1,opt,name=crc_mfs_alarm,json=crc-mfs-alarm,proto3" json:"crc_mfs_alarm,omitempty"`
}

func (x *Devm_Ports_Port_PortAlarm_AlarmType_CrcMfsAlarm) Reset() {
	*x = Devm_Ports_Port_PortAlarm_AlarmType_CrcMfsAlarm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[435]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Ports_Port_PortAlarm_AlarmType_CrcMfsAlarm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Ports_Port_PortAlarm_AlarmType_CrcMfsAlarm) ProtoMessage() {}

func (x *Devm_Ports_Port_PortAlarm_AlarmType_CrcMfsAlarm) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[435]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Ports_Port_PortAlarm_AlarmType_CrcMfsAlarm.ProtoReflect.Descriptor instead.
func (*Devm_Ports_Port_PortAlarm_AlarmType_CrcMfsAlarm) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 7, 7}
}

func (x *Devm_Ports_Port_PortAlarm_AlarmType_CrcMfsAlarm) GetCrcMfsAlarm() *Devm_Ports_Port_PortAlarm_AlarmType_CrcMfsAlarm_CrcMfsAlarm6 {
	if x != nil {
		return x.CrcMfsAlarm
	}
	return nil
}

type Devm_Ports_Port_PortAlarm_AlarmType_CrcErrorThreshold_CrcErrorThreshold6 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CrcErrorHigh          uint32 `protobuf:"varint,1,opt,name=crc_error_high,json=crc-error-high,proto3" json:"crc_error_high,omitempty"`
	CrcErrorLow           uint32 `protobuf:"varint,2,opt,name=crc_error_low,json=crc-error-low,proto3" json:"crc_error_low,omitempty"`
	CrcError              uint32 `protobuf:"varint,3,opt,name=crc_error,json=crc-error,proto3" json:"crc_error,omitempty"`
	CrcErrorInterval      uint32 `protobuf:"varint,4,opt,name=crc_error_interval,json=crc-error-interval,proto3" json:"crc_error_interval,omitempty"`
	CrcShutdownEn         bool   `protobuf:"varint,5,opt,name=crc_shutdown_en,json=crc-shutdown-en,proto3" json:"crc_shutdown_en,omitempty"`
	CrcErrorPercentAlmThr uint32 `protobuf:"varint,6,opt,name=crc_error_percent_alm_thr,json=crc-error-percent-alm-thr,proto3" json:"crc_error_percent_alm_thr,omitempty"`
}

func (x *Devm_Ports_Port_PortAlarm_AlarmType_CrcErrorThreshold_CrcErrorThreshold6) Reset() {
	*x = Devm_Ports_Port_PortAlarm_AlarmType_CrcErrorThreshold_CrcErrorThreshold6{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[436]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Ports_Port_PortAlarm_AlarmType_CrcErrorThreshold_CrcErrorThreshold6) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Ports_Port_PortAlarm_AlarmType_CrcErrorThreshold_CrcErrorThreshold6) ProtoMessage() {}

func (x *Devm_Ports_Port_PortAlarm_AlarmType_CrcErrorThreshold_CrcErrorThreshold6) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[436]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Ports_Port_PortAlarm_AlarmType_CrcErrorThreshold_CrcErrorThreshold6.ProtoReflect.Descriptor instead.
func (*Devm_Ports_Port_PortAlarm_AlarmType_CrcErrorThreshold_CrcErrorThreshold6) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 7, 5, 0}
}

func (x *Devm_Ports_Port_PortAlarm_AlarmType_CrcErrorThreshold_CrcErrorThreshold6) GetCrcErrorHigh() uint32 {
	if x != nil {
		return x.CrcErrorHigh
	}
	return 0
}

func (x *Devm_Ports_Port_PortAlarm_AlarmType_CrcErrorThreshold_CrcErrorThreshold6) GetCrcErrorLow() uint32 {
	if x != nil {
		return x.CrcErrorLow
	}
	return 0
}

func (x *Devm_Ports_Port_PortAlarm_AlarmType_CrcErrorThreshold_CrcErrorThreshold6) GetCrcError() uint32 {
	if x != nil {
		return x.CrcError
	}
	return 0
}

func (x *Devm_Ports_Port_PortAlarm_AlarmType_CrcErrorThreshold_CrcErrorThreshold6) GetCrcErrorInterval() uint32 {
	if x != nil {
		return x.CrcErrorInterval
	}
	return 0
}

func (x *Devm_Ports_Port_PortAlarm_AlarmType_CrcErrorThreshold_CrcErrorThreshold6) GetCrcShutdownEn() bool {
	if x != nil {
		return x.CrcShutdownEn
	}
	return false
}

func (x *Devm_Ports_Port_PortAlarm_AlarmType_CrcErrorThreshold_CrcErrorThreshold6) GetCrcErrorPercentAlmThr() uint32 {
	if x != nil {
		return x.CrcErrorPercentAlmThr
	}
	return 0
}

type Devm_Ports_Port_PortAlarm_AlarmType_LinkCrc_LinkQuality struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LinkQualityAlmThrCoefficient  uint32 `protobuf:"varint,1,opt,name=link_quality_alm_thr_coefficient,json=link-quality-alm-thr-coefficient,proto3" json:"link_quality_alm_thr_coefficient,omitempty"`
	LinkQualityAlmThrPower        uint32 `protobuf:"varint,2,opt,name=link_quality_alm_thr_power,json=link-quality-alm-thr-power,proto3" json:"link_quality_alm_thr_power,omitempty"`
	LinkQualityRsumThrCoefficient uint32 `protobuf:"varint,3,opt,name=link_quality_rsum_thr_coefficient,json=link-quality-rsum-thr-coefficient,proto3" json:"link_quality_rsum_thr_coefficient,omitempty"`
	LinkQualityRsumThrPower       uint32 `protobuf:"varint,4,opt,name=link_quality_rsum_thr_power,json=link-quality-rsum-thr-power,proto3" json:"link_quality_rsum_thr_power,omitempty"`
}

func (x *Devm_Ports_Port_PortAlarm_AlarmType_LinkCrc_LinkQuality) Reset() {
	*x = Devm_Ports_Port_PortAlarm_AlarmType_LinkCrc_LinkQuality{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[437]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Ports_Port_PortAlarm_AlarmType_LinkCrc_LinkQuality) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Ports_Port_PortAlarm_AlarmType_LinkCrc_LinkQuality) ProtoMessage() {}

func (x *Devm_Ports_Port_PortAlarm_AlarmType_LinkCrc_LinkQuality) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[437]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Ports_Port_PortAlarm_AlarmType_LinkCrc_LinkQuality.ProtoReflect.Descriptor instead.
func (*Devm_Ports_Port_PortAlarm_AlarmType_LinkCrc_LinkQuality) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 7, 6, 0}
}

func (x *Devm_Ports_Port_PortAlarm_AlarmType_LinkCrc_LinkQuality) GetLinkQualityAlmThrCoefficient() uint32 {
	if x != nil {
		return x.LinkQualityAlmThrCoefficient
	}
	return 0
}

func (x *Devm_Ports_Port_PortAlarm_AlarmType_LinkCrc_LinkQuality) GetLinkQualityAlmThrPower() uint32 {
	if x != nil {
		return x.LinkQualityAlmThrPower
	}
	return 0
}

func (x *Devm_Ports_Port_PortAlarm_AlarmType_LinkCrc_LinkQuality) GetLinkQualityRsumThrCoefficient() uint32 {
	if x != nil {
		return x.LinkQualityRsumThrCoefficient
	}
	return 0
}

func (x *Devm_Ports_Port_PortAlarm_AlarmType_LinkCrc_LinkQuality) GetLinkQualityRsumThrPower() uint32 {
	if x != nil {
		return x.LinkQualityRsumThrPower
	}
	return 0
}

type Devm_Ports_Port_PortAlarm_AlarmType_LinkCrc_CrcPerAlarm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CrcPerAlmThrCoefficient  uint32 `protobuf:"varint,1,opt,name=crc_per_alm_thr_coefficient,json=crc-per-alm-thr-coefficient,proto3" json:"crc_per_alm_thr_coefficient,omitempty"`
	CrcPerAlmThrPower        uint32 `protobuf:"varint,2,opt,name=crc_per_alm_thr_power,json=crc-per-alm-thr-power,proto3" json:"crc_per_alm_thr_power,omitempty"`
	CrcPerRsumThrCoefficient uint32 `protobuf:"varint,3,opt,name=crc_per_rsum_thr_coefficient,json=crc-per-rsum-thr-coefficient,proto3" json:"crc_per_rsum_thr_coefficient,omitempty"`
	CrcPerRsumThrPower       uint32 `protobuf:"varint,4,opt,name=crc_per_rsum_thr_power,json=crc-per-rsum-thr-power,proto3" json:"crc_per_rsum_thr_power,omitempty"`
	CrcPerAlmLspEn           bool   `protobuf:"varint,5,opt,name=crc_per_alm_lsp_en,json=crc-per-alm-lsp-en,proto3" json:"crc_per_alm_lsp_en,omitempty"`
	CrcPerAlmSecEn           bool   `protobuf:"varint,6,opt,name=crc_per_alm_sec_en,json=crc-per-alm-sec-en,proto3" json:"crc_per_alm_sec_en,omitempty"`
}

func (x *Devm_Ports_Port_PortAlarm_AlarmType_LinkCrc_CrcPerAlarm) Reset() {
	*x = Devm_Ports_Port_PortAlarm_AlarmType_LinkCrc_CrcPerAlarm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[438]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Ports_Port_PortAlarm_AlarmType_LinkCrc_CrcPerAlarm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Ports_Port_PortAlarm_AlarmType_LinkCrc_CrcPerAlarm) ProtoMessage() {}

func (x *Devm_Ports_Port_PortAlarm_AlarmType_LinkCrc_CrcPerAlarm) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[438]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Ports_Port_PortAlarm_AlarmType_LinkCrc_CrcPerAlarm.ProtoReflect.Descriptor instead.
func (*Devm_Ports_Port_PortAlarm_AlarmType_LinkCrc_CrcPerAlarm) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 7, 6, 1}
}

func (x *Devm_Ports_Port_PortAlarm_AlarmType_LinkCrc_CrcPerAlarm) GetCrcPerAlmThrCoefficient() uint32 {
	if x != nil {
		return x.CrcPerAlmThrCoefficient
	}
	return 0
}

func (x *Devm_Ports_Port_PortAlarm_AlarmType_LinkCrc_CrcPerAlarm) GetCrcPerAlmThrPower() uint32 {
	if x != nil {
		return x.CrcPerAlmThrPower
	}
	return 0
}

func (x *Devm_Ports_Port_PortAlarm_AlarmType_LinkCrc_CrcPerAlarm) GetCrcPerRsumThrCoefficient() uint32 {
	if x != nil {
		return x.CrcPerRsumThrCoefficient
	}
	return 0
}

func (x *Devm_Ports_Port_PortAlarm_AlarmType_LinkCrc_CrcPerAlarm) GetCrcPerRsumThrPower() uint32 {
	if x != nil {
		return x.CrcPerRsumThrPower
	}
	return 0
}

func (x *Devm_Ports_Port_PortAlarm_AlarmType_LinkCrc_CrcPerAlarm) GetCrcPerAlmLspEn() bool {
	if x != nil {
		return x.CrcPerAlmLspEn
	}
	return false
}

func (x *Devm_Ports_Port_PortAlarm_AlarmType_LinkCrc_CrcPerAlarm) GetCrcPerAlmSecEn() bool {
	if x != nil {
		return x.CrcPerAlmSecEn
	}
	return false
}

type Devm_Ports_Port_PortAlarm_AlarmType_LinkCrc_CrcPerWarn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CrcPerWarThrCoefficient     uint32 `protobuf:"varint,1,opt,name=crc_per_war_thr_coefficient,json=crc-per-war-thr-coefficient,proto3" json:"crc_per_war_thr_coefficient,omitempty"`
	CrcPerWarThrPower           uint32 `protobuf:"varint,2,opt,name=crc_per_war_thr_power,json=crc-per-war-thr-power,proto3" json:"crc_per_war_thr_power,omitempty"`
	CrcPerWarRsumThrCoefficient uint32 `protobuf:"varint,3,opt,name=crc_per_war_rsum_thr_coefficient,json=crc-per-war-rsum-thr-coefficient,proto3" json:"crc_per_war_rsum_thr_coefficient,omitempty"`
	CrcPerWarRsumThrPower       uint32 `protobuf:"varint,4,opt,name=crc_per_war_rsum_thr_power,json=crc-per-war-rsum-thr-power,proto3" json:"crc_per_war_rsum_thr_power,omitempty"`
}

func (x *Devm_Ports_Port_PortAlarm_AlarmType_LinkCrc_CrcPerWarn) Reset() {
	*x = Devm_Ports_Port_PortAlarm_AlarmType_LinkCrc_CrcPerWarn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[439]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Ports_Port_PortAlarm_AlarmType_LinkCrc_CrcPerWarn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Ports_Port_PortAlarm_AlarmType_LinkCrc_CrcPerWarn) ProtoMessage() {}

func (x *Devm_Ports_Port_PortAlarm_AlarmType_LinkCrc_CrcPerWarn) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[439]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Ports_Port_PortAlarm_AlarmType_LinkCrc_CrcPerWarn.ProtoReflect.Descriptor instead.
func (*Devm_Ports_Port_PortAlarm_AlarmType_LinkCrc_CrcPerWarn) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 7, 6, 2}
}

func (x *Devm_Ports_Port_PortAlarm_AlarmType_LinkCrc_CrcPerWarn) GetCrcPerWarThrCoefficient() uint32 {
	if x != nil {
		return x.CrcPerWarThrCoefficient
	}
	return 0
}

func (x *Devm_Ports_Port_PortAlarm_AlarmType_LinkCrc_CrcPerWarn) GetCrcPerWarThrPower() uint32 {
	if x != nil {
		return x.CrcPerWarThrPower
	}
	return 0
}

func (x *Devm_Ports_Port_PortAlarm_AlarmType_LinkCrc_CrcPerWarn) GetCrcPerWarRsumThrCoefficient() uint32 {
	if x != nil {
		return x.CrcPerWarRsumThrCoefficient
	}
	return 0
}

func (x *Devm_Ports_Port_PortAlarm_AlarmType_LinkCrc_CrcPerWarn) GetCrcPerWarRsumThrPower() uint32 {
	if x != nil {
		return x.CrcPerWarRsumThrPower
	}
	return 0
}

type Devm_Ports_Port_PortAlarm_AlarmType_CrcMfsAlarm_CrcMfsAlarm6 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CrcMfsAlmThrCoefficient  uint32 `protobuf:"varint,1,opt,name=crc_mfs_alm_thr_coefficient,json=crc-mfs-alm-thr-coefficient,proto3" json:"crc_mfs_alm_thr_coefficient,omitempty"`
	CrcMfsAlmThrPower        uint32 `protobuf:"varint,2,opt,name=crc_mfs_alm_thr_power,json=crc-mfs-alm-thr-power,proto3" json:"crc_mfs_alm_thr_power,omitempty"`
	CrcMfsRsumThrCoefficient uint32 `protobuf:"varint,3,opt,name=crc_mfs_rsum_thr_coefficient,json=crc-mfs-rsum-thr-coefficient,proto3" json:"crc_mfs_rsum_thr_coefficient,omitempty"`
	CrcMfsRsumThrPower       uint32 `protobuf:"varint,4,opt,name=crc_mfs_rsum_thr_power,json=crc-mfs-rsum-thr-power,proto3" json:"crc_mfs_rsum_thr_power,omitempty"`
	CrcMfsAlmLspEn           bool   `protobuf:"varint,5,opt,name=crc_mfs_alm_lsp_en,json=crc-mfs-alm-lsp-en,proto3" json:"crc_mfs_alm_lsp_en,omitempty"`
}

func (x *Devm_Ports_Port_PortAlarm_AlarmType_CrcMfsAlarm_CrcMfsAlarm6) Reset() {
	*x = Devm_Ports_Port_PortAlarm_AlarmType_CrcMfsAlarm_CrcMfsAlarm6{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[440]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Ports_Port_PortAlarm_AlarmType_CrcMfsAlarm_CrcMfsAlarm6) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Ports_Port_PortAlarm_AlarmType_CrcMfsAlarm_CrcMfsAlarm6) ProtoMessage() {}

func (x *Devm_Ports_Port_PortAlarm_AlarmType_CrcMfsAlarm_CrcMfsAlarm6) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[440]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Ports_Port_PortAlarm_AlarmType_CrcMfsAlarm_CrcMfsAlarm6.ProtoReflect.Descriptor instead.
func (*Devm_Ports_Port_PortAlarm_AlarmType_CrcMfsAlarm_CrcMfsAlarm6) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 7, 7, 0}
}

func (x *Devm_Ports_Port_PortAlarm_AlarmType_CrcMfsAlarm_CrcMfsAlarm6) GetCrcMfsAlmThrCoefficient() uint32 {
	if x != nil {
		return x.CrcMfsAlmThrCoefficient
	}
	return 0
}

func (x *Devm_Ports_Port_PortAlarm_AlarmType_CrcMfsAlarm_CrcMfsAlarm6) GetCrcMfsAlmThrPower() uint32 {
	if x != nil {
		return x.CrcMfsAlmThrPower
	}
	return 0
}

func (x *Devm_Ports_Port_PortAlarm_AlarmType_CrcMfsAlarm_CrcMfsAlarm6) GetCrcMfsRsumThrCoefficient() uint32 {
	if x != nil {
		return x.CrcMfsRsumThrCoefficient
	}
	return 0
}

func (x *Devm_Ports_Port_PortAlarm_AlarmType_CrcMfsAlarm_CrcMfsAlarm6) GetCrcMfsRsumThrPower() uint32 {
	if x != nil {
		return x.CrcMfsRsumThrPower
	}
	return 0
}

func (x *Devm_Ports_Port_PortAlarm_AlarmType_CrcMfsAlarm_CrcMfsAlarm6) GetCrcMfsAlmLspEn() bool {
	if x != nil {
		return x.CrcMfsAlmLspEn
	}
	return false
}

type Devm_Ports_Port_PhySerial_SerAttrs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SerAttr []*Devm_Ports_Port_PhySerial_SerAttrs_SerAttr `protobuf:"bytes,1,rep,name=ser_attr,json=ser-attr,proto3" json:"ser_attr,omitempty"`
}

func (x *Devm_Ports_Port_PhySerial_SerAttrs) Reset() {
	*x = Devm_Ports_Port_PhySerial_SerAttrs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[441]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Ports_Port_PhySerial_SerAttrs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Ports_Port_PhySerial_SerAttrs) ProtoMessage() {}

func (x *Devm_Ports_Port_PhySerial_SerAttrs) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[441]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Ports_Port_PhySerial_SerAttrs.ProtoReflect.Descriptor instead.
func (*Devm_Ports_Port_PhySerial_SerAttrs) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 9, 0}
}

func (x *Devm_Ports_Port_PhySerial_SerAttrs) GetSerAttr() []*Devm_Ports_Port_PhySerial_SerAttrs_SerAttr {
	if x != nil {
		return x.SerAttr
	}
	return nil
}

type Devm_Ports_Port_PhySerial_SerAttrs_SerAttr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number7  uint32 `protobuf:"varint,1,opt,name=number7,json=number,proto3" json:"number7,omitempty"`
	Baudrate uint32 `protobuf:"varint,2,opt,name=baudrate,proto3" json:"baudrate,omitempty"`
	Databits string `protobuf:"bytes,3,opt,name=databits,proto3" json:"databits,omitempty"`
	Parity   string `protobuf:"bytes,4,opt,name=parity,proto3" json:"parity,omitempty"`
	Stopbits string `protobuf:"bytes,5,opt,name=stopbits,proto3" json:"stopbits,omitempty"`
}

func (x *Devm_Ports_Port_PhySerial_SerAttrs_SerAttr) Reset() {
	*x = Devm_Ports_Port_PhySerial_SerAttrs_SerAttr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[442]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Ports_Port_PhySerial_SerAttrs_SerAttr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Ports_Port_PhySerial_SerAttrs_SerAttr) ProtoMessage() {}

func (x *Devm_Ports_Port_PhySerial_SerAttrs_SerAttr) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[442]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Ports_Port_PhySerial_SerAttrs_SerAttr.ProtoReflect.Descriptor instead.
func (*Devm_Ports_Port_PhySerial_SerAttrs_SerAttr) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 9, 0, 0}
}

func (x *Devm_Ports_Port_PhySerial_SerAttrs_SerAttr) GetNumber7() uint32 {
	if x != nil {
		return x.Number7
	}
	return 0
}

func (x *Devm_Ports_Port_PhySerial_SerAttrs_SerAttr) GetBaudrate() uint32 {
	if x != nil {
		return x.Baudrate
	}
	return 0
}

func (x *Devm_Ports_Port_PhySerial_SerAttrs_SerAttr) GetDatabits() string {
	if x != nil {
		return x.Databits
	}
	return ""
}

func (x *Devm_Ports_Port_PhySerial_SerAttrs_SerAttr) GetParity() string {
	if x != nil {
		return x.Parity
	}
	return ""
}

func (x *Devm_Ports_Port_PhySerial_SerAttrs_SerAttr) GetStopbits() string {
	if x != nil {
		return x.Stopbits
	}
	return ""
}

type Devm_Ports_Port_PhyVoice_Fxo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GainSend      string                                     `protobuf:"bytes,1,opt,name=gain_send,json=gain-send,proto3" json:"gain_send,omitempty"`
	GainRec       string                                     `protobuf:"bytes,2,opt,name=gain_rec,json=gain-rec,proto3" json:"gain_rec,omitempty"`
	DcImped       Devm_Ports_Port_PhyVoice_Fxo_DcImped       `protobuf:"varint,3,opt,name=dc_imped,json=dc-imped,proto3,enum=huawei_devm.Devm_Ports_Port_PhyVoice_Fxo_DcImped" json:"dc_imped,omitempty"`
	AcImped       Devm_Ports_Port_PhyVoice_Fxo_AcImped       `protobuf:"varint,4,opt,name=ac_imped,json=ac-imped,proto3,enum=huawei_devm.Devm_Ports_Port_PhyVoice_Fxo_AcImped" json:"ac_imped,omitempty"`
	RingMinDur    Devm_Ports_Port_PhyVoice_Fxo_RingMinDur    `protobuf:"varint,5,opt,name=ring_min_dur,json=ring-min-dur,proto3,enum=huawei_devm.Devm_Ports_Port_PhyVoice_Fxo_RingMinDur" json:"ring_min_dur,omitempty"`
	RingMaxInter  Devm_Ports_Port_PhyVoice_Fxo_RingMaxInter  `protobuf:"varint,6,opt,name=ring_max_inter,json=ring-max-inter,proto3,enum=huawei_devm.Devm_Ports_Port_PhyVoice_Fxo_RingMaxInter" json:"ring_max_inter,omitempty"`
	RingFrequence Devm_Ports_Port_PhyVoice_Fxo_RingFrequence `protobuf:"varint,7,opt,name=ring_frequence,json=ring-frequence,proto3,enum=huawei_devm.Devm_Ports_Port_PhyVoice_Fxo_RingFrequence" json:"ring_frequence,omitempty"`
	RingAcAmpli   Devm_Ports_Port_PhyVoice_Fxo_RingAcAmpli   `protobuf:"varint,8,opt,name=ring_ac_ampli,json=ring-ac-ampli,proto3,enum=huawei_devm.Devm_Ports_Port_PhyVoice_Fxo_RingAcAmpli" json:"ring_ac_ampli,omitempty"`
}

func (x *Devm_Ports_Port_PhyVoice_Fxo) Reset() {
	*x = Devm_Ports_Port_PhyVoice_Fxo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[443]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Ports_Port_PhyVoice_Fxo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Ports_Port_PhyVoice_Fxo) ProtoMessage() {}

func (x *Devm_Ports_Port_PhyVoice_Fxo) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[443]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Ports_Port_PhyVoice_Fxo.ProtoReflect.Descriptor instead.
func (*Devm_Ports_Port_PhyVoice_Fxo) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 10, 0}
}

func (x *Devm_Ports_Port_PhyVoice_Fxo) GetGainSend() string {
	if x != nil {
		return x.GainSend
	}
	return ""
}

func (x *Devm_Ports_Port_PhyVoice_Fxo) GetGainRec() string {
	if x != nil {
		return x.GainRec
	}
	return ""
}

func (x *Devm_Ports_Port_PhyVoice_Fxo) GetDcImped() Devm_Ports_Port_PhyVoice_Fxo_DcImped {
	if x != nil {
		return x.DcImped
	}
	return Devm_Ports_Port_PhyVoice_Fxo_DcImped_X_50OHM
}

func (x *Devm_Ports_Port_PhyVoice_Fxo) GetAcImped() Devm_Ports_Port_PhyVoice_Fxo_AcImped {
	if x != nil {
		return x.AcImped
	}
	return Devm_Ports_Port_PhyVoice_Fxo_AcImped_X_600OHM
}

func (x *Devm_Ports_Port_PhyVoice_Fxo) GetRingMinDur() Devm_Ports_Port_PhyVoice_Fxo_RingMinDur {
	if x != nil {
		return x.RingMinDur
	}
	return Devm_Ports_Port_PhyVoice_Fxo_RingMinDur_X_100MS
}

func (x *Devm_Ports_Port_PhyVoice_Fxo) GetRingMaxInter() Devm_Ports_Port_PhyVoice_Fxo_RingMaxInter {
	if x != nil {
		return x.RingMaxInter
	}
	return Devm_Ports_Port_PhyVoice_Fxo_RingMaxInter_NOTX_USE
}

func (x *Devm_Ports_Port_PhyVoice_Fxo) GetRingFrequence() Devm_Ports_Port_PhyVoice_Fxo_RingFrequence {
	if x != nil {
		return x.RingFrequence
	}
	return Devm_Ports_Port_PhyVoice_Fxo_RingFrequence_X_16HZ
}

func (x *Devm_Ports_Port_PhyVoice_Fxo) GetRingAcAmpli() Devm_Ports_Port_PhyVoice_Fxo_RingAcAmpli {
	if x != nil {
		return x.RingAcAmpli
	}
	return Devm_Ports_Port_PhyVoice_Fxo_RingAcAmpli_X_74V
}

type Devm_Ports_Port_PhyVoice_Fxs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FxsCurrent   Devm_Ports_Port_PhyVoice_Fxs_FxsCurrent   `protobuf:"varint,1,opt,name=fxs_current,json=fxs-current,proto3,enum=huawei_devm.Devm_Ports_Port_PhyVoice_Fxs_FxsCurrent" json:"fxs_current,omitempty"`
	FxsGainSend  string                                    `protobuf:"bytes,2,opt,name=fxs_gain_send,json=fxs-gain-send,proto3" json:"fxs_gain_send,omitempty"`
	FxsGainRec   string                                    `protobuf:"bytes,3,opt,name=fxs_gain_rec,json=fxs-gain-rec,proto3" json:"fxs_gain_rec,omitempty"`
	FxsHotlineEn Devm_Ports_Port_PhyVoice_Fxs_FxsHotlineEn `protobuf:"varint,4,opt,name=fxs_hotline_en,json=fxs-hotline-en,proto3,enum=huawei_devm.Devm_Ports_Port_PhyVoice_Fxs_FxsHotlineEn" json:"fxs_hotline_en,omitempty"`
	FxsDcImped   Devm_Ports_Port_PhyVoice_Fxs_FxsDcImped   `protobuf:"varint,5,opt,name=fxs_dc_imped,json=fxs-dc-imped,proto3,enum=huawei_devm.Devm_Ports_Port_PhyVoice_Fxs_FxsDcImped" json:"fxs_dc_imped,omitempty"`
}

func (x *Devm_Ports_Port_PhyVoice_Fxs) Reset() {
	*x = Devm_Ports_Port_PhyVoice_Fxs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[444]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Ports_Port_PhyVoice_Fxs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Ports_Port_PhyVoice_Fxs) ProtoMessage() {}

func (x *Devm_Ports_Port_PhyVoice_Fxs) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[444]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Ports_Port_PhyVoice_Fxs.ProtoReflect.Descriptor instead.
func (*Devm_Ports_Port_PhyVoice_Fxs) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 10, 1}
}

func (x *Devm_Ports_Port_PhyVoice_Fxs) GetFxsCurrent() Devm_Ports_Port_PhyVoice_Fxs_FxsCurrent {
	if x != nil {
		return x.FxsCurrent
	}
	return Devm_Ports_Port_PhyVoice_Fxs_FxsCurrent_X_16MA
}

func (x *Devm_Ports_Port_PhyVoice_Fxs) GetFxsGainSend() string {
	if x != nil {
		return x.FxsGainSend
	}
	return ""
}

func (x *Devm_Ports_Port_PhyVoice_Fxs) GetFxsGainRec() string {
	if x != nil {
		return x.FxsGainRec
	}
	return ""
}

func (x *Devm_Ports_Port_PhyVoice_Fxs) GetFxsHotlineEn() Devm_Ports_Port_PhyVoice_Fxs_FxsHotlineEn {
	if x != nil {
		return x.FxsHotlineEn
	}
	return Devm_Ports_Port_PhyVoice_Fxs_FxsHotlineEn_DISABLE
}

func (x *Devm_Ports_Port_PhyVoice_Fxs) GetFxsDcImped() Devm_Ports_Port_PhyVoice_Fxs_FxsDcImped {
	if x != nil {
		return x.FxsDcImped
	}
	return Devm_Ports_Port_PhyVoice_Fxs_FxsDcImped_X_600OHM
}

type Devm_Ports_Port_PhyVoice_Em struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EmGainSend     string                                     `protobuf:"bytes,1,opt,name=em_gain_send,json=em-gain-send,proto3" json:"em_gain_send,omitempty"`
	EmGainRec      string                                     `protobuf:"bytes,2,opt,name=em_gain_rec,json=em-gain-rec,proto3" json:"em_gain_rec,omitempty"`
	EmuserlineMode Devm_Ports_Port_PhyVoice_Em_EmuserlineMode `protobuf:"varint,3,opt,name=emuserline_mode,json=emuserline-mode,proto3,enum=huawei_devm.Devm_Ports_Port_PhyVoice_Em_EmuserlineMode" json:"emuserline_mode,omitempty"`
	EmuserlineStat Devm_Ports_Port_PhyVoice_Em_EmuserlineStat `protobuf:"varint,4,opt,name=emuserline_stat,json=emuserline-stat,proto3,enum=huawei_devm.Devm_Ports_Port_PhyVoice_Em_EmuserlineStat" json:"emuserline_stat,omitempty"`
}

func (x *Devm_Ports_Port_PhyVoice_Em) Reset() {
	*x = Devm_Ports_Port_PhyVoice_Em{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[445]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Ports_Port_PhyVoice_Em) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Ports_Port_PhyVoice_Em) ProtoMessage() {}

func (x *Devm_Ports_Port_PhyVoice_Em) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[445]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Ports_Port_PhyVoice_Em.ProtoReflect.Descriptor instead.
func (*Devm_Ports_Port_PhyVoice_Em) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 10, 2}
}

func (x *Devm_Ports_Port_PhyVoice_Em) GetEmGainSend() string {
	if x != nil {
		return x.EmGainSend
	}
	return ""
}

func (x *Devm_Ports_Port_PhyVoice_Em) GetEmGainRec() string {
	if x != nil {
		return x.EmGainRec
	}
	return ""
}

func (x *Devm_Ports_Port_PhyVoice_Em) GetEmuserlineMode() Devm_Ports_Port_PhyVoice_Em_EmuserlineMode {
	if x != nil {
		return x.EmuserlineMode
	}
	return Devm_Ports_Port_PhyVoice_Em_EmuserlineMode_X_2WIRE
}

func (x *Devm_Ports_Port_PhyVoice_Em) GetEmuserlineStat() Devm_Ports_Port_PhyVoice_Em_EmuserlineStat {
	if x != nil {
		return x.EmuserlineStat
	}
	return Devm_Ports_Port_PhyVoice_Em_EmuserlineStat_X_2WIRE
}

type Devm_Ports_Port_E1T1_ChannelSets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelSet []*Devm_Ports_Port_E1T1_ChannelSets_ChannelSet `protobuf:"bytes,1,rep,name=channel_set,json=channel-set,proto3" json:"channel_set,omitempty"`
}

func (x *Devm_Ports_Port_E1T1_ChannelSets) Reset() {
	*x = Devm_Ports_Port_E1T1_ChannelSets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[446]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Ports_Port_E1T1_ChannelSets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Ports_Port_E1T1_ChannelSets) ProtoMessage() {}

func (x *Devm_Ports_Port_E1T1_ChannelSets) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[446]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Ports_Port_E1T1_ChannelSets.ProtoReflect.Descriptor instead.
func (*Devm_Ports_Port_E1T1_ChannelSets) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 11, 0}
}

func (x *Devm_Ports_Port_E1T1_ChannelSets) GetChannelSet() []*Devm_Ports_Port_E1T1_ChannelSets_ChannelSet {
	if x != nil {
		return x.ChannelSet
	}
	return nil
}

type Devm_Ports_Port_E1T1_ChannelSets_ChannelSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number7      uint32 `protobuf:"varint,1,opt,name=number7,json=number,proto3" json:"number7,omitempty"`
	TimeslotList string `protobuf:"bytes,2,opt,name=timeslot_list,json=timeslot-list,proto3" json:"timeslot_list,omitempty"`
}

func (x *Devm_Ports_Port_E1T1_ChannelSets_ChannelSet) Reset() {
	*x = Devm_Ports_Port_E1T1_ChannelSets_ChannelSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[447]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Ports_Port_E1T1_ChannelSets_ChannelSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Ports_Port_E1T1_ChannelSets_ChannelSet) ProtoMessage() {}

func (x *Devm_Ports_Port_E1T1_ChannelSets_ChannelSet) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[447]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Ports_Port_E1T1_ChannelSets_ChannelSet.ProtoReflect.Descriptor instead.
func (*Devm_Ports_Port_E1T1_ChannelSets_ChannelSet) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 10, 0, 11, 0, 0}
}

func (x *Devm_Ports_Port_E1T1_ChannelSets_ChannelSet) GetNumber7() uint32 {
	if x != nil {
		return x.Number7
	}
	return 0
}

func (x *Devm_Ports_Port_E1T1_ChannelSets_ChannelSet) GetTimeslotList() string {
	if x != nil {
		return x.TimeslotList
	}
	return ""
}

type Devm_LogicPorts_LogicPort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position                string                               `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	SerialNumber            string                               `protobuf:"bytes,2,opt,name=serial_number,json=serial-number,proto3" json:"serial_number,omitempty"`
	PortType                Devm_LogicPorts_LogicPort_PortType   `protobuf:"varint,3,opt,name=port_type,json=port-type,proto3,enum=huawei_devm.Devm_LogicPorts_LogicPort_PortType" json:"port_type,omitempty"`
	Index                   uint32                               `protobuf:"varint,4,opt,name=index,proto3" json:"index,omitempty"`
	AdminState              Devm_LogicPorts_LogicPort_AdminState `protobuf:"varint,5,opt,name=admin_state,json=admin-state,proto3,enum=huawei_devm.Devm_LogicPorts_LogicPort_AdminState" json:"admin_state,omitempty"`
	HardType                Devm_LogicPorts_LogicPort_HardType   `protobuf:"varint,6,opt,name=hard_type,json=hard-type,proto3,enum=huawei_devm.Devm_LogicPorts_LogicPort_HardType" json:"hard_type,omitempty"`
	EnableTransmissionDelay uint32                               `protobuf:"varint,7,opt,name=enable_transmission_delay,json=enable-transmission-delay,proto3" json:"enable_transmission_delay,omitempty"`
	Level                   Devm_LogicPorts_LogicPort_Level      `protobuf:"varint,8,opt,name=level,proto3,enum=huawei_devm.Devm_LogicPorts_LogicPort_Level" json:"level,omitempty"`
}

func (x *Devm_LogicPorts_LogicPort) Reset() {
	*x = Devm_LogicPorts_LogicPort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[448]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_LogicPorts_LogicPort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_LogicPorts_LogicPort) ProtoMessage() {}

func (x *Devm_LogicPorts_LogicPort) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[448]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_LogicPorts_LogicPort.ProtoReflect.Descriptor instead.
func (*Devm_LogicPorts_LogicPort) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 11, 0}
}

func (x *Devm_LogicPorts_LogicPort) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *Devm_LogicPorts_LogicPort) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *Devm_LogicPorts_LogicPort) GetPortType() Devm_LogicPorts_LogicPort_PortType {
	if x != nil {
		return x.PortType
	}
	return Devm_LogicPorts_LogicPort_PortType_UNKNOWN
}

func (x *Devm_LogicPorts_LogicPort) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Devm_LogicPorts_LogicPort) GetAdminState() Devm_LogicPorts_LogicPort_AdminState {
	if x != nil {
		return x.AdminState
	}
	return Devm_LogicPorts_LogicPort_AdminState_INACTIVE
}

func (x *Devm_LogicPorts_LogicPort) GetHardType() Devm_LogicPorts_LogicPort_HardType {
	if x != nil {
		return x.HardType
	}
	return Devm_LogicPorts_LogicPort_HardType_UNKNOWN
}

func (x *Devm_LogicPorts_LogicPort) GetEnableTransmissionDelay() uint32 {
	if x != nil {
		return x.EnableTransmissionDelay
	}
	return 0
}

func (x *Devm_LogicPorts_LogicPort) GetLevel() Devm_LogicPorts_LogicPort_Level {
	if x != nil {
		return x.Level
	}
	return Devm_LogicPorts_LogicPort_INVALID_ENUM_VALUE_Level
}

type Devm_EntityClasses_EntityClass struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClassName        Devm_EntityClasses_EntityClass_ClassName `protobuf:"varint,1,opt,name=class_name,json=class-name,proto3,enum=huawei_devm.Devm_EntityClasses_EntityClass_ClassName" json:"class_name,omitempty"`
	IsResetable      bool                                     `protobuf:"varint,2,opt,name=is_resetable,json=is-resetable,proto3" json:"is_resetable,omitempty"`
	IsSwitchoverable bool                                     `protobuf:"varint,3,opt,name=is_switchoverable,json=is-switchoverable,proto3" json:"is_switchoverable,omitempty"`
}

func (x *Devm_EntityClasses_EntityClass) Reset() {
	*x = Devm_EntityClasses_EntityClass{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[449]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_EntityClasses_EntityClass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_EntityClasses_EntityClass) ProtoMessage() {}

func (x *Devm_EntityClasses_EntityClass) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[449]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_EntityClasses_EntityClass.ProtoReflect.Descriptor instead.
func (*Devm_EntityClasses_EntityClass) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 12, 0}
}

func (x *Devm_EntityClasses_EntityClass) GetClassName() Devm_EntityClasses_EntityClass_ClassName {
	if x != nil {
		return x.ClassName
	}
	return Devm_EntityClasses_EntityClass_ClassName_OTHER
}

func (x *Devm_EntityClasses_EntityClass) GetIsResetable() bool {
	if x != nil {
		return x.IsResetable
	}
	return false
}

func (x *Devm_EntityClasses_EntityClass) GetIsSwitchoverable() bool {
	if x != nil {
		return x.IsSwitchoverable
	}
	return false
}

type Devm_InconsistentEntitys_InconsistentEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Class        Devm_InconsistentEntitys_InconsistentEntity_Class        `protobuf:"varint,1,opt,name=class,proto3,enum=huawei_devm.Devm_InconsistentEntitys_InconsistentEntity_Class" json:"class,omitempty"`
	Position     string                                                   `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`
	SerialNumber string                                                   `protobuf:"bytes,3,opt,name=serial_number,json=serial-number,proto3" json:"serial_number,omitempty"`
	LogicalType  Devm_InconsistentEntitys_InconsistentEntity_LogicalType  `protobuf:"varint,4,opt,name=logical_type,json=logical-type,proto3,enum=huawei_devm.Devm_InconsistentEntitys_InconsistentEntity_LogicalType" json:"logical_type,omitempty"`
	PhysicalType Devm_InconsistentEntitys_InconsistentEntity_PhysicalType `protobuf:"varint,5,opt,name=physical_type,json=physical-type,proto3,enum=huawei_devm.Devm_InconsistentEntitys_InconsistentEntity_PhysicalType" json:"physical_type,omitempty"`
	OperState    Devm_InconsistentEntitys_InconsistentEntity_OperState    `protobuf:"varint,6,opt,name=oper_state,json=oper-state,proto3,enum=huawei_devm.Devm_InconsistentEntitys_InconsistentEntity_OperState" json:"oper_state,omitempty"`
}

func (x *Devm_InconsistentEntitys_InconsistentEntity) Reset() {
	*x = Devm_InconsistentEntitys_InconsistentEntity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[450]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_InconsistentEntitys_InconsistentEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_InconsistentEntitys_InconsistentEntity) ProtoMessage() {}

func (x *Devm_InconsistentEntitys_InconsistentEntity) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[450]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_InconsistentEntitys_InconsistentEntity.ProtoReflect.Descriptor instead.
func (*Devm_InconsistentEntitys_InconsistentEntity) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 13, 0}
}

func (x *Devm_InconsistentEntitys_InconsistentEntity) GetClass() Devm_InconsistentEntitys_InconsistentEntity_Class {
	if x != nil {
		return x.Class
	}
	return Devm_InconsistentEntitys_InconsistentEntity_Class_OTHER
}

func (x *Devm_InconsistentEntitys_InconsistentEntity) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *Devm_InconsistentEntitys_InconsistentEntity) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *Devm_InconsistentEntitys_InconsistentEntity) GetLogicalType() Devm_InconsistentEntitys_InconsistentEntity_LogicalType {
	if x != nil {
		return x.LogicalType
	}
	return Devm_InconsistentEntitys_InconsistentEntity_LogicalType_UNKNOWN
}

func (x *Devm_InconsistentEntitys_InconsistentEntity) GetPhysicalType() Devm_InconsistentEntitys_InconsistentEntity_PhysicalType {
	if x != nil {
		return x.PhysicalType
	}
	return Devm_InconsistentEntitys_InconsistentEntity_PhysicalType_UNKNOWN
}

func (x *Devm_InconsistentEntitys_InconsistentEntity) GetOperState() Devm_InconsistentEntitys_InconsistentEntity_OperState {
	if x != nil {
		return x.OperState
	}
	return Devm_InconsistentEntitys_InconsistentEntity_OperState_UNKNOWN
}

type Devm_OfflineCfgs_Offline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Class    Devm_OfflineCfgs_Offline_Class `protobuf:"varint,1,opt,name=class,proto3,enum=huawei_devm.Devm_OfflineCfgs_Offline_Class" json:"class,omitempty"`
	Position string                         `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *Devm_OfflineCfgs_Offline) Reset() {
	*x = Devm_OfflineCfgs_Offline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[451]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_OfflineCfgs_Offline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_OfflineCfgs_Offline) ProtoMessage() {}

func (x *Devm_OfflineCfgs_Offline) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[451]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_OfflineCfgs_Offline.ProtoReflect.Descriptor instead.
func (*Devm_OfflineCfgs_Offline) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 14, 0}
}

func (x *Devm_OfflineCfgs_Offline) GetClass() Devm_OfflineCfgs_Offline_Class {
	if x != nil {
		return x.Class
	}
	return Devm_OfflineCfgs_Offline_INVALID_ENUM_VALUE_Class
}

func (x *Devm_OfflineCfgs_Offline) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

type Devm_Offlines_Offline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Class    Devm_Offlines_Offline_Class `protobuf:"varint,1,opt,name=class,proto3,enum=huawei_devm.Devm_Offlines_Offline_Class" json:"class,omitempty"`
	Position string                      `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *Devm_Offlines_Offline) Reset() {
	*x = Devm_Offlines_Offline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[452]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Offlines_Offline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Offlines_Offline) ProtoMessage() {}

func (x *Devm_Offlines_Offline) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[452]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Offlines_Offline.ProtoReflect.Descriptor instead.
func (*Devm_Offlines_Offline) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 16, 0}
}

func (x *Devm_Offlines_Offline) GetClass() Devm_Offlines_Offline_Class {
	if x != nil {
		return x.Class
	}
	return Devm_Offlines_Offline_INVALID_ENUM_VALUE_Class
}

func (x *Devm_Offlines_Offline) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

type Devm_Clockboards_Clockboard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position  string                                `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	EntIndex  uint32                                `protobuf:"varint,2,opt,name=ent_index,json=ent-index,proto3" json:"ent_index,omitempty"`
	BoardType Devm_Clockboards_Clockboard_BoardType `protobuf:"varint,3,opt,name=board_type,json=board-type,proto3,enum=huawei_devm.Devm_Clockboards_Clockboard_BoardType" json:"board_type,omitempty"`
	UpTime    uint32                                `protobuf:"varint,4,opt,name=up_time,json=up-time,proto3" json:"up_time,omitempty"`
	SramState Devm_Clockboards_Clockboard_SramState `protobuf:"varint,5,opt,name=sram_state,json=sram-state,proto3,enum=huawei_devm.Devm_Clockboards_Clockboard_SramState" json:"sram_state,omitempty"`
}

func (x *Devm_Clockboards_Clockboard) Reset() {
	*x = Devm_Clockboards_Clockboard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[453]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Clockboards_Clockboard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Clockboards_Clockboard) ProtoMessage() {}

func (x *Devm_Clockboards_Clockboard) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[453]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Clockboards_Clockboard.ProtoReflect.Descriptor instead.
func (*Devm_Clockboards_Clockboard) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 17, 0}
}

func (x *Devm_Clockboards_Clockboard) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *Devm_Clockboards_Clockboard) GetEntIndex() uint32 {
	if x != nil {
		return x.EntIndex
	}
	return 0
}

func (x *Devm_Clockboards_Clockboard) GetBoardType() Devm_Clockboards_Clockboard_BoardType {
	if x != nil {
		return x.BoardType
	}
	return Devm_Clockboards_Clockboard_BoardType_UNKNOW
}

func (x *Devm_Clockboards_Clockboard) GetUpTime() uint32 {
	if x != nil {
		return x.UpTime
	}
	return 0
}

func (x *Devm_Clockboards_Clockboard) GetSramState() Devm_Clockboards_Clockboard_SramState {
	if x != nil {
		return x.SramState
	}
	return Devm_Clockboards_Clockboard_SramState_ABNORMAL
}

type Devm_Driver_Cmus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmu []*Devm_Driver_Cmus_Cmu `protobuf:"bytes,1,rep,name=cmu,proto3" json:"cmu,omitempty"`
}

func (x *Devm_Driver_Cmus) Reset() {
	*x = Devm_Driver_Cmus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[454]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Driver_Cmus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Driver_Cmus) ProtoMessage() {}

func (x *Devm_Driver_Cmus) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[454]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Driver_Cmus.ProtoReflect.Descriptor instead.
func (*Devm_Driver_Cmus) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 18, 0}
}

func (x *Devm_Driver_Cmus) GetCmu() []*Devm_Driver_Cmus_Cmu {
	if x != nil {
		return x.Cmu
	}
	return nil
}

type Devm_Driver_Pms struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pm []*Devm_Driver_Pms_Pm `protobuf:"bytes,1,rep,name=pm,proto3" json:"pm,omitempty"`
}

func (x *Devm_Driver_Pms) Reset() {
	*x = Devm_Driver_Pms{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[455]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Driver_Pms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Driver_Pms) ProtoMessage() {}

func (x *Devm_Driver_Pms) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[455]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Driver_Pms.ProtoReflect.Descriptor instead.
func (*Devm_Driver_Pms) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 18, 1}
}

func (x *Devm_Driver_Pms) GetPm() []*Devm_Driver_Pms_Pm {
	if x != nil {
		return x.Pm
	}
	return nil
}

type Devm_Driver_Ccus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ccu *Devm_Driver_Ccus_Ccu `protobuf:"bytes,1,opt,name=ccu,proto3" json:"ccu,omitempty"`
}

func (x *Devm_Driver_Ccus) Reset() {
	*x = Devm_Driver_Ccus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[456]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Driver_Ccus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Driver_Ccus) ProtoMessage() {}

func (x *Devm_Driver_Ccus) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[456]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Driver_Ccus.ProtoReflect.Descriptor instead.
func (*Devm_Driver_Ccus) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 18, 2}
}

func (x *Devm_Driver_Ccus) GetCcu() *Devm_Driver_Ccus_Ccu {
	if x != nil {
		return x.Ccu
	}
	return nil
}

type Devm_Driver_Dacss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dacs []*Devm_Driver_Dacss_Dacs `protobuf:"bytes,1,rep,name=dacs,proto3" json:"dacs,omitempty"`
}

func (x *Devm_Driver_Dacss) Reset() {
	*x = Devm_Driver_Dacss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[457]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Driver_Dacss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Driver_Dacss) ProtoMessage() {}

func (x *Devm_Driver_Dacss) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[457]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Driver_Dacss.ProtoReflect.Descriptor instead.
func (*Devm_Driver_Dacss) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 18, 3}
}

func (x *Devm_Driver_Dacss) GetDacs() []*Devm_Driver_Dacss_Dacs {
	if x != nil {
		return x.Dacs
	}
	return nil
}

type Devm_Driver_Fans struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fan []*Devm_Driver_Fans_Fan `protobuf:"bytes,1,rep,name=fan,proto3" json:"fan,omitempty"`
}

func (x *Devm_Driver_Fans) Reset() {
	*x = Devm_Driver_Fans{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[458]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Driver_Fans) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Driver_Fans) ProtoMessage() {}

func (x *Devm_Driver_Fans) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[458]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Driver_Fans.ProtoReflect.Descriptor instead.
func (*Devm_Driver_Fans) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 18, 4}
}

func (x *Devm_Driver_Fans) GetFan() []*Devm_Driver_Fans_Fan {
	if x != nil {
		return x.Fan
	}
	return nil
}

type Devm_Driver_Icus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Icu []*Devm_Driver_Icus_Icu `protobuf:"bytes,1,rep,name=icu,proto3" json:"icu,omitempty"`
}

func (x *Devm_Driver_Icus) Reset() {
	*x = Devm_Driver_Icus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[459]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Driver_Icus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Driver_Icus) ProtoMessage() {}

func (x *Devm_Driver_Icus) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[459]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Driver_Icus.ProtoReflect.Descriptor instead.
func (*Devm_Driver_Icus) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 18, 5}
}

func (x *Devm_Driver_Icus) GetIcu() []*Devm_Driver_Icus_Icu {
	if x != nil {
		return x.Icu
	}
	return nil
}

type Devm_Driver_Pmus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pmu []*Devm_Driver_Pmus_Pmu `protobuf:"bytes,1,rep,name=pmu,proto3" json:"pmu,omitempty"`
}

func (x *Devm_Driver_Pmus) Reset() {
	*x = Devm_Driver_Pmus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[460]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Driver_Pmus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Driver_Pmus) ProtoMessage() {}

func (x *Devm_Driver_Pmus) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[460]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Driver_Pmus.ProtoReflect.Descriptor instead.
func (*Devm_Driver_Pmus) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 18, 6}
}

func (x *Devm_Driver_Pmus) GetPmu() []*Devm_Driver_Pmus_Pmu {
	if x != nil {
		return x.Pmu
	}
	return nil
}

type Devm_Driver_PowerSupplys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PowerSupply []*Devm_Driver_PowerSupplys_PowerSupply `protobuf:"bytes,1,rep,name=power_supply,json=power-supply,proto3" json:"power_supply,omitempty"`
}

func (x *Devm_Driver_PowerSupplys) Reset() {
	*x = Devm_Driver_PowerSupplys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[461]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Driver_PowerSupplys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Driver_PowerSupplys) ProtoMessage() {}

func (x *Devm_Driver_PowerSupplys) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[461]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Driver_PowerSupplys.ProtoReflect.Descriptor instead.
func (*Devm_Driver_PowerSupplys) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 18, 7}
}

func (x *Devm_Driver_PowerSupplys) GetPowerSupply() []*Devm_Driver_PowerSupplys_PowerSupply {
	if x != nil {
		return x.PowerSupply
	}
	return nil
}

type Devm_Driver_Dmus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dmu []*Devm_Driver_Dmus_Dmu `protobuf:"bytes,1,rep,name=dmu,proto3" json:"dmu,omitempty"`
}

func (x *Devm_Driver_Dmus) Reset() {
	*x = Devm_Driver_Dmus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[462]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Driver_Dmus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Driver_Dmus) ProtoMessage() {}

func (x *Devm_Driver_Dmus) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[462]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Driver_Dmus.ProtoReflect.Descriptor instead.
func (*Devm_Driver_Dmus) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 18, 8}
}

func (x *Devm_Driver_Dmus) GetDmu() []*Devm_Driver_Dmus_Dmu {
	if x != nil {
		return x.Dmu
	}
	return nil
}

type Devm_Driver_Pdus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pdu []*Devm_Driver_Pdus_Pdu `protobuf:"bytes,1,rep,name=pdu,proto3" json:"pdu,omitempty"`
}

func (x *Devm_Driver_Pdus) Reset() {
	*x = Devm_Driver_Pdus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[463]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Driver_Pdus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Driver_Pdus) ProtoMessage() {}

func (x *Devm_Driver_Pdus) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[463]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Driver_Pdus.ProtoReflect.Descriptor instead.
func (*Devm_Driver_Pdus) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 18, 9}
}

func (x *Devm_Driver_Pdus) GetPdu() []*Devm_Driver_Pdus_Pdu {
	if x != nil {
		return x.Pdu
	}
	return nil
}

type Devm_Driver_Vsus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vsu []*Devm_Driver_Vsus_Vsu `protobuf:"bytes,1,rep,name=vsu,proto3" json:"vsu,omitempty"`
}

func (x *Devm_Driver_Vsus) Reset() {
	*x = Devm_Driver_Vsus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[464]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Driver_Vsus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Driver_Vsus) ProtoMessage() {}

func (x *Devm_Driver_Vsus) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[464]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Driver_Vsus.ProtoReflect.Descriptor instead.
func (*Devm_Driver_Vsus) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 18, 10}
}

func (x *Devm_Driver_Vsus) GetVsu() []*Devm_Driver_Vsus_Vsu {
	if x != nil {
		return x.Vsu
	}
	return nil
}

type Devm_Driver_Ecus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ecu []*Devm_Driver_Ecus_Ecu `protobuf:"bytes,1,rep,name=ecu,proto3" json:"ecu,omitempty"`
}

func (x *Devm_Driver_Ecus) Reset() {
	*x = Devm_Driver_Ecus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[465]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Driver_Ecus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Driver_Ecus) ProtoMessage() {}

func (x *Devm_Driver_Ecus) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[465]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Driver_Ecus.ProtoReflect.Descriptor instead.
func (*Devm_Driver_Ecus) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 18, 11}
}

func (x *Devm_Driver_Ecus) GetEcu() []*Devm_Driver_Ecus_Ecu {
	if x != nil {
		return x.Ecu
	}
	return nil
}

type Devm_Driver_Lcds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lcd []*Devm_Driver_Lcds_Lcd `protobuf:"bytes,1,rep,name=lcd,proto3" json:"lcd,omitempty"`
}

func (x *Devm_Driver_Lcds) Reset() {
	*x = Devm_Driver_Lcds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[466]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Driver_Lcds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Driver_Lcds) ProtoMessage() {}

func (x *Devm_Driver_Lcds) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[466]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Driver_Lcds.ProtoReflect.Descriptor instead.
func (*Devm_Driver_Lcds) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 18, 12}
}

func (x *Devm_Driver_Lcds) GetLcd() []*Devm_Driver_Lcds_Lcd {
	if x != nil {
		return x.Lcd
	}
	return nil
}

type Devm_Driver_Disks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Disk []*Devm_Driver_Disks_Disk `protobuf:"bytes,1,rep,name=disk,proto3" json:"disk,omitempty"`
}

func (x *Devm_Driver_Disks) Reset() {
	*x = Devm_Driver_Disks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[467]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Driver_Disks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Driver_Disks) ProtoMessage() {}

func (x *Devm_Driver_Disks) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[467]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Driver_Disks.ProtoReflect.Descriptor instead.
func (*Devm_Driver_Disks) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 18, 13}
}

func (x *Devm_Driver_Disks) GetDisk() []*Devm_Driver_Disks_Disk {
	if x != nil {
		return x.Disk
	}
	return nil
}

type Devm_Driver_Cmus_Cmu struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position    string                            `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	EntityIndex uint32                            `protobuf:"varint,2,opt,name=entity_index,json=entity-index,proto3" json:"entity_index,omitempty"`
	BoardType   string                            `protobuf:"bytes,3,opt,name=board_type,json=board-type,proto3" json:"board_type,omitempty"`
	SdramSize   uint32                            `protobuf:"varint,4,opt,name=sdram_size,json=sdram-size,proto3" json:"sdram_size,omitempty"`
	FlashSize   uint32                            `protobuf:"varint,5,opt,name=flash_size,json=flash-size,proto3" json:"flash_size,omitempty"`
	UpTime      uint32                            `protobuf:"varint,6,opt,name=up_time,json=up-time,proto3" json:"up_time,omitempty"`
	Role        Devm_Driver_Cmus_Cmu_Role         `protobuf:"varint,7,opt,name=role,proto3,enum=huawei_devm.Devm_Driver_Cmus_Cmu_Role" json:"role,omitempty"`
	CmuSwitchs  *Devm_Driver_Cmus_Cmu_CmuSwitchs  `protobuf:"bytes,8,opt,name=cmu_switchs,json=cmu-switchs,proto3" json:"cmu_switchs,omitempty"`
	CmuRelays   *Devm_Driver_Cmus_Cmu_CmuRelays   `protobuf:"bytes,9,opt,name=cmu_relays,json=cmu-relays,proto3" json:"cmu_relays,omitempty"`
	CmuAnalogs  *Devm_Driver_Cmus_Cmu_CmuAnalogs  `protobuf:"bytes,10,opt,name=cmu_analogs,json=cmu-analogs,proto3" json:"cmu_analogs,omitempty"`
	CmuAlarms   *Devm_Driver_Cmus_Cmu_CmuAlarms   `protobuf:"bytes,11,opt,name=cmu_alarms,json=cmu-alarms,proto3" json:"cmu_alarms,omitempty"`
	Switchs     *Devm_Driver_Cmus_Cmu_Switchs     `protobuf:"bytes,12,opt,name=switchs,proto3" json:"switchs,omitempty"`
	Relays      *Devm_Driver_Cmus_Cmu_Relays      `protobuf:"bytes,13,opt,name=relays,proto3" json:"relays,omitempty"`
	Analogs     *Devm_Driver_Cmus_Cmu_Analogs     `protobuf:"bytes,14,opt,name=analogs,proto3" json:"analogs,omitempty"`
	AlarmOutput *Devm_Driver_Cmus_Cmu_AlarmOutput `protobuf:"bytes,15,opt,name=alarm_output,json=alarm-output,proto3" json:"alarm_output,omitempty"`
}

func (x *Devm_Driver_Cmus_Cmu) Reset() {
	*x = Devm_Driver_Cmus_Cmu{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[468]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Driver_Cmus_Cmu) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Driver_Cmus_Cmu) ProtoMessage() {}

func (x *Devm_Driver_Cmus_Cmu) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[468]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Driver_Cmus_Cmu.ProtoReflect.Descriptor instead.
func (*Devm_Driver_Cmus_Cmu) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 18, 0, 0}
}

func (x *Devm_Driver_Cmus_Cmu) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *Devm_Driver_Cmus_Cmu) GetEntityIndex() uint32 {
	if x != nil {
		return x.EntityIndex
	}
	return 0
}

func (x *Devm_Driver_Cmus_Cmu) GetBoardType() string {
	if x != nil {
		return x.BoardType
	}
	return ""
}

func (x *Devm_Driver_Cmus_Cmu) GetSdramSize() uint32 {
	if x != nil {
		return x.SdramSize
	}
	return 0
}

func (x *Devm_Driver_Cmus_Cmu) GetFlashSize() uint32 {
	if x != nil {
		return x.FlashSize
	}
	return 0
}

func (x *Devm_Driver_Cmus_Cmu) GetUpTime() uint32 {
	if x != nil {
		return x.UpTime
	}
	return 0
}

func (x *Devm_Driver_Cmus_Cmu) GetRole() Devm_Driver_Cmus_Cmu_Role {
	if x != nil {
		return x.Role
	}
	return Devm_Driver_Cmus_Cmu_Role_MASTER
}

func (x *Devm_Driver_Cmus_Cmu) GetCmuSwitchs() *Devm_Driver_Cmus_Cmu_CmuSwitchs {
	if x != nil {
		return x.CmuSwitchs
	}
	return nil
}

func (x *Devm_Driver_Cmus_Cmu) GetCmuRelays() *Devm_Driver_Cmus_Cmu_CmuRelays {
	if x != nil {
		return x.CmuRelays
	}
	return nil
}

func (x *Devm_Driver_Cmus_Cmu) GetCmuAnalogs() *Devm_Driver_Cmus_Cmu_CmuAnalogs {
	if x != nil {
		return x.CmuAnalogs
	}
	return nil
}

func (x *Devm_Driver_Cmus_Cmu) GetCmuAlarms() *Devm_Driver_Cmus_Cmu_CmuAlarms {
	if x != nil {
		return x.CmuAlarms
	}
	return nil
}

func (x *Devm_Driver_Cmus_Cmu) GetSwitchs() *Devm_Driver_Cmus_Cmu_Switchs {
	if x != nil {
		return x.Switchs
	}
	return nil
}

func (x *Devm_Driver_Cmus_Cmu) GetRelays() *Devm_Driver_Cmus_Cmu_Relays {
	if x != nil {
		return x.Relays
	}
	return nil
}

func (x *Devm_Driver_Cmus_Cmu) GetAnalogs() *Devm_Driver_Cmus_Cmu_Analogs {
	if x != nil {
		return x.Analogs
	}
	return nil
}

func (x *Devm_Driver_Cmus_Cmu) GetAlarmOutput() *Devm_Driver_Cmus_Cmu_AlarmOutput {
	if x != nil {
		return x.AlarmOutput
	}
	return nil
}

type Devm_Driver_Cmus_Cmu_CmuSwitchs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CmuSwitch []*Devm_Driver_Cmus_Cmu_CmuSwitchs_CmuSwitch `protobuf:"bytes,1,rep,name=cmu_switch,json=cmu-switch,proto3" json:"cmu_switch,omitempty"`
}

func (x *Devm_Driver_Cmus_Cmu_CmuSwitchs) Reset() {
	*x = Devm_Driver_Cmus_Cmu_CmuSwitchs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[469]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Driver_Cmus_Cmu_CmuSwitchs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Driver_Cmus_Cmu_CmuSwitchs) ProtoMessage() {}

func (x *Devm_Driver_Cmus_Cmu_CmuSwitchs) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[469]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Driver_Cmus_Cmu_CmuSwitchs.ProtoReflect.Descriptor instead.
func (*Devm_Driver_Cmus_Cmu_CmuSwitchs) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 18, 0, 0, 0}
}

func (x *Devm_Driver_Cmus_Cmu_CmuSwitchs) GetCmuSwitch() []*Devm_Driver_Cmus_Cmu_CmuSwitchs_CmuSwitch {
	if x != nil {
		return x.CmuSwitch
	}
	return nil
}

type Devm_Driver_Cmus_Cmu_CmuRelays struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CmuRelay []*Devm_Driver_Cmus_Cmu_CmuRelays_CmuRelay `protobuf:"bytes,1,rep,name=cmu_relay,json=cmu-relay,proto3" json:"cmu_relay,omitempty"`
}

func (x *Devm_Driver_Cmus_Cmu_CmuRelays) Reset() {
	*x = Devm_Driver_Cmus_Cmu_CmuRelays{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[470]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Driver_Cmus_Cmu_CmuRelays) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Driver_Cmus_Cmu_CmuRelays) ProtoMessage() {}

func (x *Devm_Driver_Cmus_Cmu_CmuRelays) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[470]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Driver_Cmus_Cmu_CmuRelays.ProtoReflect.Descriptor instead.
func (*Devm_Driver_Cmus_Cmu_CmuRelays) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 18, 0, 0, 1}
}

func (x *Devm_Driver_Cmus_Cmu_CmuRelays) GetCmuRelay() []*Devm_Driver_Cmus_Cmu_CmuRelays_CmuRelay {
	if x != nil {
		return x.CmuRelay
	}
	return nil
}

type Devm_Driver_Cmus_Cmu_CmuAnalogs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CmuAnalog []*Devm_Driver_Cmus_Cmu_CmuAnalogs_CmuAnalog `protobuf:"bytes,1,rep,name=cmu_analog,json=cmu-analog,proto3" json:"cmu_analog,omitempty"`
}

func (x *Devm_Driver_Cmus_Cmu_CmuAnalogs) Reset() {
	*x = Devm_Driver_Cmus_Cmu_CmuAnalogs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[471]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Driver_Cmus_Cmu_CmuAnalogs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Driver_Cmus_Cmu_CmuAnalogs) ProtoMessage() {}

func (x *Devm_Driver_Cmus_Cmu_CmuAnalogs) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[471]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Driver_Cmus_Cmu_CmuAnalogs.ProtoReflect.Descriptor instead.
func (*Devm_Driver_Cmus_Cmu_CmuAnalogs) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 18, 0, 0, 2}
}

func (x *Devm_Driver_Cmus_Cmu_CmuAnalogs) GetCmuAnalog() []*Devm_Driver_Cmus_Cmu_CmuAnalogs_CmuAnalog {
	if x != nil {
		return x.CmuAnalog
	}
	return nil
}

type Devm_Driver_Cmus_Cmu_CmuAlarms struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CmuAlarm []*Devm_Driver_Cmus_Cmu_CmuAlarms_CmuAlarm `protobuf:"bytes,1,rep,name=cmu_alarm,json=cmu-alarm,proto3" json:"cmu_alarm,omitempty"`
}

func (x *Devm_Driver_Cmus_Cmu_CmuAlarms) Reset() {
	*x = Devm_Driver_Cmus_Cmu_CmuAlarms{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[472]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Driver_Cmus_Cmu_CmuAlarms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Driver_Cmus_Cmu_CmuAlarms) ProtoMessage() {}

func (x *Devm_Driver_Cmus_Cmu_CmuAlarms) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[472]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Driver_Cmus_Cmu_CmuAlarms.ProtoReflect.Descriptor instead.
func (*Devm_Driver_Cmus_Cmu_CmuAlarms) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 18, 0, 0, 3}
}

func (x *Devm_Driver_Cmus_Cmu_CmuAlarms) GetCmuAlarm() []*Devm_Driver_Cmus_Cmu_CmuAlarms_CmuAlarm {
	if x != nil {
		return x.CmuAlarm
	}
	return nil
}

type Devm_Driver_Cmus_Cmu_Switchs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Switch []*Devm_Driver_Cmus_Cmu_Switchs_Switch `protobuf:"bytes,1,rep,name=switch,proto3" json:"switch,omitempty"`
}

func (x *Devm_Driver_Cmus_Cmu_Switchs) Reset() {
	*x = Devm_Driver_Cmus_Cmu_Switchs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[473]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Driver_Cmus_Cmu_Switchs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Driver_Cmus_Cmu_Switchs) ProtoMessage() {}

func (x *Devm_Driver_Cmus_Cmu_Switchs) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[473]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Driver_Cmus_Cmu_Switchs.ProtoReflect.Descriptor instead.
func (*Devm_Driver_Cmus_Cmu_Switchs) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 18, 0, 0, 4}
}

func (x *Devm_Driver_Cmus_Cmu_Switchs) GetSwitch() []*Devm_Driver_Cmus_Cmu_Switchs_Switch {
	if x != nil {
		return x.Switch
	}
	return nil
}

type Devm_Driver_Cmus_Cmu_Relays struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Relay []*Devm_Driver_Cmus_Cmu_Relays_Relay `protobuf:"bytes,1,rep,name=relay,proto3" json:"relay,omitempty"`
}

func (x *Devm_Driver_Cmus_Cmu_Relays) Reset() {
	*x = Devm_Driver_Cmus_Cmu_Relays{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[474]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Driver_Cmus_Cmu_Relays) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Driver_Cmus_Cmu_Relays) ProtoMessage() {}

func (x *Devm_Driver_Cmus_Cmu_Relays) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[474]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Driver_Cmus_Cmu_Relays.ProtoReflect.Descriptor instead.
func (*Devm_Driver_Cmus_Cmu_Relays) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 18, 0, 0, 5}
}

func (x *Devm_Driver_Cmus_Cmu_Relays) GetRelay() []*Devm_Driver_Cmus_Cmu_Relays_Relay {
	if x != nil {
		return x.Relay
	}
	return nil
}

type Devm_Driver_Cmus_Cmu_Analogs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Analog []*Devm_Driver_Cmus_Cmu_Analogs_Analog `protobuf:"bytes,1,rep,name=analog,proto3" json:"analog,omitempty"`
}

func (x *Devm_Driver_Cmus_Cmu_Analogs) Reset() {
	*x = Devm_Driver_Cmus_Cmu_Analogs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[475]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Driver_Cmus_Cmu_Analogs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Driver_Cmus_Cmu_Analogs) ProtoMessage() {}

func (x *Devm_Driver_Cmus_Cmu_Analogs) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[475]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Driver_Cmus_Cmu_Analogs.ProtoReflect.Descriptor instead.
func (*Devm_Driver_Cmus_Cmu_Analogs) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 18, 0, 0, 6}
}

func (x *Devm_Driver_Cmus_Cmu_Analogs) GetAnalog() []*Devm_Driver_Cmus_Cmu_Analogs_Analog {
	if x != nil {
		return x.Analog
	}
	return nil
}

type Devm_Driver_Cmus_Cmu_AlarmOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MajorRelayOutputEnable bool `protobuf:"varint,1,opt,name=major_relay_output_enable,json=major-relay-output-enable,proto3" json:"major_relay_output_enable,omitempty"`
	MinorRelayOutputEnable bool `protobuf:"varint,2,opt,name=minor_relay_output_enable,json=minor-relay-output-enable,proto3" json:"minor_relay_output_enable,omitempty"`
}

func (x *Devm_Driver_Cmus_Cmu_AlarmOutput) Reset() {
	*x = Devm_Driver_Cmus_Cmu_AlarmOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[476]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Driver_Cmus_Cmu_AlarmOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Driver_Cmus_Cmu_AlarmOutput) ProtoMessage() {}

func (x *Devm_Driver_Cmus_Cmu_AlarmOutput) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[476]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Driver_Cmus_Cmu_AlarmOutput.ProtoReflect.Descriptor instead.
func (*Devm_Driver_Cmus_Cmu_AlarmOutput) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 18, 0, 0, 7}
}

func (x *Devm_Driver_Cmus_Cmu_AlarmOutput) GetMajorRelayOutputEnable() bool {
	if x != nil {
		return x.MajorRelayOutputEnable
	}
	return false
}

func (x *Devm_Driver_Cmus_Cmu_AlarmOutput) GetMinorRelayOutputEnable() bool {
	if x != nil {
		return x.MinorRelayOutputEnable
	}
	return false
}

type Devm_Driver_Cmus_Cmu_CmuSwitchs_CmuSwitch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SwitchId   uint32                                              `protobuf:"varint,1,opt,name=switch_id,json=switch-id,proto3" json:"switch_id,omitempty"`
	SwitchName string                                              `protobuf:"bytes,2,opt,name=switch_name,json=switch-name,proto3" json:"switch_name,omitempty"`
	AlarmMode  Devm_Driver_Cmus_Cmu_CmuSwitchs_CmuSwitch_AlarmMode `protobuf:"varint,3,opt,name=alarm_mode,json=alarm-mode,proto3,enum=huawei_devm.Devm_Driver_Cmus_Cmu_CmuSwitchs_CmuSwitch_AlarmMode" json:"alarm_mode,omitempty"`
	SwitchFog  Devm_Driver_Cmus_Cmu_CmuSwitchs_CmuSwitch_SwitchFog `protobuf:"varint,4,opt,name=switch_fog,json=switch-fog,proto3,enum=huawei_devm.Devm_Driver_Cmus_Cmu_CmuSwitchs_CmuSwitch_SwitchFog" json:"switch_fog,omitempty"`
}

func (x *Devm_Driver_Cmus_Cmu_CmuSwitchs_CmuSwitch) Reset() {
	*x = Devm_Driver_Cmus_Cmu_CmuSwitchs_CmuSwitch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[477]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Driver_Cmus_Cmu_CmuSwitchs_CmuSwitch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Driver_Cmus_Cmu_CmuSwitchs_CmuSwitch) ProtoMessage() {}

func (x *Devm_Driver_Cmus_Cmu_CmuSwitchs_CmuSwitch) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[477]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Driver_Cmus_Cmu_CmuSwitchs_CmuSwitch.ProtoReflect.Descriptor instead.
func (*Devm_Driver_Cmus_Cmu_CmuSwitchs_CmuSwitch) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 18, 0, 0, 0, 0}
}

func (x *Devm_Driver_Cmus_Cmu_CmuSwitchs_CmuSwitch) GetSwitchId() uint32 {
	if x != nil {
		return x.SwitchId
	}
	return 0
}

func (x *Devm_Driver_Cmus_Cmu_CmuSwitchs_CmuSwitch) GetSwitchName() string {
	if x != nil {
		return x.SwitchName
	}
	return ""
}

func (x *Devm_Driver_Cmus_Cmu_CmuSwitchs_CmuSwitch) GetAlarmMode() Devm_Driver_Cmus_Cmu_CmuSwitchs_CmuSwitch_AlarmMode {
	if x != nil {
		return x.AlarmMode
	}
	return Devm_Driver_Cmus_Cmu_CmuSwitchs_CmuSwitch_AlarmMode_OPEN
}

func (x *Devm_Driver_Cmus_Cmu_CmuSwitchs_CmuSwitch) GetSwitchFog() Devm_Driver_Cmus_Cmu_CmuSwitchs_CmuSwitch_SwitchFog {
	if x != nil {
		return x.SwitchFog
	}
	return Devm_Driver_Cmus_Cmu_CmuSwitchs_CmuSwitch_SwitchFog_UNKNOWN
}

type Devm_Driver_Cmus_Cmu_CmuRelays_CmuRelay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelayId        uint32                                                 `protobuf:"varint,1,opt,name=relay_id,json=relay-id,proto3" json:"relay_id,omitempty"`
	RelayName      string                                                 `protobuf:"bytes,2,opt,name=relay_name,json=relay-name,proto3" json:"relay_name,omitempty"`
	RelayAlarmMode Devm_Driver_Cmus_Cmu_CmuRelays_CmuRelay_RelayAlarmMode `protobuf:"varint,3,opt,name=relay_alarm_mode,json=relay-alarm-mode,proto3,enum=huawei_devm.Devm_Driver_Cmus_Cmu_CmuRelays_CmuRelay_RelayAlarmMode" json:"relay_alarm_mode,omitempty"`
}

func (x *Devm_Driver_Cmus_Cmu_CmuRelays_CmuRelay) Reset() {
	*x = Devm_Driver_Cmus_Cmu_CmuRelays_CmuRelay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[478]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Driver_Cmus_Cmu_CmuRelays_CmuRelay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Driver_Cmus_Cmu_CmuRelays_CmuRelay) ProtoMessage() {}

func (x *Devm_Driver_Cmus_Cmu_CmuRelays_CmuRelay) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[478]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Driver_Cmus_Cmu_CmuRelays_CmuRelay.ProtoReflect.Descriptor instead.
func (*Devm_Driver_Cmus_Cmu_CmuRelays_CmuRelay) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 18, 0, 0, 1, 0}
}

func (x *Devm_Driver_Cmus_Cmu_CmuRelays_CmuRelay) GetRelayId() uint32 {
	if x != nil {
		return x.RelayId
	}
	return 0
}

func (x *Devm_Driver_Cmus_Cmu_CmuRelays_CmuRelay) GetRelayName() string {
	if x != nil {
		return x.RelayName
	}
	return ""
}

func (x *Devm_Driver_Cmus_Cmu_CmuRelays_CmuRelay) GetRelayAlarmMode() Devm_Driver_Cmus_Cmu_CmuRelays_CmuRelay_RelayAlarmMode {
	if x != nil {
		return x.RelayAlarmMode
	}
	return Devm_Driver_Cmus_Cmu_CmuRelays_CmuRelay_RelayAlarmMode_OPEN
}

type Devm_Driver_Cmus_Cmu_CmuAnalogs_CmuAnalog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnalogId     uint32                                                 `protobuf:"varint,1,opt,name=analog_id,json=analog-id,proto3" json:"analog_id,omitempty"`
	AnalogName   string                                                 `protobuf:"bytes,2,opt,name=analog_name,json=analog-name,proto3" json:"analog_name,omitempty"`
	AnalogType   Devm_Driver_Cmus_Cmu_CmuAnalogs_CmuAnalog_AnalogType   `protobuf:"varint,3,opt,name=analog_type,json=analog-type,proto3,enum=huawei_devm.Devm_Driver_Cmus_Cmu_CmuAnalogs_CmuAnalog_AnalogType" json:"analog_type,omitempty"`
	AnalogObject Devm_Driver_Cmus_Cmu_CmuAnalogs_CmuAnalog_AnalogObject `protobuf:"varint,4,opt,name=analog_object,json=analog-object,proto3,enum=huawei_devm.Devm_Driver_Cmus_Cmu_CmuAnalogs_CmuAnalog_AnalogObject" json:"analog_object,omitempty"`
	WorkLow      int32                                                  `protobuf:"varint,5,opt,name=work_low,json=work-low,proto3" json:"work_low,omitempty"`
	WorkHigh     int32                                                  `protobuf:"varint,6,opt,name=work_high,json=work-high,proto3" json:"work_high,omitempty"`
	Wanted       int32                                                  `protobuf:"varint,7,opt,name=wanted,proto3" json:"wanted,omitempty"`
	AlarmLow     int32                                                  `protobuf:"varint,8,opt,name=alarm_low,json=alarm-low,proto3" json:"alarm_low,omitempty"`
	AlarmHigh    int32                                                  `protobuf:"varint,9,opt,name=alarm_high,json=alarm-high,proto3" json:"alarm_high,omitempty"`
}

func (x *Devm_Driver_Cmus_Cmu_CmuAnalogs_CmuAnalog) Reset() {
	*x = Devm_Driver_Cmus_Cmu_CmuAnalogs_CmuAnalog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[479]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Driver_Cmus_Cmu_CmuAnalogs_CmuAnalog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Driver_Cmus_Cmu_CmuAnalogs_CmuAnalog) ProtoMessage() {}

func (x *Devm_Driver_Cmus_Cmu_CmuAnalogs_CmuAnalog) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[479]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Driver_Cmus_Cmu_CmuAnalogs_CmuAnalog.ProtoReflect.Descriptor instead.
func (*Devm_Driver_Cmus_Cmu_CmuAnalogs_CmuAnalog) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 18, 0, 0, 2, 0}
}

func (x *Devm_Driver_Cmus_Cmu_CmuAnalogs_CmuAnalog) GetAnalogId() uint32 {
	if x != nil {
		return x.AnalogId
	}
	return 0
}

func (x *Devm_Driver_Cmus_Cmu_CmuAnalogs_CmuAnalog) GetAnalogName() string {
	if x != nil {
		return x.AnalogName
	}
	return ""
}

func (x *Devm_Driver_Cmus_Cmu_CmuAnalogs_CmuAnalog) GetAnalogType() Devm_Driver_Cmus_Cmu_CmuAnalogs_CmuAnalog_AnalogType {
	if x != nil {
		return x.AnalogType
	}
	return Devm_Driver_Cmus_Cmu_CmuAnalogs_CmuAnalog_AnalogType_UNKNOWN
}

func (x *Devm_Driver_Cmus_Cmu_CmuAnalogs_CmuAnalog) GetAnalogObject() Devm_Driver_Cmus_Cmu_CmuAnalogs_CmuAnalog_AnalogObject {
	if x != nil {
		return x.AnalogObject
	}
	return Devm_Driver_Cmus_Cmu_CmuAnalogs_CmuAnalog_AnalogObject_UNKNOWN
}

func (x *Devm_Driver_Cmus_Cmu_CmuAnalogs_CmuAnalog) GetWorkLow() int32 {
	if x != nil {
		return x.WorkLow
	}
	return 0
}

func (x *Devm_Driver_Cmus_Cmu_CmuAnalogs_CmuAnalog) GetWorkHigh() int32 {
	if x != nil {
		return x.WorkHigh
	}
	return 0
}

func (x *Devm_Driver_Cmus_Cmu_CmuAnalogs_CmuAnalog) GetWanted() int32 {
	if x != nil {
		return x.Wanted
	}
	return 0
}

func (x *Devm_Driver_Cmus_Cmu_CmuAnalogs_CmuAnalog) GetAlarmLow() int32 {
	if x != nil {
		return x.AlarmLow
	}
	return 0
}

func (x *Devm_Driver_Cmus_Cmu_CmuAnalogs_CmuAnalog) GetAlarmHigh() int32 {
	if x != nil {
		return x.AlarmHigh
	}
	return 0
}

type Devm_Driver_Cmus_Cmu_CmuAlarms_CmuAlarm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlarmId    uint32                                             `protobuf:"varint,1,opt,name=alarm_id,json=alarm-id,proto3" json:"alarm_id,omitempty"`
	AlarmLevel Devm_Driver_Cmus_Cmu_CmuAlarms_CmuAlarm_AlarmLevel `protobuf:"varint,2,opt,name=alarm_level,json=alarm-level,proto3,enum=huawei_devm.Devm_Driver_Cmus_Cmu_CmuAlarms_CmuAlarm_AlarmLevel" json:"alarm_level,omitempty"`
}

func (x *Devm_Driver_Cmus_Cmu_CmuAlarms_CmuAlarm) Reset() {
	*x = Devm_Driver_Cmus_Cmu_CmuAlarms_CmuAlarm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[480]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Driver_Cmus_Cmu_CmuAlarms_CmuAlarm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Driver_Cmus_Cmu_CmuAlarms_CmuAlarm) ProtoMessage() {}

func (x *Devm_Driver_Cmus_Cmu_CmuAlarms_CmuAlarm) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[480]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Driver_Cmus_Cmu_CmuAlarms_CmuAlarm.ProtoReflect.Descriptor instead.
func (*Devm_Driver_Cmus_Cmu_CmuAlarms_CmuAlarm) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 18, 0, 0, 3, 0}
}

func (x *Devm_Driver_Cmus_Cmu_CmuAlarms_CmuAlarm) GetAlarmId() uint32 {
	if x != nil {
		return x.AlarmId
	}
	return 0
}

func (x *Devm_Driver_Cmus_Cmu_CmuAlarms_CmuAlarm) GetAlarmLevel() Devm_Driver_Cmus_Cmu_CmuAlarms_CmuAlarm_AlarmLevel {
	if x != nil {
		return x.AlarmLevel
	}
	return Devm_Driver_Cmus_Cmu_CmuAlarms_CmuAlarm_AlarmLevel_OPEN
}

type Devm_Driver_Cmus_Cmu_Switchs_Switch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SwitchId            uint32                                                  `protobuf:"varint,1,opt,name=switch_id,json=switch-id,proto3" json:"switch_id,omitempty"`
	SwitchName          string                                                  `protobuf:"bytes,2,opt,name=switch_name,json=switch-name,proto3" json:"switch_name,omitempty"`
	AlarmTriggeringMode Devm_Driver_Cmus_Cmu_Switchs_Switch_AlarmTriggeringMode `protobuf:"varint,3,opt,name=alarm_triggering_mode,json=alarm-triggering-mode,proto3,enum=huawei_devm.Devm_Driver_Cmus_Cmu_Switchs_Switch_AlarmTriggeringMode" json:"alarm_triggering_mode,omitempty"`
	SensorName          Devm_Driver_Cmus_Cmu_Switchs_Switch_SensorName          `protobuf:"varint,4,opt,name=sensor_name,json=sensor-name,proto3,enum=huawei_devm.Devm_Driver_Cmus_Cmu_Switchs_Switch_SensorName" json:"sensor_name,omitempty"`
}

func (x *Devm_Driver_Cmus_Cmu_Switchs_Switch) Reset() {
	*x = Devm_Driver_Cmus_Cmu_Switchs_Switch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[481]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Driver_Cmus_Cmu_Switchs_Switch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Driver_Cmus_Cmu_Switchs_Switch) ProtoMessage() {}

func (x *Devm_Driver_Cmus_Cmu_Switchs_Switch) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[481]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Driver_Cmus_Cmu_Switchs_Switch.ProtoReflect.Descriptor instead.
func (*Devm_Driver_Cmus_Cmu_Switchs_Switch) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 18, 0, 0, 4, 0}
}

func (x *Devm_Driver_Cmus_Cmu_Switchs_Switch) GetSwitchId() uint32 {
	if x != nil {
		return x.SwitchId
	}
	return 0
}

func (x *Devm_Driver_Cmus_Cmu_Switchs_Switch) GetSwitchName() string {
	if x != nil {
		return x.SwitchName
	}
	return ""
}

func (x *Devm_Driver_Cmus_Cmu_Switchs_Switch) GetAlarmTriggeringMode() Devm_Driver_Cmus_Cmu_Switchs_Switch_AlarmTriggeringMode {
	if x != nil {
		return x.AlarmTriggeringMode
	}
	return Devm_Driver_Cmus_Cmu_Switchs_Switch_AlarmTriggeringMode_FALLINGX_EDGE
}

func (x *Devm_Driver_Cmus_Cmu_Switchs_Switch) GetSensorName() Devm_Driver_Cmus_Cmu_Switchs_Switch_SensorName {
	if x != nil {
		return x.SensorName
	}
	return Devm_Driver_Cmus_Cmu_Switchs_Switch_INVALID_ENUM_VALUE_SensorName
}

type Devm_Driver_Cmus_Cmu_Relays_Relay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelayId   uint32                                      `protobuf:"varint,1,opt,name=relay_id,json=relay-id,proto3" json:"relay_id,omitempty"`
	RelayName string                                      `protobuf:"bytes,2,opt,name=relay_name,json=relay-name,proto3" json:"relay_name,omitempty"`
	RelayMode Devm_Driver_Cmus_Cmu_Relays_Relay_RelayMode `protobuf:"varint,3,opt,name=relay_mode,json=relay-mode,proto3,enum=huawei_devm.Devm_Driver_Cmus_Cmu_Relays_Relay_RelayMode" json:"relay_mode,omitempty"`
}

func (x *Devm_Driver_Cmus_Cmu_Relays_Relay) Reset() {
	*x = Devm_Driver_Cmus_Cmu_Relays_Relay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[482]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Driver_Cmus_Cmu_Relays_Relay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Driver_Cmus_Cmu_Relays_Relay) ProtoMessage() {}

func (x *Devm_Driver_Cmus_Cmu_Relays_Relay) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[482]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Driver_Cmus_Cmu_Relays_Relay.ProtoReflect.Descriptor instead.
func (*Devm_Driver_Cmus_Cmu_Relays_Relay) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 18, 0, 0, 5, 0}
}

func (x *Devm_Driver_Cmus_Cmu_Relays_Relay) GetRelayId() uint32 {
	if x != nil {
		return x.RelayId
	}
	return 0
}

func (x *Devm_Driver_Cmus_Cmu_Relays_Relay) GetRelayName() string {
	if x != nil {
		return x.RelayName
	}
	return ""
}

func (x *Devm_Driver_Cmus_Cmu_Relays_Relay) GetRelayMode() Devm_Driver_Cmus_Cmu_Relays_Relay_RelayMode {
	if x != nil {
		return x.RelayMode
	}
	return Devm_Driver_Cmus_Cmu_Relays_Relay_RelayMode_OPEN
}

type Devm_Driver_Cmus_Cmu_Analogs_Analog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnalogId            uint32                                               `protobuf:"varint,1,opt,name=analog_id,json=analog-id,proto3" json:"analog_id,omitempty"`
	AnalogName          string                                               `protobuf:"bytes,2,opt,name=analog_name,json=analog-name,proto3" json:"analog_name,omitempty"`
	AnalogObject        Devm_Driver_Cmus_Cmu_Analogs_Analog_AnalogObject     `protobuf:"varint,3,opt,name=analog_object,json=analog-object,proto3,enum=huawei_devm.Devm_Driver_Cmus_Cmu_Analogs_Analog_AnalogObject" json:"analog_object,omitempty"`
	AnalogSensorType    Devm_Driver_Cmus_Cmu_Analogs_Analog_AnalogSensorType `protobuf:"varint,4,opt,name=analog_sensor_type,json=analog-sensor-type,proto3,enum=huawei_devm.Devm_Driver_Cmus_Cmu_Analogs_Analog_AnalogSensorType" json:"analog_sensor_type,omitempty"`
	LowerLimit          int32                                                `protobuf:"varint,5,opt,name=lower_limit,json=lower-limit,proto3" json:"lower_limit,omitempty"`
	UpperLimit          int32                                                `protobuf:"varint,6,opt,name=upper_limit,json=upper-limit,proto3" json:"upper_limit,omitempty"`
	NominalValue        int32                                                `protobuf:"varint,7,opt,name=nominal_value,json=nominal-value,proto3" json:"nominal_value,omitempty"`
	LowerAlarmThreshold int32                                                `protobuf:"varint,8,opt,name=lower_alarm_threshold,json=lower-alarm-threshold,proto3" json:"lower_alarm_threshold,omitempty"`
	HighAlarmThreshold  int32                                                `protobuf:"varint,9,opt,name=high_alarm_threshold,json=high-alarm-threshold,proto3" json:"high_alarm_threshold,omitempty"`
}

func (x *Devm_Driver_Cmus_Cmu_Analogs_Analog) Reset() {
	*x = Devm_Driver_Cmus_Cmu_Analogs_Analog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[483]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Driver_Cmus_Cmu_Analogs_Analog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Driver_Cmus_Cmu_Analogs_Analog) ProtoMessage() {}

func (x *Devm_Driver_Cmus_Cmu_Analogs_Analog) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[483]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Driver_Cmus_Cmu_Analogs_Analog.ProtoReflect.Descriptor instead.
func (*Devm_Driver_Cmus_Cmu_Analogs_Analog) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 18, 0, 0, 6, 0}
}

func (x *Devm_Driver_Cmus_Cmu_Analogs_Analog) GetAnalogId() uint32 {
	if x != nil {
		return x.AnalogId
	}
	return 0
}

func (x *Devm_Driver_Cmus_Cmu_Analogs_Analog) GetAnalogName() string {
	if x != nil {
		return x.AnalogName
	}
	return ""
}

func (x *Devm_Driver_Cmus_Cmu_Analogs_Analog) GetAnalogObject() Devm_Driver_Cmus_Cmu_Analogs_Analog_AnalogObject {
	if x != nil {
		return x.AnalogObject
	}
	return Devm_Driver_Cmus_Cmu_Analogs_Analog_INVALID_ENUM_VALUE_AnalogObject
}

func (x *Devm_Driver_Cmus_Cmu_Analogs_Analog) GetAnalogSensorType() Devm_Driver_Cmus_Cmu_Analogs_Analog_AnalogSensorType {
	if x != nil {
		return x.AnalogSensorType
	}
	return Devm_Driver_Cmus_Cmu_Analogs_Analog_INVALID_ENUM_VALUE_AnalogSensorType
}

func (x *Devm_Driver_Cmus_Cmu_Analogs_Analog) GetLowerLimit() int32 {
	if x != nil {
		return x.LowerLimit
	}
	return 0
}

func (x *Devm_Driver_Cmus_Cmu_Analogs_Analog) GetUpperLimit() int32 {
	if x != nil {
		return x.UpperLimit
	}
	return 0
}

func (x *Devm_Driver_Cmus_Cmu_Analogs_Analog) GetNominalValue() int32 {
	if x != nil {
		return x.NominalValue
	}
	return 0
}

func (x *Devm_Driver_Cmus_Cmu_Analogs_Analog) GetLowerAlarmThreshold() int32 {
	if x != nil {
		return x.LowerAlarmThreshold
	}
	return 0
}

func (x *Devm_Driver_Cmus_Cmu_Analogs_Analog) GetHighAlarmThreshold() int32 {
	if x != nil {
		return x.HighAlarmThreshold
	}
	return 0
}

type Devm_Driver_Pms_Pm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position              string                               `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	SerialNumber          uint32                               `protobuf:"varint,2,opt,name=serial_number,json=serial-number,proto3" json:"serial_number,omitempty"`
	SingleInput           Devm_Driver_Pms_Pm_SingleInput       `protobuf:"varint,3,opt,name=single_input,json=single-input,proto3,enum=huawei_devm.Devm_Driver_Pms_Pm_SingleInput" json:"single_input,omitempty"`
	BoardType             string                               `protobuf:"bytes,4,opt,name=board_type,json=board-type,proto3" json:"board_type,omitempty"`
	EntityIndex           uint32                               `protobuf:"varint,5,opt,name=entity_index,json=entity-index,proto3" json:"entity_index,omitempty"`
	MonitorCableState     Devm_Driver_Pms_Pm_MonitorCableState `protobuf:"varint,6,opt,name=monitor_cable_state,json=monitor-cable-state,proto3,enum=huawei_devm.Devm_Driver_Pms_Pm_MonitorCableState" json:"monitor_cable_state,omitempty"`
	InputVoltageValue     string                               `protobuf:"bytes,7,opt,name=input_voltage_value,json=input-voltage-value,proto3" json:"input_voltage_value,omitempty"`
	InputElectricalValue  string                               `protobuf:"bytes,8,opt,name=input_electrical_value,json=input-electrical-value,proto3" json:"input_electrical_value,omitempty"`
	InputPowerValue       string                               `protobuf:"bytes,9,opt,name=input_power_value,json=input-power-value,proto3" json:"input_power_value,omitempty"`
	OutputVoltageValue    string                               `protobuf:"bytes,10,opt,name=output_voltage_value,json=output-voltage-value,proto3" json:"output_voltage_value,omitempty"`
	OutputElectricalValue string                               `protobuf:"bytes,11,opt,name=output_electrical_value,json=output-electrical-value,proto3" json:"output_electrical_value,omitempty"`
	OutputPowerValue      string                               `protobuf:"bytes,12,opt,name=output_power_value,json=output-power-value,proto3" json:"output_power_value,omitempty"`
	PmArea                string                               `protobuf:"bytes,13,opt,name=pm_area,json=pm-area,proto3" json:"pm_area,omitempty"`
	PmStatus              Devm_Driver_Pms_Pm_PmStatus          `protobuf:"varint,14,opt,name=pm_status,json=pm-status,proto3,enum=huawei_devm.Devm_Driver_Pms_Pm_PmStatus" json:"pm_status,omitempty"`
}

func (x *Devm_Driver_Pms_Pm) Reset() {
	*x = Devm_Driver_Pms_Pm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[484]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Driver_Pms_Pm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Driver_Pms_Pm) ProtoMessage() {}

func (x *Devm_Driver_Pms_Pm) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[484]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Driver_Pms_Pm.ProtoReflect.Descriptor instead.
func (*Devm_Driver_Pms_Pm) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 18, 1, 0}
}

func (x *Devm_Driver_Pms_Pm) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *Devm_Driver_Pms_Pm) GetSerialNumber() uint32 {
	if x != nil {
		return x.SerialNumber
	}
	return 0
}

func (x *Devm_Driver_Pms_Pm) GetSingleInput() Devm_Driver_Pms_Pm_SingleInput {
	if x != nil {
		return x.SingleInput
	}
	return Devm_Driver_Pms_Pm_SingleInput_NA
}

func (x *Devm_Driver_Pms_Pm) GetBoardType() string {
	if x != nil {
		return x.BoardType
	}
	return ""
}

func (x *Devm_Driver_Pms_Pm) GetEntityIndex() uint32 {
	if x != nil {
		return x.EntityIndex
	}
	return 0
}

func (x *Devm_Driver_Pms_Pm) GetMonitorCableState() Devm_Driver_Pms_Pm_MonitorCableState {
	if x != nil {
		return x.MonitorCableState
	}
	return Devm_Driver_Pms_Pm_MonitorCableState_UNX_PLUG
}

func (x *Devm_Driver_Pms_Pm) GetInputVoltageValue() string {
	if x != nil {
		return x.InputVoltageValue
	}
	return ""
}

func (x *Devm_Driver_Pms_Pm) GetInputElectricalValue() string {
	if x != nil {
		return x.InputElectricalValue
	}
	return ""
}

func (x *Devm_Driver_Pms_Pm) GetInputPowerValue() string {
	if x != nil {
		return x.InputPowerValue
	}
	return ""
}

func (x *Devm_Driver_Pms_Pm) GetOutputVoltageValue() string {
	if x != nil {
		return x.OutputVoltageValue
	}
	return ""
}

func (x *Devm_Driver_Pms_Pm) GetOutputElectricalValue() string {
	if x != nil {
		return x.OutputElectricalValue
	}
	return ""
}

func (x *Devm_Driver_Pms_Pm) GetOutputPowerValue() string {
	if x != nil {
		return x.OutputPowerValue
	}
	return ""
}

func (x *Devm_Driver_Pms_Pm) GetPmArea() string {
	if x != nil {
		return x.PmArea
	}
	return ""
}

func (x *Devm_Driver_Pms_Pm) GetPmStatus() Devm_Driver_Pms_Pm_PmStatus {
	if x != nil {
		return x.PmStatus
	}
	return Devm_Driver_Pms_Pm_PmStatus_NORMAL
}

type Devm_Driver_Ccus_Ccu struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SoftwareVersion string `protobuf:"bytes,1,opt,name=software_version,json=software-version,proto3" json:"software_version,omitempty"`
}

func (x *Devm_Driver_Ccus_Ccu) Reset() {
	*x = Devm_Driver_Ccus_Ccu{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[485]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Driver_Ccus_Ccu) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Driver_Ccus_Ccu) ProtoMessage() {}

func (x *Devm_Driver_Ccus_Ccu) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[485]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Driver_Ccus_Ccu.ProtoReflect.Descriptor instead.
func (*Devm_Driver_Ccus_Ccu) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 18, 2, 0}
}

func (x *Devm_Driver_Ccus_Ccu) GetSoftwareVersion() string {
	if x != nil {
		return x.SoftwareVersion
	}
	return ""
}

type Devm_Driver_Dacss_Dacs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position              string                        `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	SerialNumber          uint32                        `protobuf:"varint,2,opt,name=serial_number,json=serial-number,proto3" json:"serial_number,omitempty"`
	BoardType             string                        `protobuf:"bytes,3,opt,name=board_type,json=board-type,proto3" json:"board_type,omitempty"`
	DacsArea              string                        `protobuf:"bytes,4,opt,name=dacs_area,json=dacs-area,proto3" json:"dacs_area,omitempty"`
	EntityIndex           uint32                        `protobuf:"varint,5,opt,name=entity_index,json=entity-index,proto3" json:"entity_index,omitempty"`
	Status                Devm_Driver_Dacss_Dacs_Status `protobuf:"varint,6,opt,name=status,proto3,enum=huawei_devm.Devm_Driver_Dacss_Dacs_Status" json:"status,omitempty"`
	InsourcePlane         string                        `protobuf:"bytes,7,opt,name=insource_plane,json=insource-plane,proto3" json:"insource_plane,omitempty"`
	InsourcePlaneA        string                        `protobuf:"bytes,8,opt,name=insource_plane_a,json=insource-plane-a,proto3" json:"insource_plane_a,omitempty"`
	InsourcePlaneB        string                        `protobuf:"bytes,9,opt,name=insource_plane_b,json=insource-plane-b,proto3" json:"insource_plane_b,omitempty"`
	OutputVoltageValue    string                        `protobuf:"bytes,10,opt,name=output_voltage_value,json=output-voltage-value,proto3" json:"output_voltage_value,omitempty"`
	OutputElectricalValue string                        `protobuf:"bytes,11,opt,name=output_electrical_value,json=output-electrical-value,proto3" json:"output_electrical_value,omitempty"`
	OutputStatus          string                        `protobuf:"bytes,12,opt,name=output_status,json=output-status,proto3" json:"output_status,omitempty"`
}

func (x *Devm_Driver_Dacss_Dacs) Reset() {
	*x = Devm_Driver_Dacss_Dacs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[486]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Driver_Dacss_Dacs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Driver_Dacss_Dacs) ProtoMessage() {}

func (x *Devm_Driver_Dacss_Dacs) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[486]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Driver_Dacss_Dacs.ProtoReflect.Descriptor instead.
func (*Devm_Driver_Dacss_Dacs) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 18, 3, 0}
}

func (x *Devm_Driver_Dacss_Dacs) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *Devm_Driver_Dacss_Dacs) GetSerialNumber() uint32 {
	if x != nil {
		return x.SerialNumber
	}
	return 0
}

func (x *Devm_Driver_Dacss_Dacs) GetBoardType() string {
	if x != nil {
		return x.BoardType
	}
	return ""
}

func (x *Devm_Driver_Dacss_Dacs) GetDacsArea() string {
	if x != nil {
		return x.DacsArea
	}
	return ""
}

func (x *Devm_Driver_Dacss_Dacs) GetEntityIndex() uint32 {
	if x != nil {
		return x.EntityIndex
	}
	return 0
}

func (x *Devm_Driver_Dacss_Dacs) GetStatus() Devm_Driver_Dacss_Dacs_Status {
	if x != nil {
		return x.Status
	}
	return Devm_Driver_Dacss_Dacs_Status_NORMAL
}

func (x *Devm_Driver_Dacss_Dacs) GetInsourcePlane() string {
	if x != nil {
		return x.InsourcePlane
	}
	return ""
}

func (x *Devm_Driver_Dacss_Dacs) GetInsourcePlaneA() string {
	if x != nil {
		return x.InsourcePlaneA
	}
	return ""
}

func (x *Devm_Driver_Dacss_Dacs) GetInsourcePlaneB() string {
	if x != nil {
		return x.InsourcePlaneB
	}
	return ""
}

func (x *Devm_Driver_Dacss_Dacs) GetOutputVoltageValue() string {
	if x != nil {
		return x.OutputVoltageValue
	}
	return ""
}

func (x *Devm_Driver_Dacss_Dacs) GetOutputElectricalValue() string {
	if x != nil {
		return x.OutputElectricalValue
	}
	return ""
}

func (x *Devm_Driver_Dacss_Dacs) GetOutputStatus() string {
	if x != nil {
		return x.OutputStatus
	}
	return ""
}

type Devm_Driver_Fans_Fan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position          string                                 `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	EntityIndex       uint32                                 `protobuf:"varint,2,opt,name=entity_index,json=entity-index,proto3" json:"entity_index,omitempty"`
	BoardType         string                                 `protobuf:"bytes,3,opt,name=board_type,json=board-type,proto3" json:"board_type,omitempty"`
	WorkMode          Devm_Driver_Fans_Fan_WorkMode          `protobuf:"varint,4,opt,name=work_mode,json=work-mode,proto3,enum=huawei_devm.Devm_Driver_Fans_Fan_WorkMode" json:"work_mode,omitempty"`
	Speed             uint32                                 `protobuf:"varint,5,opt,name=speed,proto3" json:"speed,omitempty"`
	FanRate           uint32                                 `protobuf:"varint,6,opt,name=fan_rate,json=fan-rate,proto3" json:"fan_rate,omitempty"`
	MonitorCableState Devm_Driver_Fans_Fan_MonitorCableState `protobuf:"varint,7,opt,name=monitor_cable_state,json=monitor-cable-state,proto3,enum=huawei_devm.Devm_Driver_Fans_Fan_MonitorCableState" json:"monitor_cable_state,omitempty"`
	Register          Devm_Driver_Fans_Fan_Register          `protobuf:"varint,8,opt,name=register,proto3,enum=huawei_devm.Devm_Driver_Fans_Fan_Register" json:"register,omitempty"`
	Present           Devm_Driver_Fans_Fan_Present           `protobuf:"varint,9,opt,name=present,proto3,enum=huawei_devm.Devm_Driver_Fans_Fan_Present" json:"present,omitempty"`
	FanNumber         uint32                                 `protobuf:"varint,10,opt,name=fan_number,json=fan-number,proto3" json:"fan_number,omitempty"`
	GlobalSpeed       string                                 `protobuf:"bytes,11,opt,name=global_speed,json=global-speed,proto3" json:"global_speed,omitempty"`
}

func (x *Devm_Driver_Fans_Fan) Reset() {
	*x = Devm_Driver_Fans_Fan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[487]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Driver_Fans_Fan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Driver_Fans_Fan) ProtoMessage() {}

func (x *Devm_Driver_Fans_Fan) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[487]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Driver_Fans_Fan.ProtoReflect.Descriptor instead.
func (*Devm_Driver_Fans_Fan) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 18, 4, 0}
}

func (x *Devm_Driver_Fans_Fan) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *Devm_Driver_Fans_Fan) GetEntityIndex() uint32 {
	if x != nil {
		return x.EntityIndex
	}
	return 0
}

func (x *Devm_Driver_Fans_Fan) GetBoardType() string {
	if x != nil {
		return x.BoardType
	}
	return ""
}

func (x *Devm_Driver_Fans_Fan) GetWorkMode() Devm_Driver_Fans_Fan_WorkMode {
	if x != nil {
		return x.WorkMode
	}
	return Devm_Driver_Fans_Fan_INVALID_ENUM_VALUE_WorkMode
}

func (x *Devm_Driver_Fans_Fan) GetSpeed() uint32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *Devm_Driver_Fans_Fan) GetFanRate() uint32 {
	if x != nil {
		return x.FanRate
	}
	return 0
}

func (x *Devm_Driver_Fans_Fan) GetMonitorCableState() Devm_Driver_Fans_Fan_MonitorCableState {
	if x != nil {
		return x.MonitorCableState
	}
	return Devm_Driver_Fans_Fan_MonitorCableState_UNX_PLUG
}

func (x *Devm_Driver_Fans_Fan) GetRegister() Devm_Driver_Fans_Fan_Register {
	if x != nil {
		return x.Register
	}
	return Devm_Driver_Fans_Fan_Register_NO
}

func (x *Devm_Driver_Fans_Fan) GetPresent() Devm_Driver_Fans_Fan_Present {
	if x != nil {
		return x.Present
	}
	return Devm_Driver_Fans_Fan_Present_NO
}

func (x *Devm_Driver_Fans_Fan) GetFanNumber() uint32 {
	if x != nil {
		return x.FanNumber
	}
	return 0
}

func (x *Devm_Driver_Fans_Fan) GetGlobalSpeed() string {
	if x != nil {
		return x.GlobalSpeed
	}
	return ""
}

type Devm_Driver_Icus_Icu struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position    string `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	EntityIndex uint32 `protobuf:"varint,2,opt,name=entity_index,json=entity-index,proto3" json:"entity_index,omitempty"`
	BoardType   string `protobuf:"bytes,3,opt,name=board_type,json=board-type,proto3" json:"board_type,omitempty"`
	SdramSize   uint32 `protobuf:"varint,4,opt,name=sdram_size,json=sdram-size,proto3" json:"sdram_size,omitempty"`
	FlashSize   uint32 `protobuf:"varint,5,opt,name=flash_size,json=flash-size,proto3" json:"flash_size,omitempty"`
	UpTime      uint32 `protobuf:"varint,6,opt,name=up_time,json=up-time,proto3" json:"up_time,omitempty"`
}

func (x *Devm_Driver_Icus_Icu) Reset() {
	*x = Devm_Driver_Icus_Icu{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[488]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Driver_Icus_Icu) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Driver_Icus_Icu) ProtoMessage() {}

func (x *Devm_Driver_Icus_Icu) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[488]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Driver_Icus_Icu.ProtoReflect.Descriptor instead.
func (*Devm_Driver_Icus_Icu) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 18, 5, 0}
}

func (x *Devm_Driver_Icus_Icu) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *Devm_Driver_Icus_Icu) GetEntityIndex() uint32 {
	if x != nil {
		return x.EntityIndex
	}
	return 0
}

func (x *Devm_Driver_Icus_Icu) GetBoardType() string {
	if x != nil {
		return x.BoardType
	}
	return ""
}

func (x *Devm_Driver_Icus_Icu) GetSdramSize() uint32 {
	if x != nil {
		return x.SdramSize
	}
	return 0
}

func (x *Devm_Driver_Icus_Icu) GetFlashSize() uint32 {
	if x != nil {
		return x.FlashSize
	}
	return 0
}

func (x *Devm_Driver_Icus_Icu) GetUpTime() uint32 {
	if x != nil {
		return x.UpTime
	}
	return 0
}

type Devm_Driver_Pmus_Pmu struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position    string `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	EntityIndex uint32 `protobuf:"varint,2,opt,name=entity_index,json=entity-index,proto3" json:"entity_index,omitempty"`
	BoardType   string `protobuf:"bytes,3,opt,name=board_type,json=board-type,proto3" json:"board_type,omitempty"`
	Present     string `protobuf:"bytes,4,opt,name=present,proto3" json:"present,omitempty"`
	HaStatus    string `protobuf:"bytes,5,opt,name=ha_status,json=ha-status,proto3" json:"ha_status,omitempty"`
	Register    string `protobuf:"bytes,6,opt,name=register,proto3" json:"register,omitempty"`
	Work        string `protobuf:"bytes,7,opt,name=work,proto3" json:"work,omitempty"`
}

func (x *Devm_Driver_Pmus_Pmu) Reset() {
	*x = Devm_Driver_Pmus_Pmu{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[489]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Driver_Pmus_Pmu) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Driver_Pmus_Pmu) ProtoMessage() {}

func (x *Devm_Driver_Pmus_Pmu) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[489]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Driver_Pmus_Pmu.ProtoReflect.Descriptor instead.
func (*Devm_Driver_Pmus_Pmu) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 18, 6, 0}
}

func (x *Devm_Driver_Pmus_Pmu) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *Devm_Driver_Pmus_Pmu) GetEntityIndex() uint32 {
	if x != nil {
		return x.EntityIndex
	}
	return 0
}

func (x *Devm_Driver_Pmus_Pmu) GetBoardType() string {
	if x != nil {
		return x.BoardType
	}
	return ""
}

func (x *Devm_Driver_Pmus_Pmu) GetPresent() string {
	if x != nil {
		return x.Present
	}
	return ""
}

func (x *Devm_Driver_Pmus_Pmu) GetHaStatus() string {
	if x != nil {
		return x.HaStatus
	}
	return ""
}

func (x *Devm_Driver_Pmus_Pmu) GetRegister() string {
	if x != nil {
		return x.Register
	}
	return ""
}

func (x *Devm_Driver_Pmus_Pmu) GetWork() string {
	if x != nil {
		return x.Work
	}
	return ""
}

type Devm_Driver_PowerSupplys_PowerSupply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position          string                                                  `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	EntityIndex       uint32                                                  `protobuf:"varint,2,opt,name=entity_index,json=entity-index,proto3" json:"entity_index,omitempty"`
	BoardType         string                                                  `protobuf:"bytes,3,opt,name=board_type,json=board-type,proto3" json:"board_type,omitempty"`
	WorkMode          Devm_Driver_PowerSupplys_PowerSupply_WorkMode           `protobuf:"varint,4,opt,name=work_mode,json=work-mode,proto3,enum=huawei_devm.Devm_Driver_PowerSupplys_PowerSupply_WorkMode" json:"work_mode,omitempty"`
	MonitorCableState Devm_Driver_PowerSupplys_PowerSupply_MonitorCableState  `protobuf:"varint,5,opt,name=monitor_cable_state,json=monitor-cable-state,proto3,enum=huawei_devm.Devm_Driver_PowerSupplys_PowerSupply_MonitorCableState" json:"monitor_cable_state,omitempty"`
	PowerState        string                                                  `protobuf:"bytes,6,opt,name=power_state,json=power-state,proto3" json:"power_state,omitempty"`
	AbnormalNumber    uint32                                                  `protobuf:"varint,7,opt,name=abnormal_number,json=abnormal-number,proto3" json:"abnormal_number,omitempty"`
	NormalNumber      uint32                                                  `protobuf:"varint,8,opt,name=normal_number,json=normal-number,proto3" json:"normal_number,omitempty"`
	PowerEnvironments *Devm_Driver_PowerSupplys_PowerSupply_PowerEnvironments `protobuf:"bytes,9,opt,name=power_environments,json=power-environments,proto3" json:"power_environments,omitempty"`
}

func (x *Devm_Driver_PowerSupplys_PowerSupply) Reset() {
	*x = Devm_Driver_PowerSupplys_PowerSupply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[490]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Driver_PowerSupplys_PowerSupply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Driver_PowerSupplys_PowerSupply) ProtoMessage() {}

func (x *Devm_Driver_PowerSupplys_PowerSupply) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[490]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Driver_PowerSupplys_PowerSupply.ProtoReflect.Descriptor instead.
func (*Devm_Driver_PowerSupplys_PowerSupply) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 18, 7, 0}
}

func (x *Devm_Driver_PowerSupplys_PowerSupply) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *Devm_Driver_PowerSupplys_PowerSupply) GetEntityIndex() uint32 {
	if x != nil {
		return x.EntityIndex
	}
	return 0
}

func (x *Devm_Driver_PowerSupplys_PowerSupply) GetBoardType() string {
	if x != nil {
		return x.BoardType
	}
	return ""
}

func (x *Devm_Driver_PowerSupplys_PowerSupply) GetWorkMode() Devm_Driver_PowerSupplys_PowerSupply_WorkMode {
	if x != nil {
		return x.WorkMode
	}
	return Devm_Driver_PowerSupplys_PowerSupply_INVALID_ENUM_VALUE_WorkMode
}

func (x *Devm_Driver_PowerSupplys_PowerSupply) GetMonitorCableState() Devm_Driver_PowerSupplys_PowerSupply_MonitorCableState {
	if x != nil {
		return x.MonitorCableState
	}
	return Devm_Driver_PowerSupplys_PowerSupply_MonitorCableState_UNX_PLUG
}

func (x *Devm_Driver_PowerSupplys_PowerSupply) GetPowerState() string {
	if x != nil {
		return x.PowerState
	}
	return ""
}

func (x *Devm_Driver_PowerSupplys_PowerSupply) GetAbnormalNumber() uint32 {
	if x != nil {
		return x.AbnormalNumber
	}
	return 0
}

func (x *Devm_Driver_PowerSupplys_PowerSupply) GetNormalNumber() uint32 {
	if x != nil {
		return x.NormalNumber
	}
	return 0
}

func (x *Devm_Driver_PowerSupplys_PowerSupply) GetPowerEnvironments() *Devm_Driver_PowerSupplys_PowerSupply_PowerEnvironments {
	if x != nil {
		return x.PowerEnvironments
	}
	return nil
}

type Devm_Driver_PowerSupplys_PowerSupply_PowerEnvironments struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PowerEnvironment []*Devm_Driver_PowerSupplys_PowerSupply_PowerEnvironments_PowerEnvironment `protobuf:"bytes,1,rep,name=power_environment,json=power-environment,proto3" json:"power_environment,omitempty"`
}

func (x *Devm_Driver_PowerSupplys_PowerSupply_PowerEnvironments) Reset() {
	*x = Devm_Driver_PowerSupplys_PowerSupply_PowerEnvironments{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[491]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Driver_PowerSupplys_PowerSupply_PowerEnvironments) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Driver_PowerSupplys_PowerSupply_PowerEnvironments) ProtoMessage() {}

func (x *Devm_Driver_PowerSupplys_PowerSupply_PowerEnvironments) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[491]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Driver_PowerSupplys_PowerSupply_PowerEnvironments.ProtoReflect.Descriptor instead.
func (*Devm_Driver_PowerSupplys_PowerSupply_PowerEnvironments) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 18, 7, 0, 0}
}

func (x *Devm_Driver_PowerSupplys_PowerSupply_PowerEnvironments) GetPowerEnvironment() []*Devm_Driver_PowerSupplys_PowerSupply_PowerEnvironments_PowerEnvironment {
	if x != nil {
		return x.PowerEnvironment
	}
	return nil
}

type Devm_Driver_PowerSupplys_PowerSupply_PowerEnvironments_PowerEnvironment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PemIndex           uint32 `protobuf:"varint,1,opt,name=pem_index,json=pem-index,proto3" json:"pem_index,omitempty"`
	VoltageValue       string `protobuf:"bytes,2,opt,name=voltage_value,json=voltage-value,proto3" json:"voltage_value,omitempty"`
	ElectricalValue    string `protobuf:"bytes,3,opt,name=electrical_value,json=electrical-value,proto3" json:"electrical_value,omitempty"`
	TemperatureValue   string `protobuf:"bytes,4,opt,name=temperature_value,json=temperature-value,proto3" json:"temperature_value,omitempty"`
	PowerValue         string `protobuf:"bytes,5,opt,name=power_value,json=power-value,proto3" json:"power_value,omitempty"`
	OutVoltageValue    string `protobuf:"bytes,6,opt,name=out_voltage_value,json=out-voltage-value,proto3" json:"out_voltage_value,omitempty"`
	OutElectricalValue string `protobuf:"bytes,7,opt,name=out_electrical_value,json=out-electrical-value,proto3" json:"out_electrical_value,omitempty"`
	OutPowerValue      string `protobuf:"bytes,8,opt,name=out_power_value,json=out-power-value,proto3" json:"out_power_value,omitempty"`
}

func (x *Devm_Driver_PowerSupplys_PowerSupply_PowerEnvironments_PowerEnvironment) Reset() {
	*x = Devm_Driver_PowerSupplys_PowerSupply_PowerEnvironments_PowerEnvironment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[492]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Driver_PowerSupplys_PowerSupply_PowerEnvironments_PowerEnvironment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Driver_PowerSupplys_PowerSupply_PowerEnvironments_PowerEnvironment) ProtoMessage() {}

func (x *Devm_Driver_PowerSupplys_PowerSupply_PowerEnvironments_PowerEnvironment) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[492]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Driver_PowerSupplys_PowerSupply_PowerEnvironments_PowerEnvironment.ProtoReflect.Descriptor instead.
func (*Devm_Driver_PowerSupplys_PowerSupply_PowerEnvironments_PowerEnvironment) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 18, 7, 0, 0, 0}
}

func (x *Devm_Driver_PowerSupplys_PowerSupply_PowerEnvironments_PowerEnvironment) GetPemIndex() uint32 {
	if x != nil {
		return x.PemIndex
	}
	return 0
}

func (x *Devm_Driver_PowerSupplys_PowerSupply_PowerEnvironments_PowerEnvironment) GetVoltageValue() string {
	if x != nil {
		return x.VoltageValue
	}
	return ""
}

func (x *Devm_Driver_PowerSupplys_PowerSupply_PowerEnvironments_PowerEnvironment) GetElectricalValue() string {
	if x != nil {
		return x.ElectricalValue
	}
	return ""
}

func (x *Devm_Driver_PowerSupplys_PowerSupply_PowerEnvironments_PowerEnvironment) GetTemperatureValue() string {
	if x != nil {
		return x.TemperatureValue
	}
	return ""
}

func (x *Devm_Driver_PowerSupplys_PowerSupply_PowerEnvironments_PowerEnvironment) GetPowerValue() string {
	if x != nil {
		return x.PowerValue
	}
	return ""
}

func (x *Devm_Driver_PowerSupplys_PowerSupply_PowerEnvironments_PowerEnvironment) GetOutVoltageValue() string {
	if x != nil {
		return x.OutVoltageValue
	}
	return ""
}

func (x *Devm_Driver_PowerSupplys_PowerSupply_PowerEnvironments_PowerEnvironment) GetOutElectricalValue() string {
	if x != nil {
		return x.OutElectricalValue
	}
	return ""
}

func (x *Devm_Driver_PowerSupplys_PowerSupply_PowerEnvironments_PowerEnvironment) GetOutPowerValue() string {
	if x != nil {
		return x.OutPowerValue
	}
	return ""
}

type Devm_Driver_Dmus_Dmu struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position    string `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	EntityIndex uint32 `protobuf:"varint,2,opt,name=entity_index,json=entity-index,proto3" json:"entity_index,omitempty"`
	BoardType   string `protobuf:"bytes,3,opt,name=board_type,json=board-type,proto3" json:"board_type,omitempty"`
	Present     string `protobuf:"bytes,4,opt,name=present,proto3" json:"present,omitempty"`
	Register    string `protobuf:"bytes,5,opt,name=register,proto3" json:"register,omitempty"`
	Work        string `protobuf:"bytes,6,opt,name=work,proto3" json:"work,omitempty"`
}

func (x *Devm_Driver_Dmus_Dmu) Reset() {
	*x = Devm_Driver_Dmus_Dmu{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[493]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Driver_Dmus_Dmu) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Driver_Dmus_Dmu) ProtoMessage() {}

func (x *Devm_Driver_Dmus_Dmu) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[493]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Driver_Dmus_Dmu.ProtoReflect.Descriptor instead.
func (*Devm_Driver_Dmus_Dmu) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 18, 8, 0}
}

func (x *Devm_Driver_Dmus_Dmu) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *Devm_Driver_Dmus_Dmu) GetEntityIndex() uint32 {
	if x != nil {
		return x.EntityIndex
	}
	return 0
}

func (x *Devm_Driver_Dmus_Dmu) GetBoardType() string {
	if x != nil {
		return x.BoardType
	}
	return ""
}

func (x *Devm_Driver_Dmus_Dmu) GetPresent() string {
	if x != nil {
		return x.Present
	}
	return ""
}

func (x *Devm_Driver_Dmus_Dmu) GetRegister() string {
	if x != nil {
		return x.Register
	}
	return ""
}

func (x *Devm_Driver_Dmus_Dmu) GetWork() string {
	if x != nil {
		return x.Work
	}
	return ""
}

type Devm_Driver_Pdus_Pdu struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position       string                        `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	EntityIndex    uint32                        `protobuf:"varint,2,opt,name=entity_index,json=entity-index,proto3" json:"entity_index,omitempty"`
	BoardType      string                        `protobuf:"bytes,3,opt,name=board_type,json=board-type,proto3" json:"board_type,omitempty"`
	WorkMode       Devm_Driver_Pdus_Pdu_WorkMode `protobuf:"varint,4,opt,name=work_mode,json=work-mode,proto3,enum=huawei_devm.Devm_Driver_Pdus_Pdu_WorkMode" json:"work_mode,omitempty"`
	PowerState     string                        `protobuf:"bytes,5,opt,name=power_state,json=power-state,proto3" json:"power_state,omitempty"`
	AbnormalNumber string                        `protobuf:"bytes,6,opt,name=abnormal_number,json=abnormal-number,proto3" json:"abnormal_number,omitempty"`
	NormalNumber   string                        `protobuf:"bytes,7,opt,name=normal_number,json=normal-number,proto3" json:"normal_number,omitempty"`
}

func (x *Devm_Driver_Pdus_Pdu) Reset() {
	*x = Devm_Driver_Pdus_Pdu{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[494]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Driver_Pdus_Pdu) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Driver_Pdus_Pdu) ProtoMessage() {}

func (x *Devm_Driver_Pdus_Pdu) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[494]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Driver_Pdus_Pdu.ProtoReflect.Descriptor instead.
func (*Devm_Driver_Pdus_Pdu) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 18, 9, 0}
}

func (x *Devm_Driver_Pdus_Pdu) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *Devm_Driver_Pdus_Pdu) GetEntityIndex() uint32 {
	if x != nil {
		return x.EntityIndex
	}
	return 0
}

func (x *Devm_Driver_Pdus_Pdu) GetBoardType() string {
	if x != nil {
		return x.BoardType
	}
	return ""
}

func (x *Devm_Driver_Pdus_Pdu) GetWorkMode() Devm_Driver_Pdus_Pdu_WorkMode {
	if x != nil {
		return x.WorkMode
	}
	return Devm_Driver_Pdus_Pdu_INVALID_ENUM_VALUE_WorkMode
}

func (x *Devm_Driver_Pdus_Pdu) GetPowerState() string {
	if x != nil {
		return x.PowerState
	}
	return ""
}

func (x *Devm_Driver_Pdus_Pdu) GetAbnormalNumber() string {
	if x != nil {
		return x.AbnormalNumber
	}
	return ""
}

func (x *Devm_Driver_Pdus_Pdu) GetNormalNumber() string {
	if x != nil {
		return x.NormalNumber
	}
	return ""
}

type Devm_Driver_Vsus_Vsu struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position    string                           `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	ServiceType Devm_Driver_Vsus_Vsu_ServiceType `protobuf:"varint,2,opt,name=service_type,json=service-type,proto3,enum=huawei_devm.Devm_Driver_Vsus_Vsu_ServiceType" json:"service_type,omitempty"`
}

func (x *Devm_Driver_Vsus_Vsu) Reset() {
	*x = Devm_Driver_Vsus_Vsu{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[495]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Driver_Vsus_Vsu) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Driver_Vsus_Vsu) ProtoMessage() {}

func (x *Devm_Driver_Vsus_Vsu) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[495]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Driver_Vsus_Vsu.ProtoReflect.Descriptor instead.
func (*Devm_Driver_Vsus_Vsu) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 18, 10, 0}
}

func (x *Devm_Driver_Vsus_Vsu) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *Devm_Driver_Vsus_Vsu) GetServiceType() Devm_Driver_Vsus_Vsu_ServiceType {
	if x != nil {
		return x.ServiceType
	}
	return Devm_Driver_Vsus_Vsu_INVALID_ENUM_VALUE_ServiceType
}

type Devm_Driver_Ecus_Ecu struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position          string `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	EntityIndex       uint32 `protobuf:"varint,2,opt,name=entity_index,json=entity-index,proto3" json:"entity_index,omitempty"`
	BoardType         string `protobuf:"bytes,3,opt,name=board_type,json=board-type,proto3" json:"board_type,omitempty"`
	SdramSize         uint32 `protobuf:"varint,4,opt,name=sdram_size,json=sdram-size,proto3" json:"sdram_size,omitempty"`
	FlashSize         uint32 `protobuf:"varint,5,opt,name=flash_size,json=flash-size,proto3" json:"flash_size,omitempty"`
	UpTime            uint32 `protobuf:"varint,6,opt,name=up_time,json=up-time,proto3" json:"up_time,omitempty"`
	OfcCardNumber     uint32 `protobuf:"varint,7,opt,name=ofc_card_number,json=ofc-card-number,proto3" json:"ofc_card_number,omitempty"`
	SubcardSlotNumber uint32 `protobuf:"varint,8,opt,name=subcard_slot_number,json=subcard-slot-number,proto3" json:"subcard_slot_number,omitempty"`
}

func (x *Devm_Driver_Ecus_Ecu) Reset() {
	*x = Devm_Driver_Ecus_Ecu{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[496]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Driver_Ecus_Ecu) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Driver_Ecus_Ecu) ProtoMessage() {}

func (x *Devm_Driver_Ecus_Ecu) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[496]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Driver_Ecus_Ecu.ProtoReflect.Descriptor instead.
func (*Devm_Driver_Ecus_Ecu) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 18, 11, 0}
}

func (x *Devm_Driver_Ecus_Ecu) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *Devm_Driver_Ecus_Ecu) GetEntityIndex() uint32 {
	if x != nil {
		return x.EntityIndex
	}
	return 0
}

func (x *Devm_Driver_Ecus_Ecu) GetBoardType() string {
	if x != nil {
		return x.BoardType
	}
	return ""
}

func (x *Devm_Driver_Ecus_Ecu) GetSdramSize() uint32 {
	if x != nil {
		return x.SdramSize
	}
	return 0
}

func (x *Devm_Driver_Ecus_Ecu) GetFlashSize() uint32 {
	if x != nil {
		return x.FlashSize
	}
	return 0
}

func (x *Devm_Driver_Ecus_Ecu) GetUpTime() uint32 {
	if x != nil {
		return x.UpTime
	}
	return 0
}

func (x *Devm_Driver_Ecus_Ecu) GetOfcCardNumber() uint32 {
	if x != nil {
		return x.OfcCardNumber
	}
	return 0
}

func (x *Devm_Driver_Ecus_Ecu) GetSubcardSlotNumber() uint32 {
	if x != nil {
		return x.SubcardSlotNumber
	}
	return 0
}

type Devm_Driver_Lcds_Lcd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position    string `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	EntityIndex uint32 `protobuf:"varint,2,opt,name=entity_index,json=entity-index,proto3" json:"entity_index,omitempty"`
	BoardType   string `protobuf:"bytes,3,opt,name=board_type,json=board-type,proto3" json:"board_type,omitempty"`
}

func (x *Devm_Driver_Lcds_Lcd) Reset() {
	*x = Devm_Driver_Lcds_Lcd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[497]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Driver_Lcds_Lcd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Driver_Lcds_Lcd) ProtoMessage() {}

func (x *Devm_Driver_Lcds_Lcd) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[497]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Driver_Lcds_Lcd.ProtoReflect.Descriptor instead.
func (*Devm_Driver_Lcds_Lcd) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 18, 12, 0}
}

func (x *Devm_Driver_Lcds_Lcd) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *Devm_Driver_Lcds_Lcd) GetEntityIndex() uint32 {
	if x != nil {
		return x.EntityIndex
	}
	return 0
}

func (x *Devm_Driver_Lcds_Lcd) GetBoardType() string {
	if x != nil {
		return x.BoardType
	}
	return ""
}

type Devm_Driver_Disks_Disk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position        string                      `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	Type            Devm_Driver_Disks_Disk_Type `protobuf:"varint,2,opt,name=type,proto3,enum=huawei_devm.Devm_Driver_Disks_Disk_Type" json:"type,omitempty"`
	Present         string                      `protobuf:"bytes,3,opt,name=present,proto3" json:"present,omitempty"`
	Power           string                      `protobuf:"bytes,4,opt,name=power,proto3" json:"power,omitempty"`
	Register        string                      `protobuf:"bytes,5,opt,name=register,proto3" json:"register,omitempty"`
	Vendor          string                      `protobuf:"bytes,6,opt,name=vendor,proto3" json:"vendor,omitempty"`
	SerialNumber    string                      `protobuf:"bytes,7,opt,name=serial_number,json=serial-number,proto3" json:"serial_number,omitempty"`
	FirmwareVersion string                      `protobuf:"bytes,8,opt,name=firmware_version,json=firmware-version,proto3" json:"firmware_version,omitempty"`
}

func (x *Devm_Driver_Disks_Disk) Reset() {
	*x = Devm_Driver_Disks_Disk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[498]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_Driver_Disks_Disk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_Driver_Disks_Disk) ProtoMessage() {}

func (x *Devm_Driver_Disks_Disk) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[498]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_Driver_Disks_Disk.ProtoReflect.Descriptor instead.
func (*Devm_Driver_Disks_Disk) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 18, 13, 0}
}

func (x *Devm_Driver_Disks_Disk) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *Devm_Driver_Disks_Disk) GetType() Devm_Driver_Disks_Disk_Type {
	if x != nil {
		return x.Type
	}
	return Devm_Driver_Disks_Disk_Type_HARDX_DISK
}

func (x *Devm_Driver_Disks_Disk) GetPresent() string {
	if x != nil {
		return x.Present
	}
	return ""
}

func (x *Devm_Driver_Disks_Disk) GetPower() string {
	if x != nil {
		return x.Power
	}
	return ""
}

func (x *Devm_Driver_Disks_Disk) GetRegister() string {
	if x != nil {
		return x.Register
	}
	return ""
}

func (x *Devm_Driver_Disks_Disk) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *Devm_Driver_Disks_Disk) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *Devm_Driver_Disks_Disk) GetFirmwareVersion() string {
	if x != nil {
		return x.FirmwareVersion
	}
	return ""
}

type Devm_FwdPerformanceAlarms_FwdPerformanceAlarm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotId          string `protobuf:"bytes,1,opt,name=slot_id,json=slot-id,proto3" json:"slot_id,omitempty"`
	ReportThreshold uint32 `protobuf:"varint,2,opt,name=report_threshold,json=report-threshold,proto3" json:"report_threshold,omitempty"`
	ClearThreshold  uint32 `protobuf:"varint,3,opt,name=clear_threshold,json=clear-threshold,proto3" json:"clear_threshold,omitempty"`
}

func (x *Devm_FwdPerformanceAlarms_FwdPerformanceAlarm) Reset() {
	*x = Devm_FwdPerformanceAlarms_FwdPerformanceAlarm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[499]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_FwdPerformanceAlarms_FwdPerformanceAlarm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_FwdPerformanceAlarms_FwdPerformanceAlarm) ProtoMessage() {}

func (x *Devm_FwdPerformanceAlarms_FwdPerformanceAlarm) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[499]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_FwdPerformanceAlarms_FwdPerformanceAlarm.ProtoReflect.Descriptor instead.
func (*Devm_FwdPerformanceAlarms_FwdPerformanceAlarm) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 19, 0}
}

func (x *Devm_FwdPerformanceAlarms_FwdPerformanceAlarm) GetSlotId() string {
	if x != nil {
		return x.SlotId
	}
	return ""
}

func (x *Devm_FwdPerformanceAlarms_FwdPerformanceAlarm) GetReportThreshold() uint32 {
	if x != nil {
		return x.ReportThreshold
	}
	return 0
}

func (x *Devm_FwdPerformanceAlarms_FwdPerformanceAlarm) GetClearThreshold() uint32 {
	if x != nil {
		return x.ClearThreshold
	}
	return 0
}

type Devm_FwdServicesAlarms_FwdServicesAlarm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotId          string `protobuf:"bytes,1,opt,name=slot_id,json=slot-id,proto3" json:"slot_id,omitempty"`
	ReportThreshold uint32 `protobuf:"varint,2,opt,name=report_threshold,json=report-threshold,proto3" json:"report_threshold,omitempty"`
	ClearThreshold  uint32 `protobuf:"varint,3,opt,name=clear_threshold,json=clear-threshold,proto3" json:"clear_threshold,omitempty"`
}

func (x *Devm_FwdServicesAlarms_FwdServicesAlarm) Reset() {
	*x = Devm_FwdServicesAlarms_FwdServicesAlarm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[500]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_FwdServicesAlarms_FwdServicesAlarm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_FwdServicesAlarms_FwdServicesAlarm) ProtoMessage() {}

func (x *Devm_FwdServicesAlarms_FwdServicesAlarm) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[500]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_FwdServicesAlarms_FwdServicesAlarm.ProtoReflect.Descriptor instead.
func (*Devm_FwdServicesAlarms_FwdServicesAlarm) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 20, 0}
}

func (x *Devm_FwdServicesAlarms_FwdServicesAlarm) GetSlotId() string {
	if x != nil {
		return x.SlotId
	}
	return ""
}

func (x *Devm_FwdServicesAlarms_FwdServicesAlarm) GetReportThreshold() uint32 {
	if x != nil {
		return x.ReportThreshold
	}
	return 0
}

func (x *Devm_FwdServicesAlarms_FwdServicesAlarm) GetClearThreshold() uint32 {
	if x != nil {
		return x.ClearThreshold
	}
	return 0
}

type Devm_FwdReassemblyAlarms_FwdReassemblyAlarm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotId          string `protobuf:"bytes,1,opt,name=slot_id,json=slot-id,proto3" json:"slot_id,omitempty"`
	ReportThreshold uint32 `protobuf:"varint,2,opt,name=report_threshold,json=report-threshold,proto3" json:"report_threshold,omitempty"`
	ClearThreshold  uint32 `protobuf:"varint,3,opt,name=clear_threshold,json=clear-threshold,proto3" json:"clear_threshold,omitempty"`
}

func (x *Devm_FwdReassemblyAlarms_FwdReassemblyAlarm) Reset() {
	*x = Devm_FwdReassemblyAlarms_FwdReassemblyAlarm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[501]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_FwdReassemblyAlarms_FwdReassemblyAlarm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_FwdReassemblyAlarms_FwdReassemblyAlarm) ProtoMessage() {}

func (x *Devm_FwdReassemblyAlarms_FwdReassemblyAlarm) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[501]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_FwdReassemblyAlarms_FwdReassemblyAlarm.ProtoReflect.Descriptor instead.
func (*Devm_FwdReassemblyAlarms_FwdReassemblyAlarm) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 21, 0}
}

func (x *Devm_FwdReassemblyAlarms_FwdReassemblyAlarm) GetSlotId() string {
	if x != nil {
		return x.SlotId
	}
	return ""
}

func (x *Devm_FwdReassemblyAlarms_FwdReassemblyAlarm) GetReportThreshold() uint32 {
	if x != nil {
		return x.ReportThreshold
	}
	return 0
}

func (x *Devm_FwdReassemblyAlarms_FwdReassemblyAlarm) GetClearThreshold() uint32 {
	if x != nil {
		return x.ClearThreshold
	}
	return 0
}

type Devm_FwdBoardFlowAlarms_FwdBoardFlowAlarm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotId                string `protobuf:"bytes,1,opt,name=slot_id,json=slot-id,proto3" json:"slot_id,omitempty"`
	InputReportThreshold  uint32 `protobuf:"varint,2,opt,name=input_report_threshold,json=input-report-threshold,proto3" json:"input_report_threshold,omitempty"`
	InputClearThreshold   uint32 `protobuf:"varint,3,opt,name=input_clear_threshold,json=input-clear-threshold,proto3" json:"input_clear_threshold,omitempty"`
	OutputReportThreshold uint32 `protobuf:"varint,4,opt,name=output_report_threshold,json=output-report-threshold,proto3" json:"output_report_threshold,omitempty"`
	OutputClearThreshold  uint32 `protobuf:"varint,5,opt,name=output_clear_threshold,json=output-clear-threshold,proto3" json:"output_clear_threshold,omitempty"`
}

func (x *Devm_FwdBoardFlowAlarms_FwdBoardFlowAlarm) Reset() {
	*x = Devm_FwdBoardFlowAlarms_FwdBoardFlowAlarm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[502]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_FwdBoardFlowAlarms_FwdBoardFlowAlarm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_FwdBoardFlowAlarms_FwdBoardFlowAlarm) ProtoMessage() {}

func (x *Devm_FwdBoardFlowAlarms_FwdBoardFlowAlarm) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[502]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_FwdBoardFlowAlarms_FwdBoardFlowAlarm.ProtoReflect.Descriptor instead.
func (*Devm_FwdBoardFlowAlarms_FwdBoardFlowAlarm) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 22, 0}
}

func (x *Devm_FwdBoardFlowAlarms_FwdBoardFlowAlarm) GetSlotId() string {
	if x != nil {
		return x.SlotId
	}
	return ""
}

func (x *Devm_FwdBoardFlowAlarms_FwdBoardFlowAlarm) GetInputReportThreshold() uint32 {
	if x != nil {
		return x.InputReportThreshold
	}
	return 0
}

func (x *Devm_FwdBoardFlowAlarms_FwdBoardFlowAlarm) GetInputClearThreshold() uint32 {
	if x != nil {
		return x.InputClearThreshold
	}
	return 0
}

func (x *Devm_FwdBoardFlowAlarms_FwdBoardFlowAlarm) GetOutputReportThreshold() uint32 {
	if x != nil {
		return x.OutputReportThreshold
	}
	return 0
}

func (x *Devm_FwdBoardFlowAlarms_FwdBoardFlowAlarm) GetOutputClearThreshold() uint32 {
	if x != nil {
		return x.OutputClearThreshold
	}
	return 0
}

type Devm_ActiveHardwareAlarmInfos_ActiveHardwareAlarmInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sequence      uint32 `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Position      string `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`
	AlarmId       uint32 `protobuf:"varint,3,opt,name=alarm_id,json=alarm-id,proto3" json:"alarm_id,omitempty"`
	Level         string `protobuf:"bytes,4,opt,name=level,proto3" json:"level,omitempty"`
	GeneratedTime string `protobuf:"bytes,5,opt,name=generated_time,json=generated-time,proto3" json:"generated_time,omitempty"`
	Info          string `protobuf:"bytes,6,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *Devm_ActiveHardwareAlarmInfos_ActiveHardwareAlarmInfo) Reset() {
	*x = Devm_ActiveHardwareAlarmInfos_ActiveHardwareAlarmInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[503]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_ActiveHardwareAlarmInfos_ActiveHardwareAlarmInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_ActiveHardwareAlarmInfos_ActiveHardwareAlarmInfo) ProtoMessage() {}

func (x *Devm_ActiveHardwareAlarmInfos_ActiveHardwareAlarmInfo) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[503]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_ActiveHardwareAlarmInfos_ActiveHardwareAlarmInfo.ProtoReflect.Descriptor instead.
func (*Devm_ActiveHardwareAlarmInfos_ActiveHardwareAlarmInfo) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 25, 0}
}

func (x *Devm_ActiveHardwareAlarmInfos_ActiveHardwareAlarmInfo) GetSequence() uint32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *Devm_ActiveHardwareAlarmInfos_ActiveHardwareAlarmInfo) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *Devm_ActiveHardwareAlarmInfos_ActiveHardwareAlarmInfo) GetAlarmId() uint32 {
	if x != nil {
		return x.AlarmId
	}
	return 0
}

func (x *Devm_ActiveHardwareAlarmInfos_ActiveHardwareAlarmInfo) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *Devm_ActiveHardwareAlarmInfos_ActiveHardwareAlarmInfo) GetGeneratedTime() string {
	if x != nil {
		return x.GeneratedTime
	}
	return ""
}

func (x *Devm_ActiveHardwareAlarmInfos_ActiveHardwareAlarmInfo) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

type Devm_HistoryHardwareAlarmInfos_HistoryHardwareAlarmInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sequence      uint32 `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Position      string `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`
	AlarmId       uint32 `protobuf:"varint,3,opt,name=alarm_id,json=alarm-id,proto3" json:"alarm_id,omitempty"`
	Level         string `protobuf:"bytes,4,opt,name=level,proto3" json:"level,omitempty"`
	GeneratedTime string `protobuf:"bytes,5,opt,name=generated_time,json=generated-time,proto3" json:"generated_time,omitempty"`
	Info          string `protobuf:"bytes,6,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *Devm_HistoryHardwareAlarmInfos_HistoryHardwareAlarmInfo) Reset() {
	*x = Devm_HistoryHardwareAlarmInfos_HistoryHardwareAlarmInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[504]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_HistoryHardwareAlarmInfos_HistoryHardwareAlarmInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_HistoryHardwareAlarmInfos_HistoryHardwareAlarmInfo) ProtoMessage() {}

func (x *Devm_HistoryHardwareAlarmInfos_HistoryHardwareAlarmInfo) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[504]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_HistoryHardwareAlarmInfos_HistoryHardwareAlarmInfo.ProtoReflect.Descriptor instead.
func (*Devm_HistoryHardwareAlarmInfos_HistoryHardwareAlarmInfo) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 26, 0}
}

func (x *Devm_HistoryHardwareAlarmInfos_HistoryHardwareAlarmInfo) GetSequence() uint32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *Devm_HistoryHardwareAlarmInfos_HistoryHardwareAlarmInfo) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *Devm_HistoryHardwareAlarmInfos_HistoryHardwareAlarmInfo) GetAlarmId() uint32 {
	if x != nil {
		return x.AlarmId
	}
	return 0
}

func (x *Devm_HistoryHardwareAlarmInfos_HistoryHardwareAlarmInfo) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *Devm_HistoryHardwareAlarmInfos_HistoryHardwareAlarmInfo) GetGeneratedTime() string {
	if x != nil {
		return x.GeneratedTime
	}
	return ""
}

func (x *Devm_HistoryHardwareAlarmInfos_HistoryHardwareAlarmInfo) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

type Devm_RemotePorts_RemotePort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string                                         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	LoopbackMode      Devm_RemotePorts_RemotePort_LoopbackMode       `protobuf:"varint,2,opt,name=loopback_mode,json=loopback-mode,proto3,enum=huawei_devm.Devm_RemotePorts_RemotePort_LoopbackMode" json:"loopback_mode,omitempty"`
	TxEnableDelay     uint32                                         `protobuf:"varint,3,opt,name=tx_enable_delay,json=tx-enable-delay,proto3" json:"tx_enable_delay,omitempty"`
	Ethernet          *Devm_RemotePorts_RemotePort_Ethernet          `protobuf:"bytes,4,opt,name=ethernet,proto3" json:"ethernet,omitempty"`
	Laser             *Devm_RemotePorts_RemotePort_Laser             `protobuf:"bytes,5,opt,name=laser,proto3" json:"laser,omitempty"`
	OpticalModule     *Devm_RemotePorts_RemotePort_OpticalModule     `protobuf:"bytes,6,opt,name=optical_module,json=optical-module,proto3" json:"optical_module,omitempty"`
	TransmissionAlarm *Devm_RemotePorts_RemotePort_TransmissionAlarm `protobuf:"bytes,7,opt,name=transmission_alarm,json=transmission-alarm,proto3" json:"transmission_alarm,omitempty"`
	PortAlarm         *Devm_RemotePorts_RemotePort_PortAlarm         `protobuf:"bytes,8,opt,name=port_alarm,json=port-alarm,proto3" json:"port_alarm,omitempty"`
}

func (x *Devm_RemotePorts_RemotePort) Reset() {
	*x = Devm_RemotePorts_RemotePort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[505]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_RemotePorts_RemotePort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_RemotePorts_RemotePort) ProtoMessage() {}

func (x *Devm_RemotePorts_RemotePort) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[505]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_RemotePorts_RemotePort.ProtoReflect.Descriptor instead.
func (*Devm_RemotePorts_RemotePort) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 27, 0}
}

func (x *Devm_RemotePorts_RemotePort) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Devm_RemotePorts_RemotePort) GetLoopbackMode() Devm_RemotePorts_RemotePort_LoopbackMode {
	if x != nil {
		return x.LoopbackMode
	}
	return Devm_RemotePorts_RemotePort_LoopbackMode_NOLOOPBACK
}

func (x *Devm_RemotePorts_RemotePort) GetTxEnableDelay() uint32 {
	if x != nil {
		return x.TxEnableDelay
	}
	return 0
}

func (x *Devm_RemotePorts_RemotePort) GetEthernet() *Devm_RemotePorts_RemotePort_Ethernet {
	if x != nil {
		return x.Ethernet
	}
	return nil
}

func (x *Devm_RemotePorts_RemotePort) GetLaser() *Devm_RemotePorts_RemotePort_Laser {
	if x != nil {
		return x.Laser
	}
	return nil
}

func (x *Devm_RemotePorts_RemotePort) GetOpticalModule() *Devm_RemotePorts_RemotePort_OpticalModule {
	if x != nil {
		return x.OpticalModule
	}
	return nil
}

func (x *Devm_RemotePorts_RemotePort) GetTransmissionAlarm() *Devm_RemotePorts_RemotePort_TransmissionAlarm {
	if x != nil {
		return x.TransmissionAlarm
	}
	return nil
}

func (x *Devm_RemotePorts_RemotePort) GetPortAlarm() *Devm_RemotePorts_RemotePort_PortAlarm {
	if x != nil {
		return x.PortAlarm
	}
	return nil
}

type Devm_RemotePorts_RemotePort_Ethernet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowControl      Devm_RemotePorts_RemotePort_Ethernet_FlowControl      `protobuf:"varint,1,opt,name=flow_control,json=flow-control,proto3,enum=huawei_devm.Devm_RemotePorts_RemotePort_Ethernet_FlowControl" json:"flow_control,omitempty"`
	TransMode        Devm_RemotePorts_RemotePort_Ethernet_TransMode        `protobuf:"varint,2,opt,name=trans_mode,json=trans-mode,proto3,enum=huawei_devm.Devm_RemotePorts_RemotePort_Ethernet_TransMode" json:"trans_mode,omitempty"`
	DownHoldTime     uint32                                                `protobuf:"varint,3,opt,name=down_hold_time,json=down-hold-time,proto3" json:"down_hold_time,omitempty"`
	UpHoldTime       uint32                                                `protobuf:"varint,4,opt,name=up_hold_time,json=up-hold-time,proto3" json:"up_hold_time,omitempty"`
	HoldUp           Devm_RemotePorts_RemotePort_Ethernet_HoldUp           `protobuf:"varint,5,opt,name=hold_up,json=hold-up,proto3,enum=huawei_devm.Devm_RemotePorts_RemotePort_Ethernet_HoldUp" json:"hold_up,omitempty"`
	InterPacketGap   Devm_RemotePorts_RemotePort_Ethernet_InterPacketGap   `protobuf:"varint,6,opt,name=inter_packet_gap,json=inter-packet-gap,proto3,enum=huawei_devm.Devm_RemotePorts_RemotePort_Ethernet_InterPacketGap" json:"inter_packet_gap,omitempty"`
	EthWanAttr       *Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr      `protobuf:"bytes,7,opt,name=eth_wan_attr,json=eth-wan-attr,proto3" json:"eth_wan_attr,omitempty"`
	Speed            Devm_RemotePorts_RemotePort_Ethernet_Speed            `protobuf:"varint,8,opt,name=speed,proto3,enum=huawei_devm.Devm_RemotePorts_RemotePort_Ethernet_Speed" json:"speed,omitempty"`
	Duplex           Devm_RemotePorts_RemotePort_Ethernet_Duplex           `protobuf:"varint,9,opt,name=duplex,proto3,enum=huawei_devm.Devm_RemotePorts_RemotePort_Ethernet_Duplex" json:"duplex,omitempty"`
	Negotiation      Devm_RemotePorts_RemotePort_Ethernet_Negotiation      `protobuf:"varint,10,opt,name=negotiation,proto3,enum=huawei_devm.Devm_RemotePorts_RemotePort_Ethernet_Negotiation" json:"negotiation,omitempty"`
	NegotiationMode  Devm_RemotePorts_RemotePort_Ethernet_NegotiationMode  `protobuf:"varint,11,opt,name=negotiation_mode,json=negotiation-mode,proto3,enum=huawei_devm.Devm_RemotePorts_RemotePort_Ethernet_NegotiationMode" json:"negotiation_mode,omitempty"`
	GfMediaType      Devm_RemotePorts_RemotePort_Ethernet_GfMediaType      `protobuf:"varint,12,opt,name=gf_media_type,json=gf-media-type,proto3,enum=huawei_devm.Devm_RemotePorts_RemotePort_Ethernet_GfMediaType" json:"gf_media_type,omitempty"`
	FlowControlState Devm_RemotePorts_RemotePort_Ethernet_FlowControlState `protobuf:"varint,13,opt,name=flow_control_state,json=flow-control-state,proto3,enum=huawei_devm.Devm_RemotePorts_RemotePort_Ethernet_FlowControlState" json:"flow_control_state,omitempty"`
}

func (x *Devm_RemotePorts_RemotePort_Ethernet) Reset() {
	*x = Devm_RemotePorts_RemotePort_Ethernet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[506]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_RemotePorts_RemotePort_Ethernet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_RemotePorts_RemotePort_Ethernet) ProtoMessage() {}

func (x *Devm_RemotePorts_RemotePort_Ethernet) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[506]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_RemotePorts_RemotePort_Ethernet.ProtoReflect.Descriptor instead.
func (*Devm_RemotePorts_RemotePort_Ethernet) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 27, 0, 0}
}

func (x *Devm_RemotePorts_RemotePort_Ethernet) GetFlowControl() Devm_RemotePorts_RemotePort_Ethernet_FlowControl {
	if x != nil {
		return x.FlowControl
	}
	return Devm_RemotePorts_RemotePort_Ethernet_FlowControl_ALLX_DISABLE
}

func (x *Devm_RemotePorts_RemotePort_Ethernet) GetTransMode() Devm_RemotePorts_RemotePort_Ethernet_TransMode {
	if x != nil {
		return x.TransMode
	}
	return Devm_RemotePorts_RemotePort_Ethernet_TransMode_LANX_MODE
}

func (x *Devm_RemotePorts_RemotePort_Ethernet) GetDownHoldTime() uint32 {
	if x != nil {
		return x.DownHoldTime
	}
	return 0
}

func (x *Devm_RemotePorts_RemotePort_Ethernet) GetUpHoldTime() uint32 {
	if x != nil {
		return x.UpHoldTime
	}
	return 0
}

func (x *Devm_RemotePorts_RemotePort_Ethernet) GetHoldUp() Devm_RemotePorts_RemotePort_Ethernet_HoldUp {
	if x != nil {
		return x.HoldUp
	}
	return Devm_RemotePorts_RemotePort_Ethernet_HoldUp_DISABLE
}

func (x *Devm_RemotePorts_RemotePort_Ethernet) GetInterPacketGap() Devm_RemotePorts_RemotePort_Ethernet_InterPacketGap {
	if x != nil {
		return x.InterPacketGap
	}
	return Devm_RemotePorts_RemotePort_Ethernet_InterPacketGap_SHRINK
}

func (x *Devm_RemotePorts_RemotePort_Ethernet) GetEthWanAttr() *Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr {
	if x != nil {
		return x.EthWanAttr
	}
	return nil
}

func (x *Devm_RemotePorts_RemotePort_Ethernet) GetSpeed() Devm_RemotePorts_RemotePort_Ethernet_Speed {
	if x != nil {
		return x.Speed
	}
	return Devm_RemotePorts_RemotePort_Ethernet_Speed_X_10M
}

func (x *Devm_RemotePorts_RemotePort_Ethernet) GetDuplex() Devm_RemotePorts_RemotePort_Ethernet_Duplex {
	if x != nil {
		return x.Duplex
	}
	return Devm_RemotePorts_RemotePort_Ethernet_Duplex_AUTO
}

func (x *Devm_RemotePorts_RemotePort_Ethernet) GetNegotiation() Devm_RemotePorts_RemotePort_Ethernet_Negotiation {
	if x != nil {
		return x.Negotiation
	}
	return Devm_RemotePorts_RemotePort_Ethernet_Negotiation_DISABLE
}

func (x *Devm_RemotePorts_RemotePort_Ethernet) GetNegotiationMode() Devm_RemotePorts_RemotePort_Ethernet_NegotiationMode {
	if x != nil {
		return x.NegotiationMode
	}
	return Devm_RemotePorts_RemotePort_Ethernet_NegotiationMode_SLAVE
}

func (x *Devm_RemotePorts_RemotePort_Ethernet) GetGfMediaType() Devm_RemotePorts_RemotePort_Ethernet_GfMediaType {
	if x != nil {
		return x.GfMediaType
	}
	return Devm_RemotePorts_RemotePort_Ethernet_GfMediaType_AUTO
}

func (x *Devm_RemotePorts_RemotePort_Ethernet) GetFlowControlState() Devm_RemotePorts_RemotePort_Ethernet_FlowControlState {
	if x != nil {
		return x.FlowControlState
	}
	return Devm_RemotePorts_RemotePort_Ethernet_FlowControlState_ALLX_DISABLE
}

type Devm_RemotePorts_RemotePort_Laser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AutoShutEnable Devm_RemotePorts_RemotePort_Laser_AutoShutEnable `protobuf:"varint,1,opt,name=auto_shut_enable,json=auto-shut-enable,proto3,enum=huawei_devm.Devm_RemotePorts_RemotePort_Laser_AutoShutEnable" json:"auto_shut_enable,omitempty"`
	OpenTime       uint32                                           `protobuf:"varint,2,opt,name=open_time,json=open-time,proto3" json:"open_time,omitempty"`
	CloseTime      uint32                                           `protobuf:"varint,3,opt,name=close_time,json=close-time,proto3" json:"close_time,omitempty"`
}

func (x *Devm_RemotePorts_RemotePort_Laser) Reset() {
	*x = Devm_RemotePorts_RemotePort_Laser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[507]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_RemotePorts_RemotePort_Laser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_RemotePorts_RemotePort_Laser) ProtoMessage() {}

func (x *Devm_RemotePorts_RemotePort_Laser) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[507]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_RemotePorts_RemotePort_Laser.ProtoReflect.Descriptor instead.
func (*Devm_RemotePorts_RemotePort_Laser) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 27, 0, 1}
}

func (x *Devm_RemotePorts_RemotePort_Laser) GetAutoShutEnable() Devm_RemotePorts_RemotePort_Laser_AutoShutEnable {
	if x != nil {
		return x.AutoShutEnable
	}
	return Devm_RemotePorts_RemotePort_Laser_AutoShutEnable_DISABLE
}

func (x *Devm_RemotePorts_RemotePort_Laser) GetOpenTime() uint32 {
	if x != nil {
		return x.OpenTime
	}
	return 0
}

func (x *Devm_RemotePorts_RemotePort_Laser) GetCloseTime() uint32 {
	if x != nil {
		return x.CloseTime
	}
	return 0
}

type Devm_RemotePorts_RemotePort_OpticalModule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RxHighPowerWarnEnable   bool                                                              `protobuf:"varint,1,opt,name=rx_high_power_warn_enable,json=rx-high-power-warn-enable,proto3" json:"rx_high_power_warn_enable,omitempty"`
	RxLowPowerWarnEnable    bool                                                              `protobuf:"varint,2,opt,name=rx_low_power_warn_enable,json=rx-low-power-warn-enable,proto3" json:"rx_low_power_warn_enable,omitempty"`
	TxHighPowerWarnEnable   bool                                                              `protobuf:"varint,3,opt,name=tx_high_power_warn_enable,json=tx-high-power-warn-enable,proto3" json:"tx_high_power_warn_enable,omitempty"`
	TxLowPowerWarnEnable    bool                                                              `protobuf:"varint,4,opt,name=tx_low_power_warn_enable,json=tx-low-power-warn-enable,proto3" json:"tx_low_power_warn_enable,omitempty"`
	VoltHighWarnEnable      bool                                                              `protobuf:"varint,5,opt,name=volt_high_warn_enable,json=volt-high-warn-enable,proto3" json:"volt_high_warn_enable,omitempty"`
	VoltLowWarnEnable       bool                                                              `protobuf:"varint,6,opt,name=volt_low_warn_enable,json=volt-low-warn-enable,proto3" json:"volt_low_warn_enable,omitempty"`
	WavelengthChannelNumber Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber `protobuf:"varint,7,opt,name=wavelength_channel_number,json=wavelength-channel-number,proto3,enum=huawei_devm.Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber" json:"wavelength_channel_number,omitempty"`
	TunableWavelength       uint32                                                            `protobuf:"varint,8,opt,name=tunable_wavelength,json=tunable-wavelength,proto3" json:"tunable_wavelength,omitempty"`
	TunableFrequency        uint32                                                            `protobuf:"varint,9,opt,name=tunable_frequency,json=tunable-frequency,proto3" json:"tunable_frequency,omitempty"`
}

func (x *Devm_RemotePorts_RemotePort_OpticalModule) Reset() {
	*x = Devm_RemotePorts_RemotePort_OpticalModule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[508]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_RemotePorts_RemotePort_OpticalModule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_RemotePorts_RemotePort_OpticalModule) ProtoMessage() {}

func (x *Devm_RemotePorts_RemotePort_OpticalModule) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[508]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_RemotePorts_RemotePort_OpticalModule.ProtoReflect.Descriptor instead.
func (*Devm_RemotePorts_RemotePort_OpticalModule) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 27, 0, 2}
}

func (x *Devm_RemotePorts_RemotePort_OpticalModule) GetRxHighPowerWarnEnable() bool {
	if x != nil {
		return x.RxHighPowerWarnEnable
	}
	return false
}

func (x *Devm_RemotePorts_RemotePort_OpticalModule) GetRxLowPowerWarnEnable() bool {
	if x != nil {
		return x.RxLowPowerWarnEnable
	}
	return false
}

func (x *Devm_RemotePorts_RemotePort_OpticalModule) GetTxHighPowerWarnEnable() bool {
	if x != nil {
		return x.TxHighPowerWarnEnable
	}
	return false
}

func (x *Devm_RemotePorts_RemotePort_OpticalModule) GetTxLowPowerWarnEnable() bool {
	if x != nil {
		return x.TxLowPowerWarnEnable
	}
	return false
}

func (x *Devm_RemotePorts_RemotePort_OpticalModule) GetVoltHighWarnEnable() bool {
	if x != nil {
		return x.VoltHighWarnEnable
	}
	return false
}

func (x *Devm_RemotePorts_RemotePort_OpticalModule) GetVoltLowWarnEnable() bool {
	if x != nil {
		return x.VoltLowWarnEnable
	}
	return false
}

func (x *Devm_RemotePorts_RemotePort_OpticalModule) GetWavelengthChannelNumber() Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber {
	if x != nil {
		return x.WavelengthChannelNumber
	}
	return Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber_X_196X_10THZX_1528X_773NM
}

func (x *Devm_RemotePorts_RemotePort_OpticalModule) GetTunableWavelength() uint32 {
	if x != nil {
		return x.TunableWavelength
	}
	return 0
}

func (x *Devm_RemotePorts_RemotePort_OpticalModule) GetTunableFrequency() uint32 {
	if x != nil {
		return x.TunableFrequency
	}
	return 0
}

type Devm_RemotePorts_RemotePort_TransmissionAlarm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HoldoffTimer      uint32                                                           `protobuf:"varint,1,opt,name=holdoff_timer,json=holdoff-timer,proto3" json:"holdoff_timer,omitempty"`
	HoldupTimer       uint32                                                           `protobuf:"varint,2,opt,name=holdup_timer,json=holdup-timer,proto3" json:"holdup_timer,omitempty"`
	ThresholdB3Tca    uint32                                                           `protobuf:"varint,3,opt,name=threshold_b3tca,json=threshold-b3tca,proto3" json:"threshold_b3tca,omitempty"`
	ThresholdB1Tca    uint32                                                           `protobuf:"varint,4,opt,name=threshold_b1tca,json=threshold-b1tca,proto3" json:"threshold_b1tca,omitempty"`
	ThresholdB2Tca    uint32                                                           `protobuf:"varint,5,opt,name=threshold_b2tca,json=threshold-b2tca,proto3" json:"threshold_b2tca,omitempty"`
	ThresholdSdbere   uint32                                                           `protobuf:"varint,6,opt,name=threshold_sdbere,json=threshold-sdbere,proto3" json:"threshold_sdbere,omitempty"`
	ThresholdSfbere   uint32                                                           `protobuf:"varint,7,opt,name=threshold_sfbere,json=threshold-sfbere,proto3" json:"threshold_sfbere,omitempty"`
	DampSuppress      uint32                                                           `protobuf:"varint,8,opt,name=damp_suppress,json=damp-suppress,proto3" json:"damp_suppress,omitempty"`
	DampReuse         uint32                                                           `protobuf:"varint,9,opt,name=damp_reuse,json=damp-reuse,proto3" json:"damp_reuse,omitempty"`
	DampCeiling       uint32                                                           `protobuf:"varint,10,opt,name=damp_ceiling,json=damp-ceiling,proto3" json:"damp_ceiling,omitempty"`
	DampDecayOk       uint32                                                           `protobuf:"varint,11,opt,name=damp_decay_ok,json=damp-decay-ok,proto3" json:"damp_decay_ok,omitempty"`
	DampDecayNg       uint32                                                           `protobuf:"varint,12,opt,name=damp_decay_ng,json=damp-decay-ng,proto3" json:"damp_decay_ng,omitempty"`
	TransAlarmIfDowns *Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns `protobuf:"bytes,13,opt,name=trans_alarm_if_downs,json=trans-alarm-if-downs,proto3" json:"trans_alarm_if_downs,omitempty"`
}

func (x *Devm_RemotePorts_RemotePort_TransmissionAlarm) Reset() {
	*x = Devm_RemotePorts_RemotePort_TransmissionAlarm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[509]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_RemotePorts_RemotePort_TransmissionAlarm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_RemotePorts_RemotePort_TransmissionAlarm) ProtoMessage() {}

func (x *Devm_RemotePorts_RemotePort_TransmissionAlarm) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[509]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_RemotePorts_RemotePort_TransmissionAlarm.ProtoReflect.Descriptor instead.
func (*Devm_RemotePorts_RemotePort_TransmissionAlarm) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 27, 0, 3}
}

func (x *Devm_RemotePorts_RemotePort_TransmissionAlarm) GetHoldoffTimer() uint32 {
	if x != nil {
		return x.HoldoffTimer
	}
	return 0
}

func (x *Devm_RemotePorts_RemotePort_TransmissionAlarm) GetHoldupTimer() uint32 {
	if x != nil {
		return x.HoldupTimer
	}
	return 0
}

func (x *Devm_RemotePorts_RemotePort_TransmissionAlarm) GetThresholdB3Tca() uint32 {
	if x != nil {
		return x.ThresholdB3Tca
	}
	return 0
}

func (x *Devm_RemotePorts_RemotePort_TransmissionAlarm) GetThresholdB1Tca() uint32 {
	if x != nil {
		return x.ThresholdB1Tca
	}
	return 0
}

func (x *Devm_RemotePorts_RemotePort_TransmissionAlarm) GetThresholdB2Tca() uint32 {
	if x != nil {
		return x.ThresholdB2Tca
	}
	return 0
}

func (x *Devm_RemotePorts_RemotePort_TransmissionAlarm) GetThresholdSdbere() uint32 {
	if x != nil {
		return x.ThresholdSdbere
	}
	return 0
}

func (x *Devm_RemotePorts_RemotePort_TransmissionAlarm) GetThresholdSfbere() uint32 {
	if x != nil {
		return x.ThresholdSfbere
	}
	return 0
}

func (x *Devm_RemotePorts_RemotePort_TransmissionAlarm) GetDampSuppress() uint32 {
	if x != nil {
		return x.DampSuppress
	}
	return 0
}

func (x *Devm_RemotePorts_RemotePort_TransmissionAlarm) GetDampReuse() uint32 {
	if x != nil {
		return x.DampReuse
	}
	return 0
}

func (x *Devm_RemotePorts_RemotePort_TransmissionAlarm) GetDampCeiling() uint32 {
	if x != nil {
		return x.DampCeiling
	}
	return 0
}

func (x *Devm_RemotePorts_RemotePort_TransmissionAlarm) GetDampDecayOk() uint32 {
	if x != nil {
		return x.DampDecayOk
	}
	return 0
}

func (x *Devm_RemotePorts_RemotePort_TransmissionAlarm) GetDampDecayNg() uint32 {
	if x != nil {
		return x.DampDecayNg
	}
	return 0
}

func (x *Devm_RemotePorts_RemotePort_TransmissionAlarm) GetTransAlarmIfDowns() *Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns {
	if x != nil {
		return x.TransAlarmIfDowns
	}
	return nil
}

type Devm_RemotePorts_RemotePort_PortAlarm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CrcEnableDown            bool                                                `protobuf:"varint,1,opt,name=crc_enable_down,json=crc-enable-down,proto3" json:"crc_enable_down,omitempty"`
	InputEnableDown          bool                                                `protobuf:"varint,2,opt,name=input_enable_down,json=input-enable-down,proto3" json:"input_enable_down,omitempty"`
	InputErrorHighThreshold  uint32                                              `protobuf:"varint,3,opt,name=input_error_high_threshold,json=input-error-high-threshold,proto3" json:"input_error_high_threshold,omitempty"`
	InputErrorLowThreshold   uint32                                              `protobuf:"varint,4,opt,name=input_error_low_threshold,json=input-error-low-threshold,proto3" json:"input_error_low_threshold,omitempty"`
	InputErrorInterval       uint32                                              `protobuf:"varint,5,opt,name=input_error_interval,json=input-error-interval,proto3" json:"input_error_interval,omitempty"`
	OutputEnableDown         bool                                                `protobuf:"varint,6,opt,name=output_enable_down,json=output-enable-down,proto3" json:"output_enable_down,omitempty"`
	OutputErrorHighThreshold uint32                                              `protobuf:"varint,7,opt,name=output_error_high_threshold,json=output-error-high-threshold,proto3" json:"output_error_high_threshold,omitempty"`
	OutputErrorLowThreshold  uint32                                              `protobuf:"varint,8,opt,name=output_error_low_threshold,json=output-error-low-threshold,proto3" json:"output_error_low_threshold,omitempty"`
	OutputErrorInterval      uint32                                              `protobuf:"varint,9,opt,name=output_error_interval,json=output-error-interval,proto3" json:"output_error_interval,omitempty"`
	PhysicalUpdownEnable     bool                                                `protobuf:"varint,10,opt,name=physical_updown_enable,json=physical-updown-enable,proto3" json:"physical_updown_enable,omitempty"`
	EthPortAlarm             *Devm_RemotePorts_RemotePort_PortAlarm_EthPortAlarm `protobuf:"bytes,11,opt,name=eth_port_alarm,json=eth-port-alarm,proto3" json:"eth_port_alarm,omitempty"`
	SdhPortAlarm             *Devm_RemotePorts_RemotePort_PortAlarm_SdhPortAlarm `protobuf:"bytes,12,opt,name=sdh_port_alarm,json=sdh-port-alarm,proto3" json:"sdh_port_alarm,omitempty"`
	// Types that are assignable to AlarmType:
	//	*Devm_RemotePorts_RemotePort_PortAlarm_AlarmTypeCrcErrorThreshold
	//	*Devm_RemotePorts_RemotePort_PortAlarm_AlarmTypeLinkCrc
	AlarmType isDevm_RemotePorts_RemotePort_PortAlarm_AlarmType `protobuf_oneof:"AlarmType"`
}

func (x *Devm_RemotePorts_RemotePort_PortAlarm) Reset() {
	*x = Devm_RemotePorts_RemotePort_PortAlarm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[510]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_RemotePorts_RemotePort_PortAlarm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_RemotePorts_RemotePort_PortAlarm) ProtoMessage() {}

func (x *Devm_RemotePorts_RemotePort_PortAlarm) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[510]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_RemotePorts_RemotePort_PortAlarm.ProtoReflect.Descriptor instead.
func (*Devm_RemotePorts_RemotePort_PortAlarm) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 27, 0, 4}
}

func (x *Devm_RemotePorts_RemotePort_PortAlarm) GetCrcEnableDown() bool {
	if x != nil {
		return x.CrcEnableDown
	}
	return false
}

func (x *Devm_RemotePorts_RemotePort_PortAlarm) GetInputEnableDown() bool {
	if x != nil {
		return x.InputEnableDown
	}
	return false
}

func (x *Devm_RemotePorts_RemotePort_PortAlarm) GetInputErrorHighThreshold() uint32 {
	if x != nil {
		return x.InputErrorHighThreshold
	}
	return 0
}

func (x *Devm_RemotePorts_RemotePort_PortAlarm) GetInputErrorLowThreshold() uint32 {
	if x != nil {
		return x.InputErrorLowThreshold
	}
	return 0
}

func (x *Devm_RemotePorts_RemotePort_PortAlarm) GetInputErrorInterval() uint32 {
	if x != nil {
		return x.InputErrorInterval
	}
	return 0
}

func (x *Devm_RemotePorts_RemotePort_PortAlarm) GetOutputEnableDown() bool {
	if x != nil {
		return x.OutputEnableDown
	}
	return false
}

func (x *Devm_RemotePorts_RemotePort_PortAlarm) GetOutputErrorHighThreshold() uint32 {
	if x != nil {
		return x.OutputErrorHighThreshold
	}
	return 0
}

func (x *Devm_RemotePorts_RemotePort_PortAlarm) GetOutputErrorLowThreshold() uint32 {
	if x != nil {
		return x.OutputErrorLowThreshold
	}
	return 0
}

func (x *Devm_RemotePorts_RemotePort_PortAlarm) GetOutputErrorInterval() uint32 {
	if x != nil {
		return x.OutputErrorInterval
	}
	return 0
}

func (x *Devm_RemotePorts_RemotePort_PortAlarm) GetPhysicalUpdownEnable() bool {
	if x != nil {
		return x.PhysicalUpdownEnable
	}
	return false
}

func (x *Devm_RemotePorts_RemotePort_PortAlarm) GetEthPortAlarm() *Devm_RemotePorts_RemotePort_PortAlarm_EthPortAlarm {
	if x != nil {
		return x.EthPortAlarm
	}
	return nil
}

func (x *Devm_RemotePorts_RemotePort_PortAlarm) GetSdhPortAlarm() *Devm_RemotePorts_RemotePort_PortAlarm_SdhPortAlarm {
	if x != nil {
		return x.SdhPortAlarm
	}
	return nil
}

func (m *Devm_RemotePorts_RemotePort_PortAlarm) GetAlarmType() isDevm_RemotePorts_RemotePort_PortAlarm_AlarmType {
	if m != nil {
		return m.AlarmType
	}
	return nil
}

func (x *Devm_RemotePorts_RemotePort_PortAlarm) GetAlarmTypeCrcErrorThreshold() *Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_CrcErrorThreshold {
	if x, ok := x.GetAlarmType().(*Devm_RemotePorts_RemotePort_PortAlarm_AlarmTypeCrcErrorThreshold); ok {
		return x.AlarmTypeCrcErrorThreshold
	}
	return nil
}

func (x *Devm_RemotePorts_RemotePort_PortAlarm) GetAlarmTypeLinkCrc() *Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_LinkCrc {
	if x, ok := x.GetAlarmType().(*Devm_RemotePorts_RemotePort_PortAlarm_AlarmTypeLinkCrc); ok {
		return x.AlarmTypeLinkCrc
	}
	return nil
}

type isDevm_RemotePorts_RemotePort_PortAlarm_AlarmType interface {
	isDevm_RemotePorts_RemotePort_PortAlarm_AlarmType()
}

type Devm_RemotePorts_RemotePort_PortAlarm_AlarmTypeCrcErrorThreshold struct {
	AlarmTypeCrcErrorThreshold *Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_CrcErrorThreshold `protobuf:"bytes,13,opt,name=alarm_type_crc_error_threshold,json=crc-error-threshold,proto3,oneof"`
}

type Devm_RemotePorts_RemotePort_PortAlarm_AlarmTypeLinkCrc struct {
	AlarmTypeLinkCrc *Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_LinkCrc `protobuf:"bytes,14,opt,name=alarm_type_link_crc,json=link-crc,proto3,oneof"`
}

func (*Devm_RemotePorts_RemotePort_PortAlarm_AlarmTypeCrcErrorThreshold) isDevm_RemotePorts_RemotePort_PortAlarm_AlarmType() {
}

func (*Devm_RemotePorts_RemotePort_PortAlarm_AlarmTypeLinkCrc) isDevm_RemotePorts_RemotePort_PortAlarm_AlarmType() {
}

type Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FrameFormat Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_FrameFormat `protobuf:"varint,1,opt,name=frame_format,json=frame-format,proto3,enum=huawei_devm.Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_FrameFormat" json:"frame_format,omitempty"`
	J0Mode      Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_J0Mode      `protobuf:"varint,2,opt,name=j0_mode,json=j0-mode,proto3,enum=huawei_devm.Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_J0Mode" json:"j0_mode,omitempty"`
	J0Value     uint32                                                      `protobuf:"varint,3,opt,name=j0_value,json=j0-value,proto3" json:"j0_value,omitempty"`
	J0Trace     string                                                      `protobuf:"bytes,4,opt,name=j0_trace,json=j0-trace,proto3" json:"j0_trace,omitempty"`
	J1Mode      Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_J1Mode      `protobuf:"varint,5,opt,name=j1_mode,json=j1-mode,proto3,enum=huawei_devm.Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_J1Mode" json:"j1_mode,omitempty"`
	J1Value     uint32                                                      `protobuf:"varint,6,opt,name=j1_value,json=j1-value,proto3" json:"j1_value,omitempty"`
	J1Trace     string                                                      `protobuf:"bytes,7,opt,name=j1_trace,json=j1-trace,proto3" json:"j1_trace,omitempty"`
	C2          uint32                                                      `protobuf:"varint,8,opt,name=c2,proto3" json:"c2,omitempty"`
	Clock       Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_Clock       `protobuf:"varint,9,opt,name=clock,proto3,enum=huawei_devm.Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_Clock" json:"clock,omitempty"`
	Scramble    Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_Scramble    `protobuf:"varint,10,opt,name=scramble,proto3,enum=huawei_devm.Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_Scramble" json:"scramble,omitempty"`
}

func (x *Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr) Reset() {
	*x = Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[511]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr) ProtoMessage() {}

func (x *Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[511]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr.ProtoReflect.Descriptor instead.
func (*Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 27, 0, 0, 0}
}

func (x *Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr) GetFrameFormat() Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_FrameFormat {
	if x != nil {
		return x.FrameFormat
	}
	return Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_FrameFormat_SDH
}

func (x *Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr) GetJ0Mode() Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_J0Mode {
	if x != nil {
		return x.J0Mode
	}
	return Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_INVALID_ENUM_VALUE_J0Mode
}

func (x *Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr) GetJ0Value() uint32 {
	if x != nil {
		return x.J0Value
	}
	return 0
}

func (x *Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr) GetJ0Trace() string {
	if x != nil {
		return x.J0Trace
	}
	return ""
}

func (x *Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr) GetJ1Mode() Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_J1Mode {
	if x != nil {
		return x.J1Mode
	}
	return Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_INVALID_ENUM_VALUE_J1Mode
}

func (x *Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr) GetJ1Value() uint32 {
	if x != nil {
		return x.J1Value
	}
	return 0
}

func (x *Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr) GetJ1Trace() string {
	if x != nil {
		return x.J1Trace
	}
	return ""
}

func (x *Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr) GetC2() uint32 {
	if x != nil {
		return x.C2
	}
	return 0
}

func (x *Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr) GetClock() Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_Clock {
	if x != nil {
		return x.Clock
	}
	return Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_Clock_MASTER
}

func (x *Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr) GetScramble() Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_Scramble {
	if x != nil {
		return x.Scramble
	}
	return Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_Scramble_DISABLE
}

type Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransAlarmIfDown []*Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns_TransAlarmIfDown `protobuf:"bytes,1,rep,name=trans_alarm_if_down,json=trans-alarm-if-down,proto3" json:"trans_alarm_if_down,omitempty"`
}

func (x *Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns) Reset() {
	*x = Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[512]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns) ProtoMessage() {}

func (x *Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[512]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns.ProtoReflect.Descriptor instead.
func (*Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 27, 0, 3, 0}
}

func (x *Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns) GetTransAlarmIfDown() []*Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns_TransAlarmIfDown {
	if x != nil {
		return x.TransAlarmIfDown
	}
	return nil
}

type Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns_TransAlarmIfDown struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlarmType Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns_TransAlarmIfDown_AlarmType `protobuf:"varint,1,opt,name=alarm_type,json=alarm-type,proto3,enum=huawei_devm.Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns_TransAlarmIfDown_AlarmType" json:"alarm_type,omitempty"`
	IfDown    bool                                                                                       `protobuf:"varint,2,opt,name=if_down,json=if-down,proto3" json:"if_down,omitempty"`
}

func (x *Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns_TransAlarmIfDown) Reset() {
	*x = Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns_TransAlarmIfDown{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[513]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns_TransAlarmIfDown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns_TransAlarmIfDown) ProtoMessage() {
}

func (x *Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns_TransAlarmIfDown) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[513]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns_TransAlarmIfDown.ProtoReflect.Descriptor instead.
func (*Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns_TransAlarmIfDown) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 27, 0, 3, 0, 0}
}

func (x *Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns_TransAlarmIfDown) GetAlarmType() Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns_TransAlarmIfDown_AlarmType {
	if x != nil {
		return x.AlarmType
	}
	return Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns_TransAlarmIfDown_AlarmType_AUAIS
}

func (x *Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns_TransAlarmIfDown) GetIfDown() bool {
	if x != nil {
		return x.IfDown
	}
	return false
}

type Devm_RemotePorts_RemotePort_PortAlarm_EthPortAlarm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SymbolEnableDown          bool   `protobuf:"varint,1,opt,name=symbol_enable_down,json=symbol-enable-down,proto3" json:"symbol_enable_down,omitempty"`
	SymbolErrorHighThreshold  uint32 `protobuf:"varint,2,opt,name=symbol_error_high_threshold,json=symbol-error-high-threshold,proto3" json:"symbol_error_high_threshold,omitempty"`
	SymbolErrorLowThreshold   uint32 `protobuf:"varint,3,opt,name=symbol_error_low_threshold,json=symbol-error-low-threshold,proto3" json:"symbol_error_low_threshold,omitempty"`
	SymbolErrorInterval       uint32 `protobuf:"varint,4,opt,name=symbol_error_interval,json=symbol-error-interval,proto3" json:"symbol_error_interval,omitempty"`
	Bip8SdEnableDown          bool   `protobuf:"varint,5,opt,name=bip8_sd_enable_down,json=bip8-sd-enable-down,proto3" json:"bip8_sd_enable_down,omitempty"`
	Bip8SdErrorHighThreshold  uint32 `protobuf:"varint,6,opt,name=bip8_sd_error_high_threshold,json=bip8-sd-error-high-threshold,proto3" json:"bip8_sd_error_high_threshold,omitempty"`
	BadBytesThreshold         uint32 `protobuf:"varint,7,opt,name=bad_bytes_threshold,json=bad-bytes-threshold,proto3" json:"bad_bytes_threshold,omitempty"`
	BadBytesInterval          uint32 `protobuf:"varint,8,opt,name=bad_bytes_interval,json=bad-bytes-interval,proto3" json:"bad_bytes_interval,omitempty"`
	TxPauseErrorHighThreshold uint32 `protobuf:"varint,9,opt,name=tx_pause_error_high_threshold,json=tx-pause-error-high-threshold,proto3" json:"tx_pause_error_high_threshold,omitempty"`
	TxPauseErrorLowThreshold  uint32 `protobuf:"varint,10,opt,name=tx_pause_error_low_threshold,json=tx-pause-error-low-threshold,proto3" json:"tx_pause_error_low_threshold,omitempty"`
	TxPauseErrorInterval      uint32 `protobuf:"varint,11,opt,name=tx_pause_error_interval,json=tx-pause-error-interval,proto3" json:"tx_pause_error_interval,omitempty"`
}

func (x *Devm_RemotePorts_RemotePort_PortAlarm_EthPortAlarm) Reset() {
	*x = Devm_RemotePorts_RemotePort_PortAlarm_EthPortAlarm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[514]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_RemotePorts_RemotePort_PortAlarm_EthPortAlarm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_RemotePorts_RemotePort_PortAlarm_EthPortAlarm) ProtoMessage() {}

func (x *Devm_RemotePorts_RemotePort_PortAlarm_EthPortAlarm) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[514]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_RemotePorts_RemotePort_PortAlarm_EthPortAlarm.ProtoReflect.Descriptor instead.
func (*Devm_RemotePorts_RemotePort_PortAlarm_EthPortAlarm) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 27, 0, 4, 0}
}

func (x *Devm_RemotePorts_RemotePort_PortAlarm_EthPortAlarm) GetSymbolEnableDown() bool {
	if x != nil {
		return x.SymbolEnableDown
	}
	return false
}

func (x *Devm_RemotePorts_RemotePort_PortAlarm_EthPortAlarm) GetSymbolErrorHighThreshold() uint32 {
	if x != nil {
		return x.SymbolErrorHighThreshold
	}
	return 0
}

func (x *Devm_RemotePorts_RemotePort_PortAlarm_EthPortAlarm) GetSymbolErrorLowThreshold() uint32 {
	if x != nil {
		return x.SymbolErrorLowThreshold
	}
	return 0
}

func (x *Devm_RemotePorts_RemotePort_PortAlarm_EthPortAlarm) GetSymbolErrorInterval() uint32 {
	if x != nil {
		return x.SymbolErrorInterval
	}
	return 0
}

func (x *Devm_RemotePorts_RemotePort_PortAlarm_EthPortAlarm) GetBip8SdEnableDown() bool {
	if x != nil {
		return x.Bip8SdEnableDown
	}
	return false
}

func (x *Devm_RemotePorts_RemotePort_PortAlarm_EthPortAlarm) GetBip8SdErrorHighThreshold() uint32 {
	if x != nil {
		return x.Bip8SdErrorHighThreshold
	}
	return 0
}

func (x *Devm_RemotePorts_RemotePort_PortAlarm_EthPortAlarm) GetBadBytesThreshold() uint32 {
	if x != nil {
		return x.BadBytesThreshold
	}
	return 0
}

func (x *Devm_RemotePorts_RemotePort_PortAlarm_EthPortAlarm) GetBadBytesInterval() uint32 {
	if x != nil {
		return x.BadBytesInterval
	}
	return 0
}

func (x *Devm_RemotePorts_RemotePort_PortAlarm_EthPortAlarm) GetTxPauseErrorHighThreshold() uint32 {
	if x != nil {
		return x.TxPauseErrorHighThreshold
	}
	return 0
}

func (x *Devm_RemotePorts_RemotePort_PortAlarm_EthPortAlarm) GetTxPauseErrorLowThreshold() uint32 {
	if x != nil {
		return x.TxPauseErrorLowThreshold
	}
	return 0
}

func (x *Devm_RemotePorts_RemotePort_PortAlarm_EthPortAlarm) GetTxPauseErrorInterval() uint32 {
	if x != nil {
		return x.TxPauseErrorInterval
	}
	return 0
}

type Devm_RemotePorts_RemotePort_PortAlarm_SdhPortAlarm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SdhEnableDown         bool   `protobuf:"varint,1,opt,name=sdh_enable_down,json=sdh-enable-down,proto3" json:"sdh_enable_down,omitempty"`
	SdhErrorHighThreshold uint32 `protobuf:"varint,2,opt,name=sdh_error_high_threshold,json=sdh-error-high-threshold,proto3" json:"sdh_error_high_threshold,omitempty"`
	SdhErrorLowThreshold  uint32 `protobuf:"varint,3,opt,name=sdh_error_low_threshold,json=sdh-error-low-threshold,proto3" json:"sdh_error_low_threshold,omitempty"`
	SdhErrorInterval      uint32 `protobuf:"varint,4,opt,name=sdh_error_interval,json=sdh-error-interval,proto3" json:"sdh_error_interval,omitempty"`
	SdhB1ErrorThreshold   uint32 `protobuf:"varint,5,opt,name=sdh_b1_error_threshold,json=sdh-b1-error-threshold,proto3" json:"sdh_b1_error_threshold,omitempty"`
	SdhB1ErrorInterval    uint32 `protobuf:"varint,6,opt,name=sdh_b1_error_interval,json=sdh-b1-error-interval,proto3" json:"sdh_b1_error_interval,omitempty"`
	SdhB2ErrorThreshold   uint32 `protobuf:"varint,7,opt,name=sdh_b2_error_threshold,json=sdh-b2-error-threshold,proto3" json:"sdh_b2_error_threshold,omitempty"`
	SdhB2ErrorInterval    uint32 `protobuf:"varint,8,opt,name=sdh_b2_error_interval,json=sdh-b2-error-interval,proto3" json:"sdh_b2_error_interval,omitempty"`
}

func (x *Devm_RemotePorts_RemotePort_PortAlarm_SdhPortAlarm) Reset() {
	*x = Devm_RemotePorts_RemotePort_PortAlarm_SdhPortAlarm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[515]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_RemotePorts_RemotePort_PortAlarm_SdhPortAlarm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_RemotePorts_RemotePort_PortAlarm_SdhPortAlarm) ProtoMessage() {}

func (x *Devm_RemotePorts_RemotePort_PortAlarm_SdhPortAlarm) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[515]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_RemotePorts_RemotePort_PortAlarm_SdhPortAlarm.ProtoReflect.Descriptor instead.
func (*Devm_RemotePorts_RemotePort_PortAlarm_SdhPortAlarm) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 27, 0, 4, 1}
}

func (x *Devm_RemotePorts_RemotePort_PortAlarm_SdhPortAlarm) GetSdhEnableDown() bool {
	if x != nil {
		return x.SdhEnableDown
	}
	return false
}

func (x *Devm_RemotePorts_RemotePort_PortAlarm_SdhPortAlarm) GetSdhErrorHighThreshold() uint32 {
	if x != nil {
		return x.SdhErrorHighThreshold
	}
	return 0
}

func (x *Devm_RemotePorts_RemotePort_PortAlarm_SdhPortAlarm) GetSdhErrorLowThreshold() uint32 {
	if x != nil {
		return x.SdhErrorLowThreshold
	}
	return 0
}

func (x *Devm_RemotePorts_RemotePort_PortAlarm_SdhPortAlarm) GetSdhErrorInterval() uint32 {
	if x != nil {
		return x.SdhErrorInterval
	}
	return 0
}

func (x *Devm_RemotePorts_RemotePort_PortAlarm_SdhPortAlarm) GetSdhB1ErrorThreshold() uint32 {
	if x != nil {
		return x.SdhB1ErrorThreshold
	}
	return 0
}

func (x *Devm_RemotePorts_RemotePort_PortAlarm_SdhPortAlarm) GetSdhB1ErrorInterval() uint32 {
	if x != nil {
		return x.SdhB1ErrorInterval
	}
	return 0
}

func (x *Devm_RemotePorts_RemotePort_PortAlarm_SdhPortAlarm) GetSdhB2ErrorThreshold() uint32 {
	if x != nil {
		return x.SdhB2ErrorThreshold
	}
	return 0
}

func (x *Devm_RemotePorts_RemotePort_PortAlarm_SdhPortAlarm) GetSdhB2ErrorInterval() uint32 {
	if x != nil {
		return x.SdhB2ErrorInterval
	}
	return 0
}

type Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_CrcErrorThreshold struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CrcErrorThreshold *Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_CrcErrorThreshold_CrcErrorThreshold6 `protobuf:"bytes,1,opt,name=crc_error_threshold,json=crc-error-threshold,proto3" json:"crc_error_threshold,omitempty"`
}

func (x *Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_CrcErrorThreshold) Reset() {
	*x = Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_CrcErrorThreshold{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[516]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_CrcErrorThreshold) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_CrcErrorThreshold) ProtoMessage() {}

func (x *Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_CrcErrorThreshold) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[516]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_CrcErrorThreshold.ProtoReflect.Descriptor instead.
func (*Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_CrcErrorThreshold) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 27, 0, 4, 2}
}

func (x *Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_CrcErrorThreshold) GetCrcErrorThreshold() *Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_CrcErrorThreshold_CrcErrorThreshold6 {
	if x != nil {
		return x.CrcErrorThreshold
	}
	return nil
}

type Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_LinkCrc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LinkQuality *Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_LinkCrc_LinkQuality `protobuf:"bytes,1,opt,name=link_quality,json=link-quality,proto3" json:"link_quality,omitempty"`
	CrcPerAlarm *Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_LinkCrc_CrcPerAlarm `protobuf:"bytes,2,opt,name=crc_per_alarm,json=crc-per-alarm,proto3" json:"crc_per_alarm,omitempty"`
}

func (x *Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_LinkCrc) Reset() {
	*x = Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_LinkCrc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[517]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_LinkCrc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_LinkCrc) ProtoMessage() {}

func (x *Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_LinkCrc) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[517]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_LinkCrc.ProtoReflect.Descriptor instead.
func (*Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_LinkCrc) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 27, 0, 4, 3}
}

func (x *Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_LinkCrc) GetLinkQuality() *Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_LinkCrc_LinkQuality {
	if x != nil {
		return x.LinkQuality
	}
	return nil
}

func (x *Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_LinkCrc) GetCrcPerAlarm() *Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_LinkCrc_CrcPerAlarm {
	if x != nil {
		return x.CrcPerAlarm
	}
	return nil
}

type Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_CrcErrorThreshold_CrcErrorThreshold6 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CrcErrorHigh          uint32 `protobuf:"varint,1,opt,name=crc_error_high,json=crc-error-high,proto3" json:"crc_error_high,omitempty"`
	CrcErrorLow           uint32 `protobuf:"varint,2,opt,name=crc_error_low,json=crc-error-low,proto3" json:"crc_error_low,omitempty"`
	CrcErrorInterval      uint32 `protobuf:"varint,3,opt,name=crc_error_interval,json=crc-error-interval,proto3" json:"crc_error_interval,omitempty"`
	CrcShutdownEnable     bool   `protobuf:"varint,4,opt,name=crc_shutdown_enable,json=crc-shutdown-enable,proto3" json:"crc_shutdown_enable,omitempty"`
	CrcErrorPercentAlmThr uint32 `protobuf:"varint,5,opt,name=crc_error_percent_alm_thr,json=crc-error-percent-alm-thr,proto3" json:"crc_error_percent_alm_thr,omitempty"`
}

func (x *Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_CrcErrorThreshold_CrcErrorThreshold6) Reset() {
	*x = Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_CrcErrorThreshold_CrcErrorThreshold6{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[518]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_CrcErrorThreshold_CrcErrorThreshold6) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_CrcErrorThreshold_CrcErrorThreshold6) ProtoMessage() {
}

func (x *Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_CrcErrorThreshold_CrcErrorThreshold6) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[518]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_CrcErrorThreshold_CrcErrorThreshold6.ProtoReflect.Descriptor instead.
func (*Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_CrcErrorThreshold_CrcErrorThreshold6) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 27, 0, 4, 2, 0}
}

func (x *Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_CrcErrorThreshold_CrcErrorThreshold6) GetCrcErrorHigh() uint32 {
	if x != nil {
		return x.CrcErrorHigh
	}
	return 0
}

func (x *Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_CrcErrorThreshold_CrcErrorThreshold6) GetCrcErrorLow() uint32 {
	if x != nil {
		return x.CrcErrorLow
	}
	return 0
}

func (x *Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_CrcErrorThreshold_CrcErrorThreshold6) GetCrcErrorInterval() uint32 {
	if x != nil {
		return x.CrcErrorInterval
	}
	return 0
}

func (x *Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_CrcErrorThreshold_CrcErrorThreshold6) GetCrcShutdownEnable() bool {
	if x != nil {
		return x.CrcShutdownEnable
	}
	return false
}

func (x *Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_CrcErrorThreshold_CrcErrorThreshold6) GetCrcErrorPercentAlmThr() uint32 {
	if x != nil {
		return x.CrcErrorPercentAlmThr
	}
	return 0
}

type Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_LinkCrc_LinkQuality struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LinkQualityAlmThrCoefficient  uint32 `protobuf:"varint,1,opt,name=link_quality_alm_thr_coefficient,json=link-quality-alm-thr-coefficient,proto3" json:"link_quality_alm_thr_coefficient,omitempty"`
	LinkQualityAlmThrPower        uint32 `protobuf:"varint,2,opt,name=link_quality_alm_thr_power,json=link-quality-alm-thr-power,proto3" json:"link_quality_alm_thr_power,omitempty"`
	LinkQualityRsumThrCoefficient uint32 `protobuf:"varint,3,opt,name=link_quality_rsum_thr_coefficient,json=link-quality-rsum-thr-coefficient,proto3" json:"link_quality_rsum_thr_coefficient,omitempty"`
	LinkQualityRsumThrPower       uint32 `protobuf:"varint,4,opt,name=link_quality_rsum_thr_power,json=link-quality-rsum-thr-power,proto3" json:"link_quality_rsum_thr_power,omitempty"`
}

func (x *Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_LinkCrc_LinkQuality) Reset() {
	*x = Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_LinkCrc_LinkQuality{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[519]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_LinkCrc_LinkQuality) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_LinkCrc_LinkQuality) ProtoMessage() {}

func (x *Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_LinkCrc_LinkQuality) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[519]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_LinkCrc_LinkQuality.ProtoReflect.Descriptor instead.
func (*Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_LinkCrc_LinkQuality) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 27, 0, 4, 3, 0}
}

func (x *Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_LinkCrc_LinkQuality) GetLinkQualityAlmThrCoefficient() uint32 {
	if x != nil {
		return x.LinkQualityAlmThrCoefficient
	}
	return 0
}

func (x *Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_LinkCrc_LinkQuality) GetLinkQualityAlmThrPower() uint32 {
	if x != nil {
		return x.LinkQualityAlmThrPower
	}
	return 0
}

func (x *Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_LinkCrc_LinkQuality) GetLinkQualityRsumThrCoefficient() uint32 {
	if x != nil {
		return x.LinkQualityRsumThrCoefficient
	}
	return 0
}

func (x *Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_LinkCrc_LinkQuality) GetLinkQualityRsumThrPower() uint32 {
	if x != nil {
		return x.LinkQualityRsumThrPower
	}
	return 0
}

type Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_LinkCrc_CrcPerAlarm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CrcPerAlmThrCoefficient  uint32                                                                         `protobuf:"varint,1,opt,name=crc_per_alm_thr_coefficient,json=crc-per-alm-thr-coefficient,proto3" json:"crc_per_alm_thr_coefficient,omitempty"`
	CrcPerAlmThrPower        uint32                                                                         `protobuf:"varint,2,opt,name=crc_per_alm_thr_power,json=crc-per-alm-thr-power,proto3" json:"crc_per_alm_thr_power,omitempty"`
	CrcPerRsumThrCoefficient uint32                                                                         `protobuf:"varint,3,opt,name=crc_per_rsum_thr_coefficient,json=crc-per-rsum-thr-coefficient,proto3" json:"crc_per_rsum_thr_coefficient,omitempty"`
	CrcPerRsumThrPower       uint32                                                                         `protobuf:"varint,4,opt,name=crc_per_rsum_thr_power,json=crc-per-rsum-thr-power,proto3" json:"crc_per_rsum_thr_power,omitempty"`
	CrcPerAlmLspEnable       bool                                                                           `protobuf:"varint,5,opt,name=crc_per_alm_lsp_enable,json=crc-per-alm-lsp-enable,proto3" json:"crc_per_alm_lsp_enable,omitempty"`
	CrcPerAlmSectionEnable   bool                                                                           `protobuf:"varint,6,opt,name=crc_per_alm_section_enable,json=crc-per-alm-section-enable,proto3" json:"crc_per_alm_section_enable,omitempty"`
	CrcSample                *Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_LinkCrc_CrcPerAlarm_CrcSample `protobuf:"bytes,7,opt,name=crc_sample,json=crc-sample,proto3" json:"crc_sample,omitempty"`
}

func (x *Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_LinkCrc_CrcPerAlarm) Reset() {
	*x = Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_LinkCrc_CrcPerAlarm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[520]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_LinkCrc_CrcPerAlarm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_LinkCrc_CrcPerAlarm) ProtoMessage() {}

func (x *Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_LinkCrc_CrcPerAlarm) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[520]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_LinkCrc_CrcPerAlarm.ProtoReflect.Descriptor instead.
func (*Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_LinkCrc_CrcPerAlarm) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 27, 0, 4, 3, 1}
}

func (x *Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_LinkCrc_CrcPerAlarm) GetCrcPerAlmThrCoefficient() uint32 {
	if x != nil {
		return x.CrcPerAlmThrCoefficient
	}
	return 0
}

func (x *Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_LinkCrc_CrcPerAlarm) GetCrcPerAlmThrPower() uint32 {
	if x != nil {
		return x.CrcPerAlmThrPower
	}
	return 0
}

func (x *Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_LinkCrc_CrcPerAlarm) GetCrcPerRsumThrCoefficient() uint32 {
	if x != nil {
		return x.CrcPerRsumThrCoefficient
	}
	return 0
}

func (x *Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_LinkCrc_CrcPerAlarm) GetCrcPerRsumThrPower() uint32 {
	if x != nil {
		return x.CrcPerRsumThrPower
	}
	return 0
}

func (x *Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_LinkCrc_CrcPerAlarm) GetCrcPerAlmLspEnable() bool {
	if x != nil {
		return x.CrcPerAlmLspEnable
	}
	return false
}

func (x *Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_LinkCrc_CrcPerAlarm) GetCrcPerAlmSectionEnable() bool {
	if x != nil {
		return x.CrcPerAlmSectionEnable
	}
	return false
}

func (x *Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_LinkCrc_CrcPerAlarm) GetCrcSample() *Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_LinkCrc_CrcPerAlarm_CrcSample {
	if x != nil {
		return x.CrcSample
	}
	return nil
}

type Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_LinkCrc_CrcPerAlarm_CrcSample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CrcPerSampWinFactor     uint32 `protobuf:"varint,1,opt,name=crc_per_samp_win_factor,json=crc-per-samp-win-factor,proto3" json:"crc_per_samp_win_factor,omitempty"`
	CrcPerChildWinMaxNum    uint32 `protobuf:"varint,2,opt,name=crc_per_child_win_max_num,json=crc-per-child-win-max-num,proto3" json:"crc_per_child_win_max_num,omitempty"`
	CrcPerChildWinAlarmNum  uint32 `protobuf:"varint,3,opt,name=crc_per_child_win_alarm_num,json=crc-per-child-win-alarm-num,proto3" json:"crc_per_child_win_alarm_num,omitempty"`
	CrcPerChildWinResumeNum uint32 `protobuf:"varint,4,opt,name=crc_per_child_win_resume_num,json=crc-per-child-win-resume-num,proto3" json:"crc_per_child_win_resume_num,omitempty"`
	CrcAlgRealtimeFactor    uint32 `protobuf:"varint,5,opt,name=crc_alg_realtime_factor,json=crc-alg-realtime-factor,proto3" json:"crc_alg_realtime_factor,omitempty"`
}

func (x *Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_LinkCrc_CrcPerAlarm_CrcSample) Reset() {
	*x = Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_LinkCrc_CrcPerAlarm_CrcSample{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[521]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_LinkCrc_CrcPerAlarm_CrcSample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_LinkCrc_CrcPerAlarm_CrcSample) ProtoMessage() {
}

func (x *Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_LinkCrc_CrcPerAlarm_CrcSample) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[521]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_LinkCrc_CrcPerAlarm_CrcSample.ProtoReflect.Descriptor instead.
func (*Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_LinkCrc_CrcPerAlarm_CrcSample) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 27, 0, 4, 3, 1, 0}
}

func (x *Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_LinkCrc_CrcPerAlarm_CrcSample) GetCrcPerSampWinFactor() uint32 {
	if x != nil {
		return x.CrcPerSampWinFactor
	}
	return 0
}

func (x *Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_LinkCrc_CrcPerAlarm_CrcSample) GetCrcPerChildWinMaxNum() uint32 {
	if x != nil {
		return x.CrcPerChildWinMaxNum
	}
	return 0
}

func (x *Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_LinkCrc_CrcPerAlarm_CrcSample) GetCrcPerChildWinAlarmNum() uint32 {
	if x != nil {
		return x.CrcPerChildWinAlarmNum
	}
	return 0
}

func (x *Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_LinkCrc_CrcPerAlarm_CrcSample) GetCrcPerChildWinResumeNum() uint32 {
	if x != nil {
		return x.CrcPerChildWinResumeNum
	}
	return 0
}

func (x *Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_LinkCrc_CrcPerAlarm_CrcSample) GetCrcAlgRealtimeFactor() uint32 {
	if x != nil {
		return x.CrcAlgRealtimeFactor
	}
	return 0
}

type Devm_DisableHardwareAlarms_DisableHardwareAlarm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlarmName string `protobuf:"bytes,1,opt,name=alarm_name,json=alarm-name,proto3" json:"alarm_name,omitempty"`
	FaultId   uint32 `protobuf:"varint,2,opt,name=fault_id,json=fault-id,proto3" json:"fault_id,omitempty"`
}

func (x *Devm_DisableHardwareAlarms_DisableHardwareAlarm) Reset() {
	*x = Devm_DisableHardwareAlarms_DisableHardwareAlarm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_devm_proto_msgTypes[522]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devm_DisableHardwareAlarms_DisableHardwareAlarm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devm_DisableHardwareAlarms_DisableHardwareAlarm) ProtoMessage() {}

func (x *Devm_DisableHardwareAlarms_DisableHardwareAlarm) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_devm_proto_msgTypes[522]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devm_DisableHardwareAlarms_DisableHardwareAlarm.ProtoReflect.Descriptor instead.
func (*Devm_DisableHardwareAlarms_DisableHardwareAlarm) Descriptor() ([]byte, []int) {
	return file_huawei_devm_proto_rawDescGZIP(), []int{0, 28, 0}
}

func (x *Devm_DisableHardwareAlarms_DisableHardwareAlarm) GetAlarmName() string {
	if x != nil {
		return x.AlarmName
	}
	return ""
}

func (x *Devm_DisableHardwareAlarms_DisableHardwareAlarm) GetFaultId() uint32 {
	if x != nil {
		return x.FaultId
	}
	return 0
}

var File_huawei_devm_proto protoreflect.FileDescriptor

var file_huawei_devm_proto_rawDesc = []byte{
	0x0a, 0x11, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x2d, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d,
	0x22, 0xaf, 0xb1, 0x0c, 0x0a, 0x04, 0x44, 0x65, 0x76, 0x6d, 0x12, 0x4d, 0x0a, 0x10, 0x70, 0x68,
	0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65,
	0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x73, 0x52, 0x10, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61,
	0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x73, 0x12, 0x44, 0x0a, 0x0d, 0x6c, 0x6f, 0x67,
	0x69, 0x63, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44,
	0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x73,
	0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x73, 0x12,
	0x36, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e,
	0x44, 0x65, 0x76, 0x6d, 0x2e, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x73, 0x52, 0x08, 0x63,
	0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x73, 0x12, 0x4d, 0x0a, 0x10, 0x6c, 0x6f, 0x67, 0x69, 0x63,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e,
	0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x73, 0x52, 0x10, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2d, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x3c, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x73, 0x12, 0x3b, 0x0a, 0x0a, 0x6d, 0x70, 0x75, 0x5f, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x73, 0x52, 0x0a, 0x6d, 0x70, 0x75, 0x2d, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x73, 0x12, 0x3b, 0x0a, 0x0a, 0x6c, 0x70, 0x75, 0x5f, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64,
	0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x73, 0x52, 0x0a, 0x6c, 0x70, 0x75, 0x2d, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x12, 0x3b,
	0x0a, 0x0a, 0x73, 0x66, 0x75, 0x5f, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d,
	0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x53, 0x66, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x52,
	0x0a, 0x73, 0x66, 0x75, 0x2d, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x12, 0x2d, 0x0a, 0x05, 0x63,
	0x61, 0x72, 0x64, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x43, 0x61,
	0x72, 0x64, 0x73, 0x52, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x63, 0x66,
	0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e,
	0x43, 0x66, 0x43, 0x61, 0x72, 0x64, 0x73, 0x52, 0x08, 0x63, 0x66, 0x2d, 0x63, 0x61, 0x72, 0x64,
	0x73, 0x12, 0x2d, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44,
	0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x12, 0x3e, 0x0a, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64,
	0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x6f,
	0x72, 0x74, 0x73, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x12, 0x47, 0x0a, 0x0e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x52, 0x0e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x2d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x12, 0x59, 0x0a, 0x14, 0x69, 0x6e, 0x63,
	0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x49, 0x6e, 0x63, 0x6f, 0x6e,
	0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x73, 0x52, 0x14,
	0x69, 0x6e, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x73, 0x12, 0x41, 0x0a, 0x0c, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x63, 0x66, 0x67, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4f, 0x66,
	0x66, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x66, 0x67, 0x73, 0x52, 0x0c, 0x6f, 0x66, 0x66, 0x6c, 0x69,
	0x6e, 0x65, 0x2d, 0x63, 0x66, 0x67, 0x73, 0x12, 0x4a, 0x0a, 0x0f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44,
	0x65, 0x76, 0x6d, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x62, 0x6f,
	0x6f, 0x74, 0x52, 0x0f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2d, 0x72, 0x65, 0x62,
	0x6f, 0x6f, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64,
	0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65,
	0x73, 0x52, 0x08, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x0b, 0x63,
	0x6c, 0x6f, 0x63, 0x6b, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44,
	0x65, 0x76, 0x6d, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x52,
	0x0b, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x12, 0x30, 0x0a, 0x06,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e,
	0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x52, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x12, 0x5e,
	0x0a, 0x16, 0x66, 0x77, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76,
	0x6d, 0x2e, 0x46, 0x77, 0x64, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65,
	0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x52, 0x16, 0x66, 0x77, 0x64, 0x2d, 0x70, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2d, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x12, 0x55,
	0x0a, 0x13, 0x66, 0x77, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x61,
	0x6c, 0x61, 0x72, 0x6d, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x46,
	0x77, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73,
	0x52, 0x13, 0x66, 0x77, 0x64, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2d, 0x61,
	0x6c, 0x61, 0x72, 0x6d, 0x73, 0x12, 0x5b, 0x0a, 0x15, 0x66, 0x77, 0x64, 0x5f, 0x72, 0x65, 0x61,
	0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65,
	0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x46, 0x77, 0x64, 0x52, 0x65, 0x61, 0x73, 0x73,
	0x65, 0x6d, 0x62, 0x6c, 0x79, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x52, 0x15, 0x66, 0x77, 0x64,
	0x2d, 0x72, 0x65, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x2d, 0x61, 0x6c, 0x61, 0x72,
	0x6d, 0x73, 0x12, 0x5a, 0x0a, 0x15, 0x66, 0x77, 0x64, 0x5f, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e,
	0x44, 0x65, 0x76, 0x6d, 0x2e, 0x46, 0x77, 0x64, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x46, 0x6c, 0x6f,
	0x77, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x52, 0x15, 0x66, 0x77, 0x64, 0x2d, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x2d, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x12, 0x4f,
	0x0a, 0x11, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x61, 0x6c,
	0x61, 0x72, 0x6d, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x46, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x43, 0x70, 0x75, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x52, 0x11, 0x66, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x2d, 0x63, 0x70, 0x75, 0x2d, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x12,
	0x52, 0x0a, 0x12, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x76, 0x63, 0x70, 0x75, 0x5f,
	0x61, 0x6c, 0x61, 0x72, 0x6d, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x46,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x56, 0x63, 0x70, 0x75, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x52,
	0x12, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x2d, 0x76, 0x63, 0x70, 0x75, 0x2d, 0x61, 0x6c,
	0x61, 0x72, 0x6d, 0x12, 0x6c, 0x0a, 0x1b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x68, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x52, 0x1b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x2d, 0x68, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x2d, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x2d, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x12, 0x6f, 0x0a, 0x1c, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x68, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x52, 0x1c, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2d, 0x68, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x2d, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x2d, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x12, 0x41, 0x0a, 0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x61, 0x0a, 0x17, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f,
	0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x52,
	0x17, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x2d, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72,
	0x65, 0x2d, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x1a, 0xdc, 0x11, 0x0a, 0x0f, 0x50, 0x68, 0x79,
	0x73, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x73, 0x12, 0x5a, 0x0a, 0x0f,
	0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64,
	0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61,
	0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x73, 0x2e, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61,
	0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0f, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61,
	0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x1a, 0xec, 0x10, 0x0a, 0x0e, 0x50, 0x68, 0x79,
	0x73, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x4c, 0x0a, 0x05, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x68,
	0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x73, 0x2e, 0x50, 0x68,
	0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x2d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69,
	0x73, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a,
	0x12, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x2d, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c,
	0x69, 0x61, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x3a, 0x0a, 0x18, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x18, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x2d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x2d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x68,
	0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x2d,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x69, 0x72, 0x6d, 0x77,
	0x61, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x2d, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73,
	0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x2d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x20, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2d, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x66, 0x72, 0x75, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x69, 0x73, 0x2d, 0x66, 0x72, 0x75, 0x12, 0x5d, 0x0a, 0x0b, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76,
	0x6d, 0x2e, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x73, 0x2e, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x63, 0x0a, 0x0d, 0x72, 0x75, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x3d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65,
	0x76, 0x6d, 0x2e, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x73, 0x2e, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d,
	0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x63, 0x0a,
	0x0d, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65,
	0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x73, 0x2e, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x2d, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6f, 0x69, 0x64,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x6f,
	0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x73, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x65, 0x73, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x73, 0x6e, 0x22, 0xd3,
	0x03, 0x0a, 0x05, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x5f, 0x43, 0x48, 0x41, 0x53, 0x53, 0x49, 0x53, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x4d, 0x50, 0x55, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x10,
	0x04, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x4c, 0x50, 0x55, 0x4d, 0x4f,
	0x44, 0x55, 0x4c, 0x45, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x53, 0x46, 0x55, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x4c, 0x4f, 0x43, 0x4b, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45,
	0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x41, 0x52, 0x44,
	0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x10, 0x09, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x0a, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x46, 0x41, 0x4e, 0x10, 0x10, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x53, 0x55, 0x50, 0x50, 0x4c, 0x59, 0x10, 0x11, 0x12, 0x13,
	0x0a, 0x0f, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45,
	0x52, 0x10, 0x12, 0x12, 0x13, 0x0a, 0x0e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x50, 0x50, 0x4d,
	0x4f, 0x44, 0x55, 0x4c, 0x45, 0x10, 0x8c, 0x20, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x53, 0x57, 0x46, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x10, 0x8d, 0x20, 0x12, 0x14,
	0x0a, 0x0f, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x45, 0x43, 0x55, 0x4d, 0x4f, 0x44, 0x55, 0x4c,
	0x45, 0x10, 0x8e, 0x20, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x49, 0x43,
	0x55, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x10, 0x8f, 0x20, 0x12, 0x0e, 0x0a, 0x09, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x4c, 0x46, 0x45, 0x10, 0xc2, 0x20, 0x12, 0x13, 0x0a, 0x0e, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x43, 0x46, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x10, 0xca, 0x20, 0x12,
	0x0e, 0x0a, 0x09, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x4c, 0x43, 0x44, 0x10, 0xd5, 0x20, 0x12,
	0x0e, 0x0a, 0x09, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x50, 0x45, 0x4d, 0x10, 0x8e, 0x27, 0x12,
	0x14, 0x0a, 0x0f, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x4d, 0x55, 0x4d, 0x4f, 0x44, 0x55,
	0x4c, 0x45, 0x10, 0x92, 0x27, 0x12, 0x0e, 0x0a, 0x09, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x50,
	0x49, 0x43, 0x10, 0x93, 0x27, 0x12, 0x0e, 0x0a, 0x09, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x54,
	0x53, 0x55, 0x10, 0x94, 0x27, 0x12, 0x0e, 0x0a, 0x09, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x50,
	0x4d, 0x55, 0x10, 0xa7, 0x27, 0x12, 0x0d, 0x0a, 0x08, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x50,
	0x4d, 0x10, 0xa8, 0x27, 0x22, 0x59, 0x0a, 0x0a, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45,
	0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x4e, 0x4f, 0x54, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x02, 0x22,
	0x87, 0x03, 0x0a, 0x0c, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x18, 0x0a, 0x14, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x75,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41,
	0x4c, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x52,
	0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x4f, 0x46, 0x46, 0x4c,
	0x49, 0x4e, 0x45, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x4e, 0x4f, 0x54, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54,
	0x45, 0x44, 0x10, 0x04, 0x12, 0x23, 0x0a, 0x1f, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x4e, 0x4f, 0x54, 0x45,
	0x51, 0x55, 0x49, 0x50, 0x50, 0x45, 0x44, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x75, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x4e, 0x53,
	0x54, 0x41, 0x4c, 0x4c, 0x10, 0x06, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x57, 0x52, 0x4f, 0x4e, 0x47, 0x54, 0x59, 0x50, 0x45,
	0x10, 0x07, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x45, 0x44, 0x10, 0x08, 0x12,
	0x1d, 0x0a, 0x19, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x55, 0x4e, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x45, 0x44, 0x10, 0x09, 0x12, 0x19,
	0x0a, 0x15, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x50,
	0x4f, 0x57, 0x45, 0x52, 0x4f, 0x46, 0x46, 0x10, 0x0a, 0x12, 0x25, 0x0a, 0x21, 0x52, 0x75, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x58, 0x5f,
	0x50, 0x48, 0x59, 0x53, 0x49, 0x43, 0x41, 0x4c, 0x58, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x0b,
	0x12, 0x17, 0x0a, 0x13, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x0c, 0x22, 0x9b, 0x01, 0x0a, 0x0c, 0x53, 0x74,
	0x61, 0x6e, 0x64, 0x62, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x74,
	0x61, 0x6e, 0x64, 0x62, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45,
	0x52, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x53, 0x4c, 0x41, 0x56, 0x45, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x53,
	0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x4e, 0x4f, 0x54, 0x53,
	0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x74,
	0x61, 0x6e, 0x64, 0x62, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45,
	0x4d, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x74, 0x61,
	0x6e, 0x64, 0x62, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d,
	0x53, 0x4c, 0x41, 0x56, 0x45, 0x10, 0x04, 0x1a, 0xf4, 0x0a, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x69,
	0x63, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x73, 0x12, 0x4e, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69,
	0x63, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76,
	0x6d, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x73, 0x2e, 0x4c,
	0x6f, 0x67, 0x69, 0x63, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x6c, 0x6f, 0x67, 0x69,
	0x63, 0x2d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x1a, 0x93, 0x0a, 0x0a, 0x0b, 0x4c, 0x6f, 0x67,
	0x69, 0x63, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x46, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x73, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x2d, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2d, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x54,
	0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x34, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d,
	0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x73, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x2d, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x3a, 0x0a, 0x18, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x2d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x2d, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x22, 0xd3, 0x03, 0x0a, 0x05, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x4f, 0x54, 0x48, 0x45,
	0x52, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x48, 0x41,
	0x53, 0x53, 0x49, 0x53, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x4d, 0x50, 0x55, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x4c, 0x50, 0x55, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x10, 0x05,
	0x12, 0x13, 0x0a, 0x0f, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x53, 0x46, 0x55, 0x4d, 0x4f, 0x44,
	0x55, 0x4c, 0x45, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43,
	0x4c, 0x4f, 0x43, 0x4b, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45,
	0x10, 0x09, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x50, 0x4f, 0x52, 0x54,
	0x10, 0x0a, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x46, 0x41, 0x4e, 0x10,
	0x10, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52,
	0x53, 0x55, 0x50, 0x50, 0x4c, 0x59, 0x10, 0x11, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x52, 0x10, 0x12, 0x12, 0x13, 0x0a,
	0x0e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x50, 0x50, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x10,
	0x8c, 0x20, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x53, 0x57, 0x46, 0x4d,
	0x4f, 0x44, 0x55, 0x4c, 0x45, 0x10, 0x8d, 0x20, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x45, 0x43, 0x55, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x10, 0x8e, 0x20, 0x12, 0x14,
	0x0a, 0x0f, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x49, 0x43, 0x55, 0x4d, 0x4f, 0x44, 0x55, 0x4c,
	0x45, 0x10, 0x8f, 0x20, 0x12, 0x0e, 0x0a, 0x09, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x4c, 0x46,
	0x45, 0x10, 0xc2, 0x20, 0x12, 0x13, 0x0a, 0x0e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x46,
	0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x10, 0xca, 0x20, 0x12, 0x0e, 0x0a, 0x09, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x5f, 0x4c, 0x43, 0x44, 0x10, 0xd5, 0x20, 0x12, 0x0e, 0x0a, 0x09, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x5f, 0x50, 0x45, 0x4d, 0x10, 0x8e, 0x27, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x5f, 0x43, 0x4d, 0x55, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x10, 0x92, 0x27, 0x12,
	0x0e, 0x0a, 0x09, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x50, 0x49, 0x43, 0x10, 0x93, 0x27, 0x12,
	0x0e, 0x0a, 0x09, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x54, 0x53, 0x55, 0x10, 0x94, 0x27, 0x12,
	0x0e, 0x0a, 0x09, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x50, 0x4d, 0x55, 0x10, 0xa7, 0x27, 0x12,
	0x0d, 0x0a, 0x08, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x50, 0x4d, 0x10, 0xa8, 0x27, 0x22, 0xdd,
	0x02, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11,
	0x4f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x70, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x02, 0x12, 0x15,
	0x0a, 0x11, 0x4f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x4f, 0x46, 0x46, 0x4c,
	0x49, 0x4e, 0x45, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x4e, 0x4f, 0x54, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10,
	0x04, 0x12, 0x20, 0x0a, 0x1c, 0x4f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x4f,
	0x50, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x4e, 0x4f, 0x54, 0x45, 0x51, 0x55, 0x49, 0x50, 0x50, 0x45,
	0x44, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x10, 0x06, 0x12, 0x17, 0x0a,
	0x13, 0x4f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x57, 0x52, 0x4f, 0x4e, 0x47,
	0x54, 0x59, 0x50, 0x45, 0x10, 0x07, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x70, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x45, 0x44, 0x10, 0x08,
	0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x55, 0x4e,
	0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x45, 0x44, 0x10, 0x09, 0x12, 0x16, 0x0a, 0x12,
	0x4f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x4f,
	0x46, 0x46, 0x10, 0x0a, 0x12, 0x22, 0x0a, 0x1e, 0x4f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x58, 0x5f, 0x50, 0x48, 0x59, 0x53, 0x49, 0x43, 0x41, 0x4c,
	0x58, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x0b, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x70, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x0c, 0x1a, 0x8d,
	0x2b, 0x0a, 0x08, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x73, 0x12, 0x3c, 0x0a, 0x07, 0x63,
	0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e,
	0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73,
	0x52, 0x07, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x1a, 0xc2, 0x2a, 0x0a, 0x07, 0x43, 0x68,
	0x61, 0x73, 0x73, 0x69, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x73, 0x6c, 0x6f, 0x74, 0x2d, 0x6e, 0x75, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x2d, 0x6e, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x61, 0x6e,
	0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x66, 0x61, 0x6e, 0x2d,
	0x6e, 0x75, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x6e, 0x75,
	0x6d, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x75, 0x70, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2d,
	0x6c, 0x61, 0x73, 0x74, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2d,
	0x6c, 0x61, 0x73, 0x74, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x2d, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6e, 0x65,
	0x78, 0x74, 0x2d, 0x69, 0x64, 0x12, 0x5d, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x31, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65,
	0x76, 0x6d, 0x2e, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x73,
	0x73, 0x69, 0x73, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6e, 0x4d, 0x6f,
	0x64, 0x65, 0x52, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x2d, 0x72, 0x75, 0x6e, 0x2d,
	0x6d, 0x6f, 0x64, 0x65, 0x12, 0x54, 0x0a, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x72, 0x75, 0x6e,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x43,
	0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x2e,
	0x4e, 0x65, 0x78, 0x74, 0x52, 0x75, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0d, 0x6e, 0x65, 0x78,
	0x74, 0x2d, 0x72, 0x75, 0x6e, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x64, 0x75,
	0x73, 0x74, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x64, 0x75, 0x73, 0x74, 0x2d, 0x63, 0x6c, 0x65, 0x61, 0x6e,
	0x2d, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63,
	0x6c, 0x65, 0x61, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x6c, 0x61, 0x73, 0x74, 0x2d, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x2d, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x2a, 0x0a, 0x10, 0x75, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63,
	0x6c, 0x65, 0x61, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x75, 0x70, 0x2d, 0x74,
	0x6f, 0x2d, 0x6c, 0x61, 0x73, 0x74, 0x2d, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x2a, 0x0a, 0x10,
	0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x79, 0x73,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x2d, 0x65, 0x78,
	0x69, 0x73, 0x74, 0x2d, 0x64, 0x61, 0x79, 0x73, 0x12, 0x6c, 0x0a, 0x15, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x5f, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x43, 0x68, 0x61, 0x73, 0x73,
	0x69, 0x73, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x2e, 0x4d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52,
	0x15, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2d, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2d, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x0d, 0x66, 0x61, 0x6e, 0x5f, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d,
	0x2e, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69,
	0x73, 0x2e, 0x46, 0x61, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0d,
	0x66, 0x61, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x6f, 0x0a,
	0x16, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d,
	0x2e, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69,
	0x73, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x16, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x73, 0x75,
	0x70, 0x70, 0x6c, 0x79, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x67,
	0x0a, 0x13, 0x64, 0x75, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x43,
	0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x2e,
	0x44, 0x75, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x52, 0x13, 0x64, 0x75, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x2d, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x4c, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x73, 0x73,
	0x69, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x43,
	0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x2e,
	0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x49, 0x64, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x73, 0x73,
	0x69, 0x73, 0x2d, 0x69, 0x64, 0x12, 0x5d, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73,
	0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65,
	0x76, 0x6d, 0x2e, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x73,
	0x73, 0x69, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x52, 0x75, 0x6e, 0x4d, 0x6f,
	0x64, 0x65, 0x52, 0x10, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x2d, 0x72, 0x75, 0x6e, 0x2d,
	0x6d, 0x6f, 0x64, 0x65, 0x12, 0x63, 0x0a, 0x12, 0x70, 0x6d, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44,
	0x65, 0x76, 0x6d, 0x2e, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x73, 0x2e, 0x43, 0x68, 0x61,
	0x73, 0x73, 0x69, 0x73, 0x2e, 0x50, 0x6d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x12, 0x70, 0x6d, 0x2d, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2d,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x5d, 0x0a, 0x10, 0x63, 0x68, 0x61,
	0x73, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x66, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76,
	0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x73, 0x2e,
	0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x53,
	0x66, 0x75, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x10, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x2d,
	0x73, 0x66, 0x75, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x1a, 0xad, 0x02, 0x0a, 0x13, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x12, 0x7d, 0x0a, 0x14, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x49,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76,
	0x6d, 0x2e, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x73, 0x73,
	0x69, 0x73, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x14, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x2d, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x1a,
	0x96, 0x01, 0x0a, 0x12, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2d, 0x6c, 0x61, 0x73,
	0x74, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2d, 0x6c, 0x61, 0x73,
	0x74, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x1a, 0xad, 0x02, 0x0a, 0x0c, 0x46, 0x61, 0x6e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x54, 0x0a, 0x08, 0x77, 0x6f, 0x72,
	0x6b, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x43,
	0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x2e,
	0x46, 0x61, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x6d, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x6d, 0x6f, 0x64, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x22, 0xb0, 0x01, 0x0a, 0x08, 0x57, 0x6f, 0x72, 0x6b, 0x6d, 0x6f,
	0x64, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e,
	0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x57, 0x6f, 0x72, 0x6b, 0x6d, 0x6f, 0x64,
	0x65, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x57, 0x6f, 0x72, 0x6b, 0x6d, 0x6f, 0x64, 0x65, 0x5f,
	0x41, 0x55, 0x54, 0x4f, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x57, 0x6f, 0x72, 0x6b, 0x6d, 0x6f,
	0x64, 0x65, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x57,
	0x6f, 0x72, 0x6b, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x53, 0x49, 0x4c, 0x45, 0x4e, 0x54, 0x10, 0x04,
	0x12, 0x11, 0x0a, 0x0d, 0x57, 0x6f, 0x72, 0x6b, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x46, 0x55, 0x4c,
	0x4c, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x57, 0x6f, 0x72, 0x6b, 0x6d, 0x6f, 0x64, 0x65, 0x5f,
	0x4d, 0x49, 0x4e, 0x49, 0x4d, 0x55, 0x4d, 0x58, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54,
	0x10, 0x09, 0x12, 0x14, 0x0a, 0x10, 0x57, 0x6f, 0x72, 0x6b, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x44,
	0x45, 0x4e, 0x4f, 0x49, 0x53, 0x45, 0x10, 0x0b, 0x1a, 0xb1, 0x0a, 0x0a, 0x14, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x6d, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x6d, 0x2d, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x7d, 0x0a, 0x14, 0x70,
	0x6d, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x5f,
	0x31, 0x31, 0x30, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x49, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x43, 0x68, 0x61,
	0x73, 0x73, 0x69, 0x73, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x2e, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x2e, 0x50, 0x6d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67,
	0x65, 0x31, 0x31, 0x30, 0x52, 0x14, 0x70, 0x6d, 0x2d, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2d, 0x76,
	0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x2d, 0x31, 0x31, 0x30, 0x12, 0x75, 0x0a, 0x11, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x47, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64,
	0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73,
	0x73, 0x2e, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53,
	0x75, 0x70, 0x70, 0x6c, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x11,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x2d, 0x6d, 0x6f, 0x64,
	0x65, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c,
	0x79, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x2d, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x2d, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x12, 0x75, 0x0a, 0x11, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c,
	0x79, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x47, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e,
	0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73,
	0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6c,
	0x79, 0x54, 0x65, 0x6d, 0x70, 0x52, 0x11, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x73, 0x75, 0x70,
	0x70, 0x6c, 0x79, 0x2d, 0x74, 0x65, 0x6d, 0x70, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x73, 0x75, 0x70, 0x70,
	0x6c, 0x79, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x3a, 0x0a, 0x18, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x2d, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x2d, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x2d, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x73, 0x75,
	0x70, 0x70, 0x6c, 0x79, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x15, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x73, 0x75, 0x70, 0x70, 0x6c,
	0x79, 0x2d, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x1d, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x2d,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x2d, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x2c, 0x0a, 0x11, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79,
	0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x2d, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x2d, 0x6c, 0x65, 0x66, 0x74, 0x12, 0x2c,
	0x0a, 0x11, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x72,
	0x65, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x2d, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x2d, 0x72, 0x65, 0x61, 0x6c, 0x12, 0x3c, 0x0a, 0x19,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x72, 0x65, 0x61,
	0x6c, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x19, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x2d, 0x72, 0x65,
	0x61, 0x6c, 0x2d, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x3c, 0x0a, 0x19, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x63, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x19, 0x61, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x61, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x63, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x48, 0x0a, 0x11, 0x50, 0x6d, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x31, 0x31, 0x30, 0x12, 0x18, 0x0a, 0x14, 0x50,
	0x6d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x31, 0x31, 0x30,
	0x5f, 0x4e, 0x4f, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x6d, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x31, 0x31, 0x30, 0x5f, 0x59, 0x45, 0x53, 0x10, 0x01,
	0x22, 0x73, 0x0a, 0x0f, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x22, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45,
	0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53,
	0x75, 0x70, 0x70, 0x6c, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x53,
	0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x41, 0x53, 0x53,
	0x49, 0x47, 0x4e, 0x10, 0x02, 0x22, 0x94, 0x01, 0x0a, 0x0f, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53,
	0x75, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x12, 0x26, 0x0a, 0x22, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x10,
	0x00, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79,
	0x54, 0x65, 0x6d, 0x70, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x4f, 0x57, 0x10, 0x28, 0x12, 0x1e,
	0x0a, 0x1a, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x65, 0x6d,
	0x70, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4d, 0x49, 0x44, 0x44, 0x4c, 0x45, 0x10, 0x32, 0x12, 0x1c,
	0x0a, 0x18, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x65, 0x6d,
	0x70, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x48, 0x49, 0x47, 0x48, 0x10, 0x37, 0x1a, 0xff, 0x01, 0x0a,
	0x12, 0x44, 0x75, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x12, 0x6c, 0x0a, 0x0e, 0x64, 0x75, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x6f, 0x66,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x44, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x43,
	0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x2e,
	0x44, 0x75, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x2e, 0x44, 0x75, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x52, 0x0e, 0x64, 0x75, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x12, 0x32, 0x0a, 0x14, 0x64, 0x75, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x64,
	0x65, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x14, 0x64, 0x75, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x2d, 0x64, 0x65, 0x6c, 0x61, 0x79,
	0x2d, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x47, 0x0a, 0x0e, 0x44, 0x75, 0x73, 0x74, 0x70, 0x72, 0x6f,
	0x6f, 0x66, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x75, 0x73, 0x74, 0x70,
	0x72, 0x6f, 0x6f, 0x66, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x75, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x45,
	0x0a, 0x09, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x2d, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6e, 0x65,
	0x78, 0x74, 0x2d, 0x69, 0x64, 0x1a, 0xf6, 0x04, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69,
	0x73, 0x52, 0x75, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x6c, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x40, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d,
	0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x73, 0x2e, 0x43,
	0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x52, 0x75,
	0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6e,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x2d, 0x72, 0x75,
	0x6e, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x63, 0x0a, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x72,
	0x75, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d,
	0x2e, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69,
	0x73, 0x2e, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x52, 0x75, 0x6e, 0x4d, 0x6f, 0x64, 0x65,
	0x2e, 0x4e, 0x65, 0x78, 0x74, 0x52, 0x75, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0d, 0x6e, 0x65,
	0x78, 0x74, 0x2d, 0x72, 0x75, 0x6e, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0xd1, 0x01, 0x0a, 0x0e,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x25,
	0x0a, 0x21, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56,
	0x41, 0x4c, 0x55, 0x45, 0x5f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6e, 0x4d,
	0x6f, 0x64, 0x65, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x52, 0x75, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x10, 0x01,
	0x12, 0x19, 0x0a, 0x15, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6e, 0x4d, 0x6f,
	0x64, 0x65, 0x5f, 0x43, 0x43, 0x43, 0x58, 0x5f, 0x30, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x43,
	0x43, 0x58, 0x5f, 0x31, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x52, 0x75, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x43, 0x43, 0x58, 0x5f, 0x32, 0x10,
	0x04, 0x12, 0x2c, 0x0a, 0x28, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6e, 0x4d,
	0x6f, 0x64, 0x65, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x58, 0x5f, 0x43, 0x4c, 0x55,
	0x53, 0x54, 0x45, 0x52, 0x58, 0x5f, 0x43, 0x48, 0x41, 0x53, 0x53, 0x49, 0x53, 0x10, 0x06, 0x22,
	0xbc, 0x01, 0x0a, 0x0b, 0x4e, 0x65, 0x78, 0x74, 0x52, 0x75, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x22, 0x0a, 0x1e, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f,
	0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x4e, 0x65, 0x78, 0x74, 0x52, 0x75, 0x6e, 0x4d, 0x6f, 0x64,
	0x65, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x65, 0x78, 0x74, 0x52, 0x75, 0x6e, 0x4d, 0x6f,
	0x64, 0x65, 0x5f, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x4e,
	0x65, 0x78, 0x74, 0x52, 0x75, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x43, 0x43, 0x58, 0x5f,
	0x30, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x65, 0x78, 0x74, 0x52, 0x75, 0x6e, 0x4d, 0x6f,
	0x64, 0x65, 0x5f, 0x43, 0x43, 0x43, 0x58, 0x5f, 0x31, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x4e,
	0x65, 0x78, 0x74, 0x52, 0x75, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x43, 0x43, 0x58, 0x5f,
	0x32, 0x10, 0x04, 0x12, 0x29, 0x0a, 0x25, 0x4e, 0x65, 0x78, 0x74, 0x52, 0x75, 0x6e, 0x4d, 0x6f,
	0x64, 0x65, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x58, 0x5f, 0x43, 0x4c, 0x55, 0x53,
	0x54, 0x45, 0x52, 0x58, 0x5f, 0x43, 0x48, 0x41, 0x53, 0x53, 0x49, 0x53, 0x10, 0x06, 0x1a, 0xf7,
	0x01, 0x0a, 0x10, 0x50, 0x6d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x12, 0x65, 0x0a, 0x0d, 0x70, 0x6d, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x43, 0x68,
	0x61, 0x73, 0x73, 0x69, 0x73, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x2e, 0x50,
	0x6d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e,
	0x50, 0x6d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0d, 0x70, 0x6d, 0x2d,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x7c, 0x0a, 0x0b, 0x50, 0x6d,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x6d, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54,
	0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x6d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x50,
	0x6d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44,
	0x41, 0x52, 0x44, 0x10, 0x55, 0x12, 0x21, 0x0a, 0x1c, 0x50, 0x6d, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x4c, 0x4f, 0x57, 0x58, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42,
	0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0xaa, 0x01, 0x1a, 0xbf, 0x03, 0x0a, 0x0e, 0x43, 0x68, 0x61,
	0x73, 0x73, 0x69, 0x73, 0x53, 0x66, 0x75, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x6c, 0x0a, 0x10, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x66, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64,
	0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73,
	0x73, 0x2e, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69,
	0x73, 0x53, 0x66, 0x75, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x53, 0x66, 0x75, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x2d, 0x73, 0x66, 0x75, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x63, 0x0a, 0x0d, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x73, 0x66, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44,
	0x65, 0x76, 0x6d, 0x2e, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x73, 0x2e, 0x43, 0x68, 0x61,
	0x73, 0x73, 0x69, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x53, 0x66, 0x75, 0x4d,
	0x6f, 0x64, 0x65, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x53, 0x66, 0x75, 0x4d, 0x6f, 0x64, 0x65, 0x52,
	0x0d, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x73, 0x66, 0x75, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x72,
	0x0a, 0x0e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x66, 0x75, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x25, 0x0a, 0x21, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d,
	0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x66,
	0x75, 0x4d, 0x6f, 0x64, 0x65, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x53, 0x66, 0x75, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x46, 0x4f, 0x55, 0x52, 0x58, 0x5f,
	0x53, 0x46, 0x55, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x53, 0x66, 0x75, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x53, 0x49, 0x58, 0x58, 0x5f, 0x53, 0x46, 0x55,
	0x10, 0x02, 0x22, 0x66, 0x0a, 0x0b, 0x4e, 0x65, 0x78, 0x74, 0x53, 0x66, 0x75, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x22, 0x0a, 0x1e, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55,
	0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x4e, 0x65, 0x78, 0x74, 0x53, 0x66, 0x75, 0x4d,
	0x6f, 0x64, 0x65, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x4e, 0x65, 0x78, 0x74, 0x53, 0x66, 0x75,
	0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x46, 0x4f, 0x55, 0x52, 0x58, 0x5f, 0x53, 0x46, 0x55, 0x10, 0x01,
	0x12, 0x18, 0x0a, 0x14, 0x4e, 0x65, 0x78, 0x74, 0x53, 0x66, 0x75, 0x4d, 0x6f, 0x64, 0x65, 0x5f,
	0x53, 0x49, 0x58, 0x58, 0x5f, 0x53, 0x46, 0x55, 0x10, 0x02, 0x22, 0x98, 0x01, 0x0a, 0x0e, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a,
	0x16, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x53, 0x49, 0x4e, 0x47,
	0x4c, 0x45, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52,
	0x75, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x43, 0x43, 0x58, 0x5f, 0x30, 0x10, 0x02, 0x12,
	0x19, 0x0a, 0x15, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6e, 0x4d, 0x6f, 0x64,
	0x65, 0x5f, 0x43, 0x43, 0x43, 0x58, 0x5f, 0x31, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x43, 0x43,
	0x58, 0x5f, 0x32, 0x10, 0x04, 0x22, 0x86, 0x01, 0x0a, 0x0b, 0x4e, 0x65, 0x78, 0x74, 0x52, 0x75,
	0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x65, 0x78, 0x74, 0x52, 0x75, 0x6e,
	0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x16,
	0x0a, 0x12, 0x4e, 0x65, 0x78, 0x74, 0x52, 0x75, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x53, 0x49,
	0x4e, 0x47, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x65, 0x78, 0x74, 0x52, 0x75,
	0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x43, 0x43, 0x58, 0x5f, 0x30, 0x10, 0x02, 0x12, 0x16,
	0x0a, 0x12, 0x4e, 0x65, 0x78, 0x74, 0x52, 0x75, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x43,
	0x43, 0x58, 0x5f, 0x31, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x65, 0x78, 0x74, 0x52, 0x75,
	0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x43, 0x43, 0x58, 0x5f, 0x32, 0x10, 0x04, 0x1a, 0xa4,
	0x0b, 0x0a, 0x0f, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x73, 0x12, 0x5a, 0x0a, 0x0f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c,
	0x6f, 0x67, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x2e, 0x4c,
	0x6f, 0x67, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x0f, 0x6c,
	0x6f, 0x67, 0x69, 0x63, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x1a, 0xb4,
	0x0a, 0x0a, 0x0e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x66, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c,
	0x6f, 0x67, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x2e, 0x4c,
	0x6f, 0x67, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x74, 0x0a, 0x13, 0x65,
	0x71, 0x75, 0x69, 0x70, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x6f, 0x67, 0x69,
	0x63, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x2e, 0x4c, 0x6f, 0x67, 0x69,
	0x63, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70,
	0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x13, 0x65, 0x71,
	0x75, 0x69, 0x70, 0x65, 0x64, 0x2d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2d, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x7d, 0x0a, 0x16, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x45, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e,
	0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x73, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x16, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x2d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x1a, 0xef, 0x02, 0x0a, 0x14, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x8f, 0x01, 0x0a, 0x15, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x59, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x6f, 0x67,
	0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x2e, 0x4c, 0x6f, 0x67,
	0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x15, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x2d,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x1a, 0xc4, 0x01, 0x0a, 0x13,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x64, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x6f, 0x67,
	0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x2e, 0x4c, 0x6f, 0x67,
	0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0x24, 0x0a, 0x0a,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x22, 0xec, 0x03, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x1b, 0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x53, 0x4c, 0x4f, 0x54, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x50,
	0x55, 0x53, 0x4c, 0x4f, 0x54, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x50, 0x55, 0x53, 0x4c, 0x4f, 0x54,
	0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x53, 0x46, 0x55, 0x53, 0x4c, 0x4f, 0x54, 0x10, 0x04, 0x12, 0x19, 0x0a,
	0x15, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49,
	0x43, 0x55, 0x53, 0x4c, 0x4f, 0x54, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x43, 0x55, 0x53, 0x4c, 0x4f,
	0x54, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x4c, 0x4b, 0x53, 0x4c, 0x4f, 0x54, 0x10, 0x07, 0x12, 0x19,
	0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x43, 0x4d, 0x55, 0x53, 0x4c, 0x4f, 0x54, 0x10, 0x08, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x41, 0x4e, 0x53, 0x4c,
	0x4f, 0x54, 0x10, 0x09, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x53, 0x4c, 0x4f, 0x54, 0x10,
	0x0a, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x4c, 0x43, 0x44, 0x53, 0x4c, 0x4f, 0x54, 0x10, 0x0b, 0x12, 0x19, 0x0a, 0x15,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x49,
	0x43, 0x53, 0x4c, 0x4f, 0x54, 0x10, 0x0c, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4f, 0x46, 0x43, 0x53, 0x4c, 0x4f, 0x54,
	0x10, 0x0d, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x43, 0x46, 0x43, 0x41, 0x52, 0x44, 0x53, 0x4c, 0x4f, 0x54, 0x10, 0x0e,
	0x12, 0x1d, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x53, 0x4c, 0x4f, 0x54, 0x10, 0x0f, 0x12,
	0x20, 0x0a, 0x1c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x53, 0x55, 0x42, 0x53, 0x4c, 0x4f, 0x54, 0x10,
	0x10, 0x22, 0x32, 0x0a, 0x11, 0x45, 0x71, 0x75, 0x69, 0x70, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x71, 0x75, 0x69, 0x70, 0x65,
	0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x1a, 0xa5, 0x05, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x73, 0x12, 0x44, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52,
	0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x1a, 0xd0, 0x04, 0x0a, 0x09, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x30,
	0x0a, 0x13, 0x65, 0x71, 0x75, 0x69, 0x70, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x65, 0x71, 0x75,
	0x69, 0x70, 0x65, 0x64, 0x2d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2d, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x73, 0x0a, 0x16, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44,
	0x65, 0x76, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x16, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x2d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f,
	0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x1a,
	0xd7, 0x01, 0x0a, 0x14, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x85, 0x01, 0x0a, 0x15, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x15, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x2d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2d, 0x74, 0x79, 0x70, 0x65,
	0x1a, 0x37, 0x0a, 0x13, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0x32, 0x0a, 0x07, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x5f,
	0x41, 0x42, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x1a, 0xf7, 0xc1,
	0x02, 0x0a, 0x09, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x12, 0x42, 0x0a, 0x09,
	0x6d, 0x70, 0x75, 0x5f, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65,
	0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x09, 0x6d, 0x70, 0x75, 0x2d, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x1a, 0xa4, 0xc1, 0x02, 0x0a, 0x08, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2d, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x75, 0x70, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x64,
	0x72, 0x61, 0x6d, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x73, 0x64, 0x72, 0x61, 0x6d, 0x2d, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x76,
	0x72, 0x61, 0x6d, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x6e, 0x76, 0x72, 0x61, 0x6d, 0x2d, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x6c,
	0x61, 0x73, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x66, 0x6c, 0x61, 0x73, 0x68, 0x2d, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x45, 0x0a, 0x07, 0x6c, 0x73,
	0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d,
	0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x2e, 0x4c, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x07, 0x6c, 0x73, 0x2d, 0x72, 0x6f, 0x6c,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74,
	0x2d, 0x72, 0x65, 0x73, 0x65, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x2d, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x2d, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x2d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x66, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x66, 0x63, 0x61, 0x72, 0x64, 0x2d, 0x73,
	0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x66, 0x63, 0x61, 0x72, 0x64, 0x32, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x66, 0x63, 0x61, 0x72,
	0x64, 0x32, 0x2d, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x3d, 0x0a, 0x04, 0x62, 0x72, 0x61, 0x73, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64,
	0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x42, 0x72, 0x61, 0x73,
	0x52, 0x04, 0x62, 0x72, 0x61, 0x73, 0x12, 0x3d, 0x0a, 0x04, 0x6c, 0x32, 0x74, 0x70, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65,
	0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4c, 0x32, 0x54, 0x70, 0x52,
	0x04, 0x6c, 0x32, 0x74, 0x70, 0x12, 0x4e, 0x0a, 0x0a, 0x62, 0x72, 0x61, 0x73, 0x5f, 0x70, 0x70,
	0x70, 0x6f, 0x78, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e,
	0x42, 0x72, 0x61, 0x73, 0x50, 0x70, 0x70, 0x6f, 0x78, 0x52, 0x0a, 0x62, 0x72, 0x61, 0x73, 0x2d,
	0x70, 0x70, 0x70, 0x6f, 0x78, 0x12, 0x4c, 0x0a, 0x09, 0x63, 0x70, 0x75, 0x64, 0x65, 0x66, 0x65,
	0x6e, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x43,
	0x70, 0x75, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x52, 0x09, 0x63, 0x70, 0x75, 0x64, 0x65, 0x66,
	0x65, 0x6e, 0x64, 0x12, 0x5a, 0x0a, 0x0e, 0x63, 0x70, 0x75, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64,
	0x5f, 0x64, 0x65, 0x76, 0x6d, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d,
	0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x2e, 0x43, 0x70, 0x75, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x76, 0x6d, 0x52,
	0x0e, 0x63, 0x70, 0x75, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x2d, 0x64, 0x65, 0x76, 0x6d, 0x12,
	0x54, 0x0a, 0x0c, 0x63, 0x6d, 0x61, 0x63, 0x5f, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64,
	0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x6d, 0x61, 0x63,
	0x50, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x63, 0x6d, 0x61, 0x63, 0x2d, 0x70, 0x61,
	0x64, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x3a, 0x0a, 0x03, 0x66, 0x69, 0x6d, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d,
	0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x46, 0x69, 0x6d, 0x52, 0x03, 0x66, 0x69,
	0x6d, 0x12, 0x7a, 0x0a, 0x19, 0x6d, 0x61, 0x63, 0x6d, 0x74, 0x75, 0x5f, 0x64, 0x69, 0x73, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65,
	0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4d, 0x61, 0x63, 0x6d, 0x74,
	0x75, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x52, 0x19, 0x6d, 0x61, 0x63, 0x6d, 0x74, 0x75, 0x2d, 0x64, 0x69, 0x73, 0x63, 0x61,
	0x72, 0x64, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x59, 0x0a,
	0x0e, 0x76, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64,
	0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x56, 0x65, 0x4d, 0x61,
	0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0e, 0x76, 0x65, 0x2d, 0x6d, 0x61, 0x63,
	0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x82, 0x01, 0x0a, 0x1c, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x64, 0x65,
	0x66, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65,
	0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x50, 0x6c, 0x61, 0x6e, 0x65, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x52,
	0x1c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2d, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x2d, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x74, 0x0a,
	0x17, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76,
	0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x17, 0x6c, 0x69, 0x6e, 0x6b,
	0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x52, 0x0a, 0x0b, 0x6c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4c,
	0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x6c, 0x6f, 0x61, 0x64,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x06, 0x6d, 0x69, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4d, 0x69,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x54, 0x0a, 0x0c,
	0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d,
	0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x46, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x52, 0x0c, 0x6d, 0x70, 0x6c, 0x73, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x12, 0x4c, 0x0a, 0x09, 0x6e, 0x65, 0x74, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64,
	0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4e, 0x65, 0x74, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x12, 0x3a, 0x0a, 0x03, 0x70, 0x62, 0x72, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d,
	0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x2e, 0x50, 0x62, 0x72, 0x52, 0x03, 0x70, 0x62, 0x72, 0x12, 0x3a, 0x0a, 0x03,
	0x71, 0x6f, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e,
	0x51, 0x6f, 0x73, 0x52, 0x03, 0x71, 0x6f, 0x73, 0x12, 0x3a, 0x0a, 0x03, 0x73, 0x6f, 0x63, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64,
	0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x53, 0x6f, 0x63, 0x52,
	0x03, 0x73, 0x6f, 0x63, 0x12, 0x5d, 0x0a, 0x0f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f,
	0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d,
	0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x2e, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x52, 0x0f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2d, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x12, 0x75, 0x0a, 0x18, 0x63, 0x66, 0x6d, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x70, 0x75, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64,
	0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x66, 0x6d, 0x4d,
	0x61, 0x63, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x70, 0x75,
	0x52, 0x18, 0x63, 0x66, 0x6d, 0x2d, 0x6d, 0x61, 0x63, 0x2d, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2d,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2d, 0x6d, 0x70, 0x75, 0x12, 0x57, 0x0a, 0x0d, 0x64, 0x68,
	0x63, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e,
	0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d,
	0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x76, 0x36, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x52, 0x0d, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2d, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x5a, 0x0a, 0x0e, 0x68, 0x74, 0x74, 0x70, 0x73, 0x5f, 0x72, 0x65, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d,
	0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x73, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x52,
	0x0e, 0x68, 0x74, 0x74, 0x70, 0x73, 0x2d, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x12,
	0x62, 0x0a, 0x11, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x66, 0x69, 0x78, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70,
	0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x78,
	0x52, 0x11, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2d, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x2d,
	0x66, 0x69, 0x78, 0x12, 0x45, 0x0a, 0x07, 0x70, 0x70, 0x70, 0x5f, 0x6e, 0x65, 0x74, 0x18, 0x26,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65,
	0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x50, 0x70, 0x70, 0x4e, 0x65,
	0x74, 0x52, 0x07, 0x70, 0x70, 0x70, 0x2d, 0x6e, 0x65, 0x74, 0x12, 0x40, 0x0a, 0x05, 0x73, 0x66,
	0x6c, 0x6f, 0x77, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e,
	0x53, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x05, 0x73, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x3a, 0x0a, 0x03,
	0x64, 0x63, 0x62, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e,
	0x44, 0x63, 0x62, 0x52, 0x03, 0x64, 0x63, 0x62, 0x1a, 0xd0, 0x06, 0x0a, 0x04, 0x42, 0x72, 0x61,
	0x73, 0x12, 0x7c, 0x0a, 0x18, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76,
	0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x42, 0x72, 0x61, 0x73, 0x2e, 0x46,
	0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x46, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x18, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x2d, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x3f, 0x0a, 0x03, 0x76, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e,
	0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x2e, 0x42, 0x72, 0x61, 0x73, 0x2e, 0x56, 0x61, 0x73, 0x52, 0x03, 0x76, 0x61, 0x73,
	0x12, 0x51, 0x0a, 0x09, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76,
	0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x42, 0x72, 0x61, 0x73, 0x2e, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x52, 0x09, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x1a, 0xd9, 0x01, 0x0a, 0x16, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x59,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x45, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e,
	0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x2e, 0x42, 0x72, 0x61, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x64, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55,
	0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x0d,
	0x0a, 0x09, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x41, 0x53, 0x54, 0x10, 0x01, 0x12, 0x0f, 0x0a,
	0x0b, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x0d,
	0x0a, 0x09, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x4c, 0x4f, 0x57, 0x10, 0x03, 0x12, 0x10, 0x0a,
	0x0c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x04, 0x1a,
	0xb9, 0x01, 0x0a, 0x03, 0x56, 0x61, 0x73, 0x12, 0x72, 0x0a, 0x13, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65,
	0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x42, 0x72, 0x61, 0x73, 0x2e,
	0x56, 0x61, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x46, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x13, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x2d, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x1a, 0x3e, 0x0a, 0x12, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x66, 0x6c, 0x6f, 0x77,
	0x2d, 0x72, 0x65, 0x61, 0x64, 0x2d, 0x73, 0x70, 0x65, 0x65, 0x64, 0x1a, 0x9d, 0x01, 0x0a, 0x09,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0x68, 0x0a, 0x0e, 0x62, 0x61, 0x73,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x63, 0x61, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x40, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e,
	0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d,
	0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x42, 0x72, 0x61, 0x73, 0x2e, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x42, 0x61, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x43, 0x61, 0x63, 0x52, 0x0e, 0x62, 0x61, 0x73, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d,
	0x63, 0x61, 0x63, 0x1a, 0x26, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x43, 0x61, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0x8e, 0x03, 0x0a, 0x04,
	0x4c, 0x32, 0x54, 0x70, 0x12, 0x53, 0x0a, 0x0a, 0x69, 0x63, 0x72, 0x71, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4c,
	0x32, 0x54, 0x70, 0x2e, 0x49, 0x63, 0x72, 0x71, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x0a, 0x69,
	0x63, 0x72, 0x71, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x59, 0x0a, 0x0c, 0x66, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65,
	0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4c, 0x32, 0x54, 0x70, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x2d,
	0x6d, 0x6f, 0x64, 0x65, 0x1a, 0x29, 0x0a, 0x09, 0x49, 0x63, 0x72, 0x71, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x65, 0x74, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a,
	0xaa, 0x01, 0x0a, 0x0b, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x5f, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76,
	0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4c, 0x32, 0x54, 0x70, 0x2e, 0x46,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x3a, 0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a,
	0x12, 0x4d, 0x6f, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x4c, 0x4f, 0x4f, 0x50, 0x42,
	0x41, 0x43, 0x4b, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x6f, 0x64, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x54, 0x48, 0x52, 0x4f, 0x55, 0x47, 0x48, 0x10, 0x01, 0x1a, 0xc4, 0x3c, 0x0a,
	0x09, 0x42, 0x72, 0x61, 0x73, 0x50, 0x70, 0x70, 0x6f, 0x78, 0x12, 0x6c, 0x0a, 0x11, 0x73, 0x6c,
	0x6f, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64,
	0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x42, 0x72, 0x61, 0x73,
	0x50, 0x70, 0x70, 0x6f, 0x78, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x11, 0x73, 0x6c, 0x6f, 0x74, 0x2d, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x55, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d,
	0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x2e, 0x42, 0x72, 0x61, 0x73, 0x50, 0x70, 0x70, 0x6f, 0x78, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x49, 0x70, 0x52, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x69, 0x70, 0x12,
	0x66, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x70, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x42,
	0x72, 0x61, 0x73, 0x50, 0x70, 0x70, 0x6f, 0x78, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x49,
	0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x69,
	0x70, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x89, 0x01, 0x0a, 0x1b, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x79, 0x5f, 0x70, 0x70, 0x70, 0x6f, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d,
	0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x2e, 0x42, 0x72, 0x61, 0x73, 0x50, 0x70, 0x70, 0x6f, 0x78, 0x2e, 0x4c, 0x6f,
	0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x79, 0x50, 0x70, 0x70, 0x6f, 0x65, 0x52, 0x1b, 0x6c, 0x6f, 0x61, 0x64, 0x2d, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x2d, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x2d, 0x70, 0x70,
	0x70, 0x6f, 0x65, 0x12, 0x5e, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e,
	0x42, 0x72, 0x61, 0x73, 0x50, 0x70, 0x70, 0x6f, 0x78, 0x2e, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x75, 0x0a, 0x14, 0x70, 0x70, 0x70, 0x6f, 0x65, 0x5f, 0x73, 0x6c, 0x6f,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x41, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e,
	0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d,
	0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x42, 0x72, 0x61, 0x73, 0x50, 0x70, 0x70, 0x6f,
	0x78, 0x2e, 0x50, 0x70, 0x70, 0x6f, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x52, 0x14, 0x70, 0x70, 0x70, 0x6f, 0x65, 0x2d, 0x73, 0x6c, 0x6f, 0x74,
	0x2d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x6f, 0x0a, 0x12, 0x70, 0x70,
	0x70, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f,
	0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x42, 0x72, 0x61,
	0x73, 0x50, 0x70, 0x70, 0x6f, 0x78, 0x2e, 0x50, 0x70, 0x70, 0x53, 0x6c, 0x6f, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x12, 0x70, 0x70, 0x70, 0x2d, 0x73, 0x6c, 0x6f,
	0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x7e, 0x0a, 0x17, 0x75,
	0x72, 0x70, 0x66, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e,
	0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x2e, 0x42, 0x72, 0x61, 0x73, 0x50, 0x70, 0x70, 0x6f, 0x78, 0x2e, 0x55, 0x72, 0x70,
	0x66, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x52, 0x17, 0x75, 0x72, 0x70, 0x66, 0x2d, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64,
	0x2d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x74, 0x0a, 0x14, 0x70,
	0x70, 0x70, 0x5f, 0x65, 0x63, 0x68, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e,
	0x42, 0x72, 0x61, 0x73, 0x50, 0x70, 0x70, 0x6f, 0x78, 0x2e, 0x50, 0x70, 0x70, 0x45, 0x63, 0x68,
	0x6f, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x14, 0x70, 0x70, 0x70,
	0x2d, 0x65, 0x63, 0x68, 0x6f, 0x2d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2d, 0x6d, 0x6f, 0x64,
	0x65, 0x1a, 0x3f, 0x0a, 0x0f, 0x53, 0x6c, 0x6f, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x1a, 0x36, 0x0a, 0x08, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x49, 0x70, 0x12, 0x2a,
	0x0a, 0x10, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x70, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x69, 0x70, 0x2d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x31, 0x0a, 0x0d, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x49, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x66,
	0x61, 0x69, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x66, 0x61, 0x69, 0x6c, 0x2d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x4c, 0x0a,
	0x18, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x79, 0x50, 0x70, 0x70, 0x6f, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x6c, 0x6f, 0x61, 0x64, 0x2d, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0x3d, 0x0a, 0x0b, 0x4d,
	0x61, 0x78, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x6d, 0x61,
	0x78, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x2d, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0xe8, 0x0c, 0x0a, 0x12, 0x50,
	0x70, 0x70, 0x6f, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x70,
	0x61, 0x64, 0x69, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x14, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x70, 0x61, 0x64, 0x69, 0x2d,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x64, 0x69, 0x73, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x70, 0x61, 0x64, 0x69, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x2d, 0x70,
	0x61, 0x64, 0x69, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x73,
	0x65, 0x6e, 0x64, 0x5f, 0x70, 0x61, 0x64, 0x6f, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x70, 0x61, 0x64,
	0x6f, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x64, 0x72, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x2d, 0x70, 0x61, 0x64, 0x72, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x32, 0x0a,
	0x14, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x64, 0x72, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x64, 0x69, 0x73,
	0x63, 0x61, 0x72, 0x64, 0x2d, 0x70, 0x61, 0x64, 0x72, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x61, 0x64, 0x73, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x65,
	0x6e, 0x64, 0x2d, 0x70, 0x61, 0x64, 0x73, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12,
	0x34, 0x0a, 0x15, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x64, 0x72, 0x5f,
	0x73, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15,
	0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x2d, 0x70, 0x61, 0x64, 0x72, 0x2d, 0x73, 0x61, 0x6d,
	0x65, 0x2d, 0x6d, 0x61, 0x63, 0x12, 0x32, 0x0a, 0x14, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x5f, 0x70, 0x61, 0x64, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x14, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x70, 0x61, 0x64,
	0x74, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x64, 0x69, 0x73,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x64, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64,
	0x2d, 0x70, 0x61, 0x64, 0x74, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x2c, 0x0a,
	0x11, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x61, 0x64, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x70,
	0x61, 0x64, 0x74, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x73,
	0x65, 0x6e, 0x64, 0x5f, 0x70, 0x61, 0x64, 0x6d, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x70, 0x61, 0x64,
	0x6d, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x73, 0x65, 0x6e,
	0x64, 0x5f, 0x70, 0x61, 0x64, 0x6d, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x70,
	0x61, 0x64, 0x6d, 0x2d, 0x75, 0x72, 0x6c, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12,
	0x36, 0x0a, 0x16, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x61, 0x64, 0x6d, 0x5f, 0x6d, 0x6f, 0x74,
	0x6d, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x16, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x70, 0x61, 0x64, 0x6d, 0x2d, 0x6d, 0x6f, 0x74, 0x6d, 0x2d,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x5f,
	0x70, 0x61, 0x64, 0x6e, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x70, 0x61, 0x64, 0x6e, 0x2d, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x17, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12,
	0x38, 0x0a, 0x17, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x17, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x73, 0x65, 0x6e,
	0x64, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x28, 0x0a,
	0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x69, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x2d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x69,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2d, 0x70,
	0x61, 0x64, 0x2d, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x5f, 0x70, 0x61, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2d, 0x70, 0x61, 0x64, 0x2d, 0x74,
	0x61, 0x67, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x70,
	0x61, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x16, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2d, 0x70, 0x61, 0x64,
	0x2d, 0x74, 0x61, 0x67, 0x2d, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x2a, 0x0a, 0x10, 0x69,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2d, 0x70,
	0x61, 0x64, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x69, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x5f, 0x70, 0x61, 0x64, 0x69, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2d,
	0x70, 0x61, 0x64, 0x69, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x34, 0x0a,
	0x15, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x64, 0x72, 0x5f, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x69, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x2d, 0x70, 0x61, 0x64, 0x72, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x3c, 0x0a, 0x19, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x70,
	0x61, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2d,
	0x70, 0x61, 0x64, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x12, 0x3c, 0x0a, 0x19, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x5f, 0x70, 0x61, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x2d, 0x69, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x2d, 0x70, 0x61, 0x64, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12,
	0x3c, 0x0a, 0x19, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x5f, 0x70, 0x61, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x19, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x2d, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x2d, 0x70, 0x61, 0x64, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x36, 0x0a,
	0x16, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x5f, 0x70, 0x61, 0x64, 0x73, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x73,
	0x65, 0x6e, 0x64, 0x2d, 0x6e, 0x75, 0x6c, 0x6c, 0x2d, 0x70, 0x61, 0x64, 0x73, 0x2d, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x1a, 0xd4, 0x1f, 0x0a, 0x10, 0x50, 0x70, 0x70, 0x53, 0x6c, 0x6f,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x65,
	0x6e, 0x64, 0x5f, 0x65, 0x63, 0x68, 0x6f, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x65, 0x63, 0x68, 0x6f,
	0x2d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65, 0x6e, 0x64,
	0x5f, 0x65, 0x63, 0x68, 0x6f, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x65, 0x63, 0x68, 0x6f, 0x2d, 0x72, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x65, 0x63, 0x68, 0x6f, 0x5f,
	0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x73, 0x65,
	0x6e, 0x64, 0x2d, 0x65, 0x63, 0x68, 0x6f, 0x2d, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x2e,
	0x0a, 0x12, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x65, 0x63, 0x68, 0x6f, 0x5f, 0x72,
	0x65, 0x70, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x2d, 0x65, 0x63, 0x68, 0x6f, 0x2d, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x32,
	0x0a, 0x14, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x65, 0x63, 0x68, 0x6f, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x65, 0x63, 0x68, 0x6f, 0x2d, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x40, 0x0a, 0x1b, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x63, 0x70, 0x5f, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x6c, 0x63,
	0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x17, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x63, 0x70,
	0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6b, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x6c, 0x63, 0x70, 0x2d,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6e, 0x61, 0x6b, 0x12, 0x44,
	0x0a, 0x1d, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x6c, 0x63, 0x70, 0x2d,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x72, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x17, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x63, 0x70,
	0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x6b, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x6c, 0x63, 0x70, 0x2d,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x61, 0x63, 0x6b, 0x12, 0x38,
	0x0a, 0x17, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x17, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x6c, 0x63, 0x70, 0x2d, 0x63, 0x6f, 0x64, 0x65, 0x2d, 0x72,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x1b, 0x73, 0x65, 0x6e, 0x64,
	0x5f, 0x6c, 0x63, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x72, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x73,
	0x65, 0x6e, 0x64, 0x2d, 0x6c, 0x63, 0x70, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2d, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x1c, 0x73, 0x65,
	0x6e, 0x64, 0x5f, 0x6c, 0x63, 0x70, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x1c, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x6c, 0x63, 0x70, 0x2d, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a,
	0x0a, 0x18, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x63, 0x70, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x18, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x6c, 0x63, 0x70, 0x2d, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x61, 0x63, 0x6b, 0x12, 0x46, 0x0a, 0x1e, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x1e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x6c, 0x63, 0x70, 0x2d,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3e, 0x0a, 0x1a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x63,
	0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6b,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d,
	0x6c, 0x63, 0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6e,
	0x61, 0x6b, 0x12, 0x4a, 0x0a, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x63,
	0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x20, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x6c, 0x63, 0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e,
	0x0a, 0x1a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x63, 0x70, 0x5f, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x1a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x6c, 0x63, 0x70, 0x2d,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x61, 0x63, 0x6b, 0x12, 0x3e,
	0x0a, 0x1a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x63, 0x70, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x1a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x6c, 0x63, 0x70, 0x2d,
	0x63, 0x6f, 0x64, 0x65, 0x2d, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46,
	0x0a, 0x1e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x63, 0x70, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d,
	0x6c, 0x63, 0x70, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2d, 0x72, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x1f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x5f, 0x6c, 0x63, 0x70, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x1f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x6c, 0x63, 0x70, 0x2d, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x40, 0x0a, 0x1b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x63, 0x70, 0x5f,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x6b, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x6c,
	0x63, 0x70, 0x2d, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x61,
	0x63, 0x6b, 0x12, 0x42, 0x0a, 0x1c, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x70, 0x63, 0x70, 0x5f,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x69,
	0x70, 0x63, 0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x18, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x69,
	0x70, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e,
	0x61, 0x6b, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x69,
	0x70, 0x63, 0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6e,
	0x61, 0x6b, 0x12, 0x46, 0x0a, 0x1e, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x70, 0x63, 0x70, 0x5f,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1e, 0x73, 0x65, 0x6e, 0x64,
	0x2d, 0x69, 0x70, 0x63, 0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2d, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x18, 0x73, 0x65,
	0x6e, 0x64, 0x5f, 0x69, 0x70, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x73, 0x65,
	0x6e, 0x64, 0x2d, 0x69, 0x70, 0x63, 0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2d, 0x61, 0x63, 0x6b, 0x12, 0x3a, 0x0a, 0x18, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x69,
	0x70, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x69,
	0x70, 0x63, 0x70, 0x2d, 0x63, 0x6f, 0x64, 0x65, 0x2d, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x1c, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x70, 0x63, 0x70, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x69,
	0x70, 0x63, 0x70, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2d, 0x72, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x1d, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x69,
	0x70, 0x63, 0x70, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x73,
	0x65, 0x6e, 0x64, 0x2d, 0x69, 0x70, 0x63, 0x70, 0x2d, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x1a,
	0x73, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x70, 0x63, 0x63, 0x70, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x1a, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x69, 0x70, 0x63, 0x63, 0x70, 0x2d, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x61, 0x63, 0x6b, 0x12, 0x48, 0x0a, 0x1f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x70, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x69,
	0x70, 0x63, 0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x1b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x5f, 0x69, 0x70, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6e, 0x61, 0x6b, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x2d, 0x69, 0x70, 0x63, 0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6e, 0x61, 0x6b, 0x12, 0x4c, 0x0a, 0x21, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x5f, 0x69, 0x70, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x21, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x69, 0x70, 0x63,
	0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x72, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x1b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x5f, 0x69, 0x70, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x2d, 0x69, 0x70, 0x63, 0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x61, 0x63, 0x6b, 0x12, 0x40, 0x0a, 0x1b, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x5f, 0x69, 0x70, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x69, 0x70, 0x63, 0x70, 0x2d, 0x63, 0x6f, 0x64, 0x65,
	0x2d, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x1f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x70, 0x63, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x1f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x69, 0x70, 0x63,
	0x70, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2d, 0x72, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f,
	0x69, 0x70, 0x63, 0x70, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x20,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x69, 0x70, 0x63, 0x70, 0x2d, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x42, 0x0a, 0x1c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x70, 0x63, 0x70,
	0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x6b,
	0x18, 0x25, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d,
	0x69, 0x70, 0x63, 0x70, 0x2d, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2d, 0x61, 0x63, 0x6b, 0x12, 0x44, 0x0a, 0x1d, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x70, 0x36,
	0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x73, 0x65, 0x6e,
	0x64, 0x2d, 0x69, 0x70, 0x36, 0x63, 0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x19, 0x73, 0x65,
	0x6e, 0x64, 0x5f, 0x69, 0x70, 0x36, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6b, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x73,
	0x65, 0x6e, 0x64, 0x2d, 0x69, 0x70, 0x36, 0x63, 0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6e, 0x61, 0x6b, 0x12, 0x48, 0x0a, 0x1f, 0x73, 0x65, 0x6e, 0x64,
	0x5f, 0x69, 0x70, 0x36, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x1f, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x69, 0x70, 0x36, 0x63, 0x70, 0x2d, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x19, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x70, 0x36, 0x63, 0x70,
	0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x6b, 0x18,
	0x29, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x69, 0x70, 0x36, 0x63,
	0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x61, 0x63, 0x6b,
	0x12, 0x3c, 0x0a, 0x19, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x70, 0x36, 0x63, 0x70, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x19, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x69, 0x70, 0x36, 0x63, 0x70, 0x2d,
	0x63, 0x6f, 0x64, 0x65, 0x2d, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44,
	0x0a, 0x1d, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x70, 0x36, 0x63, 0x70, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x2b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x69, 0x70, 0x36, 0x63,
	0x70, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2d, 0x72, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x1e, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x70, 0x36,
	0x63, 0x70, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1e, 0x73, 0x65,
	0x6e, 0x64, 0x2d, 0x69, 0x70, 0x36, 0x63, 0x70, 0x2d, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x1a,
	0x73, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x70, 0x36, 0x63, 0x70, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x1a, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x69, 0x70, 0x36, 0x63, 0x70, 0x2d, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x61, 0x63, 0x6b, 0x12, 0x4a, 0x0a, 0x20,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x70, 0x36, 0x63, 0x70, 0x5f, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x2e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d,
	0x69, 0x70, 0x36, 0x63, 0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x1c, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x5f, 0x69, 0x70, 0x36, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6b, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x69, 0x70, 0x36, 0x63, 0x70, 0x2d, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6e, 0x61, 0x6b, 0x12, 0x48, 0x0a, 0x1f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x70, 0x36, 0x63, 0x70, 0x5f, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x30, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x69,
	0x70, 0x36, 0x63, 0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d,
	0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x42, 0x0a, 0x1c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x5f, 0x69, 0x70, 0x36, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x69, 0x70, 0x36, 0x63, 0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x61, 0x63, 0x6b, 0x12, 0x42, 0x0a, 0x1c, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x70, 0x36, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x1c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x69, 0x70, 0x36, 0x63, 0x70, 0x2d,
	0x63, 0x6f, 0x64, 0x65, 0x2d, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a,
	0x0a, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x70, 0x36, 0x63, 0x70, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x2d, 0x69, 0x70, 0x36, 0x63, 0x70, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2d, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x21, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x70, 0x36, 0x63, 0x70, 0x5f, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x21, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x69,
	0x70, 0x36, 0x63, 0x70, 0x2d, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x1d, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x5f, 0x69, 0x70, 0x36, 0x63, 0x70, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x1d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x69, 0x70, 0x36, 0x63, 0x70, 0x2d, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x61, 0x63, 0x6b, 0x12, 0x40,
	0x0a, 0x1b, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x61, 0x70, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0x36, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x1b, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x70, 0x61, 0x70, 0x2d, 0x61, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x61, 0x63, 0x6b,
	0x12, 0x40, 0x0a, 0x1b, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x61, 0x70, 0x5f, 0x61, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6b, 0x18,
	0x37, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x70, 0x61, 0x70, 0x2d,
	0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6e,
	0x61, 0x6b, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x70, 0x5f,
	0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x13, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x63, 0x68, 0x61, 0x70, 0x2d, 0x63, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x1c, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x68, 0x61,
	0x70, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x61, 0x63, 0x6b, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x73, 0x65, 0x6e, 0x64,
	0x2d, 0x63, 0x68, 0x61, 0x70, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x61, 0x63, 0x6b, 0x12, 0x44, 0x0a, 0x1d, 0x73, 0x65, 0x6e, 0x64,
	0x5f, 0x63, 0x68, 0x61, 0x70, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x1d, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x63, 0x68, 0x61, 0x70, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x66, 0x61, 0x69, 0x6c, 0x12, 0x2c,
	0x0a, 0x11, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x61, 0x69, 0x6c, 0x5f, 0x66,
	0x61, 0x73, 0x74, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x64, 0x69, 0x73, 0x63, 0x61,
	0x72, 0x64, 0x2d, 0x64, 0x61, 0x69, 0x6c, 0x2d, 0x66, 0x61, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f,
	0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x73, 0x74, 0x65, 0x6e, 0x18,
	0x3c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x2d, 0x63,
	0x68, 0x61, 0x73, 0x74, 0x65, 0x6e, 0x12, 0x4e, 0x0a, 0x22, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x5f, 0x70, 0x61, 0x70, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x3d, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x22, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x70, 0x61, 0x70, 0x2d,
	0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x5f, 0x63, 0x68, 0x61, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x3e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x63,
	0x68, 0x61, 0x70, 0x2d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x89, 0x05, 0x0a,
	0x15, 0x55, 0x72, 0x70, 0x66, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x9f, 0x01, 0x0a, 0x1b, 0x75, 0x72, 0x70, 0x66, 0x5f,
	0x69, 0x70, 0x76, 0x34, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5d, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e,
	0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x2e, 0x42, 0x72, 0x61, 0x73, 0x50, 0x70, 0x70, 0x6f, 0x78, 0x2e, 0x55, 0x72, 0x70,
	0x66, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x55, 0x72, 0x70, 0x66, 0x49, 0x70, 0x76, 0x34, 0x44, 0x69, 0x73, 0x63, 0x61,
	0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x1b, 0x75, 0x72, 0x70,
	0x66, 0x2d, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x2d, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x9f, 0x01, 0x0a, 0x1b, 0x75, 0x72, 0x70,
	0x66, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5d,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76,
	0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x2e, 0x42, 0x72, 0x61, 0x73, 0x50, 0x70, 0x70, 0x6f, 0x78, 0x2e, 0x55,
	0x72, 0x70, 0x66, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x55, 0x72, 0x70, 0x66, 0x49, 0x70, 0x76, 0x36, 0x44, 0x69, 0x73,
	0x63, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x1b, 0x75,
	0x72, 0x70, 0x66, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64,
	0x2d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x1a, 0x94, 0x01, 0x0a, 0x18, 0x55,
	0x72, 0x70, 0x66, 0x49, 0x70, 0x76, 0x34, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x3c, 0x0a, 0x19, 0x70, 0x70, 0x70, 0x5f, 0x69,
	0x70, 0x76, 0x34, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f,
	0x62, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x70, 0x70, 0x70, 0x2d,
	0x69, 0x70, 0x76, 0x34, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x68, 0x69, 0x67, 0x68,
	0x2d, 0x62, 0x69, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x18, 0x70, 0x70, 0x70, 0x5f, 0x69, 0x70, 0x76,
	0x34, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x62, 0x69, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x70, 0x70, 0x70, 0x2d, 0x69, 0x70, 0x76,
	0x34, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x6c, 0x6f, 0x77, 0x2d, 0x62, 0x69, 0x74,
	0x73, 0x1a, 0x94, 0x01, 0x0a, 0x18, 0x55, 0x72, 0x70, 0x66, 0x49, 0x70, 0x76, 0x36, 0x44, 0x69,
	0x73, 0x63, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x3c,
	0x0a, 0x19, 0x70, 0x70, 0x70, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x62, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x19, 0x70, 0x70, 0x70, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x2d, 0x68, 0x69, 0x67, 0x68, 0x2d, 0x62, 0x69, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x18,
	0x70, 0x70, 0x70, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x6c, 0x6f, 0x77, 0x5f, 0x62, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18,
	0x70, 0x70, 0x70, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d,
	0x6c, 0x6f, 0x77, 0x2d, 0x62, 0x69, 0x74, 0x73, 0x1a, 0x39, 0x0a, 0x11, 0x50, 0x70, 0x70, 0x45,
	0x63, 0x68, 0x6f, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x6d,
	0x6f, 0x64, 0x65, 0x1a, 0x29, 0x0a, 0x09, 0x43, 0x70, 0x75, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x69, 0x64, 0x1a, 0xea,
	0x20, 0x0a, 0x0d, 0x43, 0x70, 0x75, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x76, 0x6d,
	0x12, 0x73, 0x0a, 0x12, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x63,
	0x61, 0x72, 0x5f, 0x61, 0x63, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e,
	0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x2e, 0x43, 0x70, 0x75, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x76, 0x6d,
	0x2e, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x63, 0x61, 0x72, 0x41, 0x63,
	0x6c, 0x52, 0x12, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x2d, 0x68, 0x6f, 0x73, 0x74, 0x63, 0x61,
	0x72, 0x2d, 0x61, 0x63, 0x6c, 0x12, 0x67, 0x0a, 0x0e, 0x62, 0x72, 0x61, 0x73, 0x5f, 0x68, 0x6f,
	0x73, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d,
	0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x2e, 0x43, 0x70, 0x75, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x76,
	0x6d, 0x2e, 0x42, 0x72, 0x61, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x72, 0x73, 0x52, 0x0e,
	0x62, 0x72, 0x61, 0x73, 0x2d, 0x68, 0x6f, 0x73, 0x74, 0x2d, 0x63, 0x61, 0x72, 0x73, 0x12, 0x56,
	0x0a, 0x08, 0x73, 0x70, 0x75, 0x5f, 0x63, 0x61, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44,
	0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70,
	0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x70, 0x75, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64,
	0x44, 0x65, 0x76, 0x6d, 0x2e, 0x53, 0x70, 0x75, 0x43, 0x61, 0x72, 0x73, 0x52, 0x08, 0x73, 0x70,
	0x75, 0x2d, 0x63, 0x61, 0x72, 0x73, 0x12, 0x61, 0x0a, 0x0c, 0x61, 0x72, 0x70, 0x5f, 0x76, 0x6c,
	0x61, 0x6e, 0x5f, 0x63, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e,
	0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x2e, 0x43, 0x70, 0x75, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x76, 0x6d,
	0x2e, 0x41, 0x72, 0x70, 0x56, 0x6c, 0x61, 0x6e, 0x43, 0x61, 0x72, 0x52, 0x0c, 0x61, 0x72, 0x70,
	0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x63, 0x61, 0x72, 0x12, 0x5e, 0x0a, 0x0b, 0x6e, 0x64, 0x5f,
	0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x63, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76,
	0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x70, 0x75, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x44, 0x65,
	0x76, 0x6d, 0x2e, 0x4e, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x43, 0x61, 0x72, 0x52, 0x0b, 0x6e, 0x64,
	0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x63, 0x61, 0x72, 0x1a, 0xe9, 0x03, 0x0a, 0x10, 0x49, 0x67,
	0x6e, 0x6f, 0x72, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x63, 0x61, 0x72, 0x41, 0x63, 0x6c, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x61, 0x63, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x61, 0x63, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x70,
	0x76, 0x36, 0x5f, 0x61, 0x63, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x70,
	0x76, 0x36, 0x2d, 0x61, 0x63, 0x6c, 0x12, 0x8c, 0x01, 0x0a, 0x19, 0x69, 0x70, 0x76, 0x34, 0x5f,
	0x61, 0x63, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5a, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70,
	0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x2e, 0x43, 0x70, 0x75, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x49,
	0x67, 0x6e, 0x6f, 0x72, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x63, 0x61, 0x72, 0x41, 0x63, 0x6c, 0x2e,
	0x49, 0x70, 0x76, 0x34, 0x41, 0x63, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x79, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x0b, 0x62, 0x79, 0x2d, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x86, 0x01, 0x0a, 0x17, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x61,
	0x63, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x62, 0x79, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x70,
	0x75, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x49, 0x67, 0x6e, 0x6f,
	0x72, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x63, 0x61, 0x72, 0x41, 0x63, 0x6c, 0x2e, 0x49, 0x70, 0x76,
	0x34, 0x41, 0x63, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x79, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x09, 0x62, 0x79, 0x2d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x34,
	0x0a, 0x16, 0x49, 0x70, 0x76, 0x34, 0x41, 0x63, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x79,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x70, 0x76, 0x34,
	0x5f, 0x61, 0x63, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x70, 0x76, 0x34,
	0x2d, 0x61, 0x63, 0x6c, 0x1a, 0x40, 0x0a, 0x14, 0x49, 0x70, 0x76, 0x34, 0x41, 0x63, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x42, 0x79, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0f,
	0x69, 0x70, 0x76, 0x34, 0x5f, 0x61, 0x63, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x61, 0x63, 0x6c, 0x2d,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x0d, 0x0a, 0x0b, 0x49, 0x70, 0x76, 0x34, 0x41, 0x63,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x1a, 0xe7, 0x07, 0x0a, 0x0c, 0x42, 0x72, 0x61, 0x73, 0x48, 0x6f,
	0x73, 0x74, 0x43, 0x61, 0x72, 0x73, 0x12, 0x71, 0x0a, 0x0d, 0x62, 0x72, 0x61, 0x73, 0x5f, 0x68,
	0x6f, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4b, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d,
	0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x2e, 0x43, 0x70, 0x75, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x76,
	0x6d, 0x2e, 0x42, 0x72, 0x61, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x72, 0x73, 0x2e, 0x42,
	0x72, 0x61, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x72, 0x52, 0x0d, 0x62, 0x72, 0x61, 0x73,
	0x2d, 0x68, 0x6f, 0x73, 0x74, 0x2d, 0x63, 0x61, 0x72, 0x1a, 0xe3, 0x06, 0x0a, 0x0b, 0x42, 0x72,
	0x61, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x72, 0x12, 0x64, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x50, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x70,
	0x75, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x42, 0x72, 0x61, 0x73,
	0x48, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x72, 0x73, 0x2e, 0x42, 0x72, 0x61, 0x73, 0x48, 0x6f, 0x73,
	0x74, 0x43, 0x61, 0x72, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x75, 0x0a, 0x0a, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76,
	0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x70, 0x75, 0x64, 0x65, 0x66,
	0x65, 0x6e, 0x64, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x42, 0x72, 0x61, 0x73, 0x48, 0x6f, 0x73, 0x74,
	0x43, 0x61, 0x72, 0x73, 0x2e, 0x42, 0x72, 0x61, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x72,
	0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x0a, 0x72, 0x61, 0x74, 0x65,
	0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x6d, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x70,
	0x75, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x42, 0x72, 0x61, 0x73,
	0x48, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x72, 0x73, 0x2e, 0x42, 0x72, 0x61, 0x73, 0x48, 0x6f, 0x73,
	0x74, 0x43, 0x61, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x6c, 0x6f,
	0x67, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x7e, 0x0a, 0x0d, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x5f,
	0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e,
	0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x2e, 0x43, 0x70, 0x75, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x76, 0x6d,
	0x2e, 0x42, 0x72, 0x61, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x72, 0x73, 0x2e, 0x42, 0x72,
	0x61, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x72, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b,
	0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x52, 0x0d, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x2d, 0x64,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x1a, 0x83, 0x01, 0x0a, 0x09, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x63, 0x69, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x62, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x63, 0x62, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x69, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x62, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x62, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x61,
	0x75, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x61, 0x75, 0x74, 0x6f, 0x2d, 0x61, 0x64,
	0x6a, 0x75, 0x73, 0x74, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0x53, 0x0a, 0x07, 0x4c,
	0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x64,
	0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x1a, 0x40, 0x0a, 0x0c, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x12, 0x30, 0x0a, 0x13, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x64,
	0x72, 0x6f, 0x70, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x22, 0x6b, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45,
	0x5f, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x48, 0x4f, 0x53, 0x54, 0x58, 0x5f, 0x43, 0x41, 0x52, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x58, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x58, 0x5f,
	0x43, 0x41, 0x52, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x56, 0x4c,
	0x41, 0x4e, 0x58, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x58, 0x5f, 0x43, 0x41, 0x52, 0x10, 0x03, 0x1a,
	0x83, 0x07, 0x0a, 0x07, 0x53, 0x70, 0x75, 0x43, 0x61, 0x72, 0x73, 0x12, 0x5b, 0x0a, 0x07, 0x73,
	0x70, 0x75, 0x5f, 0x63, 0x61, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e,
	0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x2e, 0x43, 0x70, 0x75, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x76, 0x6d,
	0x2e, 0x53, 0x70, 0x75, 0x43, 0x61, 0x72, 0x73, 0x2e, 0x53, 0x70, 0x75, 0x43, 0x61, 0x72, 0x52,
	0x07, 0x73, 0x70, 0x75, 0x2d, 0x63, 0x61, 0x72, 0x1a, 0x9a, 0x06, 0x0a, 0x06, 0x53, 0x70, 0x75,
	0x43, 0x61, 0x72, 0x12, 0x65, 0x0a, 0x08, 0x63, 0x61, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x49, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64,
	0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x70, 0x75, 0x64,
	0x65, 0x66, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x53, 0x70, 0x75, 0x43, 0x61, 0x72,
	0x73, 0x2e, 0x53, 0x70, 0x75, 0x43, 0x61, 0x72, 0x2e, 0x43, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x08, 0x63, 0x61, 0x72, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x63, 0x69, 0x72, 0x12, 0x10, 0x0a, 0x03,
	0x63, 0x62, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x63, 0x62, 0x73, 0x22, 0x84,
	0x05, 0x0a, 0x07, 0x43, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45,
	0x5f, 0x43, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x61,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x43, 0x4d, 0x50, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b,
	0x43, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x43, 0x50, 0x10, 0x02, 0x12, 0x0f, 0x0a,
	0x0b, 0x43, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x44, 0x50, 0x10, 0x03, 0x12, 0x0f,
	0x0a, 0x0b, 0x43, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x47, 0x52, 0x45, 0x10, 0x04, 0x12,
	0x0f, 0x0a, 0x0b, 0x43, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x47, 0x50, 0x10, 0x05,
	0x12, 0x13, 0x0a, 0x0f, 0x43, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x45, 0x46, 0x41,
	0x55, 0x4c, 0x54, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x10, 0x07, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x61, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x49, 0x4b, 0x45, 0x58, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x58, 0x5f,
	0x43, 0x41, 0x52, 0x10, 0x08, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x49, 0x4b, 0x45, 0x58, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x58, 0x5f, 0x43, 0x41,
	0x52, 0x10, 0x09, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50,
	0x4c, 0x41, 0x49, 0x4e, 0x58, 0x5f, 0x53, 0x41, 0x58, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x10, 0x0a,
	0x12, 0x1c, 0x0a, 0x18, 0x43, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x49, 0x50, 0x48,
	0x45, 0x52, 0x58, 0x5f, 0x53, 0x41, 0x58, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x10, 0x0b, 0x12, 0x18,
	0x0a, 0x14, 0x43, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x50, 0x53, 0x45, 0x43, 0x58,
	0x5f, 0x52, 0x45, 0x4b, 0x45, 0x59, 0x10, 0x0c, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x61, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x49, 0x4b, 0x45, 0x58, 0x5f, 0x44, 0x50, 0x44, 0x10, 0x0d, 0x12, 0x19,
	0x0a, 0x15, 0x43, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x41, 0x53, 0x54, 0x58, 0x5f,
	0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x0e, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x61, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x46, 0x44, 0x58, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x0f,
	0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x53, 0x54, 0x10,
	0x10, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x53, 0x4c,
	0x49, 0x54, 0x45, 0x58, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x58, 0x5f, 0x49, 0x50,
	0x56, 0x34, 0x10, 0x11, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x49, 0x50, 0x58, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x12, 0x12, 0x17, 0x0a, 0x13,
	0x43, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x54, 0x55, 0x58, 0x5f, 0x45, 0x58, 0x43,
	0x45, 0x45, 0x44, 0x10, 0x13, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x43, 0x47, 0x4e, 0x58, 0x5f, 0x49, 0x43, 0x4d, 0x50, 0x10, 0x14, 0x12, 0x17, 0x0a, 0x13,
	0x43, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x47, 0x4e, 0x58, 0x5f, 0x49, 0x43, 0x4d,
	0x50, 0x56, 0x36, 0x10, 0x15, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x43, 0x47, 0x4e, 0x58, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x58, 0x5f, 0x4f, 0x54, 0x48, 0x45,
	0x52, 0x10, 0x16, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43,
	0x47, 0x4e, 0x58, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x58, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10,
	0x17, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x47, 0x4e,
	0x58, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x58, 0x5f, 0x52, 0x41, 0x57, 0x10, 0x18, 0x12, 0x16, 0x0a,
	0x12, 0x43, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x47, 0x4e, 0x58, 0x5f, 0x54, 0x4f,
	0x54, 0x41, 0x4c, 0x10, 0x19, 0x1a, 0xde, 0x01, 0x0a, 0x0a, 0x41, 0x72, 0x70, 0x56, 0x6c, 0x61,
	0x6e, 0x43, 0x61, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x64, 0x72,
	0x6f, 0x70, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x61,
	0x6c, 0x61, 0x72, 0x6d, 0x2d, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x69,
	0x0a, 0x0b, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x32, 0x5f, 0x63, 0x61, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76,
	0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x70, 0x75, 0x64, 0x65, 0x66,
	0x65, 0x6e, 0x64, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x41, 0x72, 0x70, 0x56, 0x6c, 0x61, 0x6e, 0x43,
	0x61, 0x72, 0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x43, 0x61, 0x72, 0x52, 0x0b, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x2d, 0x32, 0x2d, 0x63, 0x61, 0x72, 0x1a, 0x3b, 0x0a, 0x09, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x32, 0x43, 0x61, 0x72, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x12, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2d, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x1a, 0xa2, 0x08, 0x0a, 0x09, 0x4e, 0x64, 0x56, 0x6c, 0x61,
	0x6e, 0x43, 0x61, 0x72, 0x12, 0x77, 0x0a, 0x10, 0x6e, 0x64, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x6b, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76,
	0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x70, 0x75, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x44, 0x65,
	0x76, 0x6d, 0x2e, 0x4e, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x43, 0x61, 0x72, 0x2e, 0x4e, 0x64, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x6b, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x52, 0x10, 0x6e, 0x64, 0x2d,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x2d, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x12, 0x6b, 0x0a,
	0x0c, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x32, 0x5f, 0x63, 0x61, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76,
	0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x70, 0x75, 0x64, 0x65, 0x66,
	0x65, 0x6e, 0x64, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4e, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x43, 0x61,
	0x72, 0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x43, 0x61, 0x72, 0x73, 0x52, 0x0c, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x2d, 0x32, 0x2d, 0x63, 0x61, 0x72, 0x73, 0x1a, 0xa0, 0x03, 0x0a, 0x0e, 0x4e,
	0x64, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x12, 0x83, 0x01,
	0x0a, 0x0f, 0x6e, 0x64, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x61, 0x6c, 0x61, 0x72,
	0x6d, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x59, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x70,
	0x75, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4e, 0x64, 0x56, 0x6c,
	0x61, 0x6e, 0x43, 0x61, 0x72, 0x2e, 0x4e, 0x64, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x41, 0x6c,
	0x61, 0x72, 0x6d, 0x73, 0x2e, 0x4e, 0x64, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x41, 0x6c, 0x61,
	0x72, 0x6d, 0x52, 0x0f, 0x6e, 0x64, 0x2d, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x2d, 0x61, 0x6c,
	0x61, 0x72, 0x6d, 0x1a, 0x87, 0x02, 0x0a, 0x0d, 0x4e, 0x64, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b,
	0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x72, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x5e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76,
	0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x70, 0x75, 0x64, 0x65, 0x66,
	0x65, 0x6e, 0x64, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4e, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x43, 0x61,
	0x72, 0x2e, 0x4e, 0x64, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73,
	0x2e, 0x4e, 0x64, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x6c, 0x61,
	0x72, 0x6d, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x5e, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x79, 0x70, 0x65,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x41, 0x10, 0x01, 0x12,
	0x14, 0x0a, 0x10, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x53, 0x58, 0x5f, 0x55, 0x4e, 0x49, 0x43,
	0x41, 0x53, 0x54, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x53,
	0x58, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x43, 0x41, 0x53, 0x54, 0x10, 0x03, 0x1a, 0x8b, 0x03,
	0x0a, 0x0a, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x43, 0x61, 0x72, 0x73, 0x12, 0x73, 0x0a, 0x0b,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x32, 0x5f, 0x63, 0x61, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x51, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e,
	0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d,
	0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x70, 0x75, 0x64, 0x65, 0x66, 0x65, 0x6e,
	0x64, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4e, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x43, 0x61, 0x72, 0x2e,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x43, 0x61, 0x72, 0x73, 0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x32, 0x43, 0x61, 0x72, 0x52, 0x0b, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2d, 0x32, 0x2d, 0x63, 0x61,
	0x72, 0x1a, 0x87, 0x02, 0x0a, 0x09, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x43, 0x61, 0x72, 0x12,
	0x6a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x56, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d,
	0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x2e, 0x43, 0x70, 0x75, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x76,
	0x6d, 0x2e, 0x4e, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x43, 0x61, 0x72, 0x2e, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x32, 0x43, 0x61, 0x72, 0x73, 0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x43, 0x61, 0x72,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x72,
	0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x2d, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x22, 0x5e, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45,
	0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x41, 0x10, 0x01, 0x12, 0x14, 0x0a,
	0x10, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x53, 0x58, 0x5f, 0x55, 0x4e, 0x49, 0x43, 0x41, 0x53,
	0x54, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x53, 0x58, 0x5f,
	0x4d, 0x55, 0x4c, 0x54, 0x49, 0x43, 0x41, 0x53, 0x54, 0x10, 0x03, 0x1a, 0x95, 0x01, 0x0a, 0x0b,
	0x43, 0x6d, 0x61, 0x63, 0x50, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x52, 0x0a, 0x07, 0x70,
	0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e,
	0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x2e, 0x43, 0x6d, 0x61, 0x63, 0x50, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x50,
	0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x22,
	0x32, 0x0a, 0x07, 0x50, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x61,
	0x64, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12,
	0x12, 0x0a, 0x0e, 0x50, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c,
	0x45, 0x10, 0x01, 0x1a, 0x97, 0x04, 0x0a, 0x03, 0x46, 0x69, 0x6d, 0x12, 0x58, 0x0a, 0x0c, 0x66,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x34, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e,
	0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d,
	0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x46, 0x69, 0x6d, 0x2e, 0x46, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x63, 0x0a, 0x10, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x6d, 0x69,
	0x73, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x37, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65,
	0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x46, 0x69, 0x6d, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x4d, 0x69,
	0x73, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x10, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x6d,
	0x69, 0x73, 0x73, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x63,
	0x61, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x73, 0x63, 0x61, 0x6e, 0x2d, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x24, 0x0a, 0x0d,
	0x63, 0x70, 0x75, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x70, 0x75, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x70, 0x75, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x70, 0x75, 0x2d, 0x64, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x70, 0x75, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x70, 0x75, 0x2d, 0x72, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x40, 0x0a, 0x0b, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x6f, 0x64, 0x65,
	0x5f, 0x4c, 0x4f, 0x4f, 0x50, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x46,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x54, 0x48, 0x52, 0x4f, 0x55,
	0x47, 0x48, 0x10, 0x01, 0x22, 0x47, 0x0a, 0x0e, 0x56, 0x6c, 0x61, 0x6e, 0x4d, 0x69, 0x73, 0x73,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x56, 0x6c, 0x61, 0x6e, 0x4d, 0x69,
	0x73, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x56, 0x6c, 0x61, 0x6e, 0x4d, 0x69, 0x73, 0x73, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x89, 0x01,
	0x0a, 0x17, 0x4d, 0x61, 0x63, 0x6d, 0x74, 0x75, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x74, 0x75,
	0x5f, 0x69, 0x70, 0x76, 0x34, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x74, 0x75,
	0x2d, 0x69, 0x70, 0x76, 0x34, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x74, 0x75, 0x5f, 0x69, 0x70, 0x76,
	0x36, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x74, 0x75, 0x2d, 0x69, 0x70, 0x76,
	0x36, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x63, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x61, 0x63, 0x2d, 0x69, 0x70, 0x76, 0x34, 0x12, 0x1a, 0x0a,
	0x08, 0x6d, 0x61, 0x63, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x6d, 0x61, 0x63, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x1a, 0x52, 0x0a, 0x0c, 0x56, 0x65, 0x4d,
	0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x32, 0x5f,
	0x76, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x32,
	0x2d, 0x76, 0x65, 0x2d, 0x6d, 0x61, 0x63, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x76, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x76, 0x65, 0x2d, 0x6d, 0x61, 0x63, 0x1a, 0x43, 0x0a,
	0x19, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x65,
	0x44, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x6c,
	0x6f, 0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x73, 0x6c, 0x6f, 0x74, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d,
	0x69, 0x64, 0x1a, 0x91, 0x04, 0x0a, 0x15, 0x4c, 0x69, 0x6e, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x53, 0x0a, 0x04,
	0x6c, 0x6c, 0x64, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70,
	0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x52, 0x04, 0x6c, 0x6c, 0x64,
	0x70, 0x12, 0x53, 0x0a, 0x04, 0x6c, 0x61, 0x63, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x3f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65,
	0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x4c, 0x61, 0x63, 0x70,
	0x52, 0x04, 0x6c, 0x61, 0x63, 0x70, 0x12, 0x50, 0x0a, 0x03, 0x6f, 0x61, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76,
	0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e,
	0x4f, 0x61, 0x6d, 0x52, 0x03, 0x6f, 0x61, 0x6d, 0x12, 0x53, 0x0a, 0x04, 0x65, 0x73, 0x6d, 0x63,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f,
	0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4c, 0x69, 0x6e,
	0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x45, 0x73, 0x6d, 0x63, 0x52, 0x04, 0x65, 0x73, 0x6d, 0x63, 0x22, 0x29, 0x0a,
	0x04, 0x4c, 0x6c, 0x64, 0x70, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x6c, 0x64, 0x70, 0x5f, 0x44, 0x49,
	0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x6c, 0x64, 0x70, 0x5f,
	0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x22, 0x29, 0x0a, 0x04, 0x4c, 0x61, 0x63, 0x70,
	0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x61, 0x63, 0x70, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x61, 0x63, 0x70, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c,
	0x45, 0x10, 0x01, 0x22, 0x26, 0x0a, 0x03, 0x4f, 0x61, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x61,
	0x6d, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4f,
	0x61, 0x6d, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x22, 0x29, 0x0a, 0x04, 0x45,
	0x73, 0x6d, 0x63, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x73, 0x6d, 0x63, 0x5f, 0x44, 0x49, 0x53, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x73, 0x6d, 0x63, 0x5f, 0x45, 0x4e,
	0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0xbb, 0x0f, 0x0a, 0x0b, 0x4c, 0x6f, 0x61, 0x64, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x66, 0x0a, 0x0e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x5f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76,
	0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x52, 0x0e,
	0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2d, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x12, 0x69,
	0x0a, 0x0f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x61, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69,
	0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4c, 0x6f,
	0x61, 0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x41, 0x72,
	0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x52, 0x0f, 0x68, 0x61, 0x73, 0x68, 0x2d, 0x61,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x12, 0x5d, 0x0a, 0x0b, 0x68, 0x61, 0x73,
	0x68, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76,
	0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x48, 0x61, 0x73, 0x68, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x0b, 0x68, 0x61, 0x73,
	0x68, 0x2d, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x57, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x68,
	0x5f, 0x73, 0x65, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d,
	0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x48, 0x61,
	0x73, 0x68, 0x53, 0x65, 0x65, 0x64, 0x52, 0x09, 0x68, 0x61, 0x73, 0x68, 0x2d, 0x73, 0x65, 0x65,
	0x64, 0x12, 0x60, 0x0a, 0x0c, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4c, 0x6f,
	0x61, 0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x65, 0x52, 0x0c, 0x68, 0x61, 0x73, 0x68, 0x2d, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x65, 0x1a, 0x27, 0x0a, 0x0d, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x41, 0x64,
	0x6a, 0x75, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0xfd, 0x02, 0x0a,
	0x0e, 0x48, 0x61, 0x73, 0x68, 0x41, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x12,
	0x6a, 0x0a, 0x0a, 0x61, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x4a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76,
	0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x41, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x65, 0x74, 0x69, 0x63, 0x2e, 0x41, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x52,
	0x0a, 0x61, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x12, 0x2a, 0x0a, 0x10, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x2d, 0x68, 0x61,
	0x73, 0x68, 0x2d, 0x66, 0x6c, 0x61, 0x67, 0x22, 0xd2, 0x01, 0x0a, 0x0a, 0x41, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x5f, 0x41, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x45, 0x54,
	0x49, 0x43, 0x31, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65,
	0x74, 0x69, 0x63, 0x5f, 0x41, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x45, 0x54, 0x49, 0x43, 0x32, 0x10,
	0x02, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x5f,
	0x41, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x45, 0x54, 0x49, 0x43, 0x33, 0x10, 0x03, 0x12, 0x1a, 0x0a,
	0x16, 0x41, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x5f, 0x41, 0x52, 0x49, 0x54,
	0x48, 0x4d, 0x45, 0x54, 0x49, 0x43, 0x34, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x5f, 0x41, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x45, 0x54,
	0x49, 0x43, 0x35, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65,
	0x74, 0x69, 0x63, 0x5f, 0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x10, 0x06, 0x1a, 0x86, 0x06, 0x0a,
	0x0a, 0x48, 0x61, 0x73, 0x68, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x65, 0x0a, 0x0a, 0x68,
	0x61, 0x73, 0x68, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x45, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65,
	0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e, 0x48, 0x61, 0x73,
	0x68, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x0a, 0x68, 0x61, 0x73, 0x68, 0x2d, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x1a, 0x90, 0x05, 0x0a, 0x09, 0x48, 0x61, 0x73, 0x68, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x6f, 0x0a, 0x0a, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x5f, 0x65, 0x63, 0x6d, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x4f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65,
	0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x54, 0x72, 0x75, 0x6e,
	0x6b, 0x45, 0x63, 0x6d, 0x70, 0x52, 0x0a, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x2d, 0x65, 0x63, 0x6d,
	0x70, 0x12, 0x6a, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x4e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76,
	0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x2e, 0x48, 0x61, 0x73, 0x68, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x22, 0xe6, 0x01,
	0x0a, 0x09, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x45, 0x63, 0x6d, 0x70, 0x12, 0x20, 0x0a, 0x1c, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55,
	0x45, 0x5f, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x45, 0x63, 0x6d, 0x70, 0x10, 0x00, 0x12, 0x10, 0x0a,
	0x0c, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x45, 0x63, 0x6d, 0x70, 0x5f, 0x49, 0x50, 0x10, 0x05, 0x12,
	0x11, 0x0a, 0x0d, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x45, 0x63, 0x6d, 0x70, 0x5f, 0x4d, 0x41, 0x43,
	0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x45, 0x63, 0x6d, 0x70, 0x5f,
	0x56, 0x4c, 0x4c, 0x10, 0x07, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x45, 0x63,
	0x6d, 0x70, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x58, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10,
	0x08, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x45, 0x63, 0x6d, 0x70, 0x5f, 0x54,
	0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x58, 0x5f, 0x49, 0x4e, 0x4e, 0x45, 0x52, 0x58, 0x5f, 0x49, 0x50,
	0x10, 0x09, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x45, 0x63, 0x6d, 0x70, 0x5f,
	0x47, 0x54, 0x50, 0x10, 0x0a, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x45, 0x63,
	0x6d, 0x70, 0x5f, 0x46, 0x45, 0x43, 0x10, 0x0b, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x72, 0x75, 0x6e,
	0x6b, 0x45, 0x63, 0x6d, 0x70, 0x5f, 0x47, 0x54, 0x50, 0x58, 0x5f, 0x49, 0x4e, 0x4e, 0x45, 0x52,
	0x58, 0x5f, 0x49, 0x50, 0x10, 0x0c, 0x22, 0xbc, 0x01, 0x0a, 0x08, 0x4d, 0x61, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45,
	0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x5f, 0x4c, 0x32, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x5f, 0x4c, 0x33, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x5f, 0x4c, 0x34, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x61, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x5f, 0x55, 0x4e, 0x44, 0x4f, 0x58, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c,
	0x45, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f,
	0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x61, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x58, 0x5f, 0x49, 0x50, 0x10,
	0x06, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x4c, 0x41,
	0x42, 0x45, 0x4c, 0x10, 0x07, 0x1a, 0x4e, 0x0a, 0x08, 0x48, 0x61, 0x73, 0x68, 0x53, 0x65, 0x65,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x66, 0x6c, 0x61, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x2d, 0x66,
	0x6c, 0x61, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x73, 0x65,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x2d, 0x73, 0x65, 0x65, 0x64, 0x1a, 0xbc, 0x01, 0x0a, 0x0b, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x65, 0x12, 0x6c, 0x0a, 0x0c, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x65,
	0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x48, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d,
	0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x48, 0x61,
	0x73, 0x68, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x65, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x65, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x0c, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x65, 0x2d, 0x66,
	0x6c, 0x61, 0x67, 0x22, 0x3f, 0x0a, 0x0b, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x65, 0x46, 0x6c,
	0x61, 0x67, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x65, 0x46, 0x6c, 0x61,
	0x67, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x13, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c,
	0x45, 0x10, 0xff, 0x01, 0x1a, 0x95, 0x09, 0x0a, 0x06, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x5b, 0x0a, 0x0c, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64,
	0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4d, 0x69, 0x72, 0x72,
	0x6f, 0x72, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x52, 0x0c,
	0x73, 0x6c, 0x6f, 0x74, 0x2d, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x12, 0x64, 0x0a, 0x0f,
	0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64,
	0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4d, 0x69, 0x72, 0x72,
	0x6f, 0x72, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x52, 0x0f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x2d, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x1a, 0x33, 0x0a, 0x0b, 0x53, 0x6c, 0x6f, 0x74, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x1a, 0x92, 0x07, 0x0a, 0x0e, 0x4f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x70, 0x0a, 0x0e, 0x6f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x48, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d,
	0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x2e,
	0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x4f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0e, 0x6f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x2d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x8d, 0x06, 0x0a,
	0x0d, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1c,
	0x0a, 0x09, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2d, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x73, 0x72, 0x63, 0x5f, 0x69, 0x70, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x72, 0x63, 0x2d, 0x69, 0x70, 0x61, 0x64, 0x64, 0x72, 0x12, 0x28, 0x0a, 0x0f,
	0x73, 0x72, 0x63, 0x5f, 0x69, 0x70, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x72, 0x63, 0x2d, 0x69, 0x70, 0x61, 0x64, 0x64,
	0x72, 0x2d, 0x6d, 0x61, 0x73, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x73, 0x74, 0x5f, 0x69, 0x70,
	0x61, 0x64, 0x64, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x73, 0x74, 0x2d,
	0x69, 0x70, 0x61, 0x64, 0x64, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x73, 0x74, 0x5f, 0x69, 0x70,
	0x61, 0x64, 0x64, 0x72, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x64, 0x73, 0x74, 0x2d, 0x69, 0x70, 0x61, 0x64, 0x64, 0x72, 0x2d, 0x6d, 0x61, 0x73, 0x6b,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x72, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x73, 0x72, 0x63, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x64, 0x73, 0x74, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x72, 0x63, 0x5f,
	0x6d, 0x61, 0x63, 0x61, 0x64, 0x64, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x72, 0x63, 0x2d, 0x6d, 0x61, 0x63, 0x61, 0x64, 0x64, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x70,
	0x70, 0x6f, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x70, 0x70, 0x70, 0x6f, 0x65, 0x2d, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2d, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x73, 0x74, 0x5f, 0x6d, 0x61,
	0x63, 0x61, 0x64, 0x64, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x73, 0x74,
	0x2d, 0x6d, 0x61, 0x63, 0x61, 0x64, 0x64, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x6c, 0x61, 0x6e,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x76, 0x6c, 0x61, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x65, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x65, 0x74, 0x68, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x7b, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x70, 0x70, 0x70, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x59, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76,
	0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72,
	0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e,
	0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x70, 0x70, 0x48, 0x00,
	0x52, 0x03, 0x70, 0x70, 0x70, 0x12, 0x78, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x58, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65,
	0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x4f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x4f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x70, 0x48, 0x00, 0x52, 0x02, 0x69, 0x70, 0x1a,
	0x36, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x50, 0x70, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x70, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x70, 0x70, 0x2d, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x1a, 0x33, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x70,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x69, 0x70, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x42, 0x0e, 0x0a, 0x0c,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x1a, 0xa2, 0x08, 0x0a,
	0x0b, 0x4d, 0x70, 0x6c, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x12, 0x65, 0x0a, 0x0e,
	0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65,
	0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x46,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x48, 0x61, 0x73, 0x68, 0x4d,
	0x6f, 0x64, 0x65, 0x52, 0x0e, 0x6d, 0x70, 0x6c, 0x73, 0x2d, 0x68, 0x61, 0x73, 0x68, 0x2d, 0x6d,
	0x6f, 0x64, 0x65, 0x12, 0x58, 0x0a, 0x09, 0x6d, 0x70, 0x6c, 0x73, 0x66, 0x72, 0x61, 0x67, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f,
	0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4d, 0x70, 0x6c,
	0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x66, 0x72, 0x61,
	0x67, 0x73, 0x52, 0x09, 0x6d, 0x70, 0x6c, 0x73, 0x66, 0x72, 0x61, 0x67, 0x73, 0x12, 0x71, 0x0a,
	0x12, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x63, 0x74, 0x72, 0x77, 0x6f,
	0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e,
	0x4d, 0x70, 0x6c, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x4d, 0x70, 0x6c, 0x73,
	0x4c, 0x6f, 0x61, 0x64, 0x43, 0x74, 0x72, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x12, 0x6d, 0x70,
	0x6c, 0x73, 0x2d, 0x6c, 0x6f, 0x61, 0x64, 0x2d, 0x63, 0x74, 0x72, 0x77, 0x6f, 0x72, 0x64, 0x73,
	0x1a, 0x85, 0x02, 0x0a, 0x0c, 0x4d, 0x70, 0x6c, 0x73, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x5f, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x68, 0x63, 0x66, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x45, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d,
	0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x46, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x6f, 0x64,
	0x65, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x63, 0x66, 0x67, 0x52, 0x07, 0x68, 0x61, 0x73, 0x68, 0x63,
	0x66, 0x67, 0x22, 0x93, 0x01, 0x0a, 0x07, 0x48, 0x61, 0x73, 0x68, 0x63, 0x66, 0x67, 0x12, 0x1e,
	0x0a, 0x1a, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56,
	0x41, 0x4c, 0x55, 0x45, 0x5f, 0x48, 0x61, 0x73, 0x68, 0x63, 0x66, 0x67, 0x10, 0x00, 0x12, 0x1b,
	0x0a, 0x17, 0x48, 0x61, 0x73, 0x68, 0x63, 0x66, 0x67, 0x5f, 0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41,
	0x44, 0x58, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x10, 0x40, 0x12, 0x0f, 0x0a, 0x0a, 0x48,
	0x61, 0x73, 0x68, 0x63, 0x66, 0x67, 0x5f, 0x49, 0x50, 0x10, 0xa0, 0x01, 0x12, 0x12, 0x0a, 0x0d,
	0x48, 0x61, 0x73, 0x68, 0x63, 0x66, 0x67, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x10, 0xc0, 0x01,
	0x12, 0x14, 0x0a, 0x0f, 0x48, 0x61, 0x73, 0x68, 0x63, 0x66, 0x67, 0x5f, 0x49, 0x50, 0x58, 0x5f,
	0x54, 0x4f, 0x53, 0x10, 0xc1, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x48, 0x61, 0x73, 0x68, 0x63, 0x66,
	0x67, 0x5f, 0x4d, 0x41, 0x43, 0x10, 0xc4, 0x01, 0x1a, 0xc9, 0x01, 0x0a, 0x09, 0x4d, 0x70, 0x6c,
	0x73, 0x66, 0x72, 0x61, 0x67, 0x73, 0x12, 0x73, 0x0a, 0x0f, 0x6d, 0x70, 0x6c, 0x73, 0x66, 0x72,
	0x61, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x49, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65,
	0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x66, 0x72, 0x61, 0x67, 0x73, 0x2e, 0x4d, 0x70, 0x6c, 0x73,
	0x66, 0x72, 0x61, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0f, 0x6d, 0x70, 0x6c, 0x73,
	0x66, 0x72, 0x61, 0x67, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x47, 0x0a, 0x0e, 0x4d,
	0x70, 0x6c, 0x73, 0x66, 0x72, 0x61, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a,
	0x16, 0x4d, 0x70, 0x6c, 0x73, 0x66, 0x72, 0x61, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x70, 0x6c,
	0x73, 0x66, 0x72, 0x61, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x45, 0x4e, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0x01, 0x1a, 0x8a, 0x02, 0x0a, 0x10, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x6f, 0x61,
	0x64, 0x43, 0x74, 0x72, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x94, 0x01, 0x0a, 0x18, 0x6d, 0x70,
	0x6c, 0x73, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x63, 0x74, 0x72, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x58, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e,
	0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x4d,
	0x70, 0x6c, 0x73, 0x4c, 0x6f, 0x61, 0x64, 0x43, 0x74, 0x72, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x2e,
	0x4d, 0x70, 0x6c, 0x73, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x74, 0x72, 0x77, 0x6f, 0x72, 0x64, 0x44,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x18, 0x6d, 0x70, 0x6c, 0x73, 0x6c, 0x6f, 0x61, 0x64,
	0x2d, 0x63, 0x74, 0x72, 0x77, 0x6f, 0x72, 0x64, 0x2d, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x22, 0x5f, 0x0a, 0x16, 0x4d, 0x70, 0x6c, 0x73, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x74, 0x72, 0x77,
	0x6f, 0x72, 0x64, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x4d, 0x70,
	0x6c, 0x73, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x74, 0x72, 0x77, 0x6f, 0x72, 0x64, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x21,
	0x0a, 0x1d, 0x4d, 0x70, 0x6c, 0x73, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x74, 0x72, 0x77, 0x6f, 0x72,
	0x64, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x01, 0x1a, 0x88, 0x0e, 0x0a, 0x09, 0x4e, 0x65, 0x74, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12,
	0x61, 0x0a, 0x0d, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f,
	0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4e, 0x65, 0x74,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x4d, 0x6f,
	0x64, 0x65, 0x73, 0x52, 0x0d, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2d, 0x6d, 0x6f, 0x64,
	0x65, 0x73, 0x12, 0x61, 0x0a, 0x0d, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e,
	0x4e, 0x65, 0x74, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0d, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x5e, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x68, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d,
	0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x2e, 0x4e, 0x65, 0x74, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x2d,
	0x68, 0x6f, 0x73, 0x74, 0x73, 0x1a, 0xef, 0x04, 0x0a, 0x0c, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x72, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x6b, 0x0a, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e,
	0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x2e, 0x4e, 0x65, 0x74, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x72, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2d, 0x6d,
	0x6f, 0x64, 0x65, 0x1a, 0xf1, 0x03, 0x0a, 0x0b, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x6e, 0x0a, 0x09, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x50, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f,
	0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4e, 0x65, 0x74,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x4d, 0x6f,
	0x64, 0x65, 0x73, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x2e,
	0x46, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x78, 0x0a, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x54, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e,
	0x4e, 0x65, 0x74, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x72, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x4d, 0x6f,
	0x64, 0x65, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x37, 0x52,
	0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0xa3, 0x01,
	0x0a, 0x08, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x6c,
	0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x50, 0x58, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x10,
	0x00, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x50,
	0x56, 0x36, 0x58, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x46, 0x6c,
	0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x56, 0x58, 0x4c, 0x41, 0x4e, 0x58, 0x5f, 0x49, 0x4e,
	0x4e, 0x45, 0x52, 0x58, 0x5f, 0x49, 0x50, 0x58, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12,
	0x25, 0x0a, 0x21, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x56, 0x58, 0x4c, 0x41,
	0x4e, 0x58, 0x5f, 0x49, 0x4e, 0x4e, 0x45, 0x52, 0x58, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x58, 0x5f,
	0x46, 0x4c, 0x4f, 0x57, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x58, 0x5f, 0x46, 0x4c, 0x4f,
	0x57, 0x10, 0x04, 0x22, 0x52, 0x0a, 0x0c, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x4d, 0x6f,
	0x64, 0x65, 0x37, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x4d, 0x6f,
	0x64, 0x65, 0x37, 0x5f, 0x53, 0x45, 0x4c, 0x46, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x37, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x10,
	0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65,
	0x37, 0x5f, 0x42, 0x41, 0x4b, 0x10, 0x02, 0x1a, 0x98, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x54, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f,
	0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4e, 0x65, 0x74,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x32,
	0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x4d, 0x6f, 0x64,
	0x65, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x46, 0x4c, 0x4f, 0x57,
	0x10, 0x01, 0x1a, 0xc7, 0x05, 0x0a, 0x0b, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x6f, 0x73,
	0x74, 0x73, 0x12, 0x67, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x68, 0x6f, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4e, 0x65,
	0x74, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x6f,
	0x73, 0x74, 0x73, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x0b,
	0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x68, 0x6f, 0x73, 0x74, 0x1a, 0xce, 0x04, 0x0a, 0x0a,
	0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x6c, 0x0a, 0x09, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4e, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d,
	0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x2e, 0x4e, 0x65, 0x74, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x48, 0x6f, 0x73, 0x74, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x66,
	0x6c, 0x6f, 0x77, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x75, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x51,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76,
	0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4e, 0x65, 0x74, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x48, 0x6f, 0x73, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x70, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x2a, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x76,
	0x70, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76,
	0x70, 0x6e, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x73, 0x63, 0x70, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x64, 0x73, 0x63, 0x70, 0x22, 0xa3, 0x01, 0x0a, 0x08,
	0x46, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x6c, 0x6f, 0x77,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x50, 0x58, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x10, 0x00, 0x12,
	0x17, 0x0a, 0x13, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x50, 0x56, 0x36,
	0x58, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x46, 0x6c, 0x6f, 0x77,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x56, 0x58, 0x4c, 0x41, 0x4e, 0x58, 0x5f, 0x49, 0x4e, 0x4e, 0x45,
	0x52, 0x58, 0x5f, 0x49, 0x50, 0x58, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12, 0x25, 0x0a,
	0x21, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x56, 0x58, 0x4c, 0x41, 0x4e, 0x58,
	0x5f, 0x49, 0x4e, 0x4e, 0x45, 0x52, 0x58, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x58, 0x5f, 0x46, 0x4c,
	0x4f, 0x57, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x58, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x10,
	0x04, 0x22, 0x39, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x49, 0x50, 0x56, 0x34, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x10, 0x01, 0x1a, 0x98, 0x05, 0x0a,
	0x03, 0x50, 0x62, 0x72, 0x12, 0x61, 0x0a, 0x0f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d,
	0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x2e, 0x50, 0x62, 0x72, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x1a, 0xad, 0x04, 0x0a, 0x0e, 0x52, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x6d, 0x0a, 0x0e, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x45, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d,
	0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x50, 0x62, 0x72, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0e, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x2d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0xab, 0x03, 0x0a, 0x0d, 0x52, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x5e, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4a, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e,
	0x50, 0x62, 0x72, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x75, 0x0a, 0x0c, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x51, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e,
	0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d,
	0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x50, 0x62, 0x72, 0x2e, 0x52, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x74, 0x79,
	0x70, 0x65, 0x22, 0x37, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x49, 0x50, 0x56, 0x34, 0x49, 0x50, 0x56, 0x36, 0x10, 0x02, 0x22, 0x89, 0x01, 0x0a, 0x0b,
	0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55,
	0x45, 0x5f, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12,
	0x17, 0x0a, 0x13, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44,
	0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x48, 0x4f, 0x4c,
	0x45, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x58, 0x5f, 0x42, 0x4c, 0x41, 0x43,
	0x4b, 0x48, 0x4f, 0x4c, 0x45, 0x10, 0x03, 0x1a, 0xd5, 0x64, 0x0a, 0x03, 0x51, 0x6f, 0x73, 0x12,
	0x72, 0x0a, 0x15, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76,
	0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x73, 0x52, 0x15, 0x74, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x73, 0x12, 0x72, 0x0a, 0x15, 0x70, 0x71, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d,
	0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x50, 0x71, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x73,
	0x52, 0x15, 0x70, 0x71, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2d, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x73, 0x12, 0x88, 0x01, 0x0a, 0x1d, 0x70, 0x71, 0x5f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x5f, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x42, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65,
	0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x50, 0x71, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4f, 0x6e, 0x43, 0x61,
	0x72, 0x64, 0x73, 0x52, 0x1d, 0x70, 0x71, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x2d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x2d, 0x6f, 0x6e, 0x2d, 0x63, 0x61, 0x72,
	0x64, 0x73, 0x12, 0x72, 0x0a, 0x15, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e,
	0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d,
	0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x52,
	0x15, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2d,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x12, 0x75, 0x0a, 0x16, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f,
	0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73,
	0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x68,
	0x61, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x16, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x7a, 0x0a,
	0x18, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x70, 0x69, 0x72, 0x5f,
	0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65,
	0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x50, 0x69, 0x72, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x18, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x70, 0x69, 0x72, 0x2d,
	0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x60, 0x0a, 0x0f, 0x65, 0x78, 0x70,
	0x5f, 0x70, 0x68, 0x62, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x36, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d,
	0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x45, 0x78, 0x70,
	0x50, 0x68, 0x62, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0f, 0x65, 0x78, 0x70, 0x2d,
	0x70, 0x68, 0x62, 0x2d, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x78, 0x0a, 0x17, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e,
	0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x52, 0x17, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x2d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x73, 0x12, 0x80, 0x01, 0x0a, 0x1a, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70,
	0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x41, 0x6c, 0x6c, 0x52, 0x1a, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x2d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x61, 0x6c, 0x6c, 0x12, 0x5e, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44,
	0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70,
	0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2d, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x12, 0x7e, 0x0a, 0x19, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d,
	0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x19, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2d, 0x70,
	0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x72, 0x0a, 0x15, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x6c,
	0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x15, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2d, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x67, 0x0a, 0x11,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e,
	0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x53, 0x68, 0x61, 0x70, 0x69,
	0x6e, 0x67, 0x52, 0x11, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2d, 0x73, 0x68,
	0x61, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x66, 0x0a, 0x11, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x38, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44,
	0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70,
	0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x52, 0x11, 0x70, 0x6f, 0x72, 0x74,
	0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x12, 0x83, 0x01,
	0x0a, 0x1b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76,
	0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x44,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x1b, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x2d, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2d, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x94, 0x01, 0x0a, 0x21, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x46, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65,
	0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x55, 0x73, 0x65, 0x72, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x21, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x75, 0x73, 0x65, 0x72, 0x2d, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x1b, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x65, 0x64,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x42, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44,
	0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70,
	0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x48,
	0x69, 0x67, 0x68, 0x73, 0x52, 0x1b, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x74,
	0x2d, 0x70, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2d, 0x68, 0x69, 0x67, 0x68,
	0x73, 0x12, 0x6f, 0x0a, 0x14, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65,
	0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x44,
	0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x52, 0x14, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x2d, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x2d, 0x61, 0x6c, 0x61, 0x72,
	0x6d, 0x73, 0x12, 0x63, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x5f, 0x62, 0x75, 0x72, 0x73, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e,
	0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x42, 0x75, 0x72, 0x73, 0x74, 0x52, 0x10, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x2d, 0x62, 0x75, 0x72, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x0b, 0x62, 0x75, 0x72, 0x73, 0x74,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e,
	0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x42, 0x75, 0x72, 0x73, 0x74, 0x53, 0x69, 0x7a, 0x65,
	0x73, 0x52, 0x0b, 0x62, 0x75, 0x72, 0x73, 0x74, 0x2d, 0x73, 0x69, 0x7a, 0x65, 0x73, 0x12, 0x8c,
	0x01, 0x0a, 0x1e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x52, 0x1e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2d, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2d, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x12, 0x80, 0x01,
	0x0a, 0x1a, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x40, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d,
	0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x73, 0x52, 0x1a, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2d, 0x62, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x2d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73,
	0x12, 0x83, 0x01, 0x0a, 0x1b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f,
	0x62, 0x61, 0x63, 0x6b, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x6f, 0x66, 0x66,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f,
	0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73,
	0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x4f, 0x66, 0x66, 0x52, 0x1b, 0x66, 0x6c, 0x6f, 0x77, 0x2d,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75,
	0x72, 0x65, 0x2d, 0x6f, 0x66, 0x66, 0x12, 0x7d, 0x0a, 0x19, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e,
	0x51, 0x6f, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x19, 0x74, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x7a, 0x0a, 0x18, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x34, 0x63, 0x6f,
	0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x34, 0x43, 0x6f, 0x73, 0x52, 0x18, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x34, 0x63, 0x6f,
	0x73, 0x12, 0x94, 0x01, 0x0a, 0x21, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x38, 0x63, 0x6f, 0x73, 0x5f, 0x65,
	0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d,
	0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x38, 0x43, 0x6f, 0x73, 0x45, 0x6e, 0x68,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x21, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x38, 0x63, 0x6f, 0x73, 0x2d,
	0x65, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x1a, 0x8e, 0x04, 0x0a, 0x13, 0x54, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x73,
	0x12, 0x83, 0x01, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x4f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65,
	0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x73, 0x2e, 0x54, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x14, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x1a, 0xf0, 0x02, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x68, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x54, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d,
	0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xef, 0x01, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x18, 0x0a, 0x14, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x50, 0x58, 0x5f, 0x4c, 0x41, 0x59,
	0x45, 0x52, 0x58, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x58, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53,
	0x58, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x58, 0x5f, 0x4d, 0x41, 0x53, 0x4b, 0x10, 0x01, 0x12, 0x1f,
	0x0a, 0x1b, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x58,
	0x5f, 0x4d, 0x43, 0x58, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x1a, 0x0a, 0x16, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x58, 0x5f, 0x4c, 0x41,
	0x59, 0x45, 0x52, 0x58, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x58, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x58,
	0x5f, 0x4c, 0x32, 0x58, 0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x04, 0x12, 0x15,
	0x0a, 0x11, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x58, 0x5f, 0x50, 0x41, 0x43,
	0x4b, 0x45, 0x54, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x50,
	0x4c, 0x53, 0x58, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x58, 0x5f, 0x50, 0x4f, 0x50, 0x10, 0x06,
	0x12, 0x17, 0x0a, 0x13, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x50, 0x58, 0x5f, 0x4c, 0x41, 0x59,
	0x45, 0x52, 0x58, 0x5f, 0x50, 0x4f, 0x50, 0x10, 0x07, 0x1a, 0xf6, 0x03, 0x0a, 0x13, 0x50, 0x71,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x73, 0x12, 0x83, 0x01, 0x0a, 0x14, 0x70, 0x71, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x4f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44,
	0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70,
	0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x50, 0x71, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x73, 0x2e, 0x50,
	0x71, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x52, 0x14, 0x70, 0x71, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2d, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x1a, 0xd8, 0x02, 0x0a, 0x12, 0x50, 0x71, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x77,
	0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x59, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e,
	0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d,
	0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x50, 0x71, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x73, 0x2e,
	0x50, 0x71, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x68, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x54, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64,
	0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e,
	0x50, 0x71, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x73, 0x2e, 0x50, 0x71, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x22, 0x3a, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15,
	0x0a, 0x11, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x49, 0x4e, 0x42, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x22, 0x23, 0x0a,
	0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x48, 0x49,
	0x47, 0x48, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x4c, 0x4f, 0x57,
	0x10, 0x01, 0x1a, 0x8f, 0x03, 0x0a, 0x19, 0x50, 0x71, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4f, 0x6e, 0x43, 0x61, 0x72, 0x64, 0x73,
	0x12, 0x9f, 0x01, 0x0a, 0x1c, 0x70, 0x71, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x72,
	0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x50, 0x71, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x4f, 0x6e, 0x43, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x50, 0x71, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4f, 0x6e,
	0x43, 0x61, 0x72, 0x64, 0x52, 0x1c, 0x70, 0x71, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x2d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x2d, 0x6f, 0x6e, 0x2d, 0x63, 0x61,
	0x72, 0x64, 0x1a, 0xcf, 0x01, 0x0a, 0x18, 0x50, 0x71, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4f, 0x6e, 0x43, 0x61, 0x72, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x61, 0x72, 0x64, 0x2d, 0x69, 0x64, 0x12, 0x74, 0x0a, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x60, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x50, 0x71, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x4f, 0x6e, 0x43, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x50, 0x71, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4f, 0x6e,
	0x43, 0x61, 0x72, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22,
	0x23, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x65, 0x5f,
	0x48, 0x49, 0x47, 0x48, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x4c,
	0x4f, 0x57, 0x10, 0x01, 0x1a, 0xaa, 0x0a, 0x0a, 0x13, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x12, 0x83, 0x01, 0x0a,
	0x14, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d,
	0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x50,
	0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x14, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x1a, 0x8c, 0x09, 0x0a, 0x12, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x0d, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x5c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e,
	0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d,
	0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52,
	0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x93,
	0x01, 0x0a, 0x13, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x61, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e,
	0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52,
	0x13, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2d,
	0x6d, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x26, 0x0a, 0x0e,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x77, 0x72, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x77, 0x72, 0x65, 0x64, 0x2d,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x98, 0x01, 0x0a, 0x1a, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x70,
	0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x69, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e,
	0x51, 0x6f, 0x73, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x50, 0x6f, 0x72,
	0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x69,
	0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x53, 0x68, 0x61,
	0x70, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x07, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x12,
	0xaf, 0x01, 0x0a, 0x22, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x70, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e,
	0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x53, 0x68,
	0x61, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x5f,
	0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x0f, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x1a, 0x41, 0x0a, 0x19, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x24,
	0x0a, 0x0d, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x2d, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x1a, 0x52, 0x0a, 0x20, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e,
	0x67, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x68, 0x61, 0x70,
	0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x22, 0xbc, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x42, 0x45, 0x10, 0x00, 0x12, 0x14,
	0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41,
	0x46, 0x31, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x32, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x33, 0x10, 0x03,
	0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x41, 0x46, 0x34, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x45, 0x46, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x36, 0x10,
	0x06, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x43, 0x53, 0x37, 0x10, 0x07, 0x22, 0x63, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x14,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x5f, 0x50, 0x51, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x57, 0x46, 0x51, 0x10,
	0x01, 0x12, 0x19, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x4c, 0x50, 0x51, 0x10, 0x02, 0x42, 0x13, 0x0a, 0x11,
	0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x1a, 0xbb, 0x05, 0x0a, 0x14, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x50,
	0x6f, 0x72, 0x74, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x12, 0xa2, 0x01, 0x0a, 0x24, 0x73,
	0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x5f, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5f, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e,
	0x51, 0x6f, 0x73, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x50, 0x6f, 0x72,
	0x74, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x53, 0x68, 0x61, 0x70, 0x69,
	0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x11, 0x73, 0x68,
	0x61, 0x70, 0x69, 0x6e, 0x67, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x12,
	0xa5, 0x01, 0x0a, 0x25, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x60, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65,
	0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x53,
	0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x5f, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x48, 0x00, 0x52, 0x12, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x2d, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x1a, 0xf4, 0x01, 0x0a, 0x21, 0x53, 0x68, 0x61, 0x70,
	0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x53, 0x68,
	0x61, 0x70, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x8f, 0x01,
	0x0a, 0x0c, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x6b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65,
	0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x68, 0x61, 0x70,
	0x69, 0x6e, 0x67, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0c, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x3d, 0x0a, 0x0b, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x12, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f,
	0x32, 0x35, 0x36, 0x4b, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f, 0x35, 0x31, 0x32, 0x4b, 0x10, 0x01, 0x1a, 0x4a,
	0x0a, 0x22, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x5f, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x68, 0x61,
	0x70, 0x69, 0x6e, 0x67, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x53, 0x68,
	0x61, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a,
	0x35, 0x0a, 0x15, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x50, 0x69, 0x72, 0x50,
	0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0xbf, 0x01, 0x0a, 0x0d, 0x45, 0x78, 0x70, 0x50, 0x68,
	0x62, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x66, 0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76,
	0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x45, 0x78, 0x70, 0x50, 0x68, 0x62, 0x44,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0c, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x2d, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x46, 0x0a, 0x0b, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x22, 0x0a, 0x1e, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f,
	0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x56, 0x4c, 0x4c, 0x10, 0x01, 0x1a, 0x9a, 0x04, 0x0a, 0x15, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x73, 0x12, 0x8b, 0x01, 0x0a, 0x16, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76,
	0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x73, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x16, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x2d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x1a, 0xf2, 0x02, 0x0a, 0x14, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x86, 0x01, 0x0a, 0x0d, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x60, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e,
	0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d,
	0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x73, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0xbc, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x42, 0x45, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x31,
	0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x5f, 0x41, 0x46, 0x32, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x33, 0x10, 0x03, 0x12, 0x14,
	0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41,
	0x46, 0x34, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x45, 0x46, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x36, 0x10, 0x06, 0x12,
	0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x43, 0x53, 0x37, 0x10, 0x07, 0x1a, 0x2d, 0x0a, 0x17, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x41, 0x6c, 0x6c,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x1a, 0xfd, 0x03, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x12, 0x69, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d,
	0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41,
	0x6c, 0x61, 0x72, 0x6d, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x6c, 0x61,
	0x72, 0x6d, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x61, 0x6c, 0x61, 0x72,
	0x6d, 0x1a, 0x80, 0x03, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x6c, 0x61,
	0x72, 0x6d, 0x12, 0x6d, 0x0a, 0x0a, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f,
	0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x2e, 0x41, 0x6c, 0x61, 0x72,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x2d, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x5c, 0x0a, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x48, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65,
	0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41,
	0x6c, 0x61, 0x72, 0x6d, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22, 0x3c, 0x0a,
	0x09, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x6c,
	0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x51, 0x55, 0x41, 0x4e, 0x54, 0x49, 0x54, 0x59,
	0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x42, 0x41, 0x4e, 0x44, 0x57, 0x49, 0x44, 0x54, 0x48, 0x10, 0x01, 0x22, 0x47, 0x0a, 0x04, 0x50,
	0x6f, 0x6f, 0x6c, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45,
	0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x50, 0x6f, 0x6f, 0x6c, 0x10, 0x00,
	0x12, 0x10, 0x0a, 0x0c, 0x50, 0x6f, 0x6f, 0x6c, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x58, 0x5f, 0x30,
	0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x6f, 0x6f, 0x6c, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x58,
	0x5f, 0x31, 0x10, 0x02, 0x1a, 0xb5, 0x01, 0x0a, 0x17, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x59, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x45,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76,
	0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3f, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45,
	0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x50, 0x10, 0x01, 0x12, 0x0d, 0x0a,
	0x09, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x02, 0x1a, 0x29, 0x0a, 0x13,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x38, 0x0a, 0x10, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x73,
	0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x2d, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x1a, 0x82, 0x04, 0x0a, 0x0f, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41,
	0x6c, 0x61, 0x72, 0x6d, 0x73, 0x12, 0x73, 0x0a, 0x10, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x47, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65,
	0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x52, 0x10, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x2d, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x1a, 0xf9, 0x02, 0x0a, 0x0e, 0x50,
	0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x7a, 0x0a,
	0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x54, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65,
	0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x62, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2d, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x22, 0xbc, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x42, 0x45, 0x10, 0x00, 0x12, 0x14, 0x0a,
	0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46,
	0x31, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x32, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x33, 0x10, 0x03, 0x12,
	0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x41, 0x46, 0x34, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x45, 0x46, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x36, 0x10, 0x06,
	0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x43, 0x53, 0x37, 0x10, 0x07, 0x1a, 0x1a, 0x0a, 0x18, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x44, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x1a, 0x1f, 0x0a, 0x1d, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x55, 0x73, 0x65, 0x72,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x1a, 0x87, 0x02, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65,
	0x6e, 0x74, 0x50, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x69, 0x67, 0x68,
	0x73, 0x12, 0x9b, 0x01, 0x0a, 0x1a, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x74,
	0x5f, 0x70, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x68, 0x69, 0x67, 0x68,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f,
	0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73,
	0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x63, 0x65,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x69, 0x67, 0x68, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x48,
	0x69, 0x67, 0x68, 0x52, 0x1a, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x74, 0x2d,
	0x70, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2d, 0x68, 0x69, 0x67, 0x68, 0x1a,
	0x4c, 0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65,
	0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x69, 0x67, 0x68, 0x12, 0x30, 0x0a, 0x13, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xa4, 0x09,
	0x0a, 0x12, 0x51, 0x75, 0x65, 0x75, 0x65, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x41, 0x6c,
	0x61, 0x72, 0x6d, 0x73, 0x12, 0x7f, 0x0a, 0x13, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x64, 0x69,
	0x73, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x4d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e,
	0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d,
	0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x2e, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x41, 0x6c, 0x61, 0x72, 0x6d,
	0x52, 0x13, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x2d,
	0x61, 0x6c, 0x61, 0x72, 0x6d, 0x1a, 0x8c, 0x08, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x75, 0x65, 0x44,
	0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x80, 0x01, 0x0a, 0x0d,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x5a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76,
	0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73,
	0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x41, 0x6c, 0x61,
	0x72, 0x6d, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52,
	0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x24,
	0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x2d,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x5f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e,
	0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d,
	0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x2e, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x41, 0x6c, 0x61, 0x72, 0x6d,
	0x2e, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x48, 0x00, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x8a, 0x01, 0x0a, 0x14,
	0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x61, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70,
	0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72,
	0x64, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x44, 0x69, 0x73,
	0x63, 0x61, 0x72, 0x64, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x48, 0x00, 0x52,
	0x07, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x98, 0x01, 0x0a, 0x19, 0x64, 0x69, 0x73,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x65, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e,
	0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x44, 0x69, 0x73, 0x63,
	0x61, 0x72, 0x64, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x44,
	0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x2e, 0x44, 0x69, 0x73, 0x63,
	0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x61,
	0x74, 0x69, 0x6f, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x1a, 0x2a, 0x0a, 0x11, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x38, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x1a,
	0x30, 0x0a, 0x13, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x38, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x1a, 0x73, 0x0a, 0x17, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x2e, 0x0a, 0x12,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x2d, 0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x65, 0x78,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x22, 0xbc, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x42, 0x45, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x31,
	0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x5f, 0x41, 0x46, 0x32, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x33, 0x10, 0x03, 0x12, 0x14,
	0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41,
	0x46, 0x34, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x45, 0x46, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x36, 0x10, 0x06, 0x12,
	0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x43, 0x53, 0x37, 0x10, 0x07, 0x42, 0x0d, 0x0a, 0x0b, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x1a, 0x54, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x42, 0x75, 0x72, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75,
	0x6d, 0x5f, 0x62, 0x75, 0x72, 0x73, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x12, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x2d, 0x62, 0x75, 0x72, 0x73,
	0x74, 0x2d, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x1a, 0xc0, 0x03, 0x0a, 0x0a, 0x42,
	0x75, 0x72, 0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x73, 0x12, 0x5d, 0x0a, 0x0a, 0x62, 0x75, 0x72,
	0x73, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d,
	0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x42, 0x75, 0x72, 0x73, 0x74, 0x53, 0x69, 0x7a,
	0x65, 0x73, 0x2e, 0x42, 0x75, 0x72, 0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x0a, 0x62, 0x75,
	0x72, 0x73, 0x74, 0x2d, 0x73, 0x69, 0x7a, 0x65, 0x1a, 0xd2, 0x02, 0x0a, 0x09, 0x42, 0x75, 0x72,
	0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x70, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4a, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d,
	0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x42, 0x75, 0x72, 0x73, 0x74, 0x53, 0x69, 0x7a,
	0x65, 0x73, 0x2e, 0x42, 0x75, 0x72, 0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xbc,
	0x01, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12,
	0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x42, 0x45, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x31, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x32, 0x10, 0x02,
	0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x41, 0x46, 0x33, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x34, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x45, 0x46, 0x10,
	0x05, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x43, 0x53, 0x36, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x37, 0x10, 0x07, 0x1a, 0xc8, 0x03,
	0x0a, 0x1b, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x12, 0xa5, 0x01,
	0x0a, 0x1d, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64,
	0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x1d, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2d, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x2d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2d, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x1a, 0x80, 0x02, 0x0a, 0x1a, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x12, 0x87, 0x01, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x69, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51,
	0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x2e, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22, 0x3a, 0x0a, 0x09,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x00,
	0x12, 0x16, 0x0a, 0x12, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4f, 0x55,
	0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x1a, 0xd5, 0x05, 0x0a, 0x17, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x73, 0x12, 0x95, 0x01, 0x0a, 0x19, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x57, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51,
	0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x52, 0x19, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2d, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x2d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x1a, 0xa1, 0x04, 0x0a,
	0x16, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x64, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65,
	0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x12, 0x7f, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x61, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xbc, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x42, 0x45, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x31, 0x10,
	0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x41, 0x46, 0x32, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x33, 0x10, 0x03, 0x12, 0x14, 0x0a,
	0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46,
	0x34, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x45, 0x46, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x36, 0x10, 0x06, 0x12, 0x14,
	0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43,
	0x53, 0x37, 0x10, 0x07, 0x22, 0x3a, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x49,
	0x4e, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01,
	0x1a, 0x1a, 0x0a, 0x18, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x42, 0x61, 0x63,
	0x6b, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x4f, 0x66, 0x66, 0x1a, 0xac, 0x02, 0x0a,
	0x16, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x7b, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x4f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e,
	0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d,
	0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79,
	0x70, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d,
	0x75, 0x73, 0x65, 0x72, 0x12, 0x72, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x5f, 0x61, 0x63, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d,
	0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x63, 0x6c, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2d, 0x61, 0x63, 0x6c, 0x1a, 0x11, 0x0a, 0x0f, 0x44, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x0e, 0x0a, 0x0c, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x63, 0x6c, 0x1a, 0x35, 0x0a, 0x15, 0x55,
	0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x34, 0x43, 0x6f, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6f, 0x73, 0x2d, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x1a, 0xda, 0x03, 0x0a, 0x1d, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x38, 0x43, 0x6f, 0x73, 0x45, 0x6e, 0x68, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x12, 0xaf, 0x01, 0x0a, 0x20, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x38, 0x63, 0x6f,
	0x73, 0x5f, 0x65, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x63, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65,
	0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x38, 0x43, 0x6f, 0x73, 0x45,
	0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x38, 0x43, 0x6f, 0x73, 0x45, 0x6e, 0x68,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x20, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x38, 0x63, 0x6f, 0x73, 0x2d, 0x65,
	0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x1a, 0x86, 0x02, 0x0a, 0x1c, 0x55, 0x73, 0x65, 0x72, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x38, 0x43, 0x6f, 0x73,
	0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x8b, 0x01, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x6d, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d,
	0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x38, 0x43, 0x6f, 0x73, 0x45, 0x6e, 0x68, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x38, 0x43, 0x6f, 0x73, 0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x73, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6f, 0x73, 0x2d, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x3a, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x15, 0x0a, 0x11, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x49, 0x4e,
	0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x1a,
	0xd4, 0x0a, 0x0a, 0x03, 0x53, 0x6f, 0x63, 0x12, 0x5d, 0x0a, 0x0e, 0x6c, 0x32, 0x5f, 0x6c, 0x6f,
	0x6f, 0x70, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65,
	0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x53, 0x6f, 0x63, 0x2e, 0x4c, 0x32, 0x4c, 0x6f, 0x6f, 0x70,
	0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x52, 0x0e, 0x6c, 0x32, 0x2d, 0x6c, 0x6f, 0x6f, 0x70, 0x2d,
	0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x1a, 0xed, 0x09, 0x0a, 0x0c, 0x4c, 0x32, 0x4c, 0x6f, 0x6f,
	0x70, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x12, 0x6b, 0x0a, 0x0e, 0x73, 0x6c, 0x6f, 0x74, 0x5f,
	0x6c, 0x32, 0x6c, 0x6f, 0x6f, 0x70, 0x64, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x43, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65,
	0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x53, 0x6f, 0x63, 0x2e, 0x4c, 0x32, 0x4c, 0x6f, 0x6f, 0x70,
	0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x4c, 0x32, 0x4c, 0x6f, 0x6f,
	0x70, 0x64, 0x65, 0x74, 0x52, 0x0e, 0x73, 0x6c, 0x6f, 0x74, 0x2d, 0x6c, 0x32, 0x6c, 0x6f, 0x6f,
	0x70, 0x64, 0x65, 0x74, 0x12, 0x54, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65,
	0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x53, 0x6f, 0x63, 0x2e, 0x4c,
	0x32, 0x4c, 0x6f, 0x6f, 0x70, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7f, 0x0a, 0x15, 0x6c, 0x6f,
	0x6f, 0x70, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e,
	0x53, 0x6f, 0x63, 0x2e, 0x4c, 0x32, 0x4c, 0x6f, 0x6f, 0x70, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x2e, 0x4c, 0x6f, 0x6f, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x73, 0x52, 0x15, 0x6c, 0x6f, 0x6f, 0x70, 0x2d, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x1a, 0x5f, 0x0a, 0x0d, 0x53,
	0x6c, 0x6f, 0x74, 0x4c, 0x32, 0x4c, 0x6f, 0x6f, 0x70, 0x64, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f,
	0x64, 0x72, 0x6f, 0x70, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2d, 0x64, 0x72,
	0x6f, 0x70, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x1a, 0xac, 0x02, 0x0a,
	0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x61, 0x0a, 0x08, 0x73, 0x68, 0x75, 0x74, 0x64,
	0x6f, 0x77, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e,
	0x53, 0x6f, 0x63, 0x2e, 0x4c, 0x32, 0x4c, 0x6f, 0x6f, 0x70, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e,
	0x52, 0x08, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x55, 0x0a, 0x04, 0x74, 0x72,
	0x61, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x53,
	0x6f, 0x63, 0x2e, 0x4c, 0x32, 0x4c, 0x6f, 0x6f, 0x70, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x70, 0x52, 0x04, 0x74, 0x72, 0x61,
	0x70, 0x1a, 0x48, 0x0a, 0x08, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x75, 0x70, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x70, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x75, 0x70, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x1a, 0x1e, 0x0a, 0x04, 0x54,
	0x72, 0x61, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0x88, 0x04, 0x0a, 0x13,
	0x4c, 0x6f, 0x6f, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x73, 0x12, 0x90, 0x01, 0x0a, 0x14, 0x6c, 0x6f, 0x6f, 0x70, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x5c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d,
	0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x53, 0x6f, 0x63, 0x2e, 0x4c, 0x32, 0x4c,
	0x6f, 0x6f, 0x70, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x2e, 0x4c, 0x6f, 0x6f, 0x70, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x2e, 0x4c, 0x6f,
	0x6f, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x52, 0x14, 0x6c, 0x6f, 0x6f, 0x70, 0x2d, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2d, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x1a, 0xdd, 0x02, 0x0a, 0x12, 0x4c, 0x6f, 0x6f, 0x70, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x92, 0x01,
	0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x6a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f,
	0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x53, 0x6f, 0x63,
	0x2e, 0x4c, 0x32, 0x4c, 0x6f, 0x6f, 0x70, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x2e, 0x4c, 0x6f,
	0x6f, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x73, 0x2e, 0x4c, 0x6f, 0x6f, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x73, 0x70, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x75, 0x73, 0x70, 0x65, 0x63, 0x74, 0x12, 0x22, 0x0a, 0x0c,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x54, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x58, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x55, 0x42, 0x58, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x10, 0x01, 0x1a, 0xe3, 0x05, 0x0a, 0x0e, 0x55, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x12, 0x54, 0x0a, 0x07, 0x69, 0x70, 0x76,
	0x34, 0x5f, 0x75, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70,
	0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x2e, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x2e,
	0x49, 0x70, 0x76, 0x34, 0x55, 0x63, 0x52, 0x07, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x63, 0x12,
	0x68, 0x0a, 0x0e, 0x61, 0x72, 0x70, 0x5f, 0x66, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x55, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x41, 0x72, 0x70,
	0x46, 0x61, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x0e, 0x61, 0x72, 0x70, 0x2d, 0x66,
	0x61, 0x73, 0x74, 0x2d, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x62, 0x0a, 0x0c, 0x67, 0x72, 0x65,
	0x5f, 0x74, 0x74, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65,
	0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x46, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x2e, 0x47, 0x72, 0x65, 0x54, 0x74, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x52,
	0x0c, 0x67, 0x72, 0x65, 0x2d, 0x74, 0x74, 0x6c, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x65, 0x0a,
	0x0d, 0x6e, 0x64, 0x5f, 0x66, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65,
	0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x55, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x4e, 0x64, 0x46, 0x61, 0x73, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x0d, 0x6e, 0x64, 0x2d, 0x66, 0x61, 0x73, 0x74, 0x2d, 0x72,
	0x65, 0x70, 0x6c, 0x79, 0x1a, 0x52, 0x0a, 0x06, 0x49, 0x70, 0x76, 0x34, 0x55, 0x63, 0x12, 0x1e,
	0x0a, 0x0a, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x2d, 0x66, 0x72, 0x61, 0x67, 0x12, 0x28,
	0x0a, 0x0f, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x66, 0x61, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x63, 0x6d, 0x70, 0x2d, 0x72, 0x65,
	0x70, 0x6c, 0x79, 0x2d, 0x66, 0x61, 0x73, 0x74, 0x1a, 0x26, 0x0a, 0x0c, 0x41, 0x72, 0x70, 0x46,
	0x61, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x1a, 0xa2, 0x01, 0x0a, 0x0a, 0x47, 0x72, 0x65, 0x54, 0x74, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x62, 0x0a, 0x08, 0x74, 0x74, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x46, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e,
	0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d,
	0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x46,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x47, 0x72, 0x65, 0x54, 0x74, 0x6c, 0x4d, 0x6f, 0x64,
	0x65, 0x2e, 0x54, 0x74, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x74, 0x74, 0x6c, 0x2d, 0x6d,
	0x6f, 0x64, 0x65, 0x22, 0x30, 0x0a, 0x07, 0x54, 0x74, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x10,
	0x0a, 0x0c, 0x54, 0x74, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x50, 0x49, 0x50, 0x45, 0x10, 0x00,
	0x12, 0x13, 0x0a, 0x0f, 0x54, 0x74, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x55, 0x4e, 0x49, 0x46,
	0x4f, 0x52, 0x4d, 0x10, 0x01, 0x1a, 0x25, 0x0a, 0x0b, 0x4e, 0x64, 0x46, 0x61, 0x73, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0x42, 0x0a, 0x14,
	0x43, 0x66, 0x6d, 0x4d, 0x61, 0x63, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x4d, 0x70, 0x75, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x61, 0x63, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x6d, 0x61, 0x63, 0x2d, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x1a, 0x3a, 0x0a, 0x0c, 0x44, 0x68, 0x63, 0x70, 0x76, 0x36, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x2d, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x1a, 0xdf, 0x04, 0x0a,
	0x0d, 0x48, 0x74, 0x74, 0x70, 0x73, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x12, 0x62,
	0x0a, 0x0c, 0x63, 0x68, 0x61, 0x73, 0x74, 0x65, 0x6e, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65,
	0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x73,
	0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x73, 0x74, 0x65, 0x6e,
	0x46, 0x6c, 0x6f, 0x77, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x73, 0x74, 0x65, 0x6e, 0x2d, 0x66, 0x6c,
	0x6f, 0x77, 0x12, 0x6e, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x73, 0x74, 0x65, 0x6e, 0x5f, 0x72, 0x65,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e,
	0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x73, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x2e, 0x43, 0x68, 0x61, 0x73, 0x74, 0x65, 0x6e, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x52, 0x10, 0x63, 0x68, 0x61, 0x73, 0x74, 0x65, 0x6e, 0x2d, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x1a, 0xa9, 0x01, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x73, 0x74, 0x65, 0x6e, 0x46, 0x6c,
	0x6f, 0x77, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x6c, 0x6f, 0x77, 0x2d,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x11, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2d, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x66,
	0x6c, 0x6f, 0x77, 0x2d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x1a, 0xcd,
	0x01, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x73, 0x74, 0x65, 0x6e, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x65, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x2d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0f,
	0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x2d,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x2d,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2d, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x30, 0x0a, 0x13,
	0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x72, 0x65, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x2d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x1a, 0x11,
	0x0a, 0x0f, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x69,
	0x78, 0x1a, 0xdf, 0x01, 0x0a, 0x06, 0x50, 0x70, 0x70, 0x4e, 0x65, 0x74, 0x12, 0x86, 0x01, 0x0a,
	0x1b, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x70, 0x70, 0x70, 0x6f, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x44, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d,
	0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x50, 0x70, 0x70, 0x4e, 0x65, 0x74, 0x2e,
	0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x79, 0x50, 0x70, 0x70, 0x6f, 0x65, 0x52, 0x1b, 0x6c, 0x6f, 0x61, 0x64, 0x2d, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x2d, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x2d,
	0x70, 0x70, 0x70, 0x6f, 0x65, 0x1a, 0x4c, 0x0a, 0x18, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x50, 0x70, 0x70, 0x6f,
	0x65, 0x12, 0x30, 0x0a, 0x13, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13,
	0x6c, 0x6f, 0x61, 0x64, 0x2d, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x2d, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x1a, 0x8e, 0x01, 0x0a, 0x05, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x5d, 0x0a,
	0x0d, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65,
	0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x53, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x73,
	0x6c, 0x6f, 0x74, 0x2d, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x1a, 0x26, 0x0a, 0x0c,
	0x53, 0x6c, 0x6f, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x1a, 0xbd, 0x05, 0x0a, 0x03, 0x44, 0x63, 0x62, 0x12, 0x5b, 0x0a, 0x0d,
	0x68, 0x65, 0x61, 0x64, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76,
	0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x44, 0x63, 0x62, 0x2e, 0x48, 0x65,
	0x61, 0x64, 0x72, 0x6f, 0x6f, 0x6d, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x0d, 0x68, 0x65, 0x61, 0x64,
	0x72, 0x6f, 0x6f, 0x6d, 0x2d, 0x70, 0x6f, 0x6f, 0x6c, 0x12, 0x81, 0x01, 0x0a, 0x1a, 0x64, 0x65,
	0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f,
	0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76,
	0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x2e, 0x44, 0x63, 0x62, 0x2e, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x6f, 0x63,
	0x6b, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x52, 0x1a, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2d, 0x72, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x2d, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x63, 0x0a,
	0x10, 0x70, 0x66, 0x63, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x44, 0x63,
	0x62, 0x2e, 0x50, 0x66, 0x63, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x10, 0x70, 0x66, 0x63, 0x2d, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2d, 0x74, 0x79,
	0x70, 0x65, 0x1a, 0x22, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x72, 0x6f, 0x6f, 0x6d, 0x50, 0x6f,
	0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x1a, 0xbd, 0x01, 0x0a, 0x18, 0x44, 0x65, 0x61, 0x64, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x42, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x12, 0x66, 0x0a, 0x08, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64,
	0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x44, 0x63, 0x62, 0x2e,
	0x44, 0x65, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x52, 0x08, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x22, 0x39, 0x0a, 0x08, 0x42,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x5f, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x00,
	0x12, 0x14, 0x0a, 0x10, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x5f, 0x44, 0x49, 0x53,
	0x43, 0x41, 0x52, 0x44, 0x10, 0x01, 0x1a, 0x8b, 0x01, 0x0a, 0x0e, 0x50, 0x66, 0x63, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x50, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x44, 0x63,
	0x62, 0x2e, 0x50, 0x66, 0x63, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x27, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f, 0x38, 0x30,
	0x32, 0x31, 0x50, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x53,
	0x43, 0x50, 0x10, 0x01, 0x22, 0x91, 0x01, 0x0a, 0x06, 0x4c, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x12,
	0x12, 0x0a, 0x0e, 0x4c, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x5f, 0x4d, 0x4d,
	0x42, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x5f, 0x50, 0x4c,
	0x4d, 0x42, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x5f, 0x41,
	0x43, 0x4d, 0x42, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x5f,
	0x4d, 0x42, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x5f, 0x4c,
	0x43, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x5f, 0x53, 0x59,
	0x53, 0x4d, 0x4d, 0x42, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x73, 0x52, 0x6f, 0x6c, 0x65,
	0x5f, 0x53, 0x59, 0x53, 0x4d, 0x42, 0x10, 0x07, 0x1a, 0x9b, 0x86, 0x03, 0x0a, 0x09, 0x4c, 0x70,
	0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x12, 0x42, 0x0a, 0x09, 0x6c, 0x70, 0x75, 0x5f, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70,
	0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x52, 0x09, 0x6c, 0x70, 0x75, 0x2d, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x1a, 0xc8, 0x85, 0x03, 0x0a,
	0x08, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x64, 0x72, 0x61, 0x6d, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x73, 0x64, 0x72, 0x61, 0x6d, 0x2d, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x66,
	0x6c, 0x61, 0x73, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x2d, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x75,
	0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x75, 0x70,
	0x2d, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x70, 0x5f, 0x72, 0x64, 0x72, 0x61,
	0x6d, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6e, 0x70,
	0x2d, 0x72, 0x64, 0x72, 0x61, 0x6d, 0x2d, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6e,
	0x70, 0x5f, 0x73, 0x72, 0x61, 0x6d, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x6e, 0x70, 0x2d, 0x73, 0x72, 0x61, 0x6d, 0x2d, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x54, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64,
	0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x62, 0x0a, 0x11, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x34, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44,
	0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70,
	0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x69, 0x63,
	0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x69, 0x63, 0x2d,
	0x6e, 0x75, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x2d, 0x73,
	0x6c, 0x6f, 0x74, 0x2d, 0x6e, 0x75, 0x6d, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x38, 0x6b, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x2d, 0x38, 0x6b, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x26, 0x0a,
	0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x33, 0x5f, 0x63, 0x6c, 0x6b, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x2d, 0x6c,
	0x33, 0x2d, 0x63, 0x6c, 0x6b, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69,
	0x73, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x69, 0x73, 0x2d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x3d, 0x0a,
	0x04, 0x62, 0x72, 0x61, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c,
	0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x2e, 0x42, 0x72, 0x61, 0x73, 0x52, 0x04, 0x62, 0x72, 0x61, 0x73, 0x12, 0x5a, 0x0a, 0x0e,
	0x68, 0x74, 0x74, 0x70, 0x73, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65,
	0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x73,
	0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x52, 0x0e, 0x68, 0x74, 0x74, 0x70, 0x73, 0x2d,
	0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x12, 0x3d, 0x0a, 0x04, 0x6c, 0x32, 0x74, 0x70,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f,
	0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4c, 0x32, 0x54,
	0x70, 0x52, 0x04, 0x6c, 0x32, 0x74, 0x70, 0x12, 0x4e, 0x0a, 0x0a, 0x62, 0x72, 0x61, 0x73, 0x5f,
	0x70, 0x70, 0x70, 0x6f, 0x78, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c,
	0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x2e, 0x42, 0x72, 0x61, 0x73, 0x50, 0x70, 0x70, 0x6f, 0x78, 0x52, 0x0a, 0x62, 0x72, 0x61,
	0x73, 0x2d, 0x70, 0x70, 0x70, 0x6f, 0x78, 0x12, 0x4c, 0x0a, 0x09, 0x63, 0x70, 0x75, 0x64, 0x65,
	0x66, 0x65, 0x6e, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70,
	0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x2e, 0x43, 0x70, 0x75, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x52, 0x09, 0x63, 0x70, 0x75, 0x64,
	0x65, 0x66, 0x65, 0x6e, 0x64, 0x12, 0x5a, 0x0a, 0x0e, 0x63, 0x70, 0x75, 0x64, 0x65, 0x66, 0x65,
	0x6e, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d,
	0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x2e, 0x43, 0x70, 0x75, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x76,
	0x6d, 0x52, 0x0e, 0x63, 0x70, 0x75, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x2d, 0x64, 0x65, 0x76,
	0x6d, 0x12, 0x43, 0x0a, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e,
	0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c,
	0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x52, 0x06,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x12, 0x54, 0x0a, 0x0c, 0x63, 0x6d, 0x61, 0x63, 0x5f, 0x70,
	0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e,
	0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x2e, 0x43, 0x6d, 0x61, 0x63, 0x50, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x0c,
	0x63, 0x6d, 0x61, 0x63, 0x2d, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x3a, 0x0a, 0x03,
	0x66, 0x69, 0x6d, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e,
	0x46, 0x69, 0x6d, 0x52, 0x03, 0x66, 0x69, 0x6d, 0x12, 0x7a, 0x0a, 0x19, 0x6d, 0x61, 0x63, 0x6d,
	0x74, 0x75, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c,
	0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x2e, 0x4d, 0x61, 0x63, 0x6d, 0x74, 0x75, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x19, 0x6d, 0x61, 0x63, 0x6d, 0x74,
	0x75, 0x2d, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x12, 0x59, 0x0a, 0x0e, 0x76, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e,
	0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x2e, 0x56, 0x65, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x0e, 0x76, 0x65, 0x2d, 0x6d, 0x61, 0x63, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x60, 0x0a, 0x10, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e,
	0x46, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x52,
	0x10, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x12, 0x82, 0x01, 0x0a, 0x1c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x6c,
	0x6f, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x44, 0x65,
	0x66, 0x65, 0x6e, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x1c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2d, 0x64, 0x65, 0x66, 0x65, 0x6e,
	0x64, 0x2d, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x74, 0x0a, 0x17, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4c, 0x69,
	0x6e, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x17, 0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x52, 0x0a, 0x0b,
	0x6c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e,
	0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c,
	0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x0b, 0x6c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x48, 0x0a, 0x08, 0x6d, 0x61, 0x63, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d,
	0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4d, 0x61, 0x63, 0x53, 0x79, 0x6e, 0x63,
	0x52, 0x08, 0x6d, 0x61, 0x63, 0x2d, 0x73, 0x79, 0x6e, 0x63, 0x12, 0x43, 0x0a, 0x06, 0x6d, 0x69,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70,
	0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x2e, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x54, 0x0a, 0x0c, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64,
	0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4d, 0x70, 0x6c, 0x73,
	0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x52, 0x0c, 0x6d, 0x70, 0x6c, 0x73, 0x2d, 0x66, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x12, 0x4c, 0x0a, 0x09, 0x6e, 0x65, 0x74, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4e,
	0x65, 0x74, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x12, 0x3a, 0x0a, 0x03, 0x70, 0x62, 0x72, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44,
	0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70,
	0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x50, 0x62, 0x72, 0x52, 0x03, 0x70, 0x62, 0x72, 0x12,
	0x3a, 0x0a, 0x03, 0x71, 0x6f, 0x73, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e,
	0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x52, 0x03, 0x71, 0x6f, 0x73, 0x12, 0x3a, 0x0a, 0x03, 0x73,
	0x6f, 0x63, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x53,
	0x6f, 0x63, 0x52, 0x03, 0x73, 0x6f, 0x63, 0x12, 0x5d, 0x0a, 0x0f, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44,
	0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70,
	0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x52, 0x0f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2d, 0x66,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x12, 0x75, 0x0a, 0x18, 0x63, 0x66, 0x6d, 0x5f, 0x6d, 0x61,
	0x63, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6c,
	0x70, 0x75, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x43,
	0x66, 0x6d, 0x4d, 0x61, 0x63, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x4c, 0x70, 0x75, 0x52, 0x18, 0x63, 0x66, 0x6d, 0x2d, 0x6d, 0x61, 0x63, 0x2d, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2d, 0x6c, 0x70, 0x75, 0x12, 0x57, 0x0a,
	0x0d, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x29,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65,
	0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x76,
	0x36, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x0d, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2d,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x62, 0x0a, 0x11, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f,
	0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x78, 0x18, 0x2a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e,
	0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c,
	0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x64,
	0x64, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x78, 0x52, 0x11, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2d, 0x70,
	0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x66, 0x69, 0x78, 0x12, 0x45, 0x0a, 0x07, 0x70, 0x70,
	0x70, 0x5f, 0x6e, 0x65, 0x74, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c,
	0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x2e, 0x50, 0x70, 0x70, 0x4e, 0x65, 0x74, 0x52, 0x07, 0x70, 0x70, 0x70, 0x2d, 0x6e, 0x65,
	0x74, 0x12, 0x40, 0x0a, 0x05, 0x73, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44,
	0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70,
	0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x53, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x05, 0x73, 0x66,
	0x6c, 0x6f, 0x77, 0x12, 0x3a, 0x0a, 0x03, 0x64, 0x63, 0x62, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44,
	0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70,
	0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x44, 0x63, 0x62, 0x52, 0x03, 0x64, 0x63, 0x62, 0x12,
	0x79, 0x0a, 0x19, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x65, 0x61,
	0x66, 0x5f, 0x63, 0x66, 0x63, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x18, 0x2e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d,
	0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x4c, 0x65, 0x61, 0x66, 0x43, 0x66, 0x63, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x52,
	0x19, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2d, 0x6c, 0x65, 0x61, 0x66, 0x2d,
	0x63, 0x66, 0x63, 0x2d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x1a, 0xc4, 0x08, 0x0a, 0x04, 0x42,
	0x72, 0x61, 0x73, 0x12, 0x7c, 0x0a, 0x18, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64,
	0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x42, 0x72, 0x61, 0x73,
	0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x46, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x18, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x2d, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x3f, 0x0a, 0x03, 0x76, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76,
	0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x2e, 0x42, 0x72, 0x61, 0x73, 0x2e, 0x56, 0x61, 0x73, 0x52, 0x03, 0x76,
	0x61, 0x73, 0x12, 0x51, 0x0a, 0x09, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64,
	0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x42, 0x72, 0x61, 0x73,
	0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x52, 0x09, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0x66, 0x0a, 0x11, 0x69, 0x70, 0x5f, 0x75, 0x6e, 0x72, 0x5f,
	0x68, 0x6f, 0x73, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x38, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44,
	0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70,
	0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x42, 0x72, 0x61, 0x73, 0x2e, 0x49, 0x70, 0x55, 0x6e,
	0x72, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x11, 0x69, 0x70, 0x2d, 0x75,
	0x6e, 0x72, 0x2d, 0x68, 0x6f, 0x73, 0x74, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x45, 0x0a,
	0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e,
	0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x2e, 0x42, 0x72, 0x61, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x05, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x1a, 0xd9, 0x01, 0x0a, 0x16, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x59, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x45, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d,
	0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x2e, 0x42, 0x72, 0x61, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x64, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e,
	0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12,
	0x0d, 0x0a, 0x09, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x41, 0x53, 0x54, 0x10, 0x01, 0x12, 0x0f,
	0x0a, 0x0b, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x02, 0x12,
	0x0d, 0x0a, 0x09, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x4c, 0x4f, 0x57, 0x10, 0x03, 0x12, 0x10,
	0x0a, 0x0c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x04,
	0x1a, 0xb9, 0x01, 0x0a, 0x03, 0x56, 0x61, 0x73, 0x12, 0x72, 0x0a, 0x13, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64,
	0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x42, 0x72, 0x61, 0x73,
	0x2e, 0x56, 0x61, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x46, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x13, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x2d, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x1a, 0x3e, 0x0a, 0x12,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x66, 0x6c, 0x6f,
	0x77, 0x2d, 0x72, 0x65, 0x61, 0x64, 0x2d, 0x73, 0x70, 0x65, 0x65, 0x64, 0x1a, 0x9d, 0x01, 0x0a,
	0x09, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0x68, 0x0a, 0x0e, 0x62, 0x61,
	0x73, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x63, 0x61, 0x63, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x40, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d,
	0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x42, 0x72, 0x61, 0x73, 0x2e, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x42, 0x61, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x43, 0x61, 0x63, 0x52, 0x0e, 0x62, 0x61, 0x73, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2d, 0x63, 0x61, 0x63, 0x1a, 0x26, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x43, 0x61, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0x22, 0x0a, 0x0e,
	0x49, 0x70, 0x55, 0x6e, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x74, 0x61, 0x67,
	0x1a, 0x1f, 0x0a, 0x05, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x1a, 0xdf, 0x04, 0x0a, 0x0d, 0x48, 0x74, 0x74, 0x70, 0x73, 0x52, 0x65, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x12, 0x62, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x73, 0x74, 0x65, 0x6e, 0x5f, 0x66,
	0x6c, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e,
	0x48, 0x74, 0x74, 0x70, 0x73, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x68,
	0x61, 0x73, 0x74, 0x65, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x73, 0x74,
	0x65, 0x6e, 0x2d, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x6e, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x73, 0x74,
	0x65, 0x6e, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x42, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e,
	0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c,
	0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x73, 0x52, 0x65, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x73, 0x74, 0x65, 0x6e, 0x52, 0x65, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x52, 0x10, 0x63, 0x68, 0x61, 0x73, 0x74, 0x65, 0x6e, 0x2d, 0x72,
	0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x1a, 0xa9, 0x01, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x73,
	0x74, 0x65, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x6c,
	0x6f, 0x77, 0x2d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x2d, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2d, 0x72,
	0x61, 0x74, 0x65, 0x1a, 0xcd, 0x01, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x73, 0x74, 0x65, 0x6e, 0x52,
	0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x2d, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x65, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x2d, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x72,
	0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x72, 0x65, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x2d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2d, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x12, 0x30, 0x0a, 0x13, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13,
	0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x2d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2d, 0x72,
	0x61, 0x74, 0x65, 0x1a, 0x8e, 0x03, 0x0a, 0x04, 0x4c, 0x32, 0x54, 0x70, 0x12, 0x53, 0x0a, 0x0a,
	0x69, 0x63, 0x72, 0x71, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44,
	0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70,
	0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4c, 0x32, 0x54, 0x70, 0x2e, 0x49, 0x63, 0x72, 0x71,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x0a, 0x69, 0x63, 0x72, 0x71, 0x2d, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x59, 0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4c, 0x32,
	0x54, 0x70, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0c,
	0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x1a, 0x29, 0x0a, 0x09,
	0x49, 0x63, 0x72, 0x71, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x74,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x65,
	0x74, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xaa, 0x01, 0x0a, 0x0b, 0x46, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x5f, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c,
	0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x2e, 0x4c, 0x32, 0x54, 0x70, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x6f,
	0x64, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x6d, 0x6f,
	0x64, 0x65, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3a, 0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x6f, 0x64, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x4c, 0x4f, 0x4f, 0x50, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x00, 0x12, 0x15, 0x0a,
	0x11, 0x4d, 0x6f, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x54, 0x48, 0x52, 0x4f, 0x55,
	0x47, 0x48, 0x10, 0x01, 0x1a, 0xc4, 0x3c, 0x0a, 0x09, 0x42, 0x72, 0x61, 0x73, 0x50, 0x70, 0x70,
	0x6f, 0x78, 0x12, 0x6c, 0x0a, 0x11, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d,
	0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x2e, 0x42, 0x72, 0x61, 0x73, 0x50, 0x70, 0x70, 0x6f, 0x78, 0x2e, 0x53, 0x6c,
	0x6f, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x11, 0x73,
	0x6c, 0x6f, 0x74, 0x2d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x55, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76,
	0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x42, 0x72, 0x61, 0x73, 0x50, 0x70,
	0x70, 0x6f, 0x78, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x49, 0x70, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x69, 0x70, 0x12, 0x66, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x69, 0x70, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44,
	0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70,
	0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x42, 0x72, 0x61, 0x73, 0x50, 0x70, 0x70, 0x6f, 0x78,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x49, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x0f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x69, 0x70, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x89, 0x01, 0x0a, 0x1b, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x70, 0x70, 0x70, 0x6f, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64,
	0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x42, 0x72, 0x61, 0x73,
	0x50, 0x70, 0x70, 0x6f, 0x78, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x50, 0x70, 0x70, 0x6f, 0x65, 0x52, 0x1b,
	0x6c, 0x6f, 0x61, 0x64, 0x2d, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x2d, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x79, 0x2d, 0x70, 0x70, 0x70, 0x6f, 0x65, 0x12, 0x5e, 0x0a, 0x0c, 0x6d,
	0x61, 0x78, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e,
	0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c,
	0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x42, 0x72, 0x61, 0x73, 0x50, 0x70, 0x70, 0x6f,
	0x78, 0x2e, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0c, 0x6d,
	0x61, 0x78, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x75, 0x0a, 0x14, 0x70,
	0x70, 0x70, 0x6f, 0x65, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e,
	0x42, 0x72, 0x61, 0x73, 0x50, 0x70, 0x70, 0x6f, 0x78, 0x2e, 0x50, 0x70, 0x70, 0x6f, 0x65, 0x53,
	0x6c, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x14, 0x70, 0x70,
	0x70, 0x6f, 0x65, 0x2d, 0x73, 0x6c, 0x6f, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x12, 0x6f, 0x0a, 0x12, 0x70, 0x70, 0x70, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76,
	0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x2e, 0x42, 0x72, 0x61, 0x73, 0x50, 0x70, 0x70, 0x6f, 0x78, 0x2e, 0x50,
	0x70, 0x70, 0x53, 0x6c, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52,
	0x12, 0x70, 0x70, 0x70, 0x2d, 0x73, 0x6c, 0x6f, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x12, 0x7e, 0x0a, 0x17, 0x75, 0x72, 0x70, 0x66, 0x5f, 0x64, 0x69, 0x73, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65,
	0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x42, 0x72, 0x61, 0x73, 0x50,
	0x70, 0x70, 0x6f, 0x78, 0x2e, 0x55, 0x72, 0x70, 0x66, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x17, 0x75, 0x72, 0x70, 0x66,
	0x2d, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x12, 0x74, 0x0a, 0x14, 0x70, 0x70, 0x70, 0x5f, 0x65, 0x63, 0x68, 0x6f, 0x5f,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x40, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e,
	0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c,
	0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x42, 0x72, 0x61, 0x73, 0x50, 0x70, 0x70, 0x6f,
	0x78, 0x2e, 0x50, 0x70, 0x70, 0x45, 0x63, 0x68, 0x6f, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x4d,
	0x6f, 0x64, 0x65, 0x52, 0x14, 0x70, 0x70, 0x70, 0x2d, 0x65, 0x63, 0x68, 0x6f, 0x2d, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x1a, 0x3f, 0x0a, 0x0f, 0x53, 0x6c, 0x6f,
	0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2c, 0x0a, 0x11,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x75, 0x73, 0x65, 0x72, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0x36, 0x0a, 0x08, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x49, 0x70, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x69, 0x70, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x69, 0x70, 0x2d, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x1a, 0x31, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x49, 0x70, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x61, 0x69, 0x6c, 0x2d, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x4c, 0x0a, 0x18, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x50, 0x70, 0x70, 0x6f,
	0x65, 0x12, 0x30, 0x0a, 0x13, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13,
	0x6c, 0x6f, 0x61, 0x64, 0x2d, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x2d, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x1a, 0x3d, 0x0a, 0x0b, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12,
	0x6d, 0x61, 0x78, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x1a, 0xe8, 0x0c, 0x0a, 0x12, 0x50, 0x70, 0x70, 0x6f, 0x65, 0x53, 0x6c, 0x6f, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x64, 0x69, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x2d, 0x70, 0x61, 0x64, 0x69, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12,
	0x32, 0x0a, 0x14, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x64, 0x69, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x64,
	0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x2d, 0x70, 0x61, 0x64, 0x69, 0x2d, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x61, 0x64, 0x6f,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11,
	0x73, 0x65, 0x6e, 0x64, 0x2d, 0x70, 0x61, 0x64, 0x6f, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x12, 0x32, 0x0a, 0x14, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x64,
	0x72, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x14, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x70, 0x61, 0x64, 0x72, 0x2d, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x70, 0x61, 0x64, 0x72, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x14, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x2d, 0x70, 0x61, 0x64,
	0x72, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x65, 0x6e,
	0x64, 0x5f, 0x70, 0x61, 0x64, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x70, 0x61, 0x64, 0x73, 0x2d,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x64, 0x69, 0x73, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x70, 0x61, 0x64, 0x72, 0x5f, 0x73, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x61, 0x63,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x2d,
	0x70, 0x61, 0x64, 0x72, 0x2d, 0x73, 0x61, 0x6d, 0x65, 0x2d, 0x6d, 0x61, 0x63, 0x12, 0x32, 0x0a,
	0x14, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x64, 0x74, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x2d, 0x70, 0x61, 0x64, 0x74, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x12, 0x32, 0x0a, 0x14, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x64,
	0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x14, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x2d, 0x70, 0x61, 0x64, 0x74, 0x2d, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x61,
	0x64, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x70, 0x61, 0x64, 0x74, 0x2d, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x61, 0x64, 0x6d,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11,
	0x73, 0x65, 0x6e, 0x64, 0x2d, 0x70, 0x61, 0x64, 0x6d, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x12, 0x34, 0x0a, 0x15, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x61, 0x64, 0x6d, 0x5f, 0x75,
	0x72, 0x6c, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x15, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x70, 0x61, 0x64, 0x6d, 0x2d, 0x75, 0x72, 0x6c, 0x2d,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x73, 0x65, 0x6e, 0x64, 0x5f,
	0x70, 0x61, 0x64, 0x6d, 0x5f, 0x6d, 0x6f, 0x74, 0x6d, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x70, 0x61,
	0x64, 0x6d, 0x2d, 0x6d, 0x6f, 0x74, 0x6d, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12,
	0x2c, 0x0a, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x61, 0x64, 0x6e, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x65, 0x6e, 0x64,
	0x2d, 0x70, 0x61, 0x64, 0x6e, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x38, 0x0a,
	0x17, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2d,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x17, 0x64, 0x69, 0x73, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72,
	0x64, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x12, 0x32, 0x0a, 0x14, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x14, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12,
	0x28, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72,
	0x64, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2d, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x70,
	0x61, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x69,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2d, 0x70, 0x61, 0x64, 0x2d, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x2a, 0x0a, 0x10, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x64, 0x5f, 0x74,
	0x61, 0x67, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x69, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x2d, 0x70, 0x61, 0x64, 0x2d, 0x74, 0x61, 0x67, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x69,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x69, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x2d, 0x70, 0x61, 0x64, 0x2d, 0x74, 0x61, 0x67, 0x2d, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x70,
	0x61, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x69,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2d, 0x70, 0x61, 0x64, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x34, 0x0a, 0x15, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x64, 0x69, 0x5f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15,
	0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2d, 0x70, 0x61, 0x64, 0x69, 0x2d, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x5f, 0x70, 0x61, 0x64, 0x72, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2d, 0x70, 0x61,
	0x64, 0x72, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3c, 0x0a, 0x19, 0x69,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19,
	0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2d, 0x70, 0x61, 0x64, 0x2d, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x2d, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x3c, 0x0a, 0x19, 0x6f, 0x74, 0x68,
	0x65, 0x72, 0x5f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x64, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x2d, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2d, 0x70, 0x61, 0x64, 0x2d,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x19, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x64, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x2d, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2d, 0x70, 0x61, 0x64, 0x2d, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6e, 0x75,
	0x6c, 0x6c, 0x5f, 0x70, 0x61, 0x64, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x6e, 0x75, 0x6c, 0x6c,
	0x2d, 0x70, 0x61, 0x64, 0x73, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x1a, 0xd4, 0x1f,
	0x0a, 0x10, 0x50, 0x70, 0x70, 0x53, 0x6c, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x65, 0x63, 0x68, 0x6f, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x73,
	0x65, 0x6e, 0x64, 0x2d, 0x65, 0x63, 0x68, 0x6f, 0x2d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x65, 0x63, 0x68, 0x6f, 0x5f, 0x72, 0x65,
	0x70, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x65, 0x6e, 0x64, 0x2d,
	0x65, 0x63, 0x68, 0x6f, 0x2d, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x65,
	0x6e, 0x64, 0x5f, 0x65, 0x63, 0x68, 0x6f, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x65, 0x63, 0x68, 0x6f, 0x2d,
	0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x5f, 0x65, 0x63, 0x68, 0x6f, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x12, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x65, 0x63, 0x68, 0x6f,
	0x2d, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x32, 0x0a, 0x14, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x5f, 0x65, 0x63, 0x68, 0x6f, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x65, 0x63,
	0x68, 0x6f, 0x2d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x1b, 0x73, 0x65,
	0x6e, 0x64, 0x5f, 0x6c, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x1b, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x6c, 0x63, 0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x17,
	0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x73,
	0x65, 0x6e, 0x64, 0x2d, 0x6c, 0x63, 0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2d, 0x6e, 0x61, 0x6b, 0x12, 0x44, 0x0a, 0x1d, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6c,
	0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x73,
	0x65, 0x6e, 0x64, 0x2d, 0x6c, 0x63, 0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2d, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x17,
	0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x73,
	0x65, 0x6e, 0x64, 0x2d, 0x6c, 0x63, 0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2d, 0x61, 0x63, 0x6b, 0x12, 0x38, 0x0a, 0x17, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6c,
	0x63, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x6c, 0x63,
	0x70, 0x2d, 0x63, 0x6f, 0x64, 0x65, 0x2d, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x40, 0x0a, 0x1b, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x63, 0x70, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x6c, 0x63, 0x70, 0x2d,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2d, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x1c, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x63, 0x70, 0x5f, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x6c,
	0x63, 0x70, 0x2d, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x18, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6c,
	0x63, 0x70, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61,
	0x63, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x6c,
	0x63, 0x70, 0x2d, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x61,
	0x63, 0x6b, 0x12, 0x46, 0x0a, 0x1e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x63,
	0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1e, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x2d, 0x6c, 0x63, 0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x1a, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x6c, 0x63, 0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6e, 0x61, 0x6b, 0x12, 0x4a, 0x0a, 0x20, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x6c, 0x63,
	0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x72, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x1a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x5f, 0x6c, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x61, 0x63, 0x6b, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x2d, 0x6c, 0x63, 0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2d, 0x61, 0x63, 0x6b, 0x12, 0x3e, 0x0a, 0x1a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x5f, 0x6c, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x2d, 0x6c, 0x63, 0x70, 0x2d, 0x63, 0x6f, 0x64, 0x65, 0x2d, 0x72, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x1e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x5f, 0x6c, 0x63, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x72,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1e,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x6c, 0x63, 0x70, 0x2d, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2d, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48,
	0x0a, 0x1f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x63, 0x70, 0x5f, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x2d, 0x6c, 0x63, 0x70, 0x2d, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x1b, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x5f, 0x6c, 0x63, 0x70, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x6c, 0x63, 0x70, 0x2d, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x61, 0x63, 0x6b, 0x12, 0x42, 0x0a, 0x1c, 0x73, 0x65,
	0x6e, 0x64, 0x5f, 0x69, 0x70, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x1c, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x69, 0x70, 0x63, 0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a,
	0x0a, 0x18, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x70, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6b, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x18, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x69, 0x70, 0x63, 0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6e, 0x61, 0x6b, 0x12, 0x46, 0x0a, 0x1e, 0x73, 0x65,
	0x6e, 0x64, 0x5f, 0x69, 0x70, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x1e, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x69, 0x70, 0x63, 0x70, 0x2d, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x18, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x70, 0x63, 0x70, 0x5f,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x69, 0x70, 0x63, 0x70, 0x2d,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x61, 0x63, 0x6b, 0x12, 0x3a,
	0x0a, 0x18, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x70, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x18, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x69, 0x70, 0x63, 0x70, 0x2d, 0x63, 0x6f, 0x64, 0x65,
	0x2d, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x1c, 0x73, 0x65,
	0x6e, 0x64, 0x5f, 0x69, 0x70, 0x63, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x1c, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x69, 0x70, 0x63, 0x70, 0x2d, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2d, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44,
	0x0a, 0x1d, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x70, 0x63, 0x70, 0x5f, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x69, 0x70, 0x63, 0x70,
	0x2d, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x1a, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x70, 0x63,
	0x63, 0x70, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61,
	0x63, 0x6b, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x69,
	0x70, 0x63, 0x63, 0x70, 0x2d, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2d, 0x61, 0x63, 0x6b, 0x12, 0x48, 0x0a, 0x1f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f,
	0x69, 0x70, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x69, 0x70, 0x63, 0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40,
	0x0a, 0x1b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x70, 0x63, 0x70, 0x5f, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6b, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x1b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x69, 0x70, 0x63,
	0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6e, 0x61, 0x6b,
	0x12, 0x4c, 0x0a, 0x21, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x70, 0x63, 0x70,
	0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x21, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x2d, 0x69, 0x70, 0x63, 0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40,
	0x0a, 0x1b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x70, 0x63, 0x70, 0x5f, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x1b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x69, 0x70, 0x63,
	0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x61, 0x63, 0x6b,
	0x12, 0x40, 0x0a, 0x1b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x70, 0x63, 0x70,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x69,
	0x70, 0x63, 0x70, 0x2d, 0x63, 0x6f, 0x64, 0x65, 0x2d, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x1f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x70,
	0x63, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x72, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x2d, 0x69, 0x70, 0x63, 0x70, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2d, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x20,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x70, 0x63, 0x70, 0x5f, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d,
	0x69, 0x70, 0x63, 0x70, 0x2d, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x1c, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x5f, 0x69, 0x70, 0x63, 0x70, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x69, 0x70, 0x63, 0x70, 0x2d, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x61, 0x63, 0x6b, 0x12, 0x44, 0x0a, 0x1d,
	0x73, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x70, 0x36, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x26, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x1d, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x69, 0x70, 0x36, 0x63, 0x70, 0x2d,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3c, 0x0a, 0x19, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x70, 0x36, 0x63, 0x70,
	0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6b, 0x18,
	0x27, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x69, 0x70, 0x36, 0x63,
	0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6e, 0x61, 0x6b,
	0x12, 0x48, 0x0a, 0x1f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x70, 0x36, 0x63, 0x70, 0x5f, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1f, 0x73, 0x65, 0x6e, 0x64, 0x2d,
	0x69, 0x70, 0x36, 0x63, 0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2d, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x19, 0x73, 0x65,
	0x6e, 0x64, 0x5f, 0x69, 0x70, 0x36, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x73,
	0x65, 0x6e, 0x64, 0x2d, 0x69, 0x70, 0x36, 0x63, 0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x61, 0x63, 0x6b, 0x12, 0x3c, 0x0a, 0x19, 0x73, 0x65, 0x6e, 0x64,
	0x5f, 0x69, 0x70, 0x36, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x73, 0x65, 0x6e,
	0x64, 0x2d, 0x69, 0x70, 0x36, 0x63, 0x70, 0x2d, 0x63, 0x6f, 0x64, 0x65, 0x2d, 0x72, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x1d, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x69,
	0x70, 0x36, 0x63, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x72, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x73,
	0x65, 0x6e, 0x64, 0x2d, 0x69, 0x70, 0x36, 0x63, 0x70, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2d, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x1e,
	0x73, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x70, 0x36, 0x63, 0x70, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x2c,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x1e, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x69, 0x70, 0x36, 0x63, 0x70,
	0x2d, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x1a, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x70, 0x36,
	0x63, 0x70, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61,
	0x63, 0x6b, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x69,
	0x70, 0x36, 0x63, 0x70, 0x2d, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2d, 0x61, 0x63, 0x6b, 0x12, 0x4a, 0x0a, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f,
	0x69, 0x70, 0x36, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x20,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x69, 0x70, 0x36, 0x63, 0x70, 0x2d, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x42, 0x0a, 0x1c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x70, 0x36, 0x63,
	0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6b,
	0x18, 0x2f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d,
	0x69, 0x70, 0x36, 0x63, 0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2d, 0x6e, 0x61, 0x6b, 0x12, 0x48, 0x0a, 0x1f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f,
	0x69, 0x70, 0x36, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x69, 0x70, 0x36, 0x63, 0x70, 0x2d, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x42,
	0x0a, 0x1c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x70, 0x36, 0x63, 0x70, 0x5f,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0x31,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x69, 0x70,
	0x36, 0x63, 0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x61,
	0x63, 0x6b, 0x12, 0x42, 0x0a, 0x1c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x70,
	0x36, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x2d, 0x69, 0x70, 0x36, 0x63, 0x70, 0x2d, 0x63, 0x6f, 0x64, 0x65, 0x2d, 0x72, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x5f, 0x69, 0x70, 0x36, 0x63, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x69, 0x70, 0x36, 0x63, 0x70, 0x2d,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2d, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x21, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x70,
	0x36, 0x63, 0x70, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x21, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x69, 0x70, 0x36, 0x63, 0x70, 0x2d, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x44, 0x0a, 0x1d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x70, 0x36, 0x63,
	0x70, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63,
	0x6b, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x2d, 0x69, 0x70, 0x36, 0x63, 0x70, 0x2d, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2d, 0x61, 0x63, 0x6b, 0x12, 0x40, 0x0a, 0x1b, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x70,
	0x61, 0x70, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x73, 0x65, 0x6e,
	0x64, 0x2d, 0x70, 0x61, 0x70, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x61, 0x63, 0x6b, 0x12, 0x40, 0x0a, 0x1b, 0x73, 0x65, 0x6e, 0x64,
	0x5f, 0x70, 0x61, 0x70, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6b, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x73,
	0x65, 0x6e, 0x64, 0x2d, 0x70, 0x61, 0x70, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6e, 0x61, 0x6b, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x65,
	0x6e, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x70, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x63, 0x68,
	0x61, 0x70, 0x2d, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x1c,
	0x73, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x70, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0x39, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x1c, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x63, 0x68, 0x61, 0x70, 0x2d, 0x61, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x61, 0x63, 0x6b,
	0x12, 0x44, 0x0a, 0x1d, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x70, 0x5f, 0x61, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x69,
	0x6c, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x63, 0x68,
	0x61, 0x70, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2d, 0x66, 0x61, 0x69, 0x6c, 0x12, 0x2c, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x64, 0x61, 0x69, 0x6c, 0x5f, 0x66, 0x61, 0x73, 0x74, 0x18, 0x3b, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x11, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x2d, 0x64, 0x61, 0x69, 0x6c, 0x2d,
	0x66, 0x61, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x63, 0x68, 0x61, 0x73, 0x74, 0x65, 0x6e, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x64,
	0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x2d, 0x63, 0x68, 0x61, 0x73, 0x74, 0x65, 0x6e, 0x12, 0x4e,
	0x0a, 0x22, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x70, 0x5f, 0x61, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x22, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x2d, 0x70, 0x61, 0x70, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34,
	0x0a, 0x15, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x70, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x63, 0x68, 0x61, 0x70, 0x2d, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x89, 0x05, 0x0a, 0x15, 0x55, 0x72, 0x70, 0x66, 0x44, 0x69, 0x73,
	0x63, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x9f,
	0x01, 0x0a, 0x1b, 0x75, 0x72, 0x70, 0x66, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x64, 0x69, 0x73,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x5d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65,
	0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x42, 0x72, 0x61, 0x73, 0x50,
	0x70, 0x70, 0x6f, 0x78, 0x2e, 0x55, 0x72, 0x70, 0x66, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x55, 0x72, 0x70, 0x66, 0x49,
	0x70, 0x76, 0x34, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x52, 0x1b, 0x75, 0x72, 0x70, 0x66, 0x2d, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x64,
	0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x12, 0x9f, 0x01, 0x0a, 0x1b, 0x75, 0x72, 0x70, 0x66, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x64,
	0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f,
	0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x42, 0x72, 0x61,
	0x73, 0x50, 0x70, 0x70, 0x6f, 0x78, 0x2e, 0x55, 0x72, 0x70, 0x66, 0x44, 0x69, 0x73, 0x63, 0x61,
	0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x55, 0x72, 0x70,
	0x66, 0x49, 0x70, 0x76, 0x36, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x1b, 0x75, 0x72, 0x70, 0x66, 0x2d, 0x69, 0x70, 0x76, 0x36,
	0x2d, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x1a, 0x94, 0x01, 0x0a, 0x18, 0x55, 0x72, 0x70, 0x66, 0x49, 0x70, 0x76, 0x34, 0x44,
	0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12,
	0x3c, 0x0a, 0x19, 0x70, 0x70, 0x70, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x62, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x19, 0x70, 0x70, 0x70, 0x2d, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x2d, 0x68, 0x69, 0x67, 0x68, 0x2d, 0x62, 0x69, 0x74, 0x73, 0x12, 0x3a, 0x0a,
	0x18, 0x70, 0x70, 0x70, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x62, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x18, 0x70, 0x70, 0x70, 0x2d, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x2d, 0x6c, 0x6f, 0x77, 0x2d, 0x62, 0x69, 0x74, 0x73, 0x1a, 0x94, 0x01, 0x0a, 0x18, 0x55, 0x72,
	0x70, 0x66, 0x49, 0x70, 0x76, 0x36, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x3c, 0x0a, 0x19, 0x70, 0x70, 0x70, 0x5f, 0x69, 0x70,
	0x76, 0x36, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x62,
	0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x70, 0x70, 0x70, 0x2d, 0x69,
	0x70, 0x76, 0x36, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x68, 0x69, 0x67, 0x68, 0x2d,
	0x62, 0x69, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x18, 0x70, 0x70, 0x70, 0x5f, 0x69, 0x70, 0x76, 0x36,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x62, 0x69, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x70, 0x70, 0x70, 0x2d, 0x69, 0x70, 0x76, 0x36,
	0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x6c, 0x6f, 0x77, 0x2d, 0x62, 0x69, 0x74, 0x73,
	0x1a, 0x39, 0x0a, 0x11, 0x50, 0x70, 0x70, 0x45, 0x63, 0x68, 0x6f, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74,
	0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x65,
	0x70, 0x61, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x1a, 0x29, 0x0a, 0x09, 0x43,
	0x70, 0x75, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2d, 0x69, 0x64, 0x1a, 0xea, 0x20, 0x0a, 0x0d, 0x43, 0x70, 0x75, 0x64, 0x65,
	0x66, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x76, 0x6d, 0x12, 0x73, 0x0a, 0x12, 0x69, 0x67, 0x6e, 0x6f,
	0x72, 0x65, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x63, 0x61, 0x72, 0x5f, 0x61, 0x63, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65,
	0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x70, 0x75, 0x64, 0x65,
	0x66, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x48,
	0x6f, 0x73, 0x74, 0x63, 0x61, 0x72, 0x41, 0x63, 0x6c, 0x52, 0x12, 0x69, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x2d, 0x68, 0x6f, 0x73, 0x74, 0x63, 0x61, 0x72, 0x2d, 0x61, 0x63, 0x6c, 0x12, 0x67, 0x0a,
	0x0e, 0x62, 0x72, 0x61, 0x73, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64,
	0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x70, 0x75, 0x64,
	0x65, 0x66, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x42, 0x72, 0x61, 0x73, 0x48, 0x6f,
	0x73, 0x74, 0x43, 0x61, 0x72, 0x73, 0x52, 0x0e, 0x62, 0x72, 0x61, 0x73, 0x2d, 0x68, 0x6f, 0x73,
	0x74, 0x2d, 0x63, 0x61, 0x72, 0x73, 0x12, 0x56, 0x0a, 0x08, 0x73, 0x70, 0x75, 0x5f, 0x63, 0x61,
	0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x43,
	0x70, 0x75, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x53, 0x70, 0x75,
	0x43, 0x61, 0x72, 0x73, 0x52, 0x08, 0x73, 0x70, 0x75, 0x2d, 0x63, 0x61, 0x72, 0x73, 0x12, 0x61,
	0x0a, 0x0c, 0x61, 0x72, 0x70, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x63, 0x61, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65,
	0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x70, 0x75, 0x64, 0x65,
	0x66, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x41, 0x72, 0x70, 0x56, 0x6c, 0x61, 0x6e,
	0x43, 0x61, 0x72, 0x52, 0x0c, 0x61, 0x72, 0x70, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x63, 0x61,
	0x72, 0x12, 0x5e, 0x0a, 0x0b, 0x6e, 0x64, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x63, 0x61, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f,
	0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x70, 0x75,
	0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4e, 0x64, 0x56, 0x6c, 0x61,
	0x6e, 0x43, 0x61, 0x72, 0x52, 0x0b, 0x6e, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x63, 0x61,
	0x72, 0x1a, 0xe9, 0x03, 0x0a, 0x10, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x48, 0x6f, 0x73, 0x74,
	0x63, 0x61, 0x72, 0x41, 0x63, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x61,
	0x63, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x61,
	0x63, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x63, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x61, 0x63, 0x6c, 0x12, 0x8c,
	0x01, 0x0a, 0x19, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x61, 0x63, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x5a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d,
	0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x70, 0x75, 0x64, 0x65, 0x66, 0x65,
	0x6e, 0x64, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x48, 0x6f, 0x73,
	0x74, 0x63, 0x61, 0x72, 0x41, 0x63, 0x6c, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x41, 0x63, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x42, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00,
	0x52, 0x0b, 0x62, 0x79, 0x2d, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x86, 0x01,
	0x0a, 0x17, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x61, 0x63, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x62, 0x79, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x58, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65,
	0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x70, 0x75, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x44,
	0x65, 0x76, 0x6d, 0x2e, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x63, 0x61,
	0x72, 0x41, 0x63, 0x6c, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x41, 0x63, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x42, 0x79, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x00, 0x52, 0x09, 0x62, 0x79, 0x2d,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x34, 0x0a, 0x16, 0x49, 0x70, 0x76, 0x34, 0x41, 0x63,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x61, 0x63, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x61, 0x63, 0x6c, 0x1a, 0x40, 0x0a, 0x14,
	0x49, 0x70, 0x76, 0x34, 0x41, 0x63, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x79, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x61, 0x63, 0x6c,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x69,
	0x70, 0x76, 0x34, 0x2d, 0x61, 0x63, 0x6c, 0x2d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x0d,
	0x0a, 0x0b, 0x49, 0x70, 0x76, 0x34, 0x41, 0x63, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x1a, 0xe7, 0x07,
	0x0a, 0x0c, 0x42, 0x72, 0x61, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x72, 0x73, 0x12, 0x71,
	0x0a, 0x0d, 0x62, 0x72, 0x61, 0x73, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64,
	0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x70, 0x75, 0x64,
	0x65, 0x66, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x42, 0x72, 0x61, 0x73, 0x48, 0x6f,
	0x73, 0x74, 0x43, 0x61, 0x72, 0x73, 0x2e, 0x42, 0x72, 0x61, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x43,
	0x61, 0x72, 0x52, 0x0d, 0x62, 0x72, 0x61, 0x73, 0x2d, 0x68, 0x6f, 0x73, 0x74, 0x2d, 0x63, 0x61,
	0x72, 0x1a, 0xe3, 0x06, 0x0a, 0x0b, 0x42, 0x72, 0x61, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x61,
	0x72, 0x12, 0x64, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x50, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65,
	0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x70, 0x75, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x44,
	0x65, 0x76, 0x6d, 0x2e, 0x42, 0x72, 0x61, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x72, 0x73,
	0x2e, 0x42, 0x72, 0x61, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x72, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x75, 0x0a, 0x0a, 0x72, 0x61, 0x74, 0x65, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c,
	0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x2e, 0x43, 0x70, 0x75, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x76, 0x6d, 0x2e,
	0x42, 0x72, 0x61, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x72, 0x73, 0x2e, 0x42, 0x72, 0x61,
	0x73, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x72, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x52, 0x0a, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x6d,
	0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x53, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65,
	0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x70, 0x75, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x44,
	0x65, 0x76, 0x6d, 0x2e, 0x42, 0x72, 0x61, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x72, 0x73,
	0x2e, 0x42, 0x72, 0x61, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x72, 0x2e, 0x4c, 0x6f, 0x67,
	0x67, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x7e, 0x0a,
	0x0d, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65,
	0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x70, 0x75, 0x64, 0x65,
	0x66, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x42, 0x72, 0x61, 0x73, 0x48, 0x6f, 0x73,
	0x74, 0x43, 0x61, 0x72, 0x73, 0x2e, 0x42, 0x72, 0x61, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x61,
	0x72, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x52, 0x0d,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x2d, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x1a, 0x83, 0x01,
	0x0a, 0x09, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x63,
	0x69, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x63, 0x69, 0x72, 0x12, 0x10, 0x0a,
	0x03, 0x63, 0x62, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x63, 0x62, 0x73, 0x12,
	0x10, 0x0a, 0x03, 0x70, 0x69, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x69,
	0x72, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x62, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x70, 0x62, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x6a, 0x75,
	0x73, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x61, 0x75, 0x74, 0x6f, 0x2d, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x2d, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x1a, 0x53, 0x0a, 0x07, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x11, 0x64, 0x69,
	0x73, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x2d, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x1a, 0x40, 0x0a, 0x0c, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x6b, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x64, 0x72, 0x6f, 0x70,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x72, 0x61, 0x74, 0x65,
	0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22, 0x6b, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e,
	0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12,
	0x12, 0x0a, 0x0e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x58, 0x5f, 0x43, 0x41,
	0x52, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x48, 0x54, 0x54, 0x50,
	0x58, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x58, 0x5f, 0x43, 0x41, 0x52, 0x10, 0x02, 0x12, 0x18, 0x0a,
	0x14, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x56, 0x4c, 0x41, 0x4e, 0x58, 0x5f, 0x48, 0x4f, 0x53, 0x54,
	0x58, 0x5f, 0x43, 0x41, 0x52, 0x10, 0x03, 0x1a, 0x83, 0x07, 0x0a, 0x07, 0x53, 0x70, 0x75, 0x43,
	0x61, 0x72, 0x73, 0x12, 0x5b, 0x0a, 0x07, 0x73, 0x70, 0x75, 0x5f, 0x63, 0x61, 0x72, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65,
	0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x70, 0x75, 0x64, 0x65,
	0x66, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x53, 0x70, 0x75, 0x43, 0x61, 0x72, 0x73,
	0x2e, 0x53, 0x70, 0x75, 0x43, 0x61, 0x72, 0x52, 0x07, 0x73, 0x70, 0x75, 0x2d, 0x63, 0x61, 0x72,
	0x1a, 0x9a, 0x06, 0x0a, 0x06, 0x53, 0x70, 0x75, 0x43, 0x61, 0x72, 0x12, 0x65, 0x0a, 0x08, 0x63,
	0x61, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x49, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d,
	0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x2e, 0x43, 0x70, 0x75, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x76,
	0x6d, 0x2e, 0x53, 0x70, 0x75, 0x43, 0x61, 0x72, 0x73, 0x2e, 0x53, 0x70, 0x75, 0x43, 0x61, 0x72,
	0x2e, 0x43, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x63, 0x61, 0x72, 0x2d, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x63, 0x69, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x62, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x63, 0x62, 0x73, 0x22, 0x84, 0x05, 0x0a, 0x07, 0x43, 0x61, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e,
	0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x43, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x43,
	0x4d, 0x50, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x54, 0x43, 0x50, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x55, 0x44, 0x50, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x61, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x47, 0x52, 0x45, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x61, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x42, 0x47, 0x50, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x61, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x06, 0x12, 0x11, 0x0a,
	0x0d, 0x43, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x10, 0x07,
	0x12, 0x1b, 0x0a, 0x17, 0x43, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x4b, 0x45, 0x58,
	0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x58, 0x5f, 0x43, 0x41, 0x52, 0x10, 0x08, 0x12, 0x1c, 0x0a,
	0x18, 0x43, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x4b, 0x45, 0x58, 0x5f, 0x54, 0x55,
	0x4e, 0x4e, 0x45, 0x4c, 0x58, 0x5f, 0x43, 0x41, 0x52, 0x10, 0x09, 0x12, 0x1b, 0x0a, 0x17, 0x43,
	0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x4c, 0x41, 0x49, 0x4e, 0x58, 0x5f, 0x53, 0x41,
	0x58, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x10, 0x0a, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x61, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x43, 0x49, 0x50, 0x48, 0x45, 0x52, 0x58, 0x5f, 0x53, 0x41, 0x58, 0x5f,
	0x4d, 0x49, 0x53, 0x53, 0x10, 0x0b, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x61, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x49, 0x50, 0x53, 0x45, 0x43, 0x58, 0x5f, 0x52, 0x45, 0x4b, 0x45, 0x59, 0x10, 0x0c,
	0x12, 0x14, 0x0a, 0x10, 0x43, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x4b, 0x45, 0x58,
	0x5f, 0x44, 0x50, 0x44, 0x10, 0x0d, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x61, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x46, 0x41, 0x53, 0x54, 0x58, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x10,
	0x0e, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x46, 0x44,
	0x58, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x0f, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x61, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x50, 0x53, 0x54, 0x10, 0x10, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x61, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x53, 0x4c, 0x49, 0x54, 0x45, 0x58, 0x5f, 0x50, 0x52, 0x49,
	0x56, 0x41, 0x54, 0x45, 0x58, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x10, 0x11, 0x12, 0x16, 0x0a, 0x12,
	0x43, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x50, 0x58, 0x5f, 0x4f, 0x50, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x12, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x4d, 0x54, 0x55, 0x58, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x10, 0x13, 0x12, 0x15, 0x0a,
	0x11, 0x43, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x47, 0x4e, 0x58, 0x5f, 0x49, 0x43,
	0x4d, 0x50, 0x10, 0x14, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x43, 0x47, 0x4e, 0x58, 0x5f, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x10, 0x15, 0x12, 0x1c, 0x0a,
	0x18, 0x43, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x47, 0x4e, 0x58, 0x5f, 0x49, 0x50,
	0x56, 0x34, 0x58, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x16, 0x12, 0x1c, 0x0a, 0x18, 0x43,
	0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x47, 0x4e, 0x58, 0x5f, 0x49, 0x50, 0x56, 0x36,
	0x58, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x17, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x61, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x47, 0x4e, 0x58, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x58, 0x5f,
	0x52, 0x41, 0x57, 0x10, 0x18, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x43, 0x47, 0x4e, 0x58, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x10, 0x19, 0x1a, 0xde, 0x01,
	0x0a, 0x0a, 0x41, 0x72, 0x70, 0x56, 0x6c, 0x61, 0x6e, 0x43, 0x61, 0x72, 0x12, 0x28, 0x0a, 0x0f,
	0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x2d, 0x64, 0x72, 0x6f,
	0x70, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x69, 0x0a, 0x0b, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f,
	0x32, 0x5f, 0x63, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c,
	0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x2e, 0x43, 0x70, 0x75, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x76, 0x6d, 0x2e,
	0x41, 0x72, 0x70, 0x56, 0x6c, 0x61, 0x6e, 0x43, 0x61, 0x72, 0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x32, 0x43, 0x61, 0x72, 0x52, 0x0b, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2d, 0x32, 0x2d, 0x63, 0x61,
	0x72, 0x1a, 0x3b, 0x0a, 0x09, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x43, 0x61, 0x72, 0x12, 0x2e,
	0x0a, 0x12, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x72, 0x61, 0x74, 0x65,
	0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2d, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x1a, 0xa2,
	0x08, 0x0a, 0x09, 0x4e, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x43, 0x61, 0x72, 0x12, 0x77, 0x0a, 0x10,
	0x6e, 0x64, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f,
	0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x70, 0x75,
	0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4e, 0x64, 0x56, 0x6c, 0x61,
	0x6e, 0x43, 0x61, 0x72, 0x2e, 0x4e, 0x64, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x41, 0x6c, 0x61,
	0x72, 0x6d, 0x73, 0x52, 0x10, 0x6e, 0x64, 0x2d, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x2d, 0x61,
	0x6c, 0x61, 0x72, 0x6d, 0x73, 0x12, 0x6b, 0x0a, 0x0c, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x32,
	0x5f, 0x63, 0x61, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c,
	0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x2e, 0x43, 0x70, 0x75, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x76, 0x6d, 0x2e,
	0x4e, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x43, 0x61, 0x72, 0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x32,
	0x43, 0x61, 0x72, 0x73, 0x52, 0x0c, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2d, 0x32, 0x2d, 0x63, 0x61,
	0x72, 0x73, 0x1a, 0xa0, 0x03, 0x0a, 0x0e, 0x4e, 0x64, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x41,
	0x6c, 0x61, 0x72, 0x6d, 0x73, 0x12, 0x83, 0x01, 0x0a, 0x0f, 0x6e, 0x64, 0x5f, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x6b, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x59, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65,
	0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x70, 0x75, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x44,
	0x65, 0x76, 0x6d, 0x2e, 0x4e, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x43, 0x61, 0x72, 0x2e, 0x4e, 0x64,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x2e, 0x4e, 0x64, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x6b, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x52, 0x0f, 0x6e, 0x64, 0x2d, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x6b, 0x2d, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x1a, 0x87, 0x02, 0x0a, 0x0d,
	0x4e, 0x64, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x72, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5e, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c,
	0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x2e, 0x43, 0x70, 0x75, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x76, 0x6d, 0x2e,
	0x4e, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x43, 0x61, 0x72, 0x2e, 0x4e, 0x64, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x6b, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x2e, 0x4e, 0x64, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x6b, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x2d, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x5e, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a,
	0x17, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41,
	0x4c, 0x55, 0x45, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x4e, 0x41, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x4e, 0x53, 0x58, 0x5f, 0x55, 0x4e, 0x49, 0x43, 0x41, 0x53, 0x54, 0x10, 0x02, 0x12, 0x16, 0x0a,
	0x12, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x53, 0x58, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x43,
	0x41, 0x53, 0x54, 0x10, 0x03, 0x1a, 0x8b, 0x03, 0x0a, 0x0a, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x32,
	0x43, 0x61, 0x72, 0x73, 0x12, 0x73, 0x0a, 0x0b, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x32, 0x5f,
	0x63, 0x61, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e,
	0x43, 0x70, 0x75, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4e, 0x64,
	0x56, 0x6c, 0x61, 0x6e, 0x43, 0x61, 0x72, 0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x43, 0x61,
	0x72, 0x73, 0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x43, 0x61, 0x72, 0x52, 0x0b, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x2d, 0x32, 0x2d, 0x63, 0x61, 0x72, 0x1a, 0x87, 0x02, 0x0a, 0x09, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x32, 0x43, 0x61, 0x72, 0x12, 0x6a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x56, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64,
	0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x70, 0x75, 0x64,
	0x65, 0x66, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4e, 0x64, 0x56, 0x6c, 0x61, 0x6e,
	0x43, 0x61, 0x72, 0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x43, 0x61, 0x72, 0x73, 0x2e, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x32, 0x43, 0x61, 0x72, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x12, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2d, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x22, 0x5e, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55,
	0x45, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x4e, 0x41, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x53,
	0x58, 0x5f, 0x55, 0x4e, 0x49, 0x43, 0x41, 0x53, 0x54, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x4e, 0x53, 0x58, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x43, 0x41, 0x53,
	0x54, 0x10, 0x03, 0x1a, 0xa2, 0x03, 0x0a, 0x06, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x12, 0x52,
	0x0a, 0x09, 0x6c, 0x33, 0x5f, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e,
	0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c,
	0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x4c,
	0x33, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x09, 0x6c, 0x33, 0x2d, 0x63, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x1a, 0xc3, 0x02, 0x0a, 0x08, 0x4c, 0x33, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12,
	0x58, 0x0a, 0x08, 0x6c, 0x33, 0x5f, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e,
	0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c,
	0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x4c,
	0x33, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x4c, 0x33, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x52,
	0x08, 0x6c, 0x33, 0x2d, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x1a, 0xdc, 0x01, 0x0a, 0x07, 0x4c, 0x33,
	0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x2d, 0x69,
	0x64, 0x12, 0x71, 0x0a, 0x0e, 0x6c, 0x33, 0x5f, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x49, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e,
	0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x33, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e,
	0x4c, 0x33, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x4c, 0x33, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x6c, 0x33, 0x2d, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x2d, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x22, 0x42, 0x0a, 0x0c, 0x4c, 0x33, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x4c, 0x33, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x41, 0x42, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x00, 0x12,
	0x17, 0x0a, 0x13, 0x4c, 0x33, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x01, 0x1a, 0x95, 0x01, 0x0a, 0x0b, 0x43, 0x6d, 0x61,
	0x63, 0x50, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x52, 0x0a, 0x07, 0x70, 0x61, 0x64, 0x64,
	0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e,
	0x43, 0x6d, 0x61, 0x63, 0x50, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x64, 0x64,
	0x69, 0x6e, 0x67, 0x52, 0x07, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x32, 0x0a, 0x07,
	0x50, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x61, 0x64, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e,
	0x50, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01,
	0x1a, 0x97, 0x04, 0x0a, 0x03, 0x46, 0x69, 0x6d, 0x12, 0x58, 0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76,
	0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x2e, 0x46, 0x69, 0x6d, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x2d, 0x6d, 0x6f,
	0x64, 0x65, 0x12, 0x63, 0x0a, 0x10, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e,
	0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x2e, 0x46, 0x69, 0x6d, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x4d, 0x69, 0x73, 0x73, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x10, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x6d, 0x69, 0x73, 0x73,
	0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x63, 0x61, 0x6e, 0x5f,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x63,
	0x61, 0x6e, 0x2d, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x70, 0x75,
	0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x63, 0x70, 0x75, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x70, 0x75, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x70, 0x75, 0x2d, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x70, 0x75, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x70, 0x75, 0x2d, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x40, 0x0a, 0x0b, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x14, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x4c, 0x4f,
	0x4f, 0x50, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x54, 0x48, 0x52, 0x4f, 0x55, 0x47, 0x48, 0x10,
	0x01, 0x22, 0x47, 0x0a, 0x0e, 0x56, 0x6c, 0x61, 0x6e, 0x4d, 0x69, 0x73, 0x73, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x56, 0x6c, 0x61, 0x6e, 0x4d, 0x69, 0x73, 0x73, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12,
	0x19, 0x0a, 0x15, 0x56, 0x6c, 0x61, 0x6e, 0x4d, 0x69, 0x73, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x89, 0x01, 0x0a, 0x17, 0x4d,
	0x61, 0x63, 0x6d, 0x74, 0x75, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x74, 0x75, 0x5f, 0x69, 0x70,
	0x76, 0x34, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x74, 0x75, 0x2d, 0x69, 0x70,
	0x76, 0x34, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x74, 0x75, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x74, 0x75, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x12, 0x1a,
	0x0a, 0x08, 0x6d, 0x61, 0x63, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x6d, 0x61, 0x63, 0x2d, 0x69, 0x70, 0x76, 0x34, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61,
	0x63, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x61,
	0x63, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x1a, 0x52, 0x0a, 0x0c, 0x56, 0x65, 0x4d, 0x61, 0x63, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x32, 0x5f, 0x76, 0x65, 0x5f,
	0x6d, 0x61, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x32, 0x2d, 0x76, 0x65,
	0x2d, 0x6d, 0x61, 0x63, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x76,
	0x65, 0x5f, 0x6d, 0x61, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x76, 0x65, 0x2d, 0x6d, 0x61, 0x63, 0x1a, 0xa4, 0x01, 0x0a, 0x0f, 0x46,
	0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x12, 0x7b,
	0x0a, 0x14, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e,
	0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63, 0x46, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x14, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x66, 0x6c, 0x6f, 0x77,
	0x73, 0x70, 0x65, 0x63, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0x14, 0x0a, 0x12, 0x49,
	0x70, 0x76, 0x36, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x1a, 0x43, 0x0a, 0x19, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50,
	0x6c, 0x61, 0x6e, 0x65, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x26,
	0x0a, 0x0e, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x6c, 0x6f, 0x74, 0x2d, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2d, 0x69, 0x64, 0x1a, 0x91, 0x04, 0x0a, 0x15, 0x4c, 0x69, 0x6e, 0x6b, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x53, 0x0a, 0x04, 0x6c, 0x6c, 0x64, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76,
	0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x52,
	0x04, 0x6c, 0x6c, 0x64, 0x70, 0x12, 0x53, 0x0a, 0x04, 0x6c, 0x61, 0x63, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76,
	0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e,
	0x4c, 0x61, 0x63, 0x70, 0x52, 0x04, 0x6c, 0x61, 0x63, 0x70, 0x12, 0x50, 0x0a, 0x03, 0x6f, 0x61,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4c, 0x69,
	0x6e, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x2e, 0x4f, 0x61, 0x6d, 0x52, 0x03, 0x6f, 0x61, 0x6d, 0x12, 0x53, 0x0a, 0x04,
	0x65, 0x73, 0x6d, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70,
	0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x45, 0x73, 0x6d, 0x63, 0x52, 0x04, 0x65, 0x73, 0x6d,
	0x63, 0x22, 0x29, 0x0a, 0x04, 0x4c, 0x6c, 0x64, 0x70, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x6c, 0x64,
	0x70, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4c,
	0x6c, 0x64, 0x70, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x22, 0x29, 0x0a, 0x04,
	0x4c, 0x61, 0x63, 0x70, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x61, 0x63, 0x70, 0x5f, 0x44, 0x49, 0x53,
	0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x61, 0x63, 0x70, 0x5f, 0x45,
	0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x22, 0x26, 0x0a, 0x03, 0x4f, 0x61, 0x6d, 0x12, 0x0f,
	0x0a, 0x0b, 0x4f, 0x61, 0x6d, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12,
	0x0e, 0x0a, 0x0a, 0x4f, 0x61, 0x6d, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x22,
	0x29, 0x0a, 0x04, 0x45, 0x73, 0x6d, 0x63, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x73, 0x6d, 0x63, 0x5f,
	0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x73, 0x6d,
	0x63, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0xd3, 0x18, 0x0a, 0x0b, 0x4c,
	0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x66, 0x0a, 0x0e, 0x64, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d,
	0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x41, 0x64, 0x6a, 0x75,
	0x73, 0x74, 0x52, 0x0e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2d, 0x61, 0x64, 0x6a, 0x75,
	0x73, 0x74, 0x12, 0x69, 0x0a, 0x0f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x61, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x65, 0x74, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c,
	0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x48, 0x61,
	0x73, 0x68, 0x41, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x52, 0x0f, 0x68, 0x61,
	0x73, 0x68, 0x2d, 0x61, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x12, 0x5d, 0x0a,
	0x0b, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d,
	0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52,
	0x0b, 0x68, 0x61, 0x73, 0x68, 0x2d, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x57, 0x0a, 0x09,
	0x68, 0x61, 0x73, 0x68, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x39, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65,
	0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x53, 0x65, 0x65, 0x64, 0x52, 0x09, 0x68, 0x61, 0x73, 0x68,
	0x2d, 0x73, 0x65, 0x65, 0x64, 0x12, 0x60, 0x0a, 0x0c, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c,
	0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x48, 0x61,
	0x73, 0x68, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x65, 0x52, 0x0c, 0x68, 0x61, 0x73, 0x68, 0x2d,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x65, 0x12, 0x4c, 0x0a, 0x05, 0x68, 0x61, 0x73, 0x68, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f,
	0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4c, 0x6f, 0x61,
	0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x73, 0x52, 0x05,
	0x68, 0x61, 0x73, 0x68, 0x73, 0x1a, 0x27, 0x0a, 0x0d, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0xfd,
	0x02, 0x0a, 0x0e, 0x48, 0x61, 0x73, 0x68, 0x41, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69,
	0x63, 0x12, 0x6a, 0x0a, 0x0a, 0x61, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64,
	0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4c, 0x6f, 0x61, 0x64,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x41, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x2e, 0x41, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69,
	0x63, 0x52, 0x0a, 0x61, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x12, 0x2a, 0x0a,
	0x10, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x66, 0x6c, 0x61,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x2d,
	0x68, 0x61, 0x73, 0x68, 0x2d, 0x66, 0x6c, 0x61, 0x67, 0x22, 0xd2, 0x01, 0x0a, 0x0a, 0x41, 0x72,
	0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x41,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x5f, 0x41, 0x52, 0x49, 0x54, 0x48, 0x4d,
	0x45, 0x54, 0x49, 0x43, 0x31, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x65, 0x74, 0x69, 0x63, 0x5f, 0x41, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x45, 0x54, 0x49, 0x43,
	0x32, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69,
	0x63, 0x5f, 0x41, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x45, 0x54, 0x49, 0x43, 0x33, 0x10, 0x03, 0x12,
	0x1a, 0x0a, 0x16, 0x41, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x5f, 0x41, 0x52,
	0x49, 0x54, 0x48, 0x4d, 0x45, 0x54, 0x49, 0x43, 0x34, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x41,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x5f, 0x41, 0x52, 0x49, 0x54, 0x48, 0x4d,
	0x45, 0x54, 0x49, 0x43, 0x35, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x65, 0x74, 0x69, 0x63, 0x5f, 0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x10, 0x06, 0x1a, 0x86,
	0x06, 0x0a, 0x0a, 0x48, 0x61, 0x73, 0x68, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x65, 0x0a,
	0x0a, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x45, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e,
	0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c,
	0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e, 0x48,
	0x61, 0x73, 0x68, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x0a, 0x68, 0x61, 0x73, 0x68, 0x2d, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x1a, 0x90, 0x05, 0x0a, 0x09, 0x48, 0x61, 0x73, 0x68, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x6f, 0x0a, 0x0a, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x5f, 0x65, 0x63, 0x6d, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f,
	0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4c, 0x6f, 0x61,
	0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x54, 0x72,
	0x75, 0x6e, 0x6b, 0x45, 0x63, 0x6d, 0x70, 0x52, 0x0a, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x2d, 0x65,
	0x63, 0x6d, 0x70, 0x12, 0x6a, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64,
	0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4c, 0x6f, 0x61, 0x64,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x4d, 0x61, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x22,
	0xe6, 0x01, 0x0a, 0x09, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x45, 0x63, 0x6d, 0x70, 0x12, 0x20, 0x0a,
	0x1c, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41,
	0x4c, 0x55, 0x45, 0x5f, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x45, 0x63, 0x6d, 0x70, 0x10, 0x00, 0x12,
	0x10, 0x0a, 0x0c, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x45, 0x63, 0x6d, 0x70, 0x5f, 0x49, 0x50, 0x10,
	0x05, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x45, 0x63, 0x6d, 0x70, 0x5f, 0x4d,
	0x41, 0x43, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x45, 0x63, 0x6d,
	0x70, 0x5f, 0x56, 0x4c, 0x4c, 0x10, 0x07, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x72, 0x75, 0x6e, 0x6b,
	0x45, 0x63, 0x6d, 0x70, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x58, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x10, 0x08, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x45, 0x63, 0x6d, 0x70,
	0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x58, 0x5f, 0x49, 0x4e, 0x4e, 0x45, 0x52, 0x58, 0x5f,
	0x49, 0x50, 0x10, 0x09, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x45, 0x63, 0x6d,
	0x70, 0x5f, 0x47, 0x54, 0x50, 0x10, 0x0a, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x72, 0x75, 0x6e, 0x6b,
	0x45, 0x63, 0x6d, 0x70, 0x5f, 0x46, 0x45, 0x43, 0x10, 0x0b, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x72,
	0x75, 0x6e, 0x6b, 0x45, 0x63, 0x6d, 0x70, 0x5f, 0x47, 0x54, 0x50, 0x58, 0x5f, 0x49, 0x4e, 0x4e,
	0x45, 0x52, 0x58, 0x5f, 0x49, 0x50, 0x10, 0x0c, 0x22, 0xbc, 0x01, 0x0a, 0x08, 0x4d, 0x61, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x4d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x5f, 0x4c, 0x32, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x61, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x5f, 0x4c, 0x33, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x5f, 0x4c, 0x34, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x61, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x55, 0x4e, 0x44, 0x4f, 0x58, 0x5f, 0x44, 0x49, 0x53, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x4d,
	0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x58, 0x5f, 0x49,
	0x50, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f,
	0x4c, 0x41, 0x42, 0x45, 0x4c, 0x10, 0x07, 0x1a, 0x4e, 0x0a, 0x08, 0x48, 0x61, 0x73, 0x68, 0x53,
	0x65, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x66, 0x6c,
	0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d,
	0x2d, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f,
	0x73, 0x65, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x2d, 0x73, 0x65, 0x65, 0x64, 0x1a, 0xbc, 0x01, 0x0a, 0x0b, 0x48, 0x61, 0x73, 0x68,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x65, 0x12, 0x6c, 0x0a, 0x0c, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x48, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d,
	0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x48, 0x61, 0x73, 0x68, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x65, 0x2e, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x0c, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x65,
	0x2d, 0x66, 0x6c, 0x61, 0x67, 0x22, 0x3f, 0x0a, 0x0b, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x65,
	0x46, 0x6c, 0x61, 0x67, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x65, 0x46,
	0x6c, 0x61, 0x67, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x13,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x5f, 0x44, 0x49, 0x53, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0xff, 0x01, 0x1a, 0xc7, 0x08, 0x0a, 0x05, 0x48, 0x61, 0x73, 0x68, 0x73,
	0x12, 0x4f, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76,
	0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x48, 0x61, 0x73, 0x68, 0x73, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x1a, 0xec, 0x07, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x12, 0x54, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4c,
	0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x73,
	0x2e, 0x48, 0x61, 0x73, 0x68, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x65, 0x0a, 0x0a, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x5f, 0x65, 0x63, 0x6d, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x45, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65,
	0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x73, 0x2e, 0x48, 0x61, 0x73,
	0x68, 0x2e, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x45, 0x63, 0x6d, 0x70, 0x52, 0x0a, 0x74, 0x72, 0x75,
	0x6e, 0x6b, 0x2d, 0x65, 0x63, 0x6d, 0x70, 0x12, 0x66, 0x0a, 0x0a, 0x61, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x65, 0x74, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x46, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c,
	0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x48, 0x61,
	0x73, 0x68, 0x73, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x2e, 0x41, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65,
	0x74, 0x69, 0x63, 0x52, 0x0a, 0x61, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x12,
	0x12, 0x0a, 0x04, 0x62, 0x6f, 0x78, 0x31, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62,
	0x6f, 0x78, 0x31, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x78, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x62, 0x6f, 0x78, 0x32, 0x12, 0x60, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x44, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e,
	0x4c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x48, 0x61, 0x73, 0x68,
	0x73, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x52,
	0x08, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x61, 0x6e,
	0x64, 0x6f, 0x6d, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x2d, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2d, 0x73, 0x65, 0x65, 0x64, 0x22, 0x66, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x79, 0x70, 0x65,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x4f, 0x58, 0x10, 0x01,
	0x12, 0x0d, 0x0a, 0x09, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x45, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x13, 0x0a, 0x0f, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x41, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x45, 0x54,
	0x49, 0x43, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x49, 0x45,
	0x4c, 0x44, 0x53, 0x10, 0x04, 0x22, 0xad, 0x01, 0x0a, 0x09, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x45,
	0x63, 0x6d, 0x70, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x45, 0x63, 0x6d, 0x70,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x72,
	0x75, 0x6e, 0x6b, 0x45, 0x63, 0x6d, 0x70, 0x5f, 0x45, 0x43, 0x4d, 0x50, 0x31, 0x10, 0x01, 0x12,
	0x13, 0x0a, 0x0f, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x45, 0x63, 0x6d, 0x70, 0x5f, 0x45, 0x43, 0x4d,
	0x50, 0x32, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x45, 0x63, 0x6d,
	0x70, 0x5f, 0x54, 0x52, 0x55, 0x4e, 0x4b, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x72, 0x75,
	0x6e, 0x6b, 0x45, 0x63, 0x6d, 0x70, 0x5f, 0x45, 0x43, 0x4d, 0x50, 0x10, 0x04, 0x12, 0x10, 0x0a,
	0x0c, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x45, 0x63, 0x6d, 0x70, 0x5f, 0x49, 0x50, 0x10, 0x05, 0x12,
	0x11, 0x0a, 0x0d, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x45, 0x63, 0x6d, 0x70, 0x5f, 0x4d, 0x41, 0x43,
	0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x45, 0x63, 0x6d, 0x70, 0x5f,
	0x56, 0x4c, 0x4c, 0x10, 0x07, 0x22, 0x83, 0x01, 0x0a, 0x0a, 0x41, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x65, 0x74, 0x69, 0x63, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x65, 0x74, 0x69, 0x63, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x65, 0x74, 0x69, 0x63, 0x5f, 0x41, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x45, 0x54, 0x49, 0x43,
	0x31, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69,
	0x63, 0x5f, 0x41, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x45, 0x54, 0x49, 0x43, 0x32, 0x10, 0x02, 0x12,
	0x1a, 0x0a, 0x16, 0x41, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x5f, 0x41, 0x52,
	0x49, 0x54, 0x48, 0x4d, 0x45, 0x54, 0x49, 0x43, 0x33, 0x10, 0x03, 0x22, 0x53, 0x0a, 0x08, 0x4d,
	0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x61, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a,
	0x0b, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x4c, 0x32, 0x10, 0x01, 0x12, 0x0f,
	0x0a, 0x0b, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x4c, 0x33, 0x10, 0x02, 0x12,
	0x0f, 0x0a, 0x0b, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x4c, 0x34, 0x10, 0x03,
	0x1a, 0x21, 0x0a, 0x07, 0x4d, 0x61, 0x63, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x1a, 0xb7, 0x0a, 0x0a, 0x06, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x5b,
	0x0a, 0x0c, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65,
	0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4d, 0x69, 0x72, 0x72, 0x6f,
	0x72, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x52, 0x0c, 0x73,
	0x6c, 0x6f, 0x74, 0x2d, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x12, 0x6c, 0x0a, 0x12, 0x72,
	0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4d, 0x69,
	0x72, 0x72, 0x6f, 0x72, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x12, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x2d, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x64, 0x0a, 0x0f, 0x6f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d,
	0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x2e,
	0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0f,
	0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x2d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x1a,
	0x33, 0x0a, 0x0b, 0x53, 0x6c, 0x6f, 0x74, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x2d, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x1a, 0x32, 0x0a, 0x10, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x61, 0x74, 0x65,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x61,
	0x74, 0x65, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x92, 0x07, 0x0a, 0x0e, 0x4f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x70, 0x0a, 0x0e, 0x6f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76,
	0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72,
	0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e,
	0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0e, 0x6f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x2d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x8d, 0x06,
	0x0a, 0x0d, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x1c, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2d, 0x69, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x70, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x72, 0x63, 0x2d, 0x69, 0x70, 0x61, 0x64, 0x64, 0x72, 0x12, 0x28, 0x0a,
	0x0f, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x70, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x72, 0x63, 0x2d, 0x69, 0x70, 0x61, 0x64,
	0x64, 0x72, 0x2d, 0x6d, 0x61, 0x73, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x73, 0x74, 0x5f, 0x69,
	0x70, 0x61, 0x64, 0x64, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x73, 0x74,
	0x2d, 0x69, 0x70, 0x61, 0x64, 0x64, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x73, 0x74, 0x5f, 0x69,
	0x70, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x64, 0x73, 0x74, 0x2d, 0x69, 0x70, 0x61, 0x64, 0x64, 0x72, 0x2d, 0x6d, 0x61, 0x73,
	0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x72, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x72, 0x63, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x64, 0x73, 0x74, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x72, 0x63,
	0x5f, 0x6d, 0x61, 0x63, 0x61, 0x64, 0x64, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x72, 0x63, 0x2d, 0x6d, 0x61, 0x63, 0x61, 0x64, 0x64, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x70,
	0x70, 0x70, 0x6f, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x70, 0x70, 0x70, 0x6f, 0x65, 0x2d, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x73, 0x74, 0x5f, 0x6d,
	0x61, 0x63, 0x61, 0x64, 0x64, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x73,
	0x74, 0x2d, 0x6d, 0x61, 0x63, 0x61, 0x64, 0x64, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x6c, 0x61,
	0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x76, 0x6c, 0x61, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x65, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x65, 0x74, 0x68, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x7b, 0x0a, 0x11, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x70, 0x70, 0x70, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x59, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65,
	0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4d, 0x69, 0x72, 0x72, 0x6f,
	0x72, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x70, 0x70, 0x48,
	0x00, 0x52, 0x03, 0x70, 0x70, 0x70, 0x12, 0x78, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x58, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44,
	0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70,
	0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x4f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x4f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x70, 0x48, 0x00, 0x52, 0x02, 0x69, 0x70,
	0x1a, 0x36, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x50, 0x70, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x70, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x70, 0x70, 0x2d,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x1a, 0x33, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x69,
	0x70, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x69, 0x70, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x42, 0x0e, 0x0a,
	0x0c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x1a, 0xa2, 0x08,
	0x0a, 0x0b, 0x4d, 0x70, 0x6c, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x12, 0x65, 0x0a,
	0x0e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64,
	0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4d, 0x70, 0x6c, 0x73,
	0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x48, 0x61, 0x73, 0x68,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0e, 0x6d, 0x70, 0x6c, 0x73, 0x2d, 0x68, 0x61, 0x73, 0x68, 0x2d,
	0x6d, 0x6f, 0x64, 0x65, 0x12, 0x58, 0x0a, 0x09, 0x6d, 0x70, 0x6c, 0x73, 0x66, 0x72, 0x61, 0x67,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4d, 0x70,
	0x6c, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x66, 0x72,
	0x61, 0x67, 0x73, 0x52, 0x09, 0x6d, 0x70, 0x6c, 0x73, 0x66, 0x72, 0x61, 0x67, 0x73, 0x12, 0x71,
	0x0a, 0x12, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x63, 0x74, 0x72, 0x77,
	0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70,
	0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x4d, 0x70, 0x6c,
	0x73, 0x4c, 0x6f, 0x61, 0x64, 0x43, 0x74, 0x72, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x12, 0x6d,
	0x70, 0x6c, 0x73, 0x2d, 0x6c, 0x6f, 0x61, 0x64, 0x2d, 0x63, 0x74, 0x72, 0x77, 0x6f, 0x72, 0x64,
	0x73, 0x1a, 0x85, 0x02, 0x0a, 0x0c, 0x4d, 0x70, 0x6c, 0x73, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x5f, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x68, 0x63, 0x66, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x45, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76,
	0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x6f,
	0x64, 0x65, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x63, 0x66, 0x67, 0x52, 0x07, 0x68, 0x61, 0x73, 0x68,
	0x63, 0x66, 0x67, 0x22, 0x93, 0x01, 0x0a, 0x07, 0x48, 0x61, 0x73, 0x68, 0x63, 0x66, 0x67, 0x12,
	0x1e, 0x0a, 0x1a, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f,
	0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x48, 0x61, 0x73, 0x68, 0x63, 0x66, 0x67, 0x10, 0x00, 0x12,
	0x1b, 0x0a, 0x17, 0x48, 0x61, 0x73, 0x68, 0x63, 0x66, 0x67, 0x5f, 0x50, 0x41, 0x59, 0x4c, 0x4f,
	0x41, 0x44, 0x58, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x10, 0x40, 0x12, 0x0f, 0x0a, 0x0a,
	0x48, 0x61, 0x73, 0x68, 0x63, 0x66, 0x67, 0x5f, 0x49, 0x50, 0x10, 0xa0, 0x01, 0x12, 0x12, 0x0a,
	0x0d, 0x48, 0x61, 0x73, 0x68, 0x63, 0x66, 0x67, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x10, 0xc0,
	0x01, 0x12, 0x14, 0x0a, 0x0f, 0x48, 0x61, 0x73, 0x68, 0x63, 0x66, 0x67, 0x5f, 0x49, 0x50, 0x58,
	0x5f, 0x54, 0x4f, 0x53, 0x10, 0xc1, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x48, 0x61, 0x73, 0x68, 0x63,
	0x66, 0x67, 0x5f, 0x4d, 0x41, 0x43, 0x10, 0xc4, 0x01, 0x1a, 0xc9, 0x01, 0x0a, 0x09, 0x4d, 0x70,
	0x6c, 0x73, 0x66, 0x72, 0x61, 0x67, 0x73, 0x12, 0x73, 0x0a, 0x0f, 0x6d, 0x70, 0x6c, 0x73, 0x66,
	0x72, 0x61, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x49, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44,
	0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70,
	0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x66, 0x72, 0x61, 0x67, 0x73, 0x2e, 0x4d, 0x70, 0x6c,
	0x73, 0x66, 0x72, 0x61, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0f, 0x6d, 0x70, 0x6c,
	0x73, 0x66, 0x72, 0x61, 0x67, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x47, 0x0a, 0x0e,
	0x4d, 0x70, 0x6c, 0x73, 0x66, 0x72, 0x61, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a,
	0x0a, 0x16, 0x4d, 0x70, 0x6c, 0x73, 0x66, 0x72, 0x61, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x70,
	0x6c, 0x73, 0x66, 0x72, 0x61, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x45, 0x4e, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x8a, 0x02, 0x0a, 0x10, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x6f,
	0x61, 0x64, 0x43, 0x74, 0x72, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x94, 0x01, 0x0a, 0x18, 0x6d,
	0x70, 0x6c, 0x73, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x63, 0x74, 0x72, 0x77, 0x6f, 0x72, 0x64, 0x5f,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x58, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d,
	0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x2e,
	0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x6f, 0x61, 0x64, 0x43, 0x74, 0x72, 0x77, 0x6f, 0x72, 0x64, 0x73,
	0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x74, 0x72, 0x77, 0x6f, 0x72, 0x64,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x18, 0x6d, 0x70, 0x6c, 0x73, 0x6c, 0x6f, 0x61,
	0x64, 0x2d, 0x63, 0x74, 0x72, 0x77, 0x6f, 0x72, 0x64, 0x2d, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x22, 0x5f, 0x0a, 0x16, 0x4d, 0x70, 0x6c, 0x73, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x74, 0x72,
	0x77, 0x6f, 0x72, 0x64, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x4d,
	0x70, 0x6c, 0x73, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x74, 0x72, 0x77, 0x6f, 0x72, 0x64, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12,
	0x21, 0x0a, 0x1d, 0x4d, 0x70, 0x6c, 0x73, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x74, 0x72, 0x77, 0x6f,
	0x72, 0x64, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x01, 0x1a, 0xa6, 0x0e, 0x0a, 0x09, 0x4e, 0x65, 0x74, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x12, 0x61, 0x0a, 0x0d, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4e, 0x65,
	0x74, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x4d,
	0x6f, 0x64, 0x65, 0x73, 0x52, 0x0d, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2d, 0x6d, 0x6f,
	0x64, 0x65, 0x73, 0x12, 0x61, 0x0a, 0x0d, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70,
	0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x2e, 0x4e, 0x65, 0x74, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x53, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0d, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x5e, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e,
	0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x2e, 0x4e, 0x65, 0x74, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x2d, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x1a, 0x8d, 0x05, 0x0a, 0x0c, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x6b, 0x0a, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d,
	0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x2e, 0x4e, 0x65, 0x74, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2d,
	0x6d, 0x6f, 0x64, 0x65, 0x1a, 0x8f, 0x04, 0x0a, 0x0b, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x6e, 0x0a, 0x09, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x50, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4e, 0x65,
	0x74, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x4d,
	0x6f, 0x64, 0x65, 0x73, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65,
	0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x66, 0x6c, 0x6f, 0x77, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x6c, 0x6f,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x73, 0x74, 0x2d, 0x73, 0x6c,
	0x6f, 0x74, 0x12, 0x78, 0x0a, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x54, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4e,
	0x65, 0x74, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72,
	0x4d, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x4d, 0x6f, 0x64,
	0x65, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x37, 0x52, 0x0c,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0xa3, 0x01, 0x0a,
	0x08, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x6c, 0x6f,
	0x77, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x50, 0x58, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x10, 0x00,
	0x12, 0x17, 0x0a, 0x13, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x50, 0x56,
	0x36, 0x58, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x46, 0x6c, 0x6f,
	0x77, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x56, 0x58, 0x4c, 0x41, 0x4e, 0x58, 0x5f, 0x49, 0x4e, 0x4e,
	0x45, 0x52, 0x58, 0x5f, 0x49, 0x50, 0x58, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12, 0x25,
	0x0a, 0x21, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x56, 0x58, 0x4c, 0x41, 0x4e,
	0x58, 0x5f, 0x49, 0x4e, 0x4e, 0x45, 0x52, 0x58, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x58, 0x5f, 0x46,
	0x4c, 0x4f, 0x57, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x58, 0x5f, 0x46, 0x4c, 0x4f, 0x57,
	0x10, 0x04, 0x22, 0x52, 0x0a, 0x0c, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x4d, 0x6f, 0x64,
	0x65, 0x37, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x4d, 0x6f, 0x64,
	0x65, 0x37, 0x5f, 0x53, 0x45, 0x4c, 0x46, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x37, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x10, 0x01,
	0x12, 0x14, 0x0a, 0x10, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x37,
	0x5f, 0x42, 0x41, 0x4b, 0x10, 0x02, 0x1a, 0x98, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x54, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64,
	0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4e, 0x65, 0x74, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x32, 0x0a,
	0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x4d, 0x6f, 0x64, 0x65,
	0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x10,
	0x01, 0x1a, 0xc7, 0x05, 0x0a, 0x0b, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x6f, 0x73, 0x74,
	0x73, 0x12, 0x67, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x68, 0x6f, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f,
	0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4e, 0x65, 0x74,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x6f, 0x73,
	0x74, 0x73, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x0b, 0x65,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x68, 0x6f, 0x73, 0x74, 0x1a, 0xce, 0x04, 0x0a, 0x0a, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x6c, 0x0a, 0x09, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4e, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e,
	0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x2e, 0x4e, 0x65, 0x74, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x48,
	0x6f, 0x73, 0x74, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x66, 0x6c,
	0x6f, 0x77, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x75, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x51, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d,
	0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x2e, 0x4e, 0x65, 0x74, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x48, 0x6f, 0x73, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x69, 0x70, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2a,
	0x0a, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x70,
	0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x70,
	0x6e, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x73, 0x63, 0x70, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x64, 0x73, 0x63, 0x70, 0x22, 0xa3, 0x01, 0x0a, 0x08, 0x46,
	0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x6c, 0x6f, 0x77, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x49, 0x50, 0x58, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x10, 0x00, 0x12, 0x17,
	0x0a, 0x13, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x58,
	0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x46, 0x6c, 0x6f, 0x77, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x56, 0x58, 0x4c, 0x41, 0x4e, 0x58, 0x5f, 0x49, 0x4e, 0x4e, 0x45, 0x52,
	0x58, 0x5f, 0x49, 0x50, 0x58, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21,
	0x46, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x56, 0x58, 0x4c, 0x41, 0x4e, 0x58, 0x5f,
	0x49, 0x4e, 0x4e, 0x45, 0x52, 0x58, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x58, 0x5f, 0x46, 0x4c, 0x4f,
	0x57, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x58, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x10, 0x04,
	0x22, 0x39, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49,
	0x50, 0x56, 0x34, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x10, 0x01, 0x1a, 0x98, 0x05, 0x0a, 0x03,
	0x50, 0x62, 0x72, 0x12, 0x61, 0x0a, 0x0f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e,
	0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x2e, 0x50, 0x62, 0x72, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x1a, 0xad, 0x04, 0x0a, 0x0e, 0x52, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x6d, 0x0a, 0x0e, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x45, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e,
	0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c,
	0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x50, 0x62, 0x72, 0x2e, 0x52, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x2d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0xab, 0x03, 0x0a, 0x0d, 0x52, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x5e, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x50,
	0x62, 0x72, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x75, 0x0a, 0x0c, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x51, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44,
	0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70,
	0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x50, 0x62, 0x72, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0c, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x74, 0x79, 0x70,
	0x65, 0x22, 0x37, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x49, 0x50, 0x56, 0x36, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x49, 0x50, 0x56, 0x34, 0x49, 0x50, 0x56, 0x36, 0x10, 0x02, 0x22, 0x89, 0x01, 0x0a, 0x0b, 0x52,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45,
	0x5f, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x17,
	0x0a, 0x13, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x45,
	0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x48, 0x4f, 0x4c, 0x45,
	0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x58, 0x5f, 0x42, 0x4c, 0x41, 0x43, 0x4b,
	0x48, 0x4f, 0x4c, 0x45, 0x10, 0x03, 0x1a, 0xa7, 0x86, 0x01, 0x0a, 0x03, 0x51, 0x6f, 0x73, 0x12,
	0x72, 0x0a, 0x15, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76,
	0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x73, 0x52, 0x15, 0x74, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x73, 0x12, 0x72, 0x0a, 0x15, 0x70, 0x71, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d,
	0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x50, 0x71, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x73,
	0x52, 0x15, 0x70, 0x71, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2d, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x73, 0x12, 0x88, 0x01, 0x0a, 0x1d, 0x70, 0x71, 0x5f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x5f, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x42, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65,
	0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x50, 0x71, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4f, 0x6e, 0x43, 0x61,
	0x72, 0x64, 0x73, 0x52, 0x1d, 0x70, 0x71, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x2d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x2d, 0x6f, 0x6e, 0x2d, 0x63, 0x61, 0x72,
	0x64, 0x73, 0x12, 0x72, 0x0a, 0x15, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e,
	0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c,
	0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x52,
	0x15, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2d,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x12, 0x75, 0x0a, 0x16, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f,
	0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73,
	0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x68,
	0x61, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x16, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x7a, 0x0a,
	0x18, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x70, 0x69, 0x72, 0x5f,
	0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65,
	0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x50, 0x69, 0x72, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x18, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x70, 0x69, 0x72, 0x2d,
	0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x60, 0x0a, 0x0f, 0x65, 0x78, 0x70,
	0x5f, 0x70, 0x68, 0x62, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x36, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d,
	0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x45, 0x78, 0x70,
	0x50, 0x68, 0x62, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0f, 0x65, 0x78, 0x70, 0x2d,
	0x70, 0x68, 0x62, 0x2d, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x78, 0x0a, 0x17, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e,
	0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x52, 0x17, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x2d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x73, 0x12, 0x80, 0x01, 0x0a, 0x1a, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70,
	0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x41, 0x6c, 0x6c, 0x52, 0x1a, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x2d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x61, 0x6c, 0x6c, 0x12, 0x5e, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44,
	0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70,
	0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2d, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x12, 0x7e, 0x0a, 0x19, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c,
	0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x19, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2d, 0x70,
	0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x72, 0x0a, 0x15, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x6c,
	0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x15, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2d, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x89, 0x01, 0x0a,
	0x1d, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65,
	0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x46,
	0x61, 0x62, 0x72, 0x69, 0x63, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x1d, 0x66, 0x61, 0x62, 0x72, 0x69,
	0x63, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x77, 0x0a, 0x17, 0x6f, 0x76, 0x65, 0x72,
	0x5f, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e,
	0x51, 0x6f, 0x73, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x52, 0x69, 0x64, 0x65, 0x41, 0x64, 0x6a, 0x75,
	0x73, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x17, 0x6f, 0x76, 0x65, 0x72, 0x2d, 0x72,
	0x69, 0x64, 0x65, 0x2d, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x2d, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x77, 0x0a, 0x17, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x64,
	0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d,
	0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x4f, 0x76, 0x65,
	0x72, 0x52, 0x69, 0x64, 0x65, 0x44, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x43, 0x79, 0x63, 0x6c,
	0x65, 0x52, 0x17, 0x6f, 0x76, 0x65, 0x72, 0x2d, 0x72, 0x69, 0x64, 0x65, 0x2d, 0x64, 0x65, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x2d, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x12, 0x77, 0x0a, 0x17, 0x6f, 0x76,
	0x65, 0x72, 0x5f, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x63, 0x79, 0x63, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c,
	0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x52, 0x69, 0x64, 0x65, 0x55, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x17, 0x6f, 0x76, 0x65, 0x72,
	0x2d, 0x72, 0x69, 0x64, 0x65, 0x2d, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x2d, 0x63, 0x79,
	0x63, 0x6c, 0x65, 0x12, 0x63, 0x0a, 0x10, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x69, 0x64, 0x65,
	0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d,
	0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x52, 0x69, 0x64, 0x65,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x10, 0x6f, 0x76, 0x65, 0x72, 0x2d, 0x72, 0x69, 0x64,
	0x65, 0x2d, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x97, 0x01, 0x0a, 0x22, 0x6f, 0x76, 0x65,
	0x72, 0x5f, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64,
	0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e,
	0x4f, 0x76, 0x65, 0x72, 0x52, 0x69, 0x64, 0x65, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x52, 0x22,
	0x6f, 0x76, 0x65, 0x72, 0x2d, 0x72, 0x69, 0x64, 0x65, 0x2d, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x61, 0x64, 0x6a, 0x75,
	0x73, 0x74, 0x12, 0x9a, 0x01, 0x0a, 0x23, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x69, 0x64, 0x65,
	0x5f, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x5f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x48, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44,
	0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70,
	0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x52,
	0x69, 0x64, 0x65, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x52, 0x23, 0x6f, 0x76, 0x65, 0x72,
	0x2d, 0x72, 0x69, 0x64, 0x65, 0x2d, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x12,
	0x7a, 0x0a, 0x18, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e,
	0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c,
	0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x4f, 0x76, 0x65, 0x72,
	0x52, 0x69, 0x64, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x52, 0x18, 0x6f, 0x76, 0x65, 0x72, 0x2d, 0x72, 0x69, 0x64, 0x65, 0x2d, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x2d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x77, 0x0a, 0x17, 0x6f,
	0x76, 0x65, 0x72, 0x5f, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e,
	0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x52, 0x69, 0x64, 0x65, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x17, 0x6f, 0x76, 0x65,
	0x72, 0x2d, 0x72, 0x69, 0x64, 0x65, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2d, 0x73, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x12, 0x67, 0x0a, 0x11, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x5f, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x39, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65,
	0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x11, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x2d, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x98, 0x01,
	0x0a, 0x22, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x70,
	0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70,
	0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x53, 0x68,
	0x61, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x52, 0x22, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2d,
	0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x66, 0x0a, 0x11, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76,
	0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x52, 0x11, 0x70,
	0x6f, 0x72, 0x74, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73,
	0x12, 0x83, 0x01, 0x0a, 0x1b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f,
	0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x1b, 0x75, 0x73, 0x65, 0x72, 0x2d,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2d, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x67, 0x0a, 0x11, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x70, 0x65, 0x72, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x39, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e,
	0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c,
	0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x53, 0x68, 0x61, 0x70, 0x65, 0x72, 0x73, 0x52, 0x11, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2d, 0x73, 0x68, 0x61, 0x70, 0x65, 0x72, 0x73, 0x12,
	0x94, 0x01, 0x0a, 0x21, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c,
	0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x55, 0x73, 0x65, 0x72,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x21, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x75, 0x73, 0x65, 0x72,
	0x2d, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2d,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x1b, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x68, 0x69, 0x67, 0x68, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e,
	0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x6e,
	0x74, 0x50, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x69, 0x67, 0x68, 0x73,
	0x52, 0x1b, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x74, 0x2d, 0x70, 0x72, 0x65,
	0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2d, 0x68, 0x69, 0x67, 0x68, 0x73, 0x12, 0x6f, 0x0a,
	0x14, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x61,
	0x6c, 0x61, 0x72, 0x6d, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c,
	0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x44, 0x69, 0x73, 0x63, 0x61,
	0x72, 0x64, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x52, 0x14, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d,
	0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x2d, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x12, 0x63,
	0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x62, 0x75, 0x72,
	0x73, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51,
	0x6f, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x42, 0x75, 0x72, 0x73,
	0x74, 0x52, 0x10, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x62, 0x75,
	0x72, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x0b, 0x62, 0x75, 0x72, 0x73, 0x74, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51,
	0x6f, 0x73, 0x2e, 0x42, 0x75, 0x72, 0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x73, 0x52, 0x0b, 0x62,
	0x75, 0x72, 0x73, 0x74, 0x2d, 0x73, 0x69, 0x7a, 0x65, 0x73, 0x12, 0x8c, 0x01, 0x0a, 0x1e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76,
	0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x52, 0x1e, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2d, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2d, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x12, 0x80, 0x01, 0x0a, 0x1a, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76,
	0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x42,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73,
	0x52, 0x1a, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2d, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2d,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x12, 0x83, 0x01, 0x0a,
	0x1b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x62, 0x61, 0x63, 0x6b,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x41, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d,
	0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x46, 0x6c, 0x6f,
	0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75,
	0x72, 0x65, 0x4f, 0x66, 0x66, 0x52, 0x1b, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x2d, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x2d, 0x6f,
	0x66, 0x66, 0x12, 0x7d, 0x0a, 0x19, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64,
	0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e,
	0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x19, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x2d,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x7a, 0x0a, 0x18, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x34, 0x63, 0x6f, 0x73, 0x18, 0x24, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76,
	0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x34,
	0x43, 0x6f, 0x73, 0x52, 0x18, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x34, 0x63, 0x6f, 0x73, 0x12, 0x94, 0x01,
	0x0a, 0x21, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x38, 0x63, 0x6f, 0x73, 0x5f, 0x65, 0x6e, 0x68, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e,
	0x51, 0x6f, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x38, 0x43, 0x6f, 0x73, 0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x52, 0x21, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x38, 0x63, 0x6f, 0x73, 0x2d, 0x65, 0x6e, 0x68, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x12, 0x80, 0x01, 0x0a, 0x1a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x73, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e,
	0x51, 0x6f, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x75, 0x74, 0x6f, 0x41,
	0x64, 0x6a, 0x75, 0x73, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x1a, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x61, 0x75, 0x74, 0x6f, 0x2d, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74,
	0x2d, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x8e, 0x01, 0x0a, 0x1f, 0x6f, 0x76, 0x65, 0x72,
	0x5f, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x27, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x44, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e,
	0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c,
	0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x4f, 0x76, 0x65, 0x72,
	0x52, 0x69, 0x64, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x1f, 0x6f, 0x76, 0x65, 0x72, 0x2d, 0x72, 0x69,
	0x64, 0x65, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2d, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x2d, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x77, 0x0a, 0x17, 0x6f, 0x76, 0x65, 0x72,
	0x5f, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e,
	0x51, 0x6f, 0x73, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x52, 0x69, 0x64, 0x65, 0x49, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x47, 0x72, 0x61, 0x64, 0x65, 0x52, 0x17, 0x6f, 0x76, 0x65, 0x72, 0x2d, 0x72,
	0x69, 0x64, 0x65, 0x2d, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x2d, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x1a, 0x8e, 0x04, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x73, 0x12, 0x83, 0x01, 0x0a, 0x14, 0x74, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51,
	0x6f, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x14, 0x74, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x1a,
	0xf0, 0x02, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x68, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x54, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65,
	0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0xef, 0x01, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x49, 0x50, 0x58, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x58, 0x5f, 0x50, 0x55, 0x53,
	0x48, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x50, 0x56, 0x36,
	0x58, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x58, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x58,
	0x5f, 0x4d, 0x41, 0x53, 0x4b, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x58, 0x5f, 0x4d, 0x43, 0x58, 0x5f, 0x52, 0x45,
	0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x58, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x58, 0x5f, 0x50, 0x55,
	0x53, 0x48, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x50, 0x4c,
	0x53, 0x58, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x58, 0x5f, 0x4c, 0x32, 0x58, 0x5f, 0x49, 0x4e,
	0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x52, 0x55, 0x4c, 0x45, 0x58, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x10, 0x05, 0x12, 0x19,
	0x0a, 0x15, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x58, 0x5f, 0x4c, 0x41, 0x59,
	0x45, 0x52, 0x58, 0x5f, 0x50, 0x4f, 0x50, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x49, 0x50, 0x58, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x58, 0x5f, 0x50, 0x4f, 0x50,
	0x10, 0x07, 0x1a, 0xf6, 0x03, 0x0a, 0x13, 0x50, 0x71, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x73, 0x12, 0x83, 0x01, 0x0a, 0x14, 0x70,
	0x71, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e,
	0x51, 0x6f, 0x73, 0x2e, 0x50, 0x71, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x73, 0x2e, 0x50, 0x71, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x14, 0x70, 0x71, 0x2d, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x1a, 0xd8, 0x02, 0x0a, 0x12, 0x50, 0x71, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x77, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x59, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70,
	0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x50, 0x71, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x73, 0x2e, 0x50, 0x71, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x68, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x54,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76,
	0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x50, 0x71, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x73, 0x2e, 0x50, 0x71, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x2e,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x0a, 0x09, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x16,
	0x0a, 0x12, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4f, 0x55, 0x54, 0x42,
	0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x22, 0x23, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0d,
	0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x00, 0x12, 0x0c, 0x0a,
	0x08, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x1a, 0x8f, 0x03, 0x0a, 0x19,
	0x50, 0x71, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x4f, 0x6e, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x9f, 0x01, 0x0a, 0x1c, 0x70, 0x71,
	0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x5f, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x5b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44,
	0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70,
	0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x50, 0x71, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4f, 0x6e, 0x43,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x50, 0x71, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4f, 0x6e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x1c, 0x70,
	0x71, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2d, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x2d, 0x6f, 0x6e, 0x2d, 0x63, 0x61, 0x72, 0x64, 0x1a, 0xcf, 0x01, 0x0a, 0x18,
	0x50, 0x71, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x4f, 0x6e, 0x43, 0x61, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x61, 0x72, 0x64, 0x2d,
	0x69, 0x64, 0x12, 0x74, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x60, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44,
	0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70,
	0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x50, 0x71, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4f, 0x6e, 0x43,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x50, 0x71, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4f, 0x6e, 0x43, 0x61, 0x72, 0x64, 0x2e, 0x4d, 0x6f,
	0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x23, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x00, 0x12,
	0x0c, 0x0a, 0x08, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x1a, 0xaa, 0x0a,
	0x0a, 0x13, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x73, 0x12, 0x83, 0x01, 0x0a, 0x14, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65,
	0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x73, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x14, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x1a, 0x8c, 0x09, 0x0a, 0x12,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5c, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70,
	0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x50, 0x6f,
	0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x93, 0x01, 0x0a, 0x13, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x61, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64,
	0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x73, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x50, 0x6f, 0x72,
	0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x13, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x77, 0x72,
	0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70,
	0x6f, 0x72, 0x74, 0x2d, 0x77, 0x72, 0x65, 0x64, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x98, 0x01,
	0x0a, 0x1a, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x69, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d,
	0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73,
	0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52,
	0x07, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x12, 0xaf, 0x01, 0x0a, 0x22, 0x73, 0x68, 0x61,
	0x70, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x5f,
	0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x70, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64,
	0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x73, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x50, 0x6f, 0x72,
	0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x68, 0x61, 0x70, 0x69,
	0x6e, 0x67, 0x2d, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x1a, 0x41, 0x0a, 0x19, 0x53, 0x68,
	0x61, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x5f,
	0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x68, 0x61, 0x70, 0x69,
	0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x52, 0x0a,
	0x20, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x5f, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x73,
	0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x22, 0xbc, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x5f, 0x42, 0x45, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x31, 0x10, 0x01, 0x12, 0x14, 0x0a,
	0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46,
	0x32, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x33, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x34, 0x10, 0x04, 0x12,
	0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x45, 0x46, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x36, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x37, 0x10, 0x07,
	0x22, 0x63, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x50, 0x51, 0x10, 0x00, 0x12,
	0x19, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x57, 0x46, 0x51, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f,
	0x4c, 0x50, 0x51, 0x10, 0x02, 0x42, 0x13, 0x0a, 0x11, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0xbb, 0x05, 0x0a, 0x14, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x68, 0x61, 0x70,
	0x69, 0x6e, 0x67, 0x12, 0xa2, 0x01, 0x0a, 0x24, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x70, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x5f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d,
	0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e,
	0x67, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x5f, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x11, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x2d, 0x74,
	0x79, 0x70, 0x65, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0xa5, 0x01, 0x0a, 0x25, 0x73, 0x68, 0x61,
	0x70, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x5f,
	0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x60, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51,
	0x6f, 0x73, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74,
	0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x12, 0x73, 0x68,
	0x61, 0x70, 0x69, 0x6e, 0x67, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2d, 0x6d, 0x6f, 0x64, 0x65,
	0x1a, 0xf4, 0x01, 0x0a, 0x21, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x8f, 0x01, 0x0a, 0x0c, 0x73, 0x68, 0x61, 0x70, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x6b, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d,
	0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x68, 0x61,
	0x70, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x53,
	0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x53,
	0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x73, 0x68, 0x61, 0x70,
	0x69, 0x6e, 0x67, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3d, 0x0a, 0x0b, 0x53, 0x68, 0x61, 0x70,
	0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x68, 0x61, 0x70, 0x69,
	0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f, 0x32, 0x35, 0x36, 0x4b, 0x10, 0x00, 0x12,
	0x16, 0x0a, 0x12, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58,
	0x5f, 0x35, 0x31, 0x32, 0x4b, 0x10, 0x01, 0x1a, 0x4a, 0x0a, 0x22, 0x53, 0x68, 0x61, 0x70, 0x69,
	0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x53, 0x68, 0x61,
	0x70, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x2d, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x35, 0x0a, 0x15, 0x55, 0x73, 0x65, 0x72,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x50, 0x69, 0x72, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x1a,
	0xbf, 0x01, 0x0a, 0x0d, 0x45, 0x78, 0x70, 0x50, 0x68, 0x62, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x66, 0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x45, 0x78, 0x70, 0x50, 0x68, 0x62, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x2e,
	0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x66, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0x46, 0x0a, 0x0b, 0x46, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x46,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f,
	0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x56, 0x4c, 0x4c, 0x10,
	0x01, 0x1a, 0x9a, 0x04, 0x0a, 0x15, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x12, 0x8b, 0x01, 0x0a, 0x16,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e,
	0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x2e, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x52, 0x16, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2d,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x1a, 0xf2, 0x02, 0x0a, 0x14, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x12, 0x86, 0x01, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x60, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70,
	0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x0d, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22,
	0xbc, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x42, 0x45, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x31, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x32, 0x10,
	0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x41, 0x46, 0x33, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x34, 0x10, 0x04, 0x12, 0x13, 0x0a,
	0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x45, 0x46,
	0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x5f, 0x43, 0x53, 0x36, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x37, 0x10, 0x07, 0x1a, 0x2d,
	0x0a, 0x17, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x41, 0x6c, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x1a, 0xfd, 0x03,
	0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x12,
	0x69, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f,
	0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x52, 0x0d, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x1a, 0x80, 0x03, 0x0a, 0x0c, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x6d, 0x0a, 0x0a, 0x61,
	0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x4d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65,
	0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41,
	0x6c, 0x61, 0x72, 0x6d, 0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a,
	0x61, 0x6c, 0x61, 0x72, 0x6d, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x5c, 0x0a, 0x04, 0x70, 0x6f,
	0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x48, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51,
	0x6f, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x2e, 0x50, 0x6f,
	0x6f, 0x6c, 0x52, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22, 0x3c, 0x0a, 0x09, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x51, 0x55, 0x41, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x41,
	0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x41, 0x4e, 0x44, 0x57, 0x49, 0x44,
	0x54, 0x48, 0x10, 0x01, 0x22, 0x47, 0x0a, 0x04, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x1b, 0x0a, 0x17,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c,
	0x55, 0x45, 0x5f, 0x50, 0x6f, 0x6f, 0x6c, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x6f, 0x6f,
	0x6c, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x58, 0x5f, 0x30, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x50,
	0x6f, 0x6f, 0x6c, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x58, 0x5f, 0x31, 0x10, 0x02, 0x1a, 0xb5, 0x01,
	0x0a, 0x17, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x59, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x45, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0x3f, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c,
	0x55, 0x45, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x55, 0x50, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44,
	0x4f, 0x57, 0x4e, 0x10, 0x02, 0x1a, 0x29, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x1a, 0x34, 0x0a, 0x1a, 0x46, 0x61, 0x62, 0x72, 0x69, 0x63, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0x3c, 0x0a, 0x14, 0x4f, 0x76, 0x65, 0x72, 0x52, 0x69,
	0x64, 0x65, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x24,
	0x0a, 0x0d, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x2d, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x1a, 0x3c, 0x0a, 0x14, 0x4f, 0x76, 0x65, 0x72, 0x52, 0x69, 0x64, 0x65,
	0x44, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x64, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x64, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x2d, 0x63, 0x79, 0x63,
	0x6c, 0x65, 0x1a, 0x3c, 0x0a, 0x14, 0x4f, 0x76, 0x65, 0x72, 0x52, 0x69, 0x64, 0x65, 0x55, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x75, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x2d, 0x63, 0x79, 0x63, 0x6c, 0x65,
	0x1a, 0x62, 0x0a, 0x0e, 0x4f, 0x76, 0x65, 0x72, 0x52, 0x69, 0x64, 0x65, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x2d, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2d, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x1a, 0x7c, 0x0a, 0x1e, 0x4f, 0x76, 0x65, 0x72, 0x52, 0x69, 0x64, 0x65,
	0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x11, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x64, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x64, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x1a, 0x7d, 0x0a, 0x1f, 0x4f, 0x76, 0x65, 0x72, 0x52, 0x69, 0x64, 0x65, 0x4f, 0x75,
	0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x41,
	0x64, 0x6a, 0x75, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x11, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x64, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11,
	0x64, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x1a, 0x3f, 0x0a, 0x15, 0x4f, 0x76, 0x65, 0x72, 0x52, 0x69, 0x64, 0x65, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2d, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x1a, 0x32, 0x0a, 0x14, 0x4f, 0x76, 0x65, 0x72, 0x52, 0x69, 0x64, 0x65, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x75,
	0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f, 0x75,
	0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x1a, 0x38, 0x0a, 0x10, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x68,
	0x61, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x1a, 0x8e, 0x08, 0x0a, 0x1f, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x53, 0x68,
	0x61, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x58, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44,
	0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70,
	0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x6c, 0x6c, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x2d,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x98, 0x01,
	0x0a, 0x17, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x5e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65,
	0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x73, 0x52,
	0x17, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x73, 0x1a, 0x47, 0x0a, 0x0f, 0x41, 0x6c, 0x6c, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2d, 0x6e, 0x61, 0x6d,
	0x65, 0x1a, 0xfd, 0x04, 0x0a, 0x15, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x73, 0x12, 0xab, 0x01, 0x0a, 0x16,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x73, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e,
	0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x73, 0x2e, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x52, 0x16, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x2d, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x1a, 0xb5, 0x03, 0x0a, 0x14, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x12, 0xa7, 0x01, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x80, 0x01, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c,
	0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x53,
	0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x73, 0x2e, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x0d, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x34, 0x0a, 0x15,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2d, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0xbc, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x42, 0x45, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x31, 0x10, 0x01, 0x12, 0x14,
	0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41,
	0x46, 0x32, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x33, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x34, 0x10, 0x04,
	0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x45, 0x46, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x36, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x37, 0x10,
	0x07, 0x1a, 0x82, 0x04, 0x0a, 0x0f, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41,
	0x6c, 0x61, 0x72, 0x6d, 0x73, 0x12, 0x73, 0x0a, 0x10, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x47, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65,
	0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x52, 0x10, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x2d, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x1a, 0xf9, 0x02, 0x0a, 0x0e, 0x50,
	0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x7a, 0x0a,
	0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x54, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65,
	0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x62, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2d, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x22, 0xbc, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x42, 0x45, 0x10, 0x00, 0x12, 0x14, 0x0a,
	0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46,
	0x31, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x32, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x33, 0x10, 0x03, 0x12,
	0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x41, 0x46, 0x34, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x45, 0x46, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x36, 0x10, 0x06,
	0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x43, 0x53, 0x37, 0x10, 0x07, 0x1a, 0x1a, 0x0a, 0x18, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x44, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x1a, 0xf7, 0x02, 0x0a, 0x10, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x53, 0x68, 0x61, 0x70, 0x65, 0x72, 0x73, 0x12, 0x75, 0x0a, 0x10, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x49, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e,
	0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c,
	0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x53, 0x68, 0x61, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x53, 0x68, 0x61, 0x70, 0x65, 0x72, 0x52, 0x10, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2d, 0x73, 0x68, 0x61, 0x70, 0x65, 0x72, 0x1a, 0xeb,
	0x01, 0x0a, 0x0f, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x53, 0x68, 0x61, 0x70,
	0x65, 0x72, 0x12, 0x6e, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x52, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65,
	0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x53, 0x68, 0x61, 0x70, 0x65, 0x72, 0x73, 0x2e,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x53, 0x68, 0x61, 0x70, 0x65, 0x72, 0x2e,
	0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x68, 0x61, 0x70, 0x69,
	0x6e, 0x67, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x42, 0x0a, 0x08, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x42, 0x4f, 0x54, 0x48, 0x10, 0x02, 0x1a, 0x1f, 0x0a, 0x1d,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x55, 0x73, 0x65, 0x72, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0x87, 0x02,
	0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x63,
	0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x69, 0x67, 0x68, 0x73, 0x12, 0x9b, 0x01, 0x0a, 0x1a,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x65,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x5b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44,
	0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70,
	0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x48,
	0x69, 0x67, 0x68, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x74, 0x50,
	0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x69, 0x67, 0x68, 0x52, 0x1a, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x63, 0x65, 0x64,
	0x65, 0x6e, 0x63, 0x65, 0x2d, 0x68, 0x69, 0x67, 0x68, 0x1a, 0x4c, 0x0a, 0x18, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x48, 0x69, 0x67, 0x68, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x13, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xa4, 0x09, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x12, 0x7f,
	0x0a, 0x13, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x61, 0x6c, 0x61, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c,
	0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x44, 0x69, 0x73, 0x63, 0x61,
	0x72, 0x64, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x44, 0x69,
	0x73, 0x63, 0x61, 0x72, 0x64, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x52, 0x13, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x2d, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x2d, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x1a,
	0x8c, 0x08, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x75, 0x65, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64,
	0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x80, 0x01, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5a, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d,
	0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x44, 0x69, 0x73,
	0x63, 0x61, 0x72, 0x64, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x84,
	0x01, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5f, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c,
	0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x44, 0x69, 0x73, 0x63, 0x61,
	0x72, 0x64, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x44, 0x69,
	0x73, 0x63, 0x61, 0x72, 0x64, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x61,
	0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x79, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x05,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x8a, 0x01, 0x0a, 0x14, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x61, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65,
	0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x41, 0x6c, 0x61, 0x72, 0x6d,
	0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x41, 0x6c,
	0x61, 0x72, 0x6d, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x48, 0x00, 0x52, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x12, 0x98, 0x01, 0x0a, 0x19, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x65, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f,
	0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73,
	0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x41, 0x6c, 0x61,
	0x72, 0x6d, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64,
	0x41, 0x6c, 0x61, 0x72, 0x6d, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x48, 0x00, 0x52,
	0x0c, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x1a, 0x2a, 0x0a,
	0x11, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x79, 0x74, 0x65, 0x73, 0x38, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x1a, 0x30, 0x0a, 0x13, 0x44, 0x69, 0x73,
	0x63, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x38, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x1a, 0x73, 0x0a, 0x17, 0x44,
	0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x12, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x63, 0x6f, 0x65, 0x66, 0x66,
	0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x65, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x65, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x22, 0xbc, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x42, 0x45, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x31, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x32,
	0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x5f, 0x41, 0x46, 0x33, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x34, 0x10, 0x04, 0x12, 0x13,
	0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x45,
	0x46, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x36, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x37, 0x10, 0x07, 0x42,
	0x0d, 0x0a, 0x0b, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x54,
	0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x42, 0x75, 0x72, 0x73, 0x74,
	0x12, 0x2e, 0x0a, 0x12, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x62, 0x75, 0x72, 0x73,
	0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6d, 0x69,
	0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x2d, 0x62, 0x75, 0x72, 0x73, 0x74, 0x2d, 0x73, 0x69, 0x7a, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x1a, 0xc0, 0x03, 0x0a, 0x0a, 0x42, 0x75, 0x72, 0x73, 0x74, 0x53, 0x69,
	0x7a, 0x65, 0x73, 0x12, 0x5d, 0x0a, 0x0a, 0x62, 0x75, 0x72, 0x73, 0x74, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x42, 0x75, 0x72, 0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x73, 0x2e, 0x42, 0x75, 0x72,
	0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x0a, 0x62, 0x75, 0x72, 0x73, 0x74, 0x2d, 0x73, 0x69,
	0x7a, 0x65, 0x1a, 0xd2, 0x02, 0x0a, 0x09, 0x42, 0x75, 0x72, 0x73, 0x74, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x70, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x42, 0x75, 0x72, 0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x73, 0x2e, 0x42, 0x75, 0x72,
	0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xbc, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x42, 0x45, 0x10, 0x00, 0x12, 0x14,
	0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41,
	0x46, 0x31, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x32, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x33, 0x10, 0x03,
	0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x41, 0x46, 0x34, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x45, 0x46, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x36, 0x10,
	0x06, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x43, 0x53, 0x37, 0x10, 0x07, 0x1a, 0xc8, 0x03, 0x0a, 0x1b, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x12, 0xa5, 0x01, 0x0a, 0x1d, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x5f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65,
	0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x42, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x52, 0x1d, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2d, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2d,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x1a,
	0x80, 0x02, 0x0a, 0x1a, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x87,
	0x01, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x69, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d,
	0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x42,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22, 0x3a, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44,
	0x10, 0x01, 0x1a, 0xd5, 0x05, 0x0a, 0x17, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x42, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x12, 0x95,
	0x01, 0x0a, 0x19, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x57, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d,
	0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x42, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x19, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2d, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2d, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x1a, 0xa1, 0x04, 0x0a, 0x16, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x12, 0x8a, 0x01, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x64, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e,
	0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52,
	0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x7f,
	0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x61, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e,
	0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c,
	0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xbc, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x42, 0x45, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x31, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x32, 0x10,
	0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x41, 0x46, 0x33, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x34, 0x10, 0x04, 0x12, 0x13, 0x0a,
	0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x45, 0x46,
	0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x5f, 0x43, 0x53, 0x36, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x37, 0x10, 0x07, 0x22, 0x3a,
	0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x55, 0x4e, 0x44,
	0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x1a, 0x1a, 0x0a, 0x18, 0x46, 0x6c,
	0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x75, 0x72, 0x65, 0x4f, 0x66, 0x66, 0x1a, 0xac, 0x02, 0x0a, 0x16, 0x54, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x7b, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c,
	0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x10, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x75, 0x73, 0x65, 0x72, 0x12, 0x72,
	0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64,
	0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e,
	0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x41, 0x63, 0x6c, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x61,
	0x63, 0x6c, 0x1a, 0x11, 0x0a, 0x0f, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x0e, 0x0a, 0x0c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x41, 0x63, 0x6c, 0x1a, 0x35, 0x0a, 0x15, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x34, 0x43, 0x6f, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x6f, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x63, 0x6f, 0x73, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xda, 0x03, 0x0a,
	0x1d, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x38, 0x43, 0x6f, 0x73, 0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0xaf,
	0x01, 0x0a, 0x20, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x38, 0x63, 0x6f, 0x73, 0x5f, 0x65, 0x6e, 0x68, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x63, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e,
	0x51, 0x6f, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x38, 0x43, 0x6f, 0x73, 0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x38, 0x43, 0x6f, 0x73, 0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x20,
	0x75, 0x73, 0x65, 0x72, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2d, 0x38, 0x63, 0x6f, 0x73, 0x2d, 0x65, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65,
	0x1a, 0x86, 0x02, 0x0a, 0x1c, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x38, 0x43, 0x6f, 0x73, 0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x8b, 0x01, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x6d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64,
	0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x38, 0x43, 0x6f, 0x73, 0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x38,
	0x43, 0x6f, 0x73, 0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x63, 0x6f, 0x73, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3a, 0x0a,
	0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10,
	0x00, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4f,
	0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x1a, 0xf8, 0x01, 0x0a, 0x17, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x53,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x87, 0x01, 0x0a, 0x14, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x61,
	0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x53, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65,
	0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x64, 0x6a, 0x75, 0x73,
	0x74, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x14, 0x61, 0x75, 0x74, 0x6f, 0x2d,
	0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x2d, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22,
	0x53, 0x0a, 0x12, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x64, 0x6a,
	0x75, 0x73, 0x74, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x45, 0x4e, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x64, 0x6a, 0x75,
	0x73, 0x74, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0x01, 0x1a, 0x37, 0x0a, 0x1b, 0x4f, 0x76, 0x65, 0x72, 0x52, 0x69, 0x64, 0x65,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x1a, 0x32, 0x0a,
	0x14, 0x4f, 0x76, 0x65, 0x72, 0x52, 0x69, 0x64, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x47, 0x72, 0x61, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x67, 0x72, 0x61, 0x64, 0x65, 0x2d, 0x69,
	0x64, 0x1a, 0xd4, 0x0a, 0x0a, 0x03, 0x53, 0x6f, 0x63, 0x12, 0x5d, 0x0a, 0x0e, 0x6c, 0x32, 0x5f,
	0x6c, 0x6f, 0x6f, 0x70, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e,
	0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c,
	0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x53, 0x6f, 0x63, 0x2e, 0x4c, 0x32, 0x4c, 0x6f,
	0x6f, 0x70, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x52, 0x0e, 0x6c, 0x32, 0x2d, 0x6c, 0x6f, 0x6f,
	0x70, 0x2d, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x1a, 0xed, 0x09, 0x0a, 0x0c, 0x4c, 0x32, 0x4c,
	0x6f, 0x6f, 0x70, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x12, 0x6b, 0x0a, 0x0e, 0x73, 0x6c, 0x6f,
	0x74, 0x5f, 0x6c, 0x32, 0x6c, 0x6f, 0x6f, 0x70, 0x64, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x43, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e,
	0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c,
	0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x53, 0x6f, 0x63, 0x2e, 0x4c, 0x32, 0x4c, 0x6f,
	0x6f, 0x70, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x4c, 0x32, 0x4c,
	0x6f, 0x6f, 0x70, 0x64, 0x65, 0x74, 0x52, 0x0e, 0x73, 0x6c, 0x6f, 0x74, 0x2d, 0x6c, 0x32, 0x6c,
	0x6f, 0x6f, 0x70, 0x64, 0x65, 0x74, 0x12, 0x54, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f,
	0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x53, 0x6f, 0x63,
	0x2e, 0x4c, 0x32, 0x4c, 0x6f, 0x6f, 0x70, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7f, 0x0a, 0x15,
	0x6c, 0x6f, 0x6f, 0x70, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c,
	0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x2e, 0x53, 0x6f, 0x63, 0x2e, 0x4c, 0x32, 0x4c, 0x6f, 0x6f, 0x70, 0x44, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x2e, 0x4c, 0x6f, 0x6f, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x52, 0x15, 0x6c, 0x6f, 0x6f, 0x70, 0x2d, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x1a, 0x5f, 0x0a,
	0x0d, 0x53, 0x6c, 0x6f, 0x74, 0x4c, 0x32, 0x4c, 0x6f, 0x6f, 0x70, 0x64, 0x65, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2d,
	0x64, 0x72, 0x6f, 0x70, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x1a, 0xac,
	0x02, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x61, 0x0a, 0x08, 0x73, 0x68, 0x75,
	0x74, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c,
	0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x2e, 0x53, 0x6f, 0x63, 0x2e, 0x4c, 0x32, 0x4c, 0x6f, 0x6f, 0x70, 0x44, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f,
	0x77, 0x6e, 0x52, 0x08, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x55, 0x0a, 0x04,
	0x74, 0x72, 0x61, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70,
	0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x2e, 0x53, 0x6f, 0x63, 0x2e, 0x4c, 0x32, 0x4c, 0x6f, 0x6f, 0x70, 0x44, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x70, 0x52, 0x04, 0x74,
	0x72, 0x61, 0x70, 0x1a, 0x48, 0x0a, 0x08, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x75, 0x70, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x75,
	0x70, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x75, 0x70, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x1a, 0x1e, 0x0a,
	0x04, 0x54, 0x72, 0x61, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0x88, 0x04,
	0x0a, 0x13, 0x4c, 0x6f, 0x6f, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x73, 0x12, 0x90, 0x01, 0x0a, 0x14, 0x6c, 0x6f, 0x6f, 0x70, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x5c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65,
	0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x53, 0x6f, 0x63, 0x2e, 0x4c,
	0x32, 0x4c, 0x6f, 0x6f, 0x70, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x2e, 0x4c, 0x6f, 0x6f, 0x70,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x2e,
	0x4c, 0x6f, 0x6f, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x52, 0x14, 0x6c, 0x6f, 0x6f, 0x70, 0x2d, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2d, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x1a, 0xdd, 0x02, 0x0a, 0x12, 0x4c, 0x6f, 0x6f,
	0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12,
	0x92, 0x01, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x6a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x53,
	0x6f, 0x63, 0x2e, 0x4c, 0x32, 0x4c, 0x6f, 0x6f, 0x70, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x2e,
	0x4c, 0x6f, 0x6f, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x73, 0x2e, 0x4c, 0x6f, 0x6f, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x73, 0x70, 0x65, 0x63, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x75, 0x73, 0x70, 0x65, 0x63, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x54, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x58, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x55, 0x42, 0x58, 0x5f, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x10, 0x01, 0x1a, 0xd6, 0x0e, 0x0a, 0x0e, 0x55, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x12, 0x54, 0x0a, 0x07, 0x69,
	0x70, 0x76, 0x34, 0x5f, 0x75, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e,
	0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x2e, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x63, 0x52, 0x07, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75,
	0x63, 0x12, 0x68, 0x0a, 0x0e, 0x61, 0x72, 0x70, 0x5f, 0x66, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65,
	0x70, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e,
	0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x41,
	0x72, 0x70, 0x46, 0x61, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x0e, 0x61, 0x72, 0x70,
	0x2d, 0x66, 0x61, 0x73, 0x74, 0x2d, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x62, 0x0a, 0x0c, 0x67,
	0x72, 0x65, 0x5f, 0x74, 0x74, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e,
	0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c,
	0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x46,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x47, 0x72, 0x65, 0x54, 0x74, 0x6c, 0x4d, 0x6f, 0x64,
	0x65, 0x52, 0x0c, 0x67, 0x72, 0x65, 0x2d, 0x74, 0x74, 0x6c, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x12,
	0x6e, 0x0a, 0x10, 0x6c, 0x33, 0x5f, 0x6c, 0x63, 0x73, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e,
	0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x4c,
	0x33, 0x4c, 0x63, 0x73, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x73, 0x52, 0x10, 0x6c,
	0x33, 0x2d, 0x6c, 0x63, 0x73, 0x2d, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x73, 0x12,
	0x65, 0x0a, 0x0d, 0x6e, 0x64, 0x5f, 0x66, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f,
	0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x55, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x4e, 0x64, 0x46, 0x61,
	0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x0d, 0x6e, 0x64, 0x2d, 0x66, 0x61, 0x73, 0x74,
	0x2d, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x6e, 0x0a, 0x10, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x5f,
	0x72, 0x64, 0x72, 0x5f, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x42, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44,
	0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70,
	0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x56, 0x78, 0x6c, 0x61, 0x6e, 0x52, 0x64, 0x72, 0x54, 0x72,
	0x75, 0x6e, 0x6b, 0x73, 0x52, 0x10, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x2d, 0x72, 0x64, 0x72, 0x2d,
	0x74, 0x72, 0x75, 0x6e, 0x6b, 0x73, 0x1a, 0x52, 0x0a, 0x06, 0x49, 0x70, 0x76, 0x34, 0x55, 0x63,
	0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x2d, 0x66, 0x72, 0x61, 0x67,
	0x12, 0x28, 0x0a, 0x0f, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x66,
	0x61, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x63, 0x6d, 0x70, 0x2d,
	0x72, 0x65, 0x70, 0x6c, 0x79, 0x2d, 0x66, 0x61, 0x73, 0x74, 0x1a, 0x26, 0x0a, 0x0c, 0x41, 0x72,
	0x70, 0x46, 0x61, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x1a, 0xa2, 0x01, 0x0a, 0x0a, 0x47, 0x72, 0x65, 0x54, 0x74, 0x6c, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x62, 0x0a, 0x08, 0x74, 0x74, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x46, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76,
	0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x47, 0x72, 0x65, 0x54, 0x74, 0x6c, 0x4d,
	0x6f, 0x64, 0x65, 0x2e, 0x54, 0x74, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x74, 0x74, 0x6c,
	0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x30, 0x0a, 0x07, 0x54, 0x74, 0x6c, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x10, 0x0a, 0x0c, 0x54, 0x74, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x50, 0x49, 0x50, 0x45,
	0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x74, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x55, 0x4e,
	0x49, 0x46, 0x4f, 0x52, 0x4d, 0x10, 0x01, 0x1a, 0x9d, 0x03, 0x0a, 0x0e, 0x4c, 0x33, 0x4c, 0x63,
	0x73, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x73, 0x12, 0x88, 0x01, 0x0a, 0x14, 0x73,
	0x6c, 0x6f, 0x74, 0x5f, 0x6c, 0x33, 0x5f, 0x6c, 0x63, 0x73, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e,
	0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x4c,
	0x33, 0x4c, 0x63, 0x73, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x73, 0x2e, 0x53, 0x6c,
	0x6f, 0x74, 0x4c, 0x33, 0x4c, 0x63, 0x73, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x52,
	0x14, 0x73, 0x6c, 0x6f, 0x74, 0x2d, 0x6c, 0x33, 0x2d, 0x6c, 0x63, 0x73, 0x2d, 0x63, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x1a, 0xff, 0x01, 0x0a, 0x11, 0x53, 0x6c, 0x6f, 0x74, 0x4c, 0x33,
	0x4c, 0x63, 0x73, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x84, 0x01, 0x0a, 0x0c,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x60, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d,
	0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x4c, 0x33, 0x4c, 0x63, 0x73, 0x43, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x73, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x4c, 0x33, 0x4c, 0x63, 0x73,
	0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x39, 0x0a, 0x0b,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x49, 0x42, 0x10, 0x00,
	0x12, 0x15, 0x0a, 0x11, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x4c, 0x33, 0x56, 0x50, 0x4e, 0x10, 0x01, 0x1a, 0x25, 0x0a, 0x0b, 0x4e, 0x64, 0x46, 0x61, 0x73,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0xf0,
	0x03, 0x0a, 0x0e, 0x56, 0x78, 0x6c, 0x61, 0x6e, 0x52, 0x64, 0x72, 0x54, 0x72, 0x75, 0x6e, 0x6b,
	0x73, 0x12, 0x7a, 0x0a, 0x0f, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x5f, 0x72, 0x64, 0x72, 0x5f, 0x74,
	0x72, 0x75, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70,
	0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x2e, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x2e,
	0x56, 0x78, 0x6c, 0x61, 0x6e, 0x52, 0x64, 0x72, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x73, 0x2e, 0x56,
	0x78, 0x6c, 0x61, 0x6e, 0x52, 0x64, 0x72, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x52, 0x0f, 0x76, 0x78,
	0x6c, 0x61, 0x6e, 0x2d, 0x72, 0x64, 0x72, 0x2d, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x1a, 0xe1, 0x02,
	0x0a, 0x0d, 0x56, 0x78, 0x6c, 0x61, 0x6e, 0x52, 0x64, 0x72, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x12,
	0x83, 0x01, 0x0a, 0x0d, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x55, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x56, 0x78, 0x6c,
	0x61, 0x6e, 0x52, 0x64, 0x72, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x73, 0x2e, 0x56, 0x78, 0x6c, 0x61,
	0x6e, 0x52, 0x64, 0x72, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x6c,
	0x6f, 0x74, 0x5f, 0x69, 0x64, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65,
	0x73, 0x74, 0x2d, 0x73, 0x6c, 0x6f, 0x74, 0x2d, 0x69, 0x64, 0x31, 0x12, 0x24, 0x0a, 0x0d, 0x64,
	0x65, 0x73, 0x74, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x32, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x73, 0x74, 0x2d, 0x73, 0x6c, 0x6f, 0x74, 0x2d, 0x69, 0x64,
	0x32, 0x22, 0x7e, 0x0a, 0x0c, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x23, 0x0a, 0x1f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55,
	0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x56, 0x58, 0x4c, 0x41, 0x4e, 0x10, 0x01, 0x12, 0x15,
	0x0a, 0x11, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42,
	0x44, 0x49, 0x46, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x56, 0x58, 0x4c, 0x41, 0x4e, 0x42, 0x44, 0x49, 0x46, 0x10,
	0x03, 0x1a, 0x42, 0x0a, 0x14, 0x43, 0x66, 0x6d, 0x4d, 0x61, 0x63, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x70, 0x75, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x61, 0x63,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x6d, 0x61, 0x63, 0x2d, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2d, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0x3a, 0x0a, 0x0c, 0x44, 0x68, 0x63, 0x70, 0x76, 0x36, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x10, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2d, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2d, 0x72, 0x61, 0x74,
	0x65, 0x1a, 0x11, 0x0a, 0x0f, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x64, 0x64, 0x69, 0x6e,
	0x67, 0x46, 0x69, 0x78, 0x1a, 0x91, 0x03, 0x0a, 0x06, 0x50, 0x70, 0x70, 0x4e, 0x65, 0x74, 0x12,
	0x74, 0x0a, 0x15, 0x70, 0x70, 0x70, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76,
	0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x2e, 0x50, 0x70, 0x70, 0x4e, 0x65, 0x74, 0x2e, 0x50, 0x70, 0x70, 0x4d,
	0x69, 0x6e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x15,
	0x70, 0x70, 0x70, 0x2d, 0x6d, 0x69, 0x6e, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x86, 0x01, 0x0a, 0x1b, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x5f,
	0x70, 0x70, 0x70, 0x6f, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c,
	0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x2e, 0x50, 0x70, 0x70, 0x4e, 0x65, 0x74, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x50, 0x70, 0x70, 0x6f,
	0x65, 0x52, 0x1b, 0x6c, 0x6f, 0x61, 0x64, 0x2d, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x2d,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x2d, 0x70, 0x70, 0x70, 0x6f, 0x65, 0x1a, 0x3a,
	0x0a, 0x12, 0x50, 0x70, 0x70, 0x4d, 0x69, 0x6e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x2d, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x1a, 0x4c, 0x0a, 0x18, 0x4c, 0x6f,
	0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x79, 0x50, 0x70, 0x70, 0x6f, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x13, 0x6c, 0x6f, 0x61, 0x64, 0x2d, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0x8e, 0x01, 0x0a, 0x05, 0x53, 0x66, 0x6c,
	0x6f, 0x77, 0x12, 0x5d, 0x0a, 0x0d, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e,
	0x53, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69,
	0x6e, 0x67, 0x52, 0x0d, 0x73, 0x6c, 0x6f, 0x74, 0x2d, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e,
	0x67, 0x1a, 0x26, 0x0a, 0x0c, 0x53, 0x6c, 0x6f, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e,
	0x67, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0xbd, 0x05, 0x0a, 0x03, 0x44, 0x63,
	0x62, 0x12, 0x5b, 0x0a, 0x0d, 0x68, 0x65, 0x61, 0x64, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x70, 0x6f,
	0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x44,
	0x63, 0x62, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x72, 0x6f, 0x6f, 0x6d, 0x50, 0x6f, 0x6f, 0x6c, 0x52,
	0x0d, 0x68, 0x65, 0x61, 0x64, 0x72, 0x6f, 0x6f, 0x6d, 0x2d, 0x70, 0x6f, 0x6f, 0x6c, 0x12, 0x81,
	0x01, 0x0a, 0x1a, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76,
	0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x44, 0x63, 0x62, 0x2e, 0x44, 0x65,
	0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x42, 0x65,
	0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x52, 0x1a, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b,
	0x2d, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2d, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x12, 0x63, 0x0a, 0x10, 0x70, 0x66, 0x63, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e,
	0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x2e, 0x44, 0x63, 0x62, 0x2e, 0x50, 0x66, 0x63, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x70, 0x66, 0x63, 0x2d, 0x6d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x1a, 0x22, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x72,
	0x6f, 0x6f, 0x6d, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x1a, 0xbd, 0x01, 0x0a, 0x18,
	0x44, 0x65, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x66, 0x0a, 0x08, 0x62, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4a, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70,
	0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x2e, 0x44, 0x63, 0x62, 0x2e, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x42, 0x65,
	0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x52, 0x08, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72,
	0x22, 0x39, 0x0a, 0x08, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x13,
	0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x5f, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44,
	0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x41, 0x52, 0x44, 0x10, 0x01, 0x1a, 0x8b, 0x01, 0x0a, 0x0e,
	0x50, 0x66, 0x63, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x50,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e,
	0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x2e, 0x44, 0x63, 0x62, 0x2e, 0x50, 0x66, 0x63, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x27, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x58, 0x5f, 0x38, 0x30, 0x32, 0x31, 0x50, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x44, 0x53, 0x43, 0x50, 0x10, 0x01, 0x1a, 0xd5, 0x01, 0x0a, 0x16, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x4c, 0x65, 0x61, 0x66, 0x43, 0x66, 0x63, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x73, 0x12, 0x8d, 0x01, 0x0a, 0x18, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x5f, 0x6c, 0x65, 0x61, 0x66, 0x5f, 0x63, 0x66, 0x63, 0x5f, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x4c, 0x65, 0x61, 0x66, 0x43, 0x66, 0x63, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x73, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x4c, 0x65,
	0x61, 0x66, 0x43, 0x66, 0x63, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x18, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x2d, 0x6c, 0x65, 0x61, 0x66, 0x2d, 0x63, 0x66, 0x63, 0x2d, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x1a, 0x2b, 0x0a, 0x15, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x4c, 0x65, 0x61, 0x66, 0x43, 0x66, 0x63, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x6f,
	0x74, 0x22, 0x8a, 0x01, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x4c, 0x50, 0x55, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x4e, 0x52, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x53, 0x55, 0x10, 0x02,
	0x12, 0x12, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x4e, 0x53, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x47, 0x52, 0x45, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x56, 0x53, 0x55, 0x10, 0x05, 0x22, 0xa6,
	0x01, 0x0a, 0x0f, 0x4e, 0x65, 0x78, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x65, 0x78, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x50, 0x55, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x4e,
	0x65, 0x78, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52,
	0x4e, 0x52, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x65, 0x78, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x53, 0x55, 0x10, 0x02, 0x12, 0x16, 0x0a,
	0x12, 0x4e, 0x65, 0x78, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x4e, 0x53, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x65, 0x78, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x47, 0x52, 0x45, 0x10, 0x04, 0x12, 0x17,
	0x0a, 0x13, 0x4e, 0x65, 0x78, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x56, 0x53, 0x55, 0x10, 0x05, 0x1a, 0xd0, 0x02, 0x0a, 0x09, 0x53, 0x66, 0x75, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x73, 0x12, 0x42, 0x0a, 0x09, 0x73, 0x66, 0x75, 0x5f, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x53, 0x66, 0x75, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x53, 0x66, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x09,
	0x73, 0x66, 0x75, 0x2d, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x1a, 0xfe, 0x01, 0x0a, 0x08, 0x53, 0x66,
	0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x64, 0x72, 0x61,
	0x6d, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x64,
	0x72, 0x61, 0x6d, 0x2d, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x6c, 0x61, 0x73,
	0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66, 0x6c,
	0x61, 0x73, 0x68, 0x2d, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x75, 0x70, 0x2d, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69,
	0x73, 0x2d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x1a, 0xe8, 0x24, 0x0a, 0x05, 0x43,
	0x61, 0x72, 0x64, 0x73, 0x12, 0x30, 0x0a, 0x04, 0x63, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d,
	0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x61, 0x72, 0x64,
	0x52, 0x04, 0x63, 0x61, 0x72, 0x64, 0x1a, 0xac, 0x24, 0x0a, 0x04, 0x43, 0x61, 0x72, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x61, 0x72, 0x64, 0x2d, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x6e, 0x75, 0x6d, 0x12,
	0x49, 0x0a, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65,
	0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x61,
	0x72, 0x64, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x69,
	0x6e, 0x69, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x55, 0x0a, 0x0f, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76,
	0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x61, 0x72,
	0x64, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x0f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x32, 0x0a, 0x03, 0x70, 0x69, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76,
	0x6d, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x2e, 0x50, 0x69, 0x63,
	0x52, 0x03, 0x70, 0x69, 0x63, 0x12, 0x51, 0x0a, 0x0e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x64,
	0x6d, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d,
	0x2e, 0x43, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x61, 0x72, 0x64,
	0x54, 0x64, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x0e, 0x63, 0x61, 0x72, 0x64, 0x2d, 0x74,
	0x64, 0x6d, 0x2d, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x4c, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76,
	0x6d, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x57, 0x0a, 0x10, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44,
	0x65, 0x76, 0x6d, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x10, 0x70,
	0x6f, 0x72, 0x74, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x73, 0x12,
	0x52, 0x0a, 0x0e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x43, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x52, 0x0e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x4c, 0x0a, 0x0c, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x43, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x52, 0x0c, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2d, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x12, 0x4c, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x43, 0x61, 0x72, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64,
	0x65, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x12,
	0x3a, 0x0a, 0x06, 0x65, 0x6d, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65,
	0x76, 0x6d, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x2e, 0x45, 0x6d,
	0x53, 0x65, 0x74, 0x52, 0x06, 0x65, 0x6d, 0x2d, 0x73, 0x65, 0x74, 0x12, 0x52, 0x0a, 0x0e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76,
	0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x61, 0x72,
	0x64, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52,
	0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12,
	0x49, 0x0a, 0x0b, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65,
	0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x61,
	0x72, 0x64, 0x2e, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x52, 0x0b, 0x70,
	0x61, 0x6e, 0x65, 0x6c, 0x2d, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x4f, 0x0a, 0x0d, 0x69, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e,
	0x44, 0x65, 0x76, 0x6d, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x2e,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x0d, 0x69, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x1a, 0xc8, 0x01, 0x0a, 0x03,
	0x50, 0x69, 0x63, 0x12, 0x50, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x43, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x2e, 0x50, 0x69, 0x63, 0x2e, 0x4c, 0x6f, 0x67, 0x69,
	0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2d, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x70, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x22,
	0x55, 0x0a, 0x0b, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14,
	0x0a, 0x10, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x17, 0x0a,
	0x13, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x02, 0x1a, 0x83, 0x02, 0x0a, 0x0c, 0x43, 0x61, 0x72, 0x64, 0x54,
	0x64, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x64, 0x6c, 0x65, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x64, 0x6c, 0x65,
	0x2d, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x5f, 0x65, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x64, 0x6c,
	0x65, 0x2d, 0x63, 0x6f, 0x64, 0x65, 0x2d, 0x65, 0x31, 0x12, 0x51, 0x0a, 0x09, 0x69, 0x6d, 0x70,
	0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e,
	0x43, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x54,
	0x64, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x2e, 0x49, 0x6d, 0x70, 0x65, 0x64, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x09, 0x69, 0x6d, 0x70, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x5e, 0x0a, 0x09,
	0x49, 0x6d, 0x70, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f,
	0x49, 0x6d, 0x70, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x49,
	0x6d, 0x70, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x58, 0x5f, 0x37, 0x35, 0x4f, 0x48, 0x4d,
	0x53, 0x10, 0x4b, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x6d, 0x70, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x58, 0x5f, 0x31, 0x32, 0x30, 0x4f, 0x48, 0x4d, 0x53, 0x10, 0x78, 0x1a, 0xbc, 0x05, 0x0a,
	0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x4d, 0x0a, 0x08,
	0x70, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76,
	0x6d, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x52, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x74, 0x65, 0x12, 0x5e, 0x0a, 0x0e, 0x62,
	0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76,
	0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x61, 0x72,
	0x64, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x42, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0e, 0x62, 0x61, 0x6e,
	0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x34, 0x0a, 0x08, 0x50,
	0x6f, 0x72, 0x74, 0x72, 0x61, 0x74, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x6f, 0x72, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x5f, 0x58, 0x5f, 0x31, 0x35, 0x35, 0x4d, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f,
	0x50, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x58, 0x5f, 0x36, 0x32, 0x32, 0x4d, 0x10,
	0x01, 0x22, 0xc7, 0x03, 0x0a, 0x0d, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x20, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45,
	0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x42, 0x61, 0x6e,
	0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x45, 0x54, 0x48, 0x58, 0x5f,
	0x32, 0x38, 0x58, 0x31, 0x30, 0x47, 0x46, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x42, 0x61, 0x6e,
	0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x45, 0x54, 0x48, 0x58, 0x5f,
	0x32, 0x36, 0x58, 0x31, 0x30, 0x47, 0x46, 0x58, 0x5f, 0x31, 0x38, 0x58, 0x47, 0x46, 0x10, 0x02,
	0x12, 0x25, 0x0a, 0x21, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x4d, 0x6f, 0x64,
	0x65, 0x5f, 0x45, 0x54, 0x48, 0x58, 0x5f, 0x32, 0x30, 0x58, 0x31, 0x30, 0x47, 0x46, 0x58, 0x5f,
	0x32, 0x34, 0x58, 0x47, 0x46, 0x10, 0x03, 0x12, 0x2e, 0x0a, 0x2a, 0x42, 0x61, 0x6e, 0x64, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x45, 0x54, 0x48, 0x58, 0x5f, 0x32, 0x58,
	0x31, 0x30, 0x30, 0x47, 0x45, 0x58, 0x5f, 0x33, 0x30, 0x58, 0x31, 0x30, 0x47, 0x46, 0x58, 0x5f,
	0x31, 0x30, 0x58, 0x47, 0x46, 0x10, 0x04, 0x12, 0x2e, 0x0a, 0x2a, 0x42, 0x61, 0x6e, 0x64, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x45, 0x54, 0x48, 0x58, 0x5f, 0x32, 0x58,
	0x31, 0x30, 0x30, 0x47, 0x45, 0x58, 0x5f, 0x32, 0x36, 0x58, 0x31, 0x30, 0x47, 0x46, 0x58, 0x5f,
	0x31, 0x34, 0x58, 0x47, 0x46, 0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a, 0x42, 0x61, 0x6e, 0x64, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x45, 0x54, 0x48, 0x58, 0x5f, 0x32, 0x58,
	0x31, 0x30, 0x30, 0x47, 0x45, 0x10, 0x06, 0x12, 0x26, 0x0a, 0x22, 0x42, 0x61, 0x6e, 0x64, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x45, 0x54, 0x48, 0x58, 0x5f, 0x31, 0x58,
	0x31, 0x30, 0x30, 0x47, 0x45, 0x58, 0x5f, 0x34, 0x58, 0x31, 0x30, 0x47, 0x46, 0x10, 0x07, 0x12,
	0x1d, 0x0a, 0x19, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x4d, 0x6f, 0x64, 0x65,
	0x5f, 0x50, 0x4f, 0x53, 0x58, 0x5f, 0x38, 0x58, 0x36, 0x32, 0x32, 0x4d, 0x10, 0x0c, 0x12, 0x1e,
	0x0a, 0x1a, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x5f,
	0x50, 0x4f, 0x53, 0x58, 0x5f, 0x34, 0x58, 0x32, 0x58, 0x5f, 0x35, 0x47, 0x10, 0x0d, 0x12, 0x1c,
	0x0a, 0x18, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x5f,
	0x50, 0x4f, 0x53, 0x58, 0x5f, 0x31, 0x58, 0x31, 0x30, 0x47, 0x10, 0x0e, 0x12, 0x1d, 0x0a, 0x19,
	0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x50, 0x4f,
	0x53, 0x58, 0x5f, 0x38, 0x58, 0x31, 0x35, 0x35, 0x4d, 0x10, 0x0f, 0x1a, 0xb8, 0x03, 0x0a, 0x0e,
	0x50, 0x6f, 0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x63,
	0x0a, 0x0f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x43, 0x61, 0x72, 0x64, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d,
	0x6f, 0x64, 0x65, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x6f,
	0x64, 0x65, 0x52, 0x0f, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x6d,
	0x6f, 0x64, 0x65, 0x1a, 0xc0, 0x02, 0x0a, 0x0d, 0x50, 0x6f, 0x72, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x6f, 0x72,
	0x74, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6f,
	0x72, 0x74, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x60, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x43, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x6d, 0x6f, 0x64, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x08, 0x4d, 0x6f,
	0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x4d, 0x6f, 0x64,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x6f, 0x64, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f, 0x32, 0x35, 0x47, 0x45, 0x58, 0x5f, 0x31, 0x30, 0x47, 0x45,
	0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58,
	0x5f, 0x31, 0x30, 0x47, 0x45, 0x58, 0x5f, 0x31, 0x47, 0x45, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f,
	0x4d, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f, 0x32, 0x35, 0x47, 0x45, 0x10,
	0x03, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f,
	0x31, 0x30, 0x47, 0x45, 0x10, 0x04, 0x1a, 0xbf, 0x01, 0x0a, 0x0d, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x65, 0x0a, 0x10, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x5f, 0x70, 0x72, 0x69, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x39, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d,
	0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x61, 0x72, 0x64,
	0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x50, 0x72, 0x69, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x10, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x2d, 0x70, 0x72, 0x69, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22,
	0x47, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x50, 0x72, 0x69, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x1a, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x75, 0x65, 0x50, 0x72, 0x69, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x19, 0x0a,
	0x15, 0x51, 0x75, 0x65, 0x75, 0x65, 0x50, 0x72, 0x69, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0xa6, 0x01, 0x0a, 0x0b, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x59, 0x0a, 0x0c, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76,
	0x6d, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x2e, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x35, 0x52, 0x0c, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2d, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x22, 0x3c, 0x0a, 0x0c, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x35, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x35, 0x5f, 0x53, 0x44, 0x48, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x35, 0x5f, 0x53, 0x4f, 0x4e, 0x45, 0x54, 0x10,
	0x01, 0x1a, 0x9f, 0x04, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x55, 0x0a, 0x0b, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f,
	0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x43, 0x61, 0x72, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65,
	0x2e, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x73, 0x68, 0x69,
	0x65, 0x6c, 0x64, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x7d, 0x0a, 0x19, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x43,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x19, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x2d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x65,
	0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x59, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d,
	0x2e, 0x43, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4d,
	0x6f, 0x64, 0x65, 0x35, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x6d, 0x6f,
	0x64, 0x65, 0x22, 0x3d, 0x0a, 0x0a, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x17, 0x0a, 0x13, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x44,
	0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x68, 0x69,
	0x65, 0x6c, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10,
	0x01, 0x22, 0x5e, 0x0a, 0x16, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x1c, 0x46,
	0x61, 0x75, 0x6c, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x22, 0x0a,
	0x1e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54, 0x45, 0x10,
	0x01, 0x22, 0x40, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65,
	0x35, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65,
	0x35, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x35, 0x5f, 0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54,
	0x45, 0x10, 0x01, 0x1a, 0xfa, 0x02, 0x0a, 0x05, 0x45, 0x6d, 0x53, 0x65, 0x74, 0x12, 0x4f, 0x0a,
	0x0b, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d,
	0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x61, 0x72, 0x64,
	0x2e, 0x45, 0x6d, 0x53, 0x65, 0x74, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x52, 0x0b, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x55,
	0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64,
	0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x43,
	0x61, 0x72, 0x64, 0x2e, 0x45, 0x6d, 0x53, 0x65, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x6c, 0x69,
	0x6e, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65,
	0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x0a, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x5f, 0x42, 0x45, 0x4c, 0x4c, 0x58, 0x5f, 0x31, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x42, 0x45, 0x4c, 0x4c, 0x58,
	0x5f, 0x32, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x5f, 0x42, 0x45, 0x4c, 0x4c, 0x58, 0x5f, 0x33, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x42, 0x45, 0x4c, 0x4c, 0x58,
	0x5f, 0x34, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x5f, 0x42, 0x45, 0x4c, 0x4c, 0x58, 0x5f, 0x35, 0x10, 0x04, 0x22, 0x42, 0x0a, 0x0c,
	0x55, 0x73, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x14,
	0x55, 0x73, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x58, 0x5f, 0x32,
	0x57, 0x49, 0x52, 0x45, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72, 0x6c, 0x69,
	0x6e, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x58, 0x5f, 0x34, 0x57, 0x49, 0x52, 0x45, 0x10, 0x01,
	0x1a, 0xee, 0x01, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x12, 0x6e, 0x0a, 0x13, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x3c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65,
	0x76, 0x6d, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x13, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2d, 0x6d, 0x6f,
	0x64, 0x65, 0x22, 0x6d, 0x0a, 0x11, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x50, 0x32, 0x4d,
	0x50, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x58, 0x5f, 0x44,
	0x45, 0x4c, 0x41, 0x59, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x41, 0x53, 0x10,
	0x02, 0x1a, 0x20, 0x0a, 0x0a, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73,
	0x6c, 0x6f, 0x74, 0x1a, 0x8e, 0x01, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x50,
	0x6f, 0x72, 0x74, 0x73, 0x12, 0x42, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d,
	0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x61, 0x72, 0x64,
	0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0x3a, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x6c, 0x6f, 0x74, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6c,
	0x6f, 0x74, 0x69, 0x64, 0x22, 0x51, 0x0a, 0x0a, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x6e, 0x69, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12,
	0x16, 0x0a, 0x12, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x02, 0x22, 0x6c, 0x0a, 0x0e, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x55, 0x4e, 0x52, 0x45,
	0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x52, 0x45, 0x47,
	0x49, 0x53, 0x54, 0x45, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x02, 0x1a, 0xac, 0x02, 0x0a, 0x07, 0x43, 0x66, 0x43, 0x61, 0x72, 0x64,
	0x73, 0x12, 0x3a, 0x0a, 0x07, 0x63, 0x66, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d,
	0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x43, 0x66, 0x43, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x66,
	0x43, 0x61, 0x72, 0x64, 0x52, 0x07, 0x63, 0x66, 0x2d, 0x63, 0x61, 0x72, 0x64, 0x1a, 0xe4, 0x01,
	0x0a, 0x06, 0x43, 0x66, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x2d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x61, 0x72, 0x64, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x2d, 0x73, 0x69, 0x7a, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x2d, 0x75, 0x73,
	0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x66, 0x72, 0x65,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x2d,
	0x66, 0x72, 0x65, 0x65, 0x1a, 0x83, 0xc4, 0x03, 0x0a, 0x05, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12,
	0x30, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d,
	0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x1a, 0xc6, 0xc3, 0x03, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x49, 0x0a,
	0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x27, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d,
	0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f,
	0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x43, 0x0a, 0x09, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x25, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d,
	0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x2e, 0x48, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x68, 0x61, 0x72, 0x64, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x4f, 0x0a, 0x0d, 0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x4c, 0x6f, 0x6f, 0x70, 0x62, 0x61,
	0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0d, 0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b,
	0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x3c, 0x0a, 0x19, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x6c,
	0x61, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x2d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x64, 0x65,
	0x6c, 0x61, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x2d,
	0x75, 0x70, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x6c, 0x61, 0x73, 0x74, 0x2d, 0x64, 0x6f, 0x77, 0x6e, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x49, 0x0a, 0x0b, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65,
	0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x6d,
	0x65, 0x64, 0x69, 0x75, 0x6d, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x6f, 0x70,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x70, 0x65, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x65, 0x71,
	0x75, 0x69, 0x70, 0x70, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63,
	0x61, 0x6c, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x12, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x62, 0x61, 0x6e,
	0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x41, 0x0a, 0x08, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x52,
	0x08, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x12, 0x38, 0x0a, 0x05, 0x6c, 0x61, 0x73,
	0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x4c, 0x61, 0x73, 0x65, 0x72, 0x52, 0x05, 0x6c, 0x61,
	0x73, 0x65, 0x72, 0x12, 0x52, 0x0a, 0x0e, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x0e, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x5e, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76,
	0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72,
	0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x6c,
	0x61, 0x72, 0x6d, 0x52, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2d, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x32, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65,
	0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x32, 0x0a, 0x03, 0x61,
	0x74, 0x6d, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x41, 0x74, 0x6d, 0x52, 0x03, 0x61, 0x74, 0x6d, 0x12,
	0x35, 0x0a, 0x04, 0x63, 0x70, 0x6f, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d,
	0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x43, 0x70, 0x6f, 0x73,
	0x52, 0x04, 0x63, 0x70, 0x6f, 0x73, 0x12, 0x46, 0x0a, 0x0a, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x61,
	0x6c, 0x61, 0x72, 0x6d, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x6c, 0x61,
	0x72, 0x6d, 0x52, 0x0a, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x40,
	0x0a, 0x08, 0x61, 0x64, 0x6d, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44,
	0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x41,
	0x64, 0x6d, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x08, 0x61, 0x64, 0x6d, 0x2d, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x46, 0x0a, 0x0a, 0x70, 0x68, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65,
	0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x2e, 0x50, 0x68, 0x79, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x0a, 0x70, 0x68,
	0x79, 0x2d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x43, 0x0a, 0x09, 0x70, 0x68, 0x79, 0x5f,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x50, 0x68, 0x79, 0x56, 0x6f, 0x69,
	0x63, 0x65, 0x52, 0x09, 0x70, 0x68, 0x79, 0x2d, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x35, 0x0a,
	0x04, 0x65, 0x31, 0x74, 0x31, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x45, 0x31, 0x54, 0x31, 0x52, 0x04,
	0x65, 0x31, 0x74, 0x31, 0x12, 0x35, 0x0a, 0x04, 0x65, 0x33, 0x74, 0x33, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d,
	0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x2e, 0x45, 0x33, 0x54, 0x33, 0x52, 0x04, 0x65, 0x33, 0x74, 0x33, 0x1a, 0x9f, 0x53, 0x0a, 0x08,
	0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x12, 0x41, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73,
	0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x06, 0x64,
	0x75, 0x70, 0x6c, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x2e, 0x44, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x52, 0x06, 0x64, 0x75, 0x70, 0x6c, 0x65,
	0x78, 0x12, 0x53, 0x0a, 0x0b, 0x6e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f,
	0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4e, 0x65,
	0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x6e, 0x65, 0x67, 0x6f, 0x74,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x61, 0x0a, 0x10, 0x6e, 0x65, 0x67, 0x6f, 0x74, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x35, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44,
	0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x45,
	0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x10, 0x6e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x6f, 0x77,
	0x6e, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x64, 0x6f, 0x77, 0x6e, 0x2d, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x75, 0x70, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x75, 0x70, 0x2d, 0x68, 0x6f, 0x6c, 0x64,
	0x2d, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x4f, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72,
	0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x63, 0x0a, 0x11, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f,
	0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x35, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e,
	0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e,
	0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x53, 0x70, 0x65, 0x65, 0x64, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x11, 0x73, 0x70, 0x65, 0x65, 0x64, 0x2d,
	0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x4c, 0x0a, 0x09, 0x62,
	0x69, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76,
	0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x45, 0x74, 0x68,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x42, 0x69, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x09,
	0x62, 0x69, 0x74, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x63, 0x0a,
	0x11, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x11, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x2d, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x62, 0x0a, 0x11, 0x74, 0x78, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x63,
	0x66, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d,
	0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x45, 0x74, 0x68, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x2e, 0x54, 0x78, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x66, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x11, 0x74, 0x78, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x63, 0x66,
	0x67, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x74, 0x78, 0x5f, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x74, 0x78, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x49, 0x0a, 0x08,
	0x66, 0x65, 0x63, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76,
	0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x45, 0x74, 0x68,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x46, 0x65, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x66,
	0x65, 0x63, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x54, 0x0a, 0x0c, 0x65, 0x74, 0x68, 0x5f, 0x66,
	0x65, 0x63, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d,
	0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x45, 0x74, 0x68, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x2e, 0x45, 0x74, 0x68, 0x46, 0x65, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x52,
	0x0c, 0x65, 0x74, 0x68, 0x2d, 0x66, 0x65, 0x63, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a,
	0x10, 0x66, 0x65, 0x63, 0x5f, 0x70, 0x72, 0x65, 0x5f, 0x61, 0x6c, 0x6d, 0x5f, 0x74, 0x68, 0x72,
	0x63, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x66, 0x65, 0x63, 0x2d, 0x70, 0x72, 0x65,
	0x2d, 0x61, 0x6c, 0x6d, 0x2d, 0x74, 0x68, 0x72, 0x63, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x65, 0x63,
	0x5f, 0x70, 0x72, 0x65, 0x5f, 0x61, 0x6c, 0x6d, 0x5f, 0x74, 0x68, 0x72, 0x70, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x10, 0x66, 0x65, 0x63, 0x2d, 0x70, 0x72, 0x65, 0x2d, 0x61, 0x6c, 0x6d,
	0x2d, 0x74, 0x68, 0x72, 0x70, 0x12, 0x2c, 0x0a, 0x11, 0x66, 0x65, 0x63, 0x5f, 0x70, 0x72, 0x65,
	0x5f, 0x72, 0x73, 0x75, 0x6d, 0x5f, 0x74, 0x68, 0x72, 0x63, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x11, 0x66, 0x65, 0x63, 0x2d, 0x70, 0x72, 0x65, 0x2d, 0x72, 0x73, 0x75, 0x6d, 0x2d, 0x74,
	0x68, 0x72, 0x63, 0x12, 0x2c, 0x0a, 0x11, 0x66, 0x65, 0x63, 0x5f, 0x70, 0x72, 0x65, 0x5f, 0x72,
	0x73, 0x75, 0x6d, 0x5f, 0x74, 0x68, 0x72, 0x70, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11,
	0x66, 0x65, 0x63, 0x2d, 0x70, 0x72, 0x65, 0x2d, 0x72, 0x73, 0x75, 0x6d, 0x2d, 0x74, 0x68, 0x72,
	0x70, 0x12, 0x20, 0x0a, 0x0b, 0x6a, 0x75, 0x6d, 0x62, 0x6f, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6a, 0x75, 0x6d, 0x62, 0x6f, 0x2d, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x74, 0x6c, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65,
	0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x46, 0x6c, 0x6f, 0x77,
	0x63, 0x74, 0x6c, 0x52, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x74, 0x6c, 0x12, 0x57, 0x0a, 0x0d,
	0x67, 0x66, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76,
	0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72,
	0x74, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x47, 0x66, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x67, 0x66, 0x2d, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x07, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x75, 0x70,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f,
	0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x48, 0x6f,
	0x6c, 0x64, 0x55, 0x70, 0x52, 0x07, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x75, 0x70, 0x12, 0x41, 0x0a,
	0x05, 0x74, 0x78, 0x69, 0x70, 0x67, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x2e, 0x54, 0x78, 0x69, 0x70, 0x67, 0x52, 0x05, 0x74, 0x78, 0x69, 0x70, 0x67,
	0x12, 0x55, 0x0a, 0x0c, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f,
	0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x53, 0x70, 0x65, 0x65, 0x64, 0x52, 0x0c, 0x73, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x2d, 0x73, 0x70, 0x65, 0x65, 0x64, 0x12, 0x61, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x6d, 0x69,
	0x73, 0x63, 0x75, 0x6f, 0x75, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x35, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e,
	0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e,
	0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x69, 0x73, 0x63,
	0x75, 0x6f, 0x75, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x6d, 0x69, 0x73,
	0x63, 0x75, 0x6f, 0x75, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x58, 0x0a, 0x0d, 0x66, 0x6c,
	0x65, 0x78, 0x70, 0x68, 0x79, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x32, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e,
	0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e,
	0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x46, 0x6c, 0x65, 0x78, 0x70, 0x68, 0x79,
	0x53, 0x70, 0x65, 0x65, 0x64, 0x52, 0x0d, 0x66, 0x6c, 0x65, 0x78, 0x70, 0x68, 0x79, 0x2d, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x72, 0x75, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x6d, 0x72, 0x75, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x67, 0x61, 0x70, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x67,
	0x61, 0x70, 0x12, 0x54, 0x0a, 0x0c, 0x6d, 0x61, 0x63, 0x5f, 0x69, 0x74, 0x66, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e,
	0x4d, 0x61, 0x63, 0x49, 0x74, 0x66, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x6d, 0x61, 0x63, 0x2d,
	0x69, 0x74, 0x66, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x65,
	0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61,
	0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x0c, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x31, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44,
	0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x45,
	0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46, 0x61,
	0x75, 0x6c, 0x74, 0x52, 0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x12, 0x65, 0x0a, 0x12, 0x6c, 0x6f, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x64, 0x6f,
	0x77, 0x6e, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d,
	0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x45, 0x74, 0x68, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4c, 0x6f, 0x73, 0x54, 0x72, 0x61, 0x70, 0x44, 0x6f, 0x77, 0x6e,
	0x48, 0x6f, 0x6c, 0x64, 0x52, 0x12, 0x6c, 0x6f, 0x73, 0x2d, 0x74, 0x72, 0x61, 0x70, 0x2d, 0x64,
	0x6f, 0x77, 0x6e, 0x2d, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x52, 0x0a, 0x0b, 0x64, 0x6f, 0x77, 0x6e,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d,
	0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x45, 0x74, 0x68, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x0b, 0x64, 0x6f, 0x77, 0x6e, 0x2d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x66, 0x0a, 0x12,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2d, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2d, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x69, 0x0a, 0x13, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x24, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x37, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e,
	0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e,
	0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x52, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x46,
	0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x13, 0x72, 0x6f, 0x6d, 0x6f,
	0x74, 0x65, 0x2d, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x54, 0x0a, 0x0c, 0x65, 0x74, 0x68, 0x5f, 0x77, 0x61, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x18,
	0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64,
	0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x45, 0x74, 0x68,
	0x57, 0x61, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x52, 0x0c, 0x65, 0x74, 0x68, 0x2d, 0x77, 0x61, 0x6e,
	0x2d, 0x61, 0x74, 0x74, 0x72, 0x12, 0x6c, 0x0a, 0x14, 0x66, 0x65, 0x63, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x26, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76,
	0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72,
	0x74, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x46, 0x65, 0x63, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x14, 0x66,
	0x65, 0x63, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x12, 0x52, 0x0a, 0x0b, 0x64, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x5f, 0x61, 0x75,
	0x74, 0x6f, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e,
	0x44, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x0b, 0x64, 0x75, 0x70, 0x6c,
	0x65, 0x78, 0x2d, 0x61, 0x75, 0x74, 0x6f, 0x12, 0x81, 0x01, 0x0a, 0x1b, 0x6e, 0x65, 0x67, 0x6f,
	0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62,
	0x6c, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d,
	0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x45, 0x74, 0x68, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x1b,
	0x6e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x4f, 0x0a, 0x0a, 0x63,
	0x6f, 0x6d, 0x62, 0x6f, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65,
	0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x45, 0x74,
	0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x62, 0x6f, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x2a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x55, 0x0a, 0x0c, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e,
	0x46, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x52, 0x0c, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x2d, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x67, 0x61, 0x70, 0x18, 0x2c, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x2d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2d,
	0x67, 0x61, 0x70, 0x12, 0x87, 0x01, 0x0a, 0x1d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x49, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x1d,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2d, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x6c, 0x0a,
	0x14, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x66, 0x6c, 0x61, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x46, 0x6c, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x66, 0x6c, 0x61, 0x70,
	0x2d, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x6c,
	0x69, 0x6e, 0x6b, 0x5f, 0x66, 0x6c, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x66, 0x6c,
	0x61, 0x70, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x30, 0x0a, 0x13, 0x6c,
	0x69, 0x6e, 0x6b, 0x5f, 0x66, 0x6c, 0x61, 0x70, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x66,
	0x6c, 0x61, 0x70, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x3c, 0x0a,
	0x19, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x66, 0x6c, 0x61, 0x70, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x19, 0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x66, 0x6c, 0x61, 0x70, 0x2d, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x3e, 0x0a, 0x1a, 0x6c,
	0x69, 0x6e, 0x6b, 0x5f, 0x66, 0x6c, 0x61, 0x70, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x1a, 0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x66, 0x6c, 0x61, 0x70, 0x2d, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x70, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x75,
	0x70, 0x2d, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x3e, 0x0a, 0x1a, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x66, 0x6c, 0x6f,
	0x77, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2d, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x2d, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x46, 0x0a, 0x1e, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x72, 0x78, 0x5f,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x1e, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2d, 0x61, 0x6c, 0x61,
	0x72, 0x6d, 0x2d, 0x72, 0x78, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12,
	0x46, 0x0a, 0x1e, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x61,
	0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x74, 0x78, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1e, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x2d, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x2d, 0x74, 0x78, 0x2d, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x4c, 0x0a, 0x21, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x37, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x21, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2d,
	0x61, 0x6c, 0x61, 0x72, 0x6d, 0x2d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2d, 0x62, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x52, 0x0a, 0x0b, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x61,
	0x75, 0x74, 0x6f, 0x73, 0x18, 0x38, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x2e, 0x53, 0x70, 0x65, 0x65, 0x64, 0x41, 0x75, 0x74, 0x6f, 0x73, 0x52, 0x0b, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x2d, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x12, 0x6f, 0x0a, 0x15, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x5f, 0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x15, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2d, 0x6c, 0x6f, 0x6f, 0x70, 0x62,
	0x61, 0x63, 0x6b, 0x2d, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x31,
	0x74, 0x63, 0x61, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x31, 0x74, 0x63, 0x61,
	0x12, 0x14, 0x0a, 0x05, 0x62, 0x32, 0x74, 0x63, 0x61, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x62, 0x32, 0x74, 0x63, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x33, 0x74, 0x63, 0x61, 0x18,
	0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x33, 0x74, 0x63, 0x61, 0x12, 0x41, 0x0a, 0x05,
	0x63, 0x6f, 0x6d, 0x62, 0x6f, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x52, 0x05, 0x63, 0x6f, 0x6d, 0x62, 0x6f, 0x12,
	0x3b, 0x0a, 0x03, 0x65, 0x65, 0x65, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x2e, 0x45, 0x65, 0x65, 0x52, 0x03, 0x65, 0x65, 0x65, 0x1a, 0x89, 0x0d, 0x0a,
	0x0a, 0x45, 0x74, 0x68, 0x57, 0x61, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x12, 0x60, 0x0a, 0x0c, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e,
	0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e,
	0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x45, 0x74, 0x68, 0x57, 0x61, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52,
	0x0c, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2d, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x51, 0x0a,
	0x07, 0x6a, 0x30, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76,
	0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x45, 0x74, 0x68,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x45, 0x74, 0x68, 0x57, 0x61, 0x6e, 0x41, 0x74, 0x74, 0x72,
	0x2e, 0x4a, 0x30, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x6a, 0x30, 0x2d, 0x6d, 0x6f, 0x64, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x6a, 0x30, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x6a, 0x30, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x6a, 0x30, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6a, 0x30, 0x2d, 0x74, 0x72, 0x61, 0x63, 0x65, 0x12, 0x51, 0x0a, 0x07, 0x6a, 0x31, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72,
	0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x2e, 0x45, 0x74, 0x68, 0x57, 0x61, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x2e, 0x4a, 0x31, 0x4d, 0x6f,
	0x64, 0x65, 0x52, 0x07, 0x6a, 0x31, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6a,
	0x31, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6a,
	0x31, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6a, 0x31, 0x5f, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x31, 0x2d, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x63, 0x32, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x63, 0x32, 0x12, 0x4c, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x36, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d,
	0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x45, 0x74, 0x68, 0x57, 0x61, 0x6e,
	0x41, 0x74, 0x74, 0x72, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x55, 0x0a, 0x08, 0x73, 0x63, 0x72, 0x61, 0x6d, 0x62, 0x6c, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76,
	0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72,
	0x74, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x45, 0x74, 0x68, 0x57, 0x61,
	0x6e, 0x41, 0x74, 0x74, 0x72, 0x2e, 0x53, 0x63, 0x72, 0x61, 0x6d, 0x62, 0x6c, 0x65, 0x52, 0x08,
	0x73, 0x63, 0x72, 0x61, 0x6d, 0x62, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x78, 0x5f, 0x6a,
	0x30, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72,
	0x78, 0x2d, 0x6a, 0x30, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x78,
	0x5f, 0x6a, 0x30, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x72, 0x78, 0x2d, 0x6a, 0x30, 0x2d, 0x74, 0x72, 0x61, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x72, 0x78, 0x5f, 0x6a, 0x31, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x72, 0x78, 0x2d, 0x6a, 0x31, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x72, 0x78, 0x5f, 0x6a, 0x31, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x78, 0x2d, 0x6a, 0x31, 0x2d, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x72, 0x78, 0x5f, 0x63, 0x32, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x72, 0x78, 0x2d, 0x63, 0x32, 0x12, 0x59, 0x0a, 0x0a, 0x72, 0x78, 0x5f, 0x6a, 0x30, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x2e, 0x45, 0x74, 0x68, 0x57, 0x61, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x2e, 0x52, 0x78, 0x4a,
	0x30, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x78, 0x2d, 0x6a, 0x30, 0x2d, 0x6d, 0x6f, 0x64,
	0x65, 0x12, 0x59, 0x0a, 0x0a, 0x72, 0x78, 0x5f, 0x6a, 0x31, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64,
	0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x45, 0x74, 0x68,
	0x57, 0x61, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x2e, 0x52, 0x78, 0x4a, 0x31, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x0a, 0x72, 0x78, 0x2d, 0x6a, 0x31, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x62, 0x31, 0x74, 0x63, 0x61, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x31, 0x74,
	0x63, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x32, 0x74, 0x63, 0x61, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x62, 0x32, 0x74, 0x63, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x33, 0x74, 0x63,
	0x61, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x33, 0x74, 0x63, 0x61, 0x22, 0x39,
	0x0a, 0x0b, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x13, 0x0a,
	0x0f, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x53, 0x44, 0x48,
	0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x5f, 0x53, 0x4f, 0x4e, 0x45, 0x54, 0x10, 0x01, 0x22, 0x75, 0x0a, 0x06, 0x4a, 0x30, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45,
	0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x4a, 0x30, 0x4d, 0x6f, 0x64, 0x65,
	0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4a, 0x30, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x58, 0x5f, 0x31,
	0x42, 0x59, 0x54, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x4a, 0x30, 0x4d, 0x6f, 0x64, 0x65,
	0x5f, 0x58, 0x5f, 0x31, 0x36, 0x42, 0x59, 0x54, 0x45, 0x10, 0x10, 0x12, 0x23, 0x0a, 0x1f, 0x4a,
	0x30, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x58, 0x5f, 0x36, 0x34, 0x42, 0x59, 0x54, 0x45, 0x58, 0x5f,
	0x4f, 0x52, 0x58, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x58, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x40,
	0x22, 0x75, 0x0a, 0x06, 0x4a, 0x31, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45,
	0x5f, 0x4a, 0x31, 0x4d, 0x6f, 0x64, 0x65, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4a, 0x31, 0x4d,
	0x6f, 0x64, 0x65, 0x5f, 0x58, 0x5f, 0x31, 0x42, 0x59, 0x54, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a,
	0x0f, 0x4a, 0x31, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x58, 0x5f, 0x31, 0x36, 0x42, 0x59, 0x54, 0x45,
	0x10, 0x10, 0x12, 0x23, 0x0a, 0x1f, 0x4a, 0x31, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x58, 0x5f, 0x36,
	0x34, 0x42, 0x59, 0x54, 0x45, 0x58, 0x5f, 0x4f, 0x52, 0x58, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x58,
	0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x40, 0x22, 0x2a, 0x0a, 0x05, 0x43, 0x6c, 0x6f, 0x63, 0x6b,
	0x12, 0x10, 0x0a, 0x0c, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52,
	0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x53, 0x4c, 0x41, 0x56,
	0x45, 0x10, 0x01, 0x22, 0x37, 0x0a, 0x08, 0x53, 0x63, 0x72, 0x61, 0x6d, 0x62, 0x6c, 0x65, 0x12,
	0x15, 0x0a, 0x11, 0x53, 0x63, 0x72, 0x61, 0x6d, 0x62, 0x6c, 0x65, 0x5f, 0x44, 0x49, 0x53, 0x41,
	0x42, 0x4c, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x63, 0x72, 0x61, 0x6d, 0x62,
	0x6c, 0x65, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x22, 0x93, 0x01, 0x0a,
	0x08, 0x52, 0x78, 0x4a, 0x30, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f,
	0x52, 0x78, 0x4a, 0x30, 0x4d, 0x6f, 0x64, 0x65, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x78,
	0x4a, 0x30, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x58, 0x5f, 0x31, 0x42, 0x59, 0x54, 0x45, 0x10, 0x01,
	0x12, 0x15, 0x0a, 0x11, 0x52, 0x78, 0x4a, 0x30, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x58, 0x5f, 0x31,
	0x36, 0x42, 0x59, 0x54, 0x45, 0x10, 0x10, 0x12, 0x25, 0x0a, 0x21, 0x52, 0x78, 0x4a, 0x30, 0x4d,
	0x6f, 0x64, 0x65, 0x5f, 0x58, 0x5f, 0x36, 0x34, 0x42, 0x59, 0x54, 0x45, 0x58, 0x5f, 0x4f, 0x52,
	0x58, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x58, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x40, 0x12, 0x12,
	0x0a, 0x0d, 0x52, 0x78, 0x4a, 0x30, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x10,
	0x80, 0x01, 0x22, 0x93, 0x01, 0x0a, 0x08, 0x52, 0x78, 0x4a, 0x31, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x1f, 0x0a, 0x1b, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f,
	0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x52, 0x78, 0x4a, 0x31, 0x4d, 0x6f, 0x64, 0x65, 0x10, 0x00,
	0x12, 0x14, 0x0a, 0x10, 0x52, 0x78, 0x4a, 0x31, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x58, 0x5f, 0x31,
	0x42, 0x59, 0x54, 0x45, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x78, 0x4a, 0x31, 0x4d, 0x6f,
	0x64, 0x65, 0x5f, 0x58, 0x5f, 0x31, 0x36, 0x42, 0x59, 0x54, 0x45, 0x10, 0x10, 0x12, 0x25, 0x0a,
	0x21, 0x52, 0x78, 0x4a, 0x31, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x58, 0x5f, 0x36, 0x34, 0x42, 0x59,
	0x54, 0x45, 0x58, 0x5f, 0x4f, 0x52, 0x58, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x58, 0x5f, 0x4d, 0x4f,
	0x44, 0x45, 0x10, 0x40, 0x12, 0x12, 0x0a, 0x0d, 0x52, 0x78, 0x4a, 0x31, 0x4d, 0x6f, 0x64, 0x65,
	0x5f, 0x50, 0x45, 0x45, 0x52, 0x10, 0x80, 0x01, 0x1a, 0xb2, 0x02, 0x0a, 0x12, 0x46, 0x65, 0x63,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12,
	0x2a, 0x0a, 0x10, 0x62, 0x69, 0x74, 0x30, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x62, 0x69, 0x74, 0x30, 0x2d,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x62,
	0x69, 0x74, 0x31, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x62, 0x69, 0x74, 0x31, 0x2d, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x2d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x19, 0x62, 0x69, 0x74, 0x30, 0x5f,
	0x61, 0x6e, 0x64, 0x5f, 0x62, 0x69, 0x74, 0x31, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x62, 0x69, 0x74, 0x30,
	0x2d, 0x61, 0x6e, 0x64, 0x2d, 0x62, 0x69, 0x74, 0x31, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x12, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x19, 0x75, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65,
	0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x75, 0x6e, 0x63, 0x6f, 0x72, 0x72,
	0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x5f, 0x66, 0x65, 0x63, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x65, 0x2d, 0x66, 0x65, 0x63, 0x1a, 0xe5, 0x02,
	0x0a, 0x19, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x9c, 0x01, 0x0a, 0x1b,
	0x6e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x5a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e,
	0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e,
	0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x2e, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x36, 0x52, 0x1b, 0x6e,
	0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x74, 0x69, 0x62, 0x6c, 0x65, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72,
	0x65, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70,
	0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6f, 0x73, 0x74,
	0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x6f,
	0x73, 0x74, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0x6b, 0x0a, 0x1a, 0x4e, 0x65, 0x67, 0x6f,
	0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x36, 0x12, 0x25, 0x0a, 0x21, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x36, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x26, 0x0a,
	0x22, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x36, 0x5f, 0x44, 0x49, 0x53, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x95, 0x04, 0x0a, 0x13, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4c,
	0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x58, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d,
	0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x45, 0x74, 0x68, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4c, 0x6f, 0x6f, 0x70, 0x62, 0x61,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x6c, 0x61, 0x73, 0x74, 0x2d, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x66, 0x0a, 0x0b, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x44, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65,
	0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x4c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e,
	0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x6c, 0x69, 0x6e, 0x6b,
	0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x72, 0x63, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x63, 0x72, 0x63, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x22, 0x81, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12,
	0x0a, 0x0e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x54, 0x45, 0x53,
	0x54, 0x58, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x5f, 0x4e, 0x4f, 0x58, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x10, 0x02, 0x12,
	0x18, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x58, 0x5f,
	0x43, 0x4c, 0x41, 0x53, 0x48, 0x45, 0x53, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x58, 0x5f, 0x4e, 0x4f, 0x58, 0x5f, 0x53, 0x55,
	0x50, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x04, 0x22, 0x34, 0x0a, 0x0a, 0x4c, 0x69, 0x6e, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x69,
	0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x55, 0x50, 0x10, 0x01, 0x22, 0xe3, 0x04,
	0x0a, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x70, 0x65, 0x65, 0x64,
	0x5f, 0x58, 0x5f, 0x31, 0x30, 0x4d, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x70, 0x65, 0x65,
	0x64, 0x5f, 0x58, 0x5f, 0x31, 0x30, 0x30, 0x4d, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x5f, 0x58, 0x5f, 0x31, 0x30, 0x30, 0x30, 0x4d, 0x10, 0x02, 0x12, 0x11, 0x0a,
	0x0d, 0x53, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x58, 0x5f, 0x32, 0x35, 0x30, 0x30, 0x4d, 0x10, 0x05,
	0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x58, 0x5f, 0x31, 0x30, 0x47, 0x10,
	0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x58, 0x5f, 0x34, 0x30, 0x47,
	0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x58, 0x5f, 0x31, 0x30,
	0x30, 0x47, 0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x41, 0x55,
	0x54, 0x4f, 0x10, 0x09, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x58, 0x5f,
	0x31, 0x47, 0x10, 0x0a, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x58, 0x5f,
	0x32, 0x47, 0x10, 0x0b, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x58, 0x5f,
	0x33, 0x47, 0x10, 0x0c, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x58, 0x5f,
	0x34, 0x47, 0x10, 0x0d, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x58, 0x5f,
	0x31, 0x58, 0x5f, 0x32, 0x35, 0x47, 0x10, 0x0e, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x70, 0x65, 0x65,
	0x64, 0x5f, 0x58, 0x5f, 0x32, 0x58, 0x5f, 0x35, 0x47, 0x10, 0x0f, 0x12, 0x12, 0x0a, 0x0e, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x5f, 0x58, 0x5f, 0x33, 0x58, 0x5f, 0x37, 0x35, 0x47, 0x10, 0x10, 0x12,
	0x0e, 0x0a, 0x0a, 0x53, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x58, 0x5f, 0x35, 0x47, 0x10, 0x11, 0x12,
	0x0f, 0x0a, 0x0b, 0x53, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x58, 0x5f, 0x31, 0x35, 0x47, 0x10, 0x12,
	0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x58, 0x5f, 0x32, 0x30, 0x47, 0x10,
	0x13, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x58, 0x5f, 0x32, 0x35, 0x47,
	0x10, 0x14, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x58, 0x5f, 0x33, 0x30,
	0x47, 0x10, 0x15, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x58, 0x5f, 0x33,
	0x35, 0x47, 0x10, 0x16, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x58, 0x5f,
	0x34, 0x35, 0x47, 0x10, 0x18, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x58,
	0x5f, 0x35, 0x30, 0x47, 0x10, 0x19, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x70, 0x65, 0x65, 0x64, 0x5f,
	0x58, 0x5f, 0x35, 0x35, 0x47, 0x10, 0x1a, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x70, 0x65, 0x65, 0x64,
	0x5f, 0x58, 0x5f, 0x36, 0x30, 0x47, 0x10, 0x1b, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x70, 0x65, 0x65,
	0x64, 0x5f, 0x58, 0x5f, 0x36, 0x35, 0x47, 0x10, 0x1c, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x70, 0x65,
	0x65, 0x64, 0x5f, 0x58, 0x5f, 0x37, 0x30, 0x47, 0x10, 0x1d, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x5f, 0x58, 0x5f, 0x37, 0x35, 0x47, 0x10, 0x1e, 0x12, 0x0f, 0x0a, 0x0b, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x5f, 0x58, 0x5f, 0x38, 0x30, 0x47, 0x10, 0x1f, 0x12, 0x0f, 0x0a, 0x0b,
	0x53, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x58, 0x5f, 0x38, 0x35, 0x47, 0x10, 0x20, 0x12, 0x0f, 0x0a,
	0x0b, 0x53, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x58, 0x5f, 0x39, 0x30, 0x47, 0x10, 0x21, 0x12, 0x0f,
	0x0a, 0x0b, 0x53, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x58, 0x5f, 0x39, 0x35, 0x47, 0x10, 0x22, 0x12,
	0x0e, 0x0a, 0x0a, 0x53, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x58, 0x5f, 0x30, 0x47, 0x10, 0x23, 0x12,
	0x10, 0x0a, 0x0c, 0x53, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x58, 0x5f, 0x34, 0x30, 0x30, 0x47, 0x10,
	0x24, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x58, 0x5f, 0x32, 0x30, 0x30,
	0x47, 0x10, 0x25, 0x22, 0x3b, 0x0a, 0x06, 0x44, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x12, 0x0f, 0x0a,
	0x0b, 0x44, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x10, 0x00, 0x12, 0x0f,
	0x0a, 0x0b, 0x44, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x5f, 0x48, 0x41, 0x4c, 0x46, 0x10, 0x01, 0x12,
	0x0f, 0x0a, 0x0b, 0x44, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x02,
	0x22, 0x40, 0x0a, 0x0b, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x14, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x44,
	0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x65, 0x67,
	0x6f, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44,
	0x10, 0x01, 0x22, 0x7a, 0x0a, 0x0f, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x53, 0x4c, 0x41, 0x56, 0x45, 0x10, 0x00,
	0x12, 0x16, 0x0a, 0x12, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x6f, 0x64, 0x65, 0x5f, 0x4e, 0x41, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x4e, 0x65, 0x67, 0x6f,
	0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x41, 0x55, 0x54, 0x4f,
	0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x10, 0x03, 0x22, 0x56,
	0x0a, 0x09, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x4c, 0x41, 0x4e, 0x58, 0x5f, 0x4d, 0x4f,
	0x44, 0x45, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x4d, 0x6f, 0x64,
	0x65, 0x5f, 0x57, 0x41, 0x4e, 0x58, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x01, 0x12, 0x17, 0x0a,
	0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x4f, 0x54, 0x4e, 0x58, 0x5f,
	0x4d, 0x4f, 0x44, 0x45, 0x10, 0x02, 0x22, 0x47, 0x0a, 0x0f, 0x53, 0x70, 0x65, 0x65, 0x64, 0x53,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x70, 0x65,
	0x65, 0x64, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x4d, 0x41, 0x4e,
	0x55, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x70, 0x65, 0x65, 0x64, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x10, 0x01, 0x22,
	0x31, 0x0a, 0x08, 0x42, 0x69, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x0c, 0x42,
	0x69, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x43, 0x52, 0x43, 0x10, 0x00, 0x12, 0x13, 0x0a,
	0x0f, 0x42, 0x69, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x45, 0x43,
	0x10, 0x01, 0x22, 0x4a, 0x0a, 0x0f, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x69, 0x6d,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x54, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x10,
	0x00, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f, 0x32, 0x30, 0x30, 0x4d, 0x53, 0x10, 0x01, 0x22, 0x56,
	0x0a, 0x0e, 0x54, 0x78, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x66, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x24, 0x0a, 0x20, 0x54, 0x78, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x66, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x54, 0x58, 0x58, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x58, 0x5f, 0x54, 0x41,
	0x52, 0x47, 0x45, 0x54, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x78, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x43, 0x66, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x41, 0x54, 0x54, 0x45, 0x4e, 0x55, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x22, 0xcd, 0x01, 0x0a, 0x07, 0x46, 0x65, 0x63, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x65, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x65, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x5f,
	0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x65,
	0x63, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x45, 0x4e, 0x48, 0x41, 0x4e, 0x43, 0x45, 0x44, 0x10, 0x02,
	0x12, 0x1a, 0x0a, 0x16, 0x46, 0x65, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x45, 0x4e, 0x48, 0x41,
	0x4e, 0x43, 0x45, 0x44, 0x58, 0x5f, 0x49, 0x58, 0x5f, 0x37, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16,
	0x46, 0x65, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x45, 0x4e, 0x48, 0x41, 0x4e, 0x43, 0x45, 0x44,
	0x58, 0x5f, 0x49, 0x58, 0x5f, 0x34, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x65, 0x63, 0x4d,
	0x6f, 0x64, 0x65, 0x5f, 0x4c, 0x48, 0x41, 0x55, 0x4c, 0x58, 0x5f, 0x53, 0x44, 0x10, 0x05, 0x12,
	0x19, 0x0a, 0x15, 0x46, 0x65, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x45, 0x4e, 0x48, 0x41, 0x4e,
	0x43, 0x45, 0x44, 0x58, 0x5f, 0x50, 0x49, 0x44, 0x10, 0x08, 0x12, 0x1a, 0x0a, 0x16, 0x46, 0x65,
	0x63, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x4c, 0x48, 0x41, 0x55, 0x4c, 0x58, 0x5f, 0x53, 0x44, 0x58,
	0x5f, 0x50, 0x49, 0x44, 0x10, 0x09, 0x22, 0x52, 0x0a, 0x0a, 0x45, 0x74, 0x68, 0x46, 0x65, 0x63,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x74, 0x68, 0x46, 0x65, 0x63, 0x4d, 0x6f,
	0x64, 0x65, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13,
	0x45, 0x74, 0x68, 0x46, 0x65, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44,
	0x41, 0x52, 0x44, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x74, 0x68, 0x46, 0x65, 0x63, 0x4d,
	0x6f, 0x64, 0x65, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x02, 0x22, 0x94, 0x01, 0x0a, 0x07, 0x46,
	0x6c, 0x6f, 0x77, 0x63, 0x74, 0x6c, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x6c, 0x6f, 0x77, 0x63, 0x74,
	0x6c, 0x5f, 0x41, 0x4c, 0x4c, 0x58, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x6c, 0x6f, 0x77, 0x63, 0x74, 0x6c, 0x5f, 0x52, 0x45, 0x43,
	0x45, 0x49, 0x56, 0x45, 0x58, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x19, 0x0a, 0x15, 0x46, 0x6c, 0x6f, 0x77, 0x63, 0x74, 0x6c, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x58,
	0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x6c,
	0x6f, 0x77, 0x63, 0x74, 0x6c, 0x5f, 0x41, 0x4c, 0x4c, 0x58, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c,
	0x45, 0x44, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x6c, 0x6f, 0x77, 0x63, 0x74, 0x6c, 0x5f,
	0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x58, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10,
	0x09, 0x22, 0x70, 0x0a, 0x0b, 0x47, 0x66, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x10, 0x47, 0x66, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x41, 0x55, 0x54, 0x4f, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x66, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x49, 0x42, 0x45, 0x52, 0x31, 0x30, 0x30, 0x30, 0x10,
	0x01, 0x12, 0x18, 0x0a, 0x14, 0x47, 0x66, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x46, 0x49, 0x42, 0x45, 0x52, 0x31, 0x30, 0x30, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x47,
	0x66, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x4f, 0x50, 0x50, 0x45,
	0x52, 0x10, 0x03, 0x22, 0x31, 0x0a, 0x06, 0x48, 0x6f, 0x6c, 0x64, 0x55, 0x70, 0x12, 0x13, 0x0a,
	0x0f, 0x48, 0x6f, 0x6c, 0x64, 0x55, 0x70, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x48, 0x6f, 0x6c, 0x64, 0x55, 0x70, 0x5f, 0x45, 0x4e, 0x41,
	0x42, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x22, 0x30, 0x0a, 0x05, 0x54, 0x78, 0x69, 0x70, 0x67, 0x12,
	0x10, 0x0a, 0x0c, 0x54, 0x78, 0x69, 0x70, 0x67, 0x5f, 0x53, 0x48, 0x52, 0x49, 0x4e, 0x4b, 0x10,
	0x00, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x78, 0x69, 0x70, 0x67, 0x5f, 0x4e, 0x4f, 0x4e, 0x58, 0x5f,
	0x53, 0x48, 0x52, 0x49, 0x4e, 0x4b, 0x10, 0x01, 0x22, 0x67, 0x0a, 0x0b, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x53, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x55, 0x4e, 0x44, 0x4f, 0x10, 0x00, 0x12, 0x14, 0x0a,
	0x10, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x58, 0x5f, 0x31,
	0x47, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x70, 0x65,
	0x65, 0x64, 0x5f, 0x58, 0x5f, 0x31, 0x30, 0x47, 0x10, 0x0a, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x53, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x58, 0x5f, 0x32, 0x35, 0x47, 0x10,
	0x19, 0x22, 0x42, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x6d, 0x69, 0x73, 0x63, 0x75, 0x6f, 0x75, 0x73,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x6d, 0x69, 0x73, 0x63, 0x75,
	0x6f, 0x75, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x00, 0x12, 0x16, 0x0a,
	0x12, 0x50, 0x72, 0x6f, 0x6d, 0x69, 0x73, 0x63, 0x75, 0x6f, 0x75, 0x73, 0x4d, 0x6f, 0x64, 0x65,
	0x5f, 0x4f, 0x4e, 0x10, 0x01, 0x22, 0x66, 0x0a, 0x0c, 0x46, 0x6c, 0x65, 0x78, 0x70, 0x68, 0x79,
	0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x1f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x46, 0x6c, 0x65, 0x78,
	0x70, 0x68, 0x79, 0x53, 0x70, 0x65, 0x65, 0x64, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x6c,
	0x65, 0x78, 0x70, 0x68, 0x79, 0x53, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x58, 0x5f, 0x35, 0x30, 0x47,
	0x45, 0x10, 0x32, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x6c, 0x65, 0x78, 0x70, 0x68, 0x79, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x5f, 0x58, 0x5f, 0x31, 0x30, 0x30, 0x47, 0x45, 0x10, 0x64, 0x22, 0x89, 0x01,
	0x0a, 0x0a, 0x4d, 0x61, 0x63, 0x49, 0x74, 0x66, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x10,
	0x4d, 0x61, 0x63, 0x49, 0x74, 0x66, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x53, 0x47, 0x4d, 0x49, 0x49,
	0x10, 0x00, 0x12, 0x2f, 0x0a, 0x2b, 0x4d, 0x61, 0x63, 0x49, 0x74, 0x66, 0x4d, 0x6f, 0x64, 0x65,
	0x5f, 0x58, 0x5f, 0x31, 0x30, 0x30, 0x30, 0x42, 0x41, 0x53, 0x45, 0x58, 0x5f, 0x58, 0x58, 0x5f,
	0x41, 0x55, 0x54, 0x4f, 0x58, 0x5f, 0x4e, 0x45, 0x47, 0x4f, 0x54, 0x49, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x01, 0x12, 0x34, 0x0a, 0x30, 0x4d, 0x61, 0x63, 0x49, 0x74, 0x66, 0x4d, 0x6f, 0x64,
	0x65, 0x5f, 0x58, 0x5f, 0x31, 0x30, 0x30, 0x30, 0x42, 0x41, 0x53, 0x45, 0x58, 0x5f, 0x58, 0x58,
	0x5f, 0x4e, 0x4f, 0x54, 0x58, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x58, 0x5f, 0x4e, 0x45, 0x47, 0x4f,
	0x54, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x22, 0x3e, 0x0a, 0x0b, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x00, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x22, 0x4a, 0x0a, 0x0f, 0x4c, 0x6f, 0x73,
	0x54, 0x72, 0x61, 0x70, 0x44, 0x6f, 0x77, 0x6e, 0x48, 0x6f, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x16,
	0x4c, 0x6f, 0x73, 0x54, 0x72, 0x61, 0x70, 0x44, 0x6f, 0x77, 0x6e, 0x48, 0x6f, 0x6c, 0x64, 0x5f,
	0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x4c, 0x6f, 0x73, 0x54,
	0x72, 0x61, 0x70, 0x44, 0x6f, 0x77, 0x6e, 0x48, 0x6f, 0x6c, 0x64, 0x5f, 0x44, 0x49, 0x53, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x01, 0x22, 0x3b, 0x0a, 0x0a, 0x44, 0x6f, 0x77, 0x6e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x6f, 0x77, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x44,
	0x6f, 0x77, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x01, 0x22, 0x4b, 0x0a, 0x10, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x61, 0x75, 0x6c, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x17, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x46,
	0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41,
	0x4c, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x61, 0x75, 0x6c,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x01, 0x22,
	0x4e, 0x0a, 0x11, 0x52, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x46, 0x61,
	0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c,
	0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x46, 0x61, 0x75, 0x6c,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x01, 0x22,
	0x4b, 0x0a, 0x0a, 0x44, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x41, 0x75, 0x74, 0x6f, 0x12, 0x13, 0x0a,
	0x0f, 0x44, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x41, 0x75, 0x74, 0x6f, 0x5f, 0x41, 0x55, 0x54, 0x4f,
	0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x41, 0x75, 0x74, 0x6f,
	0x5f, 0x48, 0x41, 0x4c, 0x46, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x75, 0x70, 0x6c, 0x65,
	0x78, 0x41, 0x75, 0x74, 0x6f, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x02, 0x22, 0x6c, 0x0a, 0x09,
	0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f,
	0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x43,
	0x6f, 0x6d, 0x62, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x10, 0x01, 0x12,
	0x14, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x4f, 0x50,
	0x50, 0x45, 0x52, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x4d, 0x6f,
	0x64, 0x65, 0x5f, 0x46, 0x49, 0x42, 0x45, 0x52, 0x10, 0x03, 0x22, 0x3e, 0x0a, 0x0b, 0x46, 0x61,
	0x75, 0x6c, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x61, 0x75,
	0x6c, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x00, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x22, 0x6e, 0x0a, 0x1b, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x00, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x49,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x22, 0x53, 0x0a, 0x12, 0x4c, 0x69,
	0x6e, 0x6b, 0x46, 0x6c, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1d, 0x0a, 0x19, 0x4c, 0x69, 0x6e, 0x6b, 0x46, 0x6c, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12,
	0x1e, 0x0a, 0x1a, 0x4c, 0x69, 0x6e, 0x6b, 0x46, 0x6c, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x22,
	0x6a, 0x0a, 0x0a, 0x53, 0x70, 0x65, 0x65, 0x64, 0x41, 0x75, 0x74, 0x6f, 0x73, 0x12, 0x16, 0x0a,
	0x12, 0x53, 0x70, 0x65, 0x65, 0x64, 0x41, 0x75, 0x74, 0x6f, 0x73, 0x5f, 0x44, 0x45, 0x46, 0x41,
	0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x70, 0x65, 0x65, 0x64, 0x41, 0x75,
	0x74, 0x6f, 0x73, 0x5f, 0x58, 0x5f, 0x31, 0x30, 0x30, 0x30, 0x4d, 0x10, 0x04, 0x12, 0x15, 0x0a,
	0x11, 0x53, 0x70, 0x65, 0x65, 0x64, 0x41, 0x75, 0x74, 0x6f, 0x73, 0x5f, 0x58, 0x5f, 0x31, 0x30,
	0x30, 0x4d, 0x10, 0x12, 0x12, 0x15, 0x0a, 0x10, 0x53, 0x70, 0x65, 0x65, 0x64, 0x41, 0x75, 0x74,
	0x6f, 0x73, 0x5f, 0x58, 0x5f, 0x31, 0x30, 0x4d, 0x10, 0x81, 0x40, 0x22, 0x58, 0x0a, 0x05, 0x43,
	0x6f, 0x6d, 0x62, 0x6f, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x43, 0x6f, 0x6d, 0x62, 0x6f,
	0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x5f, 0x41, 0x55, 0x54, 0x4f,
	0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x5f, 0x43, 0x4f, 0x50, 0x50,
	0x45, 0x52, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x5f, 0x46, 0x49,
	0x42, 0x45, 0x52, 0x10, 0x03, 0x22, 0x26, 0x0a, 0x03, 0x45, 0x65, 0x65, 0x12, 0x0e, 0x0a, 0x0a,
	0x45, 0x65, 0x65, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b,
	0x45, 0x65, 0x65, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0xed, 0x02,
	0x0a, 0x05, 0x4c, 0x61, 0x73, 0x65, 0x72, 0x12, 0x5d, 0x0a, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x5f,
	0x73, 0x68, 0x75, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x31, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e,
	0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e,
	0x4c, 0x61, 0x73, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x68, 0x75, 0x74, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x2d, 0x73, 0x68, 0x75, 0x74, 0x2d,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x2d,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x2d,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65,
	0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x2e, 0x4c, 0x61, 0x73, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x47, 0x0a, 0x0e, 0x41, 0x75, 0x74, 0x6f, 0x53,
	0x68, 0x75, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x75, 0x74,
	0x6f, 0x53, 0x68, 0x75, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x44, 0x49, 0x53, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x68, 0x75,
	0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01,
	0x22, 0x3b, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x02, 0x1a, 0xaf, 0x9f,
	0x01, 0x0a, 0x0d, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x2d, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x70, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x2d, 0x70, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x62, 0x77, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x2d, 0x62, 0x77, 0x12, 0x54, 0x0a, 0x0a,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x34, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44,
	0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x4f,
	0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x2d, 0x6d, 0x6f,
	0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x74, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x68, 0x6f, 0x74, 0x2d, 0x70, 0x6c, 0x75, 0x67, 0x12, 0x43,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x54, 0x0a, 0x0a, 0x66, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73,
	0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x46, 0x69, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x66,
	0x69, 0x62, 0x65, 0x72, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x61, 0x76,
	0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77,
	0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x34, 0x0a, 0x15, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x74, 0x78, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x78, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x78, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x78, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x78, 0x5f, 0x68, 0x69,
	0x67, 0x68, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x78, 0x2d, 0x68, 0x69, 0x67, 0x68, 0x2d, 0x77, 0x61, 0x72,
	0x6e, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x78, 0x5f, 0x6c, 0x6f,
	0x77, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x72, 0x78, 0x2d, 0x6c, 0x6f, 0x77, 0x2d, 0x77, 0x61, 0x72, 0x6e, 0x2d,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x12, 0x74, 0x78, 0x5f, 0x68, 0x69, 0x67, 0x68,
	0x5f, 0x77, 0x61, 0x72, 0x6e, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x74, 0x78, 0x2d, 0x68, 0x69, 0x67, 0x68, 0x2d, 0x77, 0x61, 0x72, 0x6e, 0x2d,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x74, 0x78, 0x5f, 0x6c, 0x6f, 0x77, 0x5f,
	0x77, 0x61, 0x72, 0x6e, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x74, 0x78, 0x2d, 0x6c, 0x6f, 0x77, 0x2d, 0x77, 0x61, 0x72, 0x6e, 0x2d, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x13, 0x72, 0x78, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x61,
	0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x72, 0x78, 0x2d, 0x68, 0x69, 0x67, 0x68, 0x2d, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x2d,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x78, 0x5f, 0x6c, 0x6f, 0x77, 0x5f,
	0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x72, 0x78, 0x2d, 0x6c, 0x6f, 0x77, 0x2d, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x2d,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x13, 0x74, 0x78, 0x5f, 0x68, 0x69, 0x67, 0x68,
	0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x74, 0x78, 0x2d, 0x68, 0x69, 0x67, 0x68, 0x2d, 0x61, 0x6c, 0x61, 0x72,
	0x6d, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x12, 0x74, 0x78, 0x5f, 0x6c, 0x6f,
	0x77, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x78, 0x2d, 0x6c, 0x6f, 0x77, 0x2d, 0x61, 0x6c, 0x61, 0x72,
	0x6d, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x07, 0x74, 0x75, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x07, 0x74, 0x75,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x61, 0x74,
	0x69, 0x63, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x2d, 0x64,
	0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x1c, 0x70, 0x6f, 0x6c,
	0x61, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x64,
	0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1c, 0x70, 0x6f, 0x6c, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6d, 0x6f,
	0x64, 0x65, 0x2d, 0x64, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x60, 0x0a,
	0x0e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64,
	0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x78, 0x5f, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x2d, 0x72,
	0x78, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x72, 0x78, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x2d, 0x72, 0x78, 0x2d, 0x68, 0x69,
	0x67, 0x68, 0x2d, 0x77, 0x61, 0x72, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x72, 0x78, 0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x2d, 0x72, 0x78, 0x2d, 0x6c, 0x6f, 0x77,
	0x2d, 0x77, 0x61, 0x72, 0x6e, 0x12, 0x30, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72,
	0x78, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x2d, 0x72, 0x78, 0x2d, 0x68, 0x69, 0x67,
	0x68, 0x2d, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x2e, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x72, 0x78, 0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x2d, 0x72, 0x78, 0x2d, 0x6c, 0x6f,
	0x77, 0x2d, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x69, 0x61, 0x73, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x62, 0x69, 0x61, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x6f,
	0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x5f, 0x6f, 0x75, 0x69, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x2d, 0x6f, 0x75, 0x69, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x5f, 0x72, 0x65, 0x76, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x2d, 0x72, 0x65, 0x76, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x70, 0x6f, 0x6e, 0x5f,
	0x73, 0x6e, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x70, 0x6f, 0x6e, 0x2d, 0x73,
	0x6e, 0x12, 0x4f, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76,
	0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72,
	0x74, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x72, 0x78, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x5f, 0x65, 0x6e, 0x18, 0x24, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x15, 0x72, 0x78, 0x2d, 0x68, 0x69, 0x67, 0x68, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x2d, 0x77, 0x61, 0x72, 0x6e, 0x2d, 0x65, 0x6e, 0x12, 0x32, 0x0a, 0x14, 0x72, 0x78, 0x5f, 0x6c,
	0x6f, 0x77, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x5f, 0x65, 0x6e,
	0x18, 0x25, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x72, 0x78, 0x2d, 0x6c, 0x6f, 0x77, 0x2d, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x2d, 0x77, 0x61, 0x72, 0x6e, 0x2d, 0x65, 0x6e, 0x12, 0x34, 0x0a, 0x15,
	0x74, 0x78, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x77, 0x61,
	0x72, 0x6e, 0x5f, 0x65, 0x6e, 0x18, 0x26, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x74, 0x78, 0x2d,
	0x68, 0x69, 0x67, 0x68, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x77, 0x61, 0x72, 0x6e, 0x2d,
	0x65, 0x6e, 0x12, 0x32, 0x0a, 0x14, 0x74, 0x78, 0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x5f, 0x65, 0x6e, 0x18, 0x27, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x14, 0x74, 0x78, 0x2d, 0x6c, 0x6f, 0x77, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x77,
	0x61, 0x72, 0x6e, 0x2d, 0x65, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x76, 0x6f, 0x6c, 0x74, 0x5f, 0x68,
	0x69, 0x67, 0x68, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x5f, 0x65, 0x6e, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x76, 0x6f, 0x6c, 0x74, 0x2d, 0x68, 0x69, 0x67, 0x68, 0x2d, 0x77, 0x61, 0x72,
	0x6e, 0x2d, 0x65, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x76, 0x6f, 0x6c, 0x74, 0x5f, 0x6c, 0x6f, 0x77,
	0x5f, 0x77, 0x61, 0x72, 0x6e, 0x5f, 0x65, 0x6e, 0x18, 0x29, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x76, 0x6f, 0x6c, 0x74, 0x2d, 0x6c, 0x6f, 0x77, 0x2d, 0x77, 0x61, 0x72, 0x6e, 0x2d, 0x65, 0x6e,
	0x12, 0x71, 0x0a, 0x14, 0x77, 0x61, 0x76, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76,
	0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x4f, 0x70, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x57, 0x61, 0x76, 0x65, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x14, 0x77,
	0x61, 0x76, 0x65, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6d,
	0x6f, 0x64, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x19, 0x77, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73,
	0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x19, 0x77, 0x61, 0x76,
	0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x12, 0x74, 0x75, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x77, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x2c, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x12, 0x74, 0x75, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2d, 0x77, 0x61, 0x76, 0x65,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x2c, 0x0a, 0x11, 0x74, 0x75, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x2d, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x11, 0x74, 0x75, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2d, 0x66, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x64,
	0x71, 0x70, 0x73, 0x6b, 0x5f, 0x74, 0x78, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x71, 0x70, 0x73, 0x6b, 0x2d, 0x74, 0x78, 0x12, 0x28,
	0x0a, 0x0f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x71, 0x70, 0x73, 0x6b, 0x5f, 0x72,
	0x78, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2d,
	0x64, 0x71, 0x70, 0x73, 0x6b, 0x2d, 0x72, 0x78, 0x12, 0x5a, 0x0a, 0x0c, 0x77, 0x61, 0x76, 0x65,
	0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76,
	0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x4f, 0x70, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x57, 0x61, 0x76, 0x65, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x77, 0x61, 0x76, 0x65, 0x2d, 0x6d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x12, 0x94, 0x01, 0x0a, 0x20, 0x77, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x48, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65,
	0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x4f, 0x70,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x57, 0x61, 0x76, 0x65,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x20, 0x77, 0x61, 0x76, 0x65, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x71, 0x70, 0x73, 0x6b, 0x18, 0x32, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x71, 0x70, 0x73, 0x6b, 0x12,
	0x71, 0x0a, 0x14, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d,
	0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x4f, 0x70, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4c,
	0x6f, 0x77, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x2d, 0x6c, 0x6f, 0x77, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x0c, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x66, 0x69, 0x62,
	0x65, 0x72, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x46, 0x69, 0x62, 0x65, 0x72,
	0x52, 0x0c, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x2d, 0x66, 0x69, 0x62, 0x65, 0x72, 0x12, 0x62,
	0x0a, 0x0f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x66, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x72,
	0x78, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73,
	0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x46, 0x69, 0x62, 0x65, 0x72, 0x52,
	0x78, 0x52, 0x0f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x2d, 0x66, 0x69, 0x62, 0x65, 0x72, 0x2d,
	0x72, 0x78, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x61,
	0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2d, 0x64, 0x61, 0x74, 0x65, 0x12, 0x7a,
	0x0a, 0x17, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x65,
	0x64, 0x69, 0x75, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x40, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65,
	0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x4f, 0x70,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x17, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2d, 0x6d,
	0x65, 0x64, 0x69, 0x75, 0x6d, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x76, 0x6f,
	0x6c, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x38, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x2d, 0x66, 0x6c, 0x6f, 0x61, 0x74,
	0x12, 0x2c, 0x0a, 0x11, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f,
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x65, 0x6d,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2d, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x24,
	0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x3a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x2d, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x09, 0x67, 0x61, 0x69, 0x6e, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73,
	0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x47, 0x61, 0x69, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x67, 0x61,
	0x69, 0x6e, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x61, 0x69, 0x6e, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x67, 0x61, 0x69,
	0x6e, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x5a, 0x0a, 0x0c, 0x6f, 0x70, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d,
	0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x4f, 0x70, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x6d,
	0x6f, 0x64, 0x65, 0x12, 0x5c, 0x0a, 0x0d, 0x67, 0x61, 0x69, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x5f, 0x73, 0x74, 0x73, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x47, 0x61, 0x69, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x53,
	0x74, 0x73, 0x52, 0x0d, 0x67, 0x61, 0x69, 0x6e, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x2d, 0x73, 0x74,
	0x73, 0x12, 0x26, 0x0a, 0x0e, 0x67, 0x61, 0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f,
	0x73, 0x74, 0x73, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x67, 0x61, 0x69, 0x6e, 0x2d,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x2d, 0x73, 0x74, 0x73, 0x12, 0x6e, 0x0a, 0x13, 0x6f, 0x70, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x40, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f,
	0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x13, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x6d, 0x6f,
	0x64, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x63, 0x0a, 0x0f, 0x63, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x41, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x39, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d,
	0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x2e, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0f, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x5f,
	0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x64, 0x6d,
	0x18, 0x42, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f,
	0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x49, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x64, 0x6d, 0x52,
	0x0e, 0x69, 0x73, 0x2d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x64, 0x64, 0x6d, 0x12,
	0x30, 0x0a, 0x13, 0x62, 0x69, 0x61, 0x73, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x43, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x62, 0x69,
	0x61, 0x73, 0x2d, 0x68, 0x69, 0x67, 0x68, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x12, 0x2e, 0x0a, 0x12, 0x62, 0x69, 0x61, 0x73, 0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x44, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x62,
	0x69, 0x61, 0x73, 0x2d, 0x6c, 0x6f, 0x77, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x12, 0x42, 0x0a, 0x1c, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x68, 0x69, 0x67,
	0x68, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x66, 0x6c, 0x6f, 0x61,
	0x74, 0x18, 0x45, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65,
	0x2d, 0x68, 0x69, 0x67, 0x68, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2d,
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x40, 0x0a, 0x1b, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65,
	0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x66,
	0x6c, 0x6f, 0x61, 0x74, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x76, 0x6f, 0x6c, 0x74,
	0x61, 0x67, 0x65, 0x2d, 0x6c, 0x6f, 0x77, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x2d, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x4a, 0x0a, 0x20, 0x74, 0x65, 0x6d, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x47, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x20, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2d, 0x68,
	0x69, 0x67, 0x68, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x66, 0x6c,
	0x6f, 0x61, 0x74, 0x12, 0x48, 0x0a, 0x1f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x48, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x74, 0x65,
	0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2d, 0x6c, 0x6f, 0x77, 0x2d, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x5a, 0x0a,
	0x0f, 0x67, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x67, 0x61, 0x69, 0x6e,
	0x18, 0x49, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f,
	0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x47, 0x61, 0x69, 0x6e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x47, 0x61, 0x69,
	0x6e, 0x48, 0x00, 0x52, 0x04, 0x67, 0x61, 0x69, 0x6e, 0x12, 0x5d, 0x0a, 0x10, 0x67, 0x61, 0x69,
	0x6e, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x4a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76,
	0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72,
	0x74, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x47, 0x61, 0x69, 0x6e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x48,
	0x00, 0x52, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x13, 0x61, 0x67, 0x63, 0x5f,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x4b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x61, 0x67, 0x63, 0x2d, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x61, 0x70,
	0x63, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x61, 0x70, 0x63, 0x2d, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xf2, 0x01, 0x0a,
	0x08, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x55, 0x0a, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x1a, 0x8e, 0x01, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x17, 0x0a, 0x07,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x37, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x78, 0x5f, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x78, 0x2d, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x78, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x78, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x1e, 0x0a,
	0x0a, 0x77, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x77, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x12, 0x0a,
	0x04, 0x62, 0x69, 0x61, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x69, 0x61,
	0x73, 0x1a, 0xc8, 0x01, 0x0a, 0x0b, 0x57, 0x61, 0x76, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x12, 0x5a, 0x0a, 0x08, 0x77, 0x61, 0x76, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76,
	0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72,
	0x74, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x57, 0x61, 0x76, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x57, 0x61, 0x76, 0x65,
	0x4d, 0x61, 0x70, 0x52, 0x08, 0x77, 0x61, 0x76, 0x65, 0x2d, 0x6d, 0x61, 0x70, 0x1a, 0x5d, 0x0a,
	0x07, 0x57, 0x61, 0x76, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1c,
	0x0a, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1e, 0x0a, 0x0a,
	0x77, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x77, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x1a, 0x2e, 0x0a, 0x0e,
	0x47, 0x61, 0x69, 0x6e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x47, 0x61, 0x69, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x67, 0x63, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x61, 0x67, 0x63, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x2f, 0x0a, 0x0f,
	0x47, 0x61, 0x69, 0x6e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x70, 0x63, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x61, 0x70, 0x63, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x75, 0x0a,
	0x09, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x53,
	0x49, 0x4e, 0x47, 0x4c, 0x45, 0x58, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x01, 0x12, 0x19, 0x0a,
	0x15, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49,
	0x58, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x4f, 0x50, 0x50, 0x45, 0x52, 0x58, 0x5f, 0x4d, 0x4f,
	0x44, 0x45, 0x10, 0x03, 0x22, 0x8d, 0x04, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a,
	0x0c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x43, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x47, 0x42, 0x49, 0x43, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x53, 0x46, 0x50, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x45, 0x53, 0x46, 0x50, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x43, 0x4f, 0x50, 0x50, 0x45, 0x52, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x58, 0x46, 0x50, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x58, 0x45, 0x4e, 0x50, 0x41, 0x4b, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x4e, 0x44, 0x45, 0x52, 0x10, 0x08, 0x12, 0x0c,
	0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x46, 0x50, 0x10, 0x09, 0x12, 0x0c, 0x0a, 0x08,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x4d, 0x42, 0x10, 0x0a, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x53, 0x46, 0x50, 0x58, 0x5f, 0x50, 0x4c, 0x55, 0x53, 0x10, 0x0b, 0x12, 0x0c,
	0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x58, 0x50, 0x10, 0x0c, 0x12, 0x0d, 0x0a, 0x09,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x51, 0x53, 0x46, 0x50, 0x10, 0x0d, 0x12, 0x13, 0x0a, 0x0f, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x51, 0x53, 0x46, 0x50, 0x58, 0x5f, 0x50, 0x4c, 0x55, 0x53, 0x10, 0x0e,
	0x12, 0x0d, 0x0a, 0x09, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x46, 0x50, 0x32, 0x10, 0x0f, 0x12,
	0x10, 0x0a, 0x0c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x57, 0x44, 0x4d, 0x53, 0x46, 0x50, 0x10,
	0x10, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x53, 0x41, 0x31, 0x30, 0x30,
	0x47, 0x4c, 0x48, 0x10, 0x11, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x47, 0x50,
	0x53, 0x10, 0x12, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x53, 0x46, 0x50,
	0x10, 0x13, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x46, 0x50, 0x34, 0x10,
	0x14, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x51, 0x53, 0x46, 0x50, 0x32, 0x38,
	0x10, 0x15, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x46, 0x50, 0x58, 0x5f,
	0x41, 0x4e, 0x44, 0x58, 0x5f, 0x53, 0x46, 0x50, 0x58, 0x5f, 0x50, 0x4c, 0x55, 0x53, 0x10, 0x16,
	0x12, 0x0d, 0x0a, 0x09, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x46, 0x50, 0x38, 0x10, 0x17, 0x12,
	0x0e, 0x0a, 0x0a, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x46, 0x50, 0x32, 0x38, 0x10, 0x18, 0x12,
	0x11, 0x0a, 0x0d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x51, 0x53, 0x46, 0x50, 0x58, 0x5f, 0x44, 0x44,
	0x10, 0x19, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x47, 0x50, 0x4f, 0x4e, 0x53,
	0x46, 0x50, 0x10, 0x1a, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x46, 0x50,
	0x32, 0x44, 0x43, 0x4f, 0x10, 0x1b, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53,
	0x46, 0x50, 0x35, 0x36, 0x10, 0x1c, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x51,
	0x53, 0x46, 0x50, 0x35, 0x36, 0x10, 0x1d, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x4f, 0x41, 0x10, 0x1e, 0x22, 0xa2, 0x05, 0x0a, 0x09, 0x46, 0x69, 0x62, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x69, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x69, 0x62,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x43, 0x10, 0x01, 0x12, 0x29, 0x0a, 0x25, 0x46,
	0x69, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x58, 0x5f,
	0x31, 0x58, 0x5f, 0x43, 0x4f, 0x50, 0x50, 0x45, 0x52, 0x58, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45,
	0x43, 0x54, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x29, 0x0a, 0x25, 0x46, 0x69, 0x62, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x58, 0x5f, 0x32, 0x58, 0x5f, 0x43, 0x4f,
	0x50, 0x50, 0x45, 0x52, 0x58, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x10,
	0x03, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x69, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42,
	0x4e, 0x43, 0x58, 0x5f, 0x54, 0x4e, 0x43, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x46, 0x69, 0x62,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x4f, 0x41, 0x58, 0x49, 0x41, 0x4c, 0x58, 0x5f,
	0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x53, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x69, 0x62,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x49, 0x42, 0x45, 0x52, 0x58, 0x5f, 0x4a, 0x41,
	0x43, 0x4b, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x69, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x4c, 0x43, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x69, 0x62, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x4d, 0x54, 0x58, 0x5f, 0x52, 0x4a, 0x10, 0x08, 0x12, 0x10, 0x0a, 0x0c,
	0x46, 0x69, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x55, 0x10, 0x09, 0x12, 0x10,
	0x0a, 0x0c, 0x46, 0x69, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x47, 0x10, 0x0a,
	0x12, 0x1e, 0x0a, 0x1a, 0x46, 0x69, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4f, 0x50,
	0x54, 0x49, 0x43, 0x41, 0x4c, 0x58, 0x5f, 0x50, 0x49, 0x47, 0x54, 0x41, 0x49, 0x4c, 0x10, 0x0b,
	0x12, 0x15, 0x0a, 0x11, 0x46, 0x69, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x48, 0x53,
	0x53, 0x44, 0x43, 0x49, 0x49, 0x10, 0x0c, 0x12, 0x1d, 0x0a, 0x19, 0x46, 0x69, 0x62, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x4f, 0x50, 0x50, 0x45, 0x52, 0x58, 0x5f, 0x50, 0x49, 0x47,
	0x54, 0x41, 0x49, 0x4c, 0x10, 0x0d, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x69, 0x62, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x4d, 0x50, 0x4f, 0x10, 0x0e, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x69, 0x62,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x41, 0x10, 0x0f, 0x12, 0x12, 0x0a, 0x0e, 0x46,
	0x69, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x4a, 0x34, 0x35, 0x10, 0x10, 0x12,
	0x17, 0x0a, 0x13, 0x46, 0x69, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x50, 0x4f,
	0x58, 0x5f, 0x31, 0x58, 0x31, 0x32, 0x10, 0x11, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x69, 0x62, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x50, 0x4f, 0x58, 0x5f, 0x32, 0x58, 0x31, 0x36, 0x10,
	0x12, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x69, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e,
	0x4f, 0x58, 0x5f, 0x53, 0x45, 0x50, 0x41, 0x52, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x13, 0x12, 0x17,
	0x0a, 0x13, 0x46, 0x69, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x58, 0x43, 0x58,
	0x5f, 0x32, 0x58, 0x31, 0x36, 0x10, 0x14, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x69, 0x62, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x53, 0x58, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x43, 0x41, 0x4c,
	0x10, 0x15, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x69, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x53, 0x4e, 0x58, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x16, 0x12, 0x17, 0x0a,
	0x13, 0x46, 0x69, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x50, 0x4f, 0x58, 0x5f,
	0x32, 0x58, 0x31, 0x32, 0x10, 0x17, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x69, 0x62, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x4d, 0x50, 0x4f, 0x58, 0x5f, 0x31, 0x58, 0x31, 0x36, 0x10, 0x18, 0x12,
	0x18, 0x0a, 0x14, 0x46, 0x69, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x41, 0x4e, 0x47,
	0x4c, 0x45, 0x44, 0x58, 0x5f, 0x4c, 0x43, 0x10, 0x19, 0x22, 0x8b, 0x01, 0x0a, 0x07, 0x54, 0x75,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x75, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x75, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x4e, 0x4f, 0x54, 0x58, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x75, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x4e, 0x4f, 0x54,
	0x58, 0x5f, 0x54, 0x55, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x54,
	0x75, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x54, 0x55, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x03,
	0x12, 0x15, 0x0a, 0x11, 0x54, 0x75, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x53, 0x55, 0x50, 0x50,
	0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x04, 0x22, 0xec, 0x01, 0x0a, 0x0d, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x20, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12,
	0x20, 0x0a, 0x1c, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x4e, 0x4f, 0x54, 0x58, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x2a, 0x0a, 0x26, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x44, 0x55, 0x41, 0x4c, 0x58, 0x5f, 0x46, 0x49, 0x42, 0x45, 0x52, 0x58, 0x5f,
	0x42, 0x49, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x2e, 0x0a,
	0x2a, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53,
	0x49, 0x4e, 0x47, 0x4c, 0x45, 0x58, 0x5f, 0x46, 0x49, 0x42, 0x45, 0x52, 0x58, 0x5f, 0x42, 0x49,
	0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x37, 0x0a,
	0x33, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44,
	0x55, 0x41, 0x4c, 0x58, 0x5f, 0x46, 0x49, 0x42, 0x45, 0x52, 0x58, 0x5f, 0x54, 0x57, 0x4f, 0x58,
	0x5f, 0x50, 0x4f, 0x52, 0x54, 0x58, 0x5f, 0x42, 0x49, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x04, 0x22, 0x4f, 0x0a, 0x12, 0x57, 0x61, 0x76, 0x65, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x18,
	0x57, 0x61, 0x76, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f,
	0x64, 0x65, 0x5f, 0x44, 0x51, 0x50, 0x53, 0x4b, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x57, 0x61,
	0x76, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65,
	0x5f, 0x51, 0x50, 0x53, 0x4b, 0x10, 0x01, 0x22, 0x95, 0x2b, 0x0a, 0x17, 0x57, 0x61, 0x76, 0x65,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58,
	0x5f, 0x31, 0x39, 0x36, 0x58, 0x5f, 0x31, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x32,
	0x38, 0x58, 0x5f, 0x37, 0x37, 0x33, 0x4e, 0x4d, 0x10, 0x00, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61,
	0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x36, 0x58, 0x5f, 0x30, 0x35, 0x54,
	0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x32, 0x39, 0x58, 0x5f, 0x31, 0x36, 0x33, 0x4e, 0x4d, 0x10,
	0x01, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31,
	0x39, 0x36, 0x58, 0x5f, 0x30, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x32, 0x39, 0x58,
	0x5f, 0x35, 0x35, 0x33, 0x4e, 0x4d, 0x10, 0x02, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x35, 0x58, 0x5f, 0x39, 0x35, 0x54, 0x48, 0x5a,
	0x58, 0x5f, 0x31, 0x35, 0x32, 0x39, 0x58, 0x5f, 0x39, 0x34, 0x34, 0x4e, 0x4d, 0x10, 0x03, 0x12,
	0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x35,
	0x58, 0x5f, 0x39, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x33, 0x30, 0x58, 0x5f, 0x33,
	0x33, 0x34, 0x4e, 0x4d, 0x10, 0x04, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x35, 0x58, 0x5f, 0x38, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f,
	0x31, 0x35, 0x33, 0x30, 0x58, 0x5f, 0x37, 0x32, 0x35, 0x4e, 0x4d, 0x10, 0x05, 0x12, 0x35, 0x0a,
	0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x35, 0x58, 0x5f,
	0x38, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x33, 0x31, 0x58, 0x5f, 0x31, 0x31, 0x36,
	0x4e, 0x4d, 0x10, 0x06, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x58, 0x5f, 0x31, 0x39, 0x35, 0x58, 0x5f, 0x37, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35,
	0x33, 0x31, 0x58, 0x5f, 0x35, 0x30, 0x37, 0x4e, 0x4d, 0x10, 0x07, 0x12, 0x35, 0x0a, 0x31, 0x57,
	0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x35, 0x58, 0x5f, 0x37, 0x30,
	0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x33, 0x31, 0x58, 0x5f, 0x38, 0x39, 0x38, 0x4e, 0x4d,
	0x10, 0x08, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f,
	0x31, 0x39, 0x35, 0x58, 0x5f, 0x36, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x33, 0x32,
	0x58, 0x5f, 0x32, 0x39, 0x30, 0x4e, 0x4d, 0x10, 0x09, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76,
	0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x35, 0x58, 0x5f, 0x36, 0x30, 0x54, 0x48,
	0x5a, 0x58, 0x5f, 0x31, 0x35, 0x33, 0x32, 0x58, 0x5f, 0x36, 0x38, 0x31, 0x4e, 0x4d, 0x10, 0x0a,
	0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39,
	0x35, 0x58, 0x5f, 0x35, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x33, 0x33, 0x58, 0x5f,
	0x30, 0x37, 0x33, 0x4e, 0x4d, 0x10, 0x0b, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x35, 0x58, 0x5f, 0x35, 0x30, 0x54, 0x48, 0x5a, 0x58,
	0x5f, 0x31, 0x35, 0x33, 0x33, 0x58, 0x5f, 0x34, 0x36, 0x35, 0x4e, 0x4d, 0x10, 0x0c, 0x12, 0x35,
	0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x35, 0x58,
	0x5f, 0x34, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x33, 0x33, 0x58, 0x5f, 0x38, 0x35,
	0x38, 0x4e, 0x4d, 0x10, 0x0d, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x58, 0x5f, 0x31, 0x39, 0x35, 0x58, 0x5f, 0x34, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31,
	0x35, 0x33, 0x34, 0x58, 0x5f, 0x32, 0x35, 0x30, 0x4e, 0x4d, 0x10, 0x0e, 0x12, 0x35, 0x0a, 0x31,
	0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x35, 0x58, 0x5f, 0x33,
	0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x33, 0x34, 0x58, 0x5f, 0x36, 0x34, 0x33, 0x4e,
	0x4d, 0x10, 0x0f, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58,
	0x5f, 0x31, 0x39, 0x35, 0x58, 0x5f, 0x33, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x33,
	0x35, 0x58, 0x5f, 0x30, 0x33, 0x36, 0x4e, 0x4d, 0x10, 0x10, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61,
	0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x35, 0x58, 0x5f, 0x32, 0x35, 0x54,
	0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x33, 0x35, 0x58, 0x5f, 0x34, 0x32, 0x39, 0x4e, 0x4d, 0x10,
	0x11, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31,
	0x39, 0x35, 0x58, 0x5f, 0x32, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x33, 0x35, 0x58,
	0x5f, 0x38, 0x32, 0x32, 0x4e, 0x4d, 0x10, 0x12, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x35, 0x58, 0x5f, 0x31, 0x35, 0x54, 0x48, 0x5a,
	0x58, 0x5f, 0x31, 0x35, 0x33, 0x36, 0x58, 0x5f, 0x32, 0x31, 0x36, 0x4e, 0x4d, 0x10, 0x13, 0x12,
	0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x35,
	0x58, 0x5f, 0x31, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x33, 0x36, 0x58, 0x5f, 0x36,
	0x30, 0x39, 0x4e, 0x4d, 0x10, 0x14, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x35, 0x58, 0x5f, 0x30, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f,
	0x31, 0x35, 0x33, 0x37, 0x58, 0x5f, 0x30, 0x30, 0x33, 0x4e, 0x4d, 0x10, 0x15, 0x12, 0x35, 0x0a,
	0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x35, 0x58, 0x5f,
	0x30, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x33, 0x37, 0x58, 0x5f, 0x33, 0x39, 0x37,
	0x4e, 0x4d, 0x10, 0x16, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x58, 0x5f, 0x31, 0x39, 0x34, 0x58, 0x5f, 0x39, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35,
	0x33, 0x37, 0x58, 0x5f, 0x37, 0x39, 0x32, 0x4e, 0x4d, 0x10, 0x17, 0x12, 0x35, 0x0a, 0x31, 0x57,
	0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x34, 0x58, 0x5f, 0x39, 0x30,
	0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x33, 0x38, 0x58, 0x5f, 0x31, 0x38, 0x36, 0x4e, 0x4d,
	0x10, 0x18, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f,
	0x31, 0x39, 0x34, 0x58, 0x5f, 0x38, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x33, 0x38,
	0x58, 0x5f, 0x35, 0x38, 0x31, 0x4e, 0x4d, 0x10, 0x19, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76,
	0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x34, 0x58, 0x5f, 0x38, 0x30, 0x54, 0x48,
	0x5a, 0x58, 0x5f, 0x31, 0x35, 0x33, 0x38, 0x58, 0x5f, 0x39, 0x37, 0x36, 0x4e, 0x4d, 0x10, 0x1a,
	0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39,
	0x34, 0x58, 0x5f, 0x37, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x33, 0x39, 0x58, 0x5f,
	0x33, 0x37, 0x31, 0x4e, 0x4d, 0x10, 0x1b, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x34, 0x58, 0x5f, 0x37, 0x30, 0x54, 0x48, 0x5a, 0x58,
	0x5f, 0x31, 0x35, 0x33, 0x39, 0x58, 0x5f, 0x37, 0x36, 0x36, 0x4e, 0x4d, 0x10, 0x1c, 0x12, 0x35,
	0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x34, 0x58,
	0x5f, 0x36, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x34, 0x30, 0x58, 0x5f, 0x31, 0x36,
	0x32, 0x4e, 0x4d, 0x10, 0x1d, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x58, 0x5f, 0x31, 0x39, 0x34, 0x58, 0x5f, 0x36, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31,
	0x35, 0x34, 0x30, 0x58, 0x5f, 0x35, 0x35, 0x37, 0x4e, 0x4d, 0x10, 0x1e, 0x12, 0x35, 0x0a, 0x31,
	0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x34, 0x58, 0x5f, 0x35,
	0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x34, 0x30, 0x58, 0x5f, 0x39, 0x35, 0x33, 0x4e,
	0x4d, 0x10, 0x1f, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58,
	0x5f, 0x31, 0x39, 0x34, 0x58, 0x5f, 0x35, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x34,
	0x31, 0x58, 0x5f, 0x33, 0x34, 0x39, 0x4e, 0x4d, 0x10, 0x20, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61,
	0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x34, 0x58, 0x5f, 0x34, 0x35, 0x54,
	0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x34, 0x31, 0x58, 0x5f, 0x37, 0x34, 0x36, 0x4e, 0x4d, 0x10,
	0x21, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31,
	0x39, 0x34, 0x58, 0x5f, 0x34, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x34, 0x32, 0x58,
	0x5f, 0x31, 0x34, 0x32, 0x4e, 0x4d, 0x10, 0x22, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x34, 0x58, 0x5f, 0x33, 0x35, 0x54, 0x48, 0x5a,
	0x58, 0x5f, 0x31, 0x35, 0x34, 0x32, 0x58, 0x5f, 0x35, 0x33, 0x39, 0x4e, 0x4d, 0x10, 0x23, 0x12,
	0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x34,
	0x58, 0x5f, 0x33, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x34, 0x32, 0x58, 0x5f, 0x39,
	0x33, 0x36, 0x4e, 0x4d, 0x10, 0x24, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x34, 0x58, 0x5f, 0x32, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f,
	0x31, 0x35, 0x34, 0x33, 0x58, 0x5f, 0x33, 0x33, 0x33, 0x4e, 0x4d, 0x10, 0x25, 0x12, 0x35, 0x0a,
	0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x34, 0x58, 0x5f,
	0x32, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x34, 0x33, 0x58, 0x5f, 0x37, 0x33, 0x30,
	0x4e, 0x4d, 0x10, 0x26, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x58, 0x5f, 0x31, 0x39, 0x34, 0x58, 0x5f, 0x31, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35,
	0x34, 0x34, 0x58, 0x5f, 0x31, 0x32, 0x38, 0x4e, 0x4d, 0x10, 0x27, 0x12, 0x35, 0x0a, 0x31, 0x57,
	0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x34, 0x58, 0x5f, 0x31, 0x30,
	0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x34, 0x34, 0x58, 0x5f, 0x35, 0x32, 0x36, 0x4e, 0x4d,
	0x10, 0x28, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f,
	0x31, 0x39, 0x34, 0x58, 0x5f, 0x30, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x34, 0x34,
	0x58, 0x5f, 0x39, 0x32, 0x34, 0x4e, 0x4d, 0x10, 0x29, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76,
	0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x34, 0x58, 0x5f, 0x30, 0x30, 0x54, 0x48,
	0x5a, 0x58, 0x5f, 0x31, 0x35, 0x34, 0x35, 0x58, 0x5f, 0x33, 0x32, 0x32, 0x4e, 0x4d, 0x10, 0x2a,
	0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39,
	0x33, 0x58, 0x5f, 0x39, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x34, 0x35, 0x58, 0x5f,
	0x37, 0x32, 0x30, 0x4e, 0x4d, 0x10, 0x2b, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x33, 0x58, 0x5f, 0x39, 0x30, 0x54, 0x48, 0x5a, 0x58,
	0x5f, 0x31, 0x35, 0x34, 0x36, 0x58, 0x5f, 0x31, 0x31, 0x39, 0x4e, 0x4d, 0x10, 0x2c, 0x12, 0x35,
	0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x33, 0x58,
	0x5f, 0x38, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x34, 0x36, 0x58, 0x5f, 0x35, 0x31,
	0x38, 0x4e, 0x4d, 0x10, 0x2d, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x58, 0x5f, 0x31, 0x39, 0x33, 0x58, 0x5f, 0x38, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31,
	0x35, 0x34, 0x36, 0x58, 0x5f, 0x39, 0x31, 0x37, 0x4e, 0x4d, 0x10, 0x2e, 0x12, 0x35, 0x0a, 0x31,
	0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x33, 0x58, 0x5f, 0x37,
	0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x34, 0x37, 0x58, 0x5f, 0x33, 0x31, 0x36, 0x4e,
	0x4d, 0x10, 0x2f, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58,
	0x5f, 0x31, 0x39, 0x33, 0x58, 0x5f, 0x37, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x34,
	0x37, 0x58, 0x5f, 0x37, 0x31, 0x35, 0x4e, 0x4d, 0x10, 0x30, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61,
	0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x33, 0x58, 0x5f, 0x36, 0x35, 0x54,
	0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x34, 0x38, 0x58, 0x5f, 0x31, 0x31, 0x35, 0x4e, 0x4d, 0x10,
	0x31, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31,
	0x39, 0x33, 0x58, 0x5f, 0x36, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x34, 0x38, 0x58,
	0x5f, 0x35, 0x31, 0x35, 0x4e, 0x4d, 0x10, 0x32, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x33, 0x58, 0x5f, 0x35, 0x35, 0x54, 0x48, 0x5a,
	0x58, 0x5f, 0x31, 0x35, 0x34, 0x38, 0x58, 0x5f, 0x39, 0x31, 0x35, 0x4e, 0x4d, 0x10, 0x33, 0x12,
	0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x33,
	0x58, 0x5f, 0x35, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x34, 0x39, 0x58, 0x5f, 0x33,
	0x31, 0x35, 0x4e, 0x4d, 0x10, 0x34, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x33, 0x58, 0x5f, 0x34, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f,
	0x31, 0x35, 0x34, 0x39, 0x58, 0x5f, 0x37, 0x31, 0x35, 0x4e, 0x4d, 0x10, 0x35, 0x12, 0x35, 0x0a,
	0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x33, 0x58, 0x5f,
	0x34, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x35, 0x30, 0x58, 0x5f, 0x31, 0x31, 0x36,
	0x4e, 0x4d, 0x10, 0x36, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x58, 0x5f, 0x31, 0x39, 0x33, 0x58, 0x5f, 0x33, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35,
	0x35, 0x30, 0x58, 0x5f, 0x35, 0x31, 0x37, 0x4e, 0x4d, 0x10, 0x37, 0x12, 0x35, 0x0a, 0x31, 0x57,
	0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x33, 0x58, 0x5f, 0x33, 0x30,
	0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x35, 0x30, 0x58, 0x5f, 0x39, 0x31, 0x38, 0x4e, 0x4d,
	0x10, 0x38, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f,
	0x31, 0x39, 0x33, 0x58, 0x5f, 0x32, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x35, 0x31,
	0x58, 0x5f, 0x33, 0x31, 0x39, 0x4e, 0x4d, 0x10, 0x39, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76,
	0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x33, 0x58, 0x5f, 0x32, 0x30, 0x54, 0x48,
	0x5a, 0x58, 0x5f, 0x31, 0x35, 0x35, 0x31, 0x58, 0x5f, 0x37, 0x32, 0x31, 0x4e, 0x4d, 0x10, 0x3a,
	0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39,
	0x33, 0x58, 0x5f, 0x31, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x35, 0x32, 0x58, 0x5f,
	0x31, 0x32, 0x32, 0x4e, 0x4d, 0x10, 0x3b, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x33, 0x58, 0x5f, 0x31, 0x30, 0x54, 0x48, 0x5a, 0x58,
	0x5f, 0x31, 0x35, 0x35, 0x32, 0x58, 0x5f, 0x35, 0x32, 0x34, 0x4e, 0x4d, 0x10, 0x3c, 0x12, 0x35,
	0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x33, 0x58,
	0x5f, 0x30, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x35, 0x32, 0x58, 0x5f, 0x39, 0x32,
	0x36, 0x4e, 0x4d, 0x10, 0x3d, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x58, 0x5f, 0x31, 0x39, 0x33, 0x58, 0x5f, 0x30, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31,
	0x35, 0x35, 0x33, 0x58, 0x5f, 0x33, 0x32, 0x39, 0x4e, 0x4d, 0x10, 0x3e, 0x12, 0x35, 0x0a, 0x31,
	0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x32, 0x58, 0x5f, 0x39,
	0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x35, 0x33, 0x58, 0x5f, 0x37, 0x33, 0x31, 0x4e,
	0x4d, 0x10, 0x3f, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58,
	0x5f, 0x31, 0x39, 0x32, 0x58, 0x5f, 0x39, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x35,
	0x34, 0x58, 0x5f, 0x31, 0x33, 0x34, 0x4e, 0x4d, 0x10, 0x40, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61,
	0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x32, 0x58, 0x5f, 0x38, 0x35, 0x54,
	0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x35, 0x34, 0x58, 0x5f, 0x35, 0x33, 0x37, 0x4e, 0x4d, 0x10,
	0x41, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31,
	0x39, 0x32, 0x58, 0x5f, 0x38, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x35, 0x34, 0x58,
	0x5f, 0x39, 0x34, 0x30, 0x4e, 0x4d, 0x10, 0x42, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x32, 0x58, 0x5f, 0x37, 0x35, 0x54, 0x48, 0x5a,
	0x58, 0x5f, 0x31, 0x35, 0x35, 0x35, 0x58, 0x5f, 0x33, 0x34, 0x33, 0x4e, 0x4d, 0x10, 0x43, 0x12,
	0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x32,
	0x58, 0x5f, 0x37, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x35, 0x35, 0x58, 0x5f, 0x37,
	0x34, 0x37, 0x4e, 0x4d, 0x10, 0x44, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x32, 0x58, 0x5f, 0x36, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f,
	0x31, 0x35, 0x35, 0x36, 0x58, 0x5f, 0x31, 0x35, 0x31, 0x4e, 0x4d, 0x10, 0x45, 0x12, 0x35, 0x0a,
	0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x32, 0x58, 0x5f,
	0x36, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x35, 0x36, 0x58, 0x5f, 0x35, 0x35, 0x35,
	0x4e, 0x4d, 0x10, 0x46, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x58, 0x5f, 0x31, 0x39, 0x32, 0x58, 0x5f, 0x35, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35,
	0x35, 0x36, 0x58, 0x5f, 0x39, 0x35, 0x39, 0x4e, 0x4d, 0x10, 0x47, 0x12, 0x35, 0x0a, 0x31, 0x57,
	0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x32, 0x58, 0x5f, 0x35, 0x30,
	0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x35, 0x37, 0x58, 0x5f, 0x33, 0x36, 0x33, 0x4e, 0x4d,
	0x10, 0x48, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f,
	0x31, 0x39, 0x32, 0x58, 0x5f, 0x34, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x35, 0x37,
	0x58, 0x5f, 0x37, 0x36, 0x38, 0x4e, 0x4d, 0x10, 0x49, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76,
	0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x32, 0x58, 0x5f, 0x34, 0x30, 0x54, 0x48,
	0x5a, 0x58, 0x5f, 0x31, 0x35, 0x35, 0x38, 0x58, 0x5f, 0x31, 0x37, 0x33, 0x4e, 0x4d, 0x10, 0x4a,
	0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39,
	0x32, 0x58, 0x5f, 0x33, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x35, 0x38, 0x58, 0x5f,
	0x35, 0x37, 0x38, 0x4e, 0x4d, 0x10, 0x4b, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x32, 0x58, 0x5f, 0x33, 0x30, 0x54, 0x48, 0x5a, 0x58,
	0x5f, 0x31, 0x35, 0x35, 0x38, 0x58, 0x5f, 0x39, 0x38, 0x33, 0x4e, 0x4d, 0x10, 0x4c, 0x12, 0x35,
	0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x32, 0x58,
	0x5f, 0x32, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x35, 0x39, 0x58, 0x5f, 0x33, 0x38,
	0x39, 0x4e, 0x4d, 0x10, 0x4d, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x58, 0x5f, 0x31, 0x39, 0x32, 0x58, 0x5f, 0x32, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31,
	0x35, 0x35, 0x39, 0x58, 0x5f, 0x37, 0x39, 0x34, 0x4e, 0x4d, 0x10, 0x4e, 0x12, 0x35, 0x0a, 0x31,
	0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x32, 0x58, 0x5f, 0x31,
	0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x36, 0x30, 0x58, 0x5f, 0x32, 0x30, 0x30, 0x4e,
	0x4d, 0x10, 0x4f, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58,
	0x5f, 0x31, 0x39, 0x32, 0x58, 0x5f, 0x31, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x36,
	0x30, 0x58, 0x5f, 0x36, 0x30, 0x36, 0x4e, 0x4d, 0x10, 0x50, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61,
	0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x32, 0x58, 0x5f, 0x30, 0x35, 0x54,
	0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x36, 0x31, 0x58, 0x5f, 0x30, 0x31, 0x33, 0x4e, 0x4d, 0x10,
	0x51, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31,
	0x39, 0x32, 0x58, 0x5f, 0x30, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x36, 0x31, 0x58,
	0x5f, 0x34, 0x31, 0x39, 0x4e, 0x4d, 0x10, 0x52, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x31, 0x58, 0x5f, 0x39, 0x35, 0x54, 0x48, 0x5a,
	0x58, 0x5f, 0x31, 0x35, 0x36, 0x31, 0x58, 0x5f, 0x38, 0x32, 0x36, 0x4e, 0x4d, 0x10, 0x53, 0x12,
	0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x31,
	0x58, 0x5f, 0x39, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x36, 0x32, 0x58, 0x5f, 0x32,
	0x33, 0x33, 0x4e, 0x4d, 0x10, 0x54, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x31, 0x58, 0x5f, 0x38, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f,
	0x31, 0x35, 0x36, 0x32, 0x58, 0x5f, 0x36, 0x34, 0x30, 0x4e, 0x4d, 0x10, 0x55, 0x12, 0x35, 0x0a,
	0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x31, 0x58, 0x5f,
	0x38, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x36, 0x33, 0x58, 0x5f, 0x30, 0x34, 0x37,
	0x4e, 0x4d, 0x10, 0x56, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x58, 0x5f, 0x31, 0x39, 0x31, 0x58, 0x5f, 0x37, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35,
	0x36, 0x33, 0x58, 0x5f, 0x34, 0x35, 0x35, 0x4e, 0x4d, 0x10, 0x57, 0x12, 0x35, 0x0a, 0x31, 0x57,
	0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x31, 0x58, 0x5f, 0x37, 0x30,
	0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x36, 0x33, 0x58, 0x5f, 0x38, 0x36, 0x33, 0x4e, 0x4d,
	0x10, 0x58, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f,
	0x31, 0x39, 0x31, 0x58, 0x5f, 0x36, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x36, 0x34,
	0x58, 0x5f, 0x32, 0x37, 0x31, 0x4e, 0x4d, 0x10, 0x59, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76,
	0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x31, 0x58, 0x5f, 0x36, 0x30, 0x54, 0x48,
	0x5a, 0x58, 0x5f, 0x31, 0x35, 0x36, 0x34, 0x58, 0x5f, 0x36, 0x37, 0x39, 0x4e, 0x4d, 0x10, 0x5a,
	0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39,
	0x31, 0x58, 0x5f, 0x35, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x36, 0x35, 0x58, 0x5f,
	0x30, 0x38, 0x37, 0x4e, 0x4d, 0x10, 0x5b, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x31, 0x58, 0x5f, 0x35, 0x30, 0x54, 0x48, 0x5a, 0x58,
	0x5f, 0x31, 0x35, 0x36, 0x35, 0x58, 0x5f, 0x34, 0x39, 0x36, 0x4e, 0x4d, 0x10, 0x5c, 0x12, 0x35,
	0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x31, 0x58,
	0x5f, 0x34, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x36, 0x35, 0x58, 0x5f, 0x39, 0x30,
	0x35, 0x4e, 0x4d, 0x10, 0x5d, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x58, 0x5f, 0x31, 0x39, 0x31, 0x58, 0x5f, 0x34, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31,
	0x35, 0x36, 0x36, 0x58, 0x5f, 0x33, 0x31, 0x34, 0x4e, 0x4d, 0x10, 0x5e, 0x12, 0x35, 0x0a, 0x31,
	0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x31, 0x58, 0x5f, 0x33,
	0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x36, 0x36, 0x58, 0x5f, 0x37, 0x32, 0x33, 0x4e,
	0x4d, 0x10, 0x5f, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58,
	0x5f, 0x31, 0x39, 0x31, 0x58, 0x5f, 0x33, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x36,
	0x37, 0x58, 0x5f, 0x31, 0x33, 0x33, 0x4e, 0x4d, 0x10, 0x60, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61,
	0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x31, 0x58, 0x5f, 0x32, 0x35, 0x54,
	0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x36, 0x37, 0x58, 0x5f, 0x35, 0x34, 0x32, 0x4e, 0x4d, 0x10,
	0x61, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31,
	0x39, 0x31, 0x58, 0x5f, 0x32, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x36, 0x37, 0x58,
	0x5f, 0x39, 0x35, 0x32, 0x4e, 0x4d, 0x10, 0x62, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x31, 0x58, 0x5f, 0x31, 0x35, 0x54, 0x48, 0x5a,
	0x58, 0x5f, 0x31, 0x35, 0x36, 0x38, 0x58, 0x5f, 0x33, 0x36, 0x32, 0x4e, 0x4d, 0x10, 0x63, 0x22,
	0xf3, 0x2f, 0x0a, 0x1d, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x3b, 0x0a, 0x37, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x36, 0x58, 0x5f, 0x31, 0x30, 0x54, 0x48, 0x5a, 0x58,
	0x5f, 0x31, 0x35, 0x32, 0x38, 0x58, 0x5f, 0x37, 0x37, 0x33, 0x4e, 0x4d, 0x10, 0x00, 0x12, 0x3b,
	0x0a, 0x37, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x58, 0x5f, 0x31, 0x39, 0x36, 0x58, 0x5f, 0x30, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35,
	0x32, 0x39, 0x58, 0x5f, 0x31, 0x36, 0x33, 0x4e, 0x4d, 0x10, 0x01, 0x12, 0x3b, 0x0a, 0x37, 0x57,
	0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x58, 0x5f, 0x31,
	0x39, 0x36, 0x58, 0x5f, 0x30, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x32, 0x39, 0x58,
	0x5f, 0x35, 0x35, 0x33, 0x4e, 0x4d, 0x10, 0x02, 0x12, 0x3b, 0x0a, 0x37, 0x57, 0x61, 0x76, 0x65,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x35, 0x58,
	0x5f, 0x39, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x32, 0x39, 0x58, 0x5f, 0x39, 0x34,
	0x34, 0x4e, 0x4d, 0x10, 0x03, 0x12, 0x3b, 0x0a, 0x37, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x35, 0x58, 0x5f, 0x39, 0x30,
	0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x33, 0x30, 0x58, 0x5f, 0x33, 0x33, 0x34, 0x4e, 0x4d,
	0x10, 0x04, 0x12, 0x3b, 0x0a, 0x37, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x35, 0x58, 0x5f, 0x38, 0x35, 0x54, 0x48, 0x5a,
	0x58, 0x5f, 0x31, 0x35, 0x33, 0x30, 0x58, 0x5f, 0x37, 0x32, 0x35, 0x4e, 0x4d, 0x10, 0x05, 0x12,
	0x3b, 0x0a, 0x37, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x58, 0x5f, 0x31, 0x39, 0x35, 0x58, 0x5f, 0x38, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31,
	0x35, 0x33, 0x31, 0x58, 0x5f, 0x31, 0x31, 0x36, 0x4e, 0x4d, 0x10, 0x06, 0x12, 0x3b, 0x0a, 0x37,
	0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x58, 0x5f,
	0x31, 0x39, 0x35, 0x58, 0x5f, 0x37, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x33, 0x31,
	0x58, 0x5f, 0x35, 0x30, 0x37, 0x4e, 0x4d, 0x10, 0x07, 0x12, 0x3b, 0x0a, 0x37, 0x57, 0x61, 0x76,
	0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x35,
	0x58, 0x5f, 0x37, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x33, 0x31, 0x58, 0x5f, 0x38,
	0x39, 0x38, 0x4e, 0x4d, 0x10, 0x08, 0x12, 0x3b, 0x0a, 0x37, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x35, 0x58, 0x5f, 0x36,
	0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x33, 0x32, 0x58, 0x5f, 0x32, 0x39, 0x30, 0x4e,
	0x4d, 0x10, 0x09, 0x12, 0x3b, 0x0a, 0x37, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x35, 0x58, 0x5f, 0x36, 0x30, 0x54, 0x48,
	0x5a, 0x58, 0x5f, 0x31, 0x35, 0x33, 0x32, 0x58, 0x5f, 0x36, 0x38, 0x31, 0x4e, 0x4d, 0x10, 0x0a,
	0x12, 0x3b, 0x0a, 0x37, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x35, 0x58, 0x5f, 0x35, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f,
	0x31, 0x35, 0x33, 0x33, 0x58, 0x5f, 0x30, 0x37, 0x33, 0x4e, 0x4d, 0x10, 0x0b, 0x12, 0x3b, 0x0a,
	0x37, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x58,
	0x5f, 0x31, 0x39, 0x35, 0x58, 0x5f, 0x35, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x33,
	0x33, 0x58, 0x5f, 0x34, 0x36, 0x35, 0x4e, 0x4d, 0x10, 0x0c, 0x12, 0x3b, 0x0a, 0x37, 0x57, 0x61,
	0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x58, 0x5f, 0x31, 0x39,
	0x35, 0x58, 0x5f, 0x34, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x33, 0x33, 0x58, 0x5f,
	0x38, 0x35, 0x38, 0x4e, 0x4d, 0x10, 0x0d, 0x12, 0x3b, 0x0a, 0x37, 0x57, 0x61, 0x76, 0x65, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x35, 0x58, 0x5f,
	0x34, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x33, 0x34, 0x58, 0x5f, 0x32, 0x35, 0x30,
	0x4e, 0x4d, 0x10, 0x0e, 0x12, 0x3b, 0x0a, 0x37, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x35, 0x58, 0x5f, 0x33, 0x35, 0x54,
	0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x33, 0x34, 0x58, 0x5f, 0x36, 0x34, 0x33, 0x4e, 0x4d, 0x10,
	0x0f, 0x12, 0x3b, 0x0a, 0x37, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x35, 0x58, 0x5f, 0x33, 0x30, 0x54, 0x48, 0x5a, 0x58,
	0x5f, 0x31, 0x35, 0x33, 0x35, 0x58, 0x5f, 0x30, 0x33, 0x36, 0x4e, 0x4d, 0x10, 0x10, 0x12, 0x3b,
	0x0a, 0x37, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x58, 0x5f, 0x31, 0x39, 0x35, 0x58, 0x5f, 0x32, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35,
	0x33, 0x35, 0x58, 0x5f, 0x34, 0x32, 0x39, 0x4e, 0x4d, 0x10, 0x11, 0x12, 0x3b, 0x0a, 0x37, 0x57,
	0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x58, 0x5f, 0x31,
	0x39, 0x35, 0x58, 0x5f, 0x32, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x33, 0x35, 0x58,
	0x5f, 0x38, 0x32, 0x32, 0x4e, 0x4d, 0x10, 0x12, 0x12, 0x3b, 0x0a, 0x37, 0x57, 0x61, 0x76, 0x65,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x35, 0x58,
	0x5f, 0x31, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x33, 0x36, 0x58, 0x5f, 0x32, 0x31,
	0x36, 0x4e, 0x4d, 0x10, 0x13, 0x12, 0x3b, 0x0a, 0x37, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x35, 0x58, 0x5f, 0x31, 0x30,
	0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x33, 0x36, 0x58, 0x5f, 0x36, 0x30, 0x39, 0x4e, 0x4d,
	0x10, 0x14, 0x12, 0x3b, 0x0a, 0x37, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x35, 0x58, 0x5f, 0x30, 0x35, 0x54, 0x48, 0x5a,
	0x58, 0x5f, 0x31, 0x35, 0x33, 0x37, 0x58, 0x5f, 0x30, 0x30, 0x33, 0x4e, 0x4d, 0x10, 0x15, 0x12,
	0x3b, 0x0a, 0x37, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x58, 0x5f, 0x31, 0x39, 0x35, 0x58, 0x5f, 0x30, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31,
	0x35, 0x33, 0x37, 0x58, 0x5f, 0x33, 0x39, 0x37, 0x4e, 0x4d, 0x10, 0x16, 0x12, 0x3b, 0x0a, 0x37,
	0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x58, 0x5f,
	0x31, 0x39, 0x34, 0x58, 0x5f, 0x39, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x33, 0x37,
	0x58, 0x5f, 0x37, 0x39, 0x32, 0x4e, 0x4d, 0x10, 0x17, 0x12, 0x3b, 0x0a, 0x37, 0x57, 0x61, 0x76,
	0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x34,
	0x58, 0x5f, 0x39, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x33, 0x38, 0x58, 0x5f, 0x31,
	0x38, 0x36, 0x4e, 0x4d, 0x10, 0x18, 0x12, 0x3b, 0x0a, 0x37, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x34, 0x58, 0x5f, 0x38,
	0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x33, 0x38, 0x58, 0x5f, 0x35, 0x38, 0x31, 0x4e,
	0x4d, 0x10, 0x19, 0x12, 0x3b, 0x0a, 0x37, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x34, 0x58, 0x5f, 0x38, 0x30, 0x54, 0x48,
	0x5a, 0x58, 0x5f, 0x31, 0x35, 0x33, 0x38, 0x58, 0x5f, 0x39, 0x37, 0x36, 0x4e, 0x4d, 0x10, 0x1a,
	0x12, 0x3b, 0x0a, 0x37, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x34, 0x58, 0x5f, 0x37, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f,
	0x31, 0x35, 0x33, 0x39, 0x58, 0x5f, 0x33, 0x37, 0x31, 0x4e, 0x4d, 0x10, 0x1b, 0x12, 0x3b, 0x0a,
	0x37, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x58,
	0x5f, 0x31, 0x39, 0x34, 0x58, 0x5f, 0x37, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x33,
	0x39, 0x58, 0x5f, 0x37, 0x36, 0x36, 0x4e, 0x4d, 0x10, 0x1c, 0x12, 0x3b, 0x0a, 0x37, 0x57, 0x61,
	0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x58, 0x5f, 0x31, 0x39,
	0x34, 0x58, 0x5f, 0x36, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x34, 0x30, 0x58, 0x5f,
	0x31, 0x36, 0x32, 0x4e, 0x4d, 0x10, 0x1d, 0x12, 0x3b, 0x0a, 0x37, 0x57, 0x61, 0x76, 0x65, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x34, 0x58, 0x5f,
	0x36, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x34, 0x30, 0x58, 0x5f, 0x35, 0x35, 0x37,
	0x4e, 0x4d, 0x10, 0x1e, 0x12, 0x3b, 0x0a, 0x37, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x34, 0x58, 0x5f, 0x35, 0x35, 0x54,
	0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x34, 0x30, 0x58, 0x5f, 0x39, 0x35, 0x33, 0x4e, 0x4d, 0x10,
	0x1f, 0x12, 0x3b, 0x0a, 0x37, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x34, 0x58, 0x5f, 0x35, 0x30, 0x54, 0x48, 0x5a, 0x58,
	0x5f, 0x31, 0x35, 0x34, 0x31, 0x58, 0x5f, 0x33, 0x34, 0x39, 0x4e, 0x4d, 0x10, 0x20, 0x12, 0x3b,
	0x0a, 0x37, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x58, 0x5f, 0x31, 0x39, 0x34, 0x58, 0x5f, 0x34, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35,
	0x34, 0x31, 0x58, 0x5f, 0x37, 0x34, 0x36, 0x4e, 0x4d, 0x10, 0x21, 0x12, 0x3b, 0x0a, 0x37, 0x57,
	0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x58, 0x5f, 0x31,
	0x39, 0x34, 0x58, 0x5f, 0x34, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x34, 0x32, 0x58,
	0x5f, 0x31, 0x34, 0x32, 0x4e, 0x4d, 0x10, 0x22, 0x12, 0x3b, 0x0a, 0x37, 0x57, 0x61, 0x76, 0x65,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x34, 0x58,
	0x5f, 0x33, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x34, 0x32, 0x58, 0x5f, 0x35, 0x33,
	0x39, 0x4e, 0x4d, 0x10, 0x23, 0x12, 0x3b, 0x0a, 0x37, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x34, 0x58, 0x5f, 0x33, 0x30,
	0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x34, 0x32, 0x58, 0x5f, 0x39, 0x33, 0x36, 0x4e, 0x4d,
	0x10, 0x24, 0x12, 0x3b, 0x0a, 0x37, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x34, 0x58, 0x5f, 0x32, 0x35, 0x54, 0x48, 0x5a,
	0x58, 0x5f, 0x31, 0x35, 0x34, 0x33, 0x58, 0x5f, 0x33, 0x33, 0x33, 0x4e, 0x4d, 0x10, 0x25, 0x12,
	0x3b, 0x0a, 0x37, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x58, 0x5f, 0x31, 0x39, 0x34, 0x58, 0x5f, 0x32, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31,
	0x35, 0x34, 0x33, 0x58, 0x5f, 0x37, 0x33, 0x30, 0x4e, 0x4d, 0x10, 0x26, 0x12, 0x3b, 0x0a, 0x37,
	0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x58, 0x5f,
	0x31, 0x39, 0x34, 0x58, 0x5f, 0x31, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x34, 0x34,
	0x58, 0x5f, 0x31, 0x32, 0x38, 0x4e, 0x4d, 0x10, 0x27, 0x12, 0x3b, 0x0a, 0x37, 0x57, 0x61, 0x76,
	0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x34,
	0x58, 0x5f, 0x31, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x34, 0x34, 0x58, 0x5f, 0x35,
	0x32, 0x36, 0x4e, 0x4d, 0x10, 0x28, 0x12, 0x3b, 0x0a, 0x37, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x34, 0x58, 0x5f, 0x30,
	0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x34, 0x34, 0x58, 0x5f, 0x39, 0x32, 0x34, 0x4e,
	0x4d, 0x10, 0x29, 0x12, 0x3b, 0x0a, 0x37, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x34, 0x58, 0x5f, 0x30, 0x30, 0x54, 0x48,
	0x5a, 0x58, 0x5f, 0x31, 0x35, 0x34, 0x35, 0x58, 0x5f, 0x33, 0x32, 0x32, 0x4e, 0x4d, 0x10, 0x2a,
	0x12, 0x3b, 0x0a, 0x37, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x33, 0x58, 0x5f, 0x39, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f,
	0x31, 0x35, 0x34, 0x35, 0x58, 0x5f, 0x37, 0x32, 0x30, 0x4e, 0x4d, 0x10, 0x2b, 0x12, 0x3b, 0x0a,
	0x37, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x58,
	0x5f, 0x31, 0x39, 0x33, 0x58, 0x5f, 0x39, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x34,
	0x36, 0x58, 0x5f, 0x31, 0x31, 0x39, 0x4e, 0x4d, 0x10, 0x2c, 0x12, 0x3b, 0x0a, 0x37, 0x57, 0x61,
	0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x58, 0x5f, 0x31, 0x39,
	0x33, 0x58, 0x5f, 0x38, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x34, 0x36, 0x58, 0x5f,
	0x35, 0x31, 0x38, 0x4e, 0x4d, 0x10, 0x2d, 0x12, 0x3b, 0x0a, 0x37, 0x57, 0x61, 0x76, 0x65, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x33, 0x58, 0x5f,
	0x38, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x34, 0x36, 0x58, 0x5f, 0x39, 0x31, 0x37,
	0x4e, 0x4d, 0x10, 0x2e, 0x12, 0x3b, 0x0a, 0x37, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x33, 0x58, 0x5f, 0x37, 0x35, 0x54,
	0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x34, 0x37, 0x58, 0x5f, 0x33, 0x31, 0x36, 0x4e, 0x4d, 0x10,
	0x2f, 0x12, 0x3b, 0x0a, 0x37, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x33, 0x58, 0x5f, 0x37, 0x30, 0x54, 0x48, 0x5a, 0x58,
	0x5f, 0x31, 0x35, 0x34, 0x37, 0x58, 0x5f, 0x37, 0x31, 0x35, 0x4e, 0x4d, 0x10, 0x30, 0x12, 0x3b,
	0x0a, 0x37, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x58, 0x5f, 0x31, 0x39, 0x33, 0x58, 0x5f, 0x36, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35,
	0x34, 0x38, 0x58, 0x5f, 0x31, 0x31, 0x35, 0x4e, 0x4d, 0x10, 0x31, 0x12, 0x3b, 0x0a, 0x37, 0x57,
	0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x58, 0x5f, 0x31,
	0x39, 0x33, 0x58, 0x5f, 0x36, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x34, 0x38, 0x58,
	0x5f, 0x35, 0x31, 0x35, 0x4e, 0x4d, 0x10, 0x32, 0x12, 0x3b, 0x0a, 0x37, 0x57, 0x61, 0x76, 0x65,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x33, 0x58,
	0x5f, 0x35, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x34, 0x38, 0x58, 0x5f, 0x39, 0x31,
	0x35, 0x4e, 0x4d, 0x10, 0x33, 0x12, 0x3b, 0x0a, 0x37, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x33, 0x58, 0x5f, 0x35, 0x30,
	0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x34, 0x39, 0x58, 0x5f, 0x33, 0x31, 0x35, 0x4e, 0x4d,
	0x10, 0x34, 0x12, 0x3b, 0x0a, 0x37, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x33, 0x58, 0x5f, 0x34, 0x35, 0x54, 0x48, 0x5a,
	0x58, 0x5f, 0x31, 0x35, 0x34, 0x39, 0x58, 0x5f, 0x37, 0x31, 0x35, 0x4e, 0x4d, 0x10, 0x35, 0x12,
	0x3b, 0x0a, 0x37, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x58, 0x5f, 0x31, 0x39, 0x33, 0x58, 0x5f, 0x34, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31,
	0x35, 0x35, 0x30, 0x58, 0x5f, 0x31, 0x31, 0x36, 0x4e, 0x4d, 0x10, 0x36, 0x12, 0x3b, 0x0a, 0x37,
	0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x58, 0x5f,
	0x31, 0x39, 0x33, 0x58, 0x5f, 0x33, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x35, 0x30,
	0x58, 0x5f, 0x35, 0x31, 0x37, 0x4e, 0x4d, 0x10, 0x37, 0x12, 0x3b, 0x0a, 0x37, 0x57, 0x61, 0x76,
	0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x33,
	0x58, 0x5f, 0x33, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x35, 0x30, 0x58, 0x5f, 0x39,
	0x31, 0x38, 0x4e, 0x4d, 0x10, 0x38, 0x12, 0x3b, 0x0a, 0x37, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x33, 0x58, 0x5f, 0x32,
	0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x35, 0x31, 0x58, 0x5f, 0x33, 0x31, 0x39, 0x4e,
	0x4d, 0x10, 0x39, 0x12, 0x3b, 0x0a, 0x37, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x33, 0x58, 0x5f, 0x32, 0x30, 0x54, 0x48,
	0x5a, 0x58, 0x5f, 0x31, 0x35, 0x35, 0x31, 0x58, 0x5f, 0x37, 0x32, 0x31, 0x4e, 0x4d, 0x10, 0x3a,
	0x12, 0x3b, 0x0a, 0x37, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x33, 0x58, 0x5f, 0x31, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f,
	0x31, 0x35, 0x35, 0x32, 0x58, 0x5f, 0x31, 0x32, 0x32, 0x4e, 0x4d, 0x10, 0x3b, 0x12, 0x3b, 0x0a,
	0x37, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x58,
	0x5f, 0x31, 0x39, 0x33, 0x58, 0x5f, 0x31, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x35,
	0x32, 0x58, 0x5f, 0x35, 0x32, 0x34, 0x4e, 0x4d, 0x10, 0x3c, 0x12, 0x3b, 0x0a, 0x37, 0x57, 0x61,
	0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x58, 0x5f, 0x31, 0x39,
	0x33, 0x58, 0x5f, 0x30, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x35, 0x32, 0x58, 0x5f,
	0x39, 0x32, 0x36, 0x4e, 0x4d, 0x10, 0x3d, 0x12, 0x3b, 0x0a, 0x37, 0x57, 0x61, 0x76, 0x65, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x33, 0x58, 0x5f,
	0x30, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x35, 0x33, 0x58, 0x5f, 0x33, 0x32, 0x39,
	0x4e, 0x4d, 0x10, 0x3e, 0x12, 0x3b, 0x0a, 0x37, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x32, 0x58, 0x5f, 0x39, 0x35, 0x54,
	0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x35, 0x33, 0x58, 0x5f, 0x37, 0x33, 0x31, 0x4e, 0x4d, 0x10,
	0x3f, 0x12, 0x3b, 0x0a, 0x37, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x32, 0x58, 0x5f, 0x39, 0x30, 0x54, 0x48, 0x5a, 0x58,
	0x5f, 0x31, 0x35, 0x35, 0x34, 0x58, 0x5f, 0x31, 0x33, 0x34, 0x4e, 0x4d, 0x10, 0x40, 0x12, 0x3b,
	0x0a, 0x37, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x58, 0x5f, 0x31, 0x39, 0x32, 0x58, 0x5f, 0x38, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35,
	0x35, 0x34, 0x58, 0x5f, 0x35, 0x33, 0x37, 0x4e, 0x4d, 0x10, 0x41, 0x12, 0x3b, 0x0a, 0x37, 0x57,
	0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x58, 0x5f, 0x31,
	0x39, 0x32, 0x58, 0x5f, 0x38, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x35, 0x34, 0x58,
	0x5f, 0x39, 0x34, 0x30, 0x4e, 0x4d, 0x10, 0x42, 0x12, 0x3b, 0x0a, 0x37, 0x57, 0x61, 0x76, 0x65,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x32, 0x58,
	0x5f, 0x37, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x35, 0x35, 0x58, 0x5f, 0x33, 0x34,
	0x33, 0x4e, 0x4d, 0x10, 0x43, 0x12, 0x3b, 0x0a, 0x37, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x32, 0x58, 0x5f, 0x37, 0x30,
	0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x35, 0x35, 0x58, 0x5f, 0x37, 0x34, 0x37, 0x4e, 0x4d,
	0x10, 0x44, 0x12, 0x3b, 0x0a, 0x37, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x32, 0x58, 0x5f, 0x36, 0x35, 0x54, 0x48, 0x5a,
	0x58, 0x5f, 0x31, 0x35, 0x35, 0x36, 0x58, 0x5f, 0x31, 0x35, 0x31, 0x4e, 0x4d, 0x10, 0x45, 0x12,
	0x3b, 0x0a, 0x37, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x58, 0x5f, 0x31, 0x39, 0x32, 0x58, 0x5f, 0x36, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31,
	0x35, 0x35, 0x36, 0x58, 0x5f, 0x35, 0x35, 0x35, 0x4e, 0x4d, 0x10, 0x46, 0x12, 0x3b, 0x0a, 0x37,
	0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x58, 0x5f,
	0x31, 0x39, 0x32, 0x58, 0x5f, 0x35, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x35, 0x36,
	0x58, 0x5f, 0x39, 0x35, 0x39, 0x4e, 0x4d, 0x10, 0x47, 0x12, 0x3b, 0x0a, 0x37, 0x57, 0x61, 0x76,
	0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x32,
	0x58, 0x5f, 0x35, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x35, 0x37, 0x58, 0x5f, 0x33,
	0x36, 0x33, 0x4e, 0x4d, 0x10, 0x48, 0x12, 0x3b, 0x0a, 0x37, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x32, 0x58, 0x5f, 0x34,
	0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x35, 0x37, 0x58, 0x5f, 0x37, 0x36, 0x38, 0x4e,
	0x4d, 0x10, 0x49, 0x12, 0x3b, 0x0a, 0x37, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x32, 0x58, 0x5f, 0x34, 0x30, 0x54, 0x48,
	0x5a, 0x58, 0x5f, 0x31, 0x35, 0x35, 0x38, 0x58, 0x5f, 0x31, 0x37, 0x33, 0x4e, 0x4d, 0x10, 0x4a,
	0x12, 0x3b, 0x0a, 0x37, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x32, 0x58, 0x5f, 0x33, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f,
	0x31, 0x35, 0x35, 0x38, 0x58, 0x5f, 0x35, 0x37, 0x38, 0x4e, 0x4d, 0x10, 0x4b, 0x12, 0x3b, 0x0a,
	0x37, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x58,
	0x5f, 0x31, 0x39, 0x32, 0x58, 0x5f, 0x33, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x35,
	0x38, 0x58, 0x5f, 0x39, 0x38, 0x33, 0x4e, 0x4d, 0x10, 0x4c, 0x12, 0x3b, 0x0a, 0x37, 0x57, 0x61,
	0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x58, 0x5f, 0x31, 0x39,
	0x32, 0x58, 0x5f, 0x32, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x35, 0x39, 0x58, 0x5f,
	0x33, 0x38, 0x39, 0x4e, 0x4d, 0x10, 0x4d, 0x12, 0x3b, 0x0a, 0x37, 0x57, 0x61, 0x76, 0x65, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x32, 0x58, 0x5f,
	0x32, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x35, 0x39, 0x58, 0x5f, 0x37, 0x39, 0x34,
	0x4e, 0x4d, 0x10, 0x4e, 0x12, 0x3b, 0x0a, 0x37, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x32, 0x58, 0x5f, 0x31, 0x35, 0x54,
	0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x36, 0x30, 0x58, 0x5f, 0x32, 0x30, 0x30, 0x4e, 0x4d, 0x10,
	0x4f, 0x12, 0x3b, 0x0a, 0x37, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x32, 0x58, 0x5f, 0x31, 0x30, 0x54, 0x48, 0x5a, 0x58,
	0x5f, 0x31, 0x35, 0x36, 0x30, 0x58, 0x5f, 0x36, 0x30, 0x36, 0x4e, 0x4d, 0x10, 0x50, 0x12, 0x3b,
	0x0a, 0x37, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x58, 0x5f, 0x31, 0x39, 0x32, 0x58, 0x5f, 0x30, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35,
	0x36, 0x31, 0x58, 0x5f, 0x30, 0x31, 0x33, 0x4e, 0x4d, 0x10, 0x51, 0x12, 0x3b, 0x0a, 0x37, 0x57,
	0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x58, 0x5f, 0x31,
	0x39, 0x32, 0x58, 0x5f, 0x30, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x36, 0x31, 0x58,
	0x5f, 0x34, 0x31, 0x39, 0x4e, 0x4d, 0x10, 0x52, 0x12, 0x3b, 0x0a, 0x37, 0x57, 0x61, 0x76, 0x65,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x31, 0x58,
	0x5f, 0x39, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x36, 0x31, 0x58, 0x5f, 0x38, 0x32,
	0x36, 0x4e, 0x4d, 0x10, 0x53, 0x12, 0x3b, 0x0a, 0x37, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x31, 0x58, 0x5f, 0x39, 0x30,
	0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x36, 0x32, 0x58, 0x5f, 0x32, 0x33, 0x33, 0x4e, 0x4d,
	0x10, 0x54, 0x12, 0x3b, 0x0a, 0x37, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x31, 0x58, 0x5f, 0x38, 0x35, 0x54, 0x48, 0x5a,
	0x58, 0x5f, 0x31, 0x35, 0x36, 0x32, 0x58, 0x5f, 0x36, 0x34, 0x30, 0x4e, 0x4d, 0x10, 0x55, 0x12,
	0x3b, 0x0a, 0x37, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x58, 0x5f, 0x31, 0x39, 0x31, 0x58, 0x5f, 0x38, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31,
	0x35, 0x36, 0x33, 0x58, 0x5f, 0x30, 0x34, 0x37, 0x4e, 0x4d, 0x10, 0x56, 0x12, 0x3b, 0x0a, 0x37,
	0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x58, 0x5f,
	0x31, 0x39, 0x31, 0x58, 0x5f, 0x37, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x36, 0x33,
	0x58, 0x5f, 0x34, 0x35, 0x35, 0x4e, 0x4d, 0x10, 0x57, 0x12, 0x3b, 0x0a, 0x37, 0x57, 0x61, 0x76,
	0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x31,
	0x58, 0x5f, 0x37, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x36, 0x33, 0x58, 0x5f, 0x38,
	0x36, 0x33, 0x4e, 0x4d, 0x10, 0x58, 0x12, 0x3b, 0x0a, 0x37, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x31, 0x58, 0x5f, 0x36,
	0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x36, 0x34, 0x58, 0x5f, 0x32, 0x37, 0x31, 0x4e,
	0x4d, 0x10, 0x59, 0x12, 0x3b, 0x0a, 0x37, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x31, 0x58, 0x5f, 0x36, 0x30, 0x54, 0x48,
	0x5a, 0x58, 0x5f, 0x31, 0x35, 0x36, 0x34, 0x58, 0x5f, 0x36, 0x37, 0x39, 0x4e, 0x4d, 0x10, 0x5a,
	0x12, 0x3b, 0x0a, 0x37, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x31, 0x58, 0x5f, 0x35, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f,
	0x31, 0x35, 0x36, 0x35, 0x58, 0x5f, 0x30, 0x38, 0x37, 0x4e, 0x4d, 0x10, 0x5b, 0x12, 0x3b, 0x0a,
	0x37, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x58,
	0x5f, 0x31, 0x39, 0x31, 0x58, 0x5f, 0x35, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x36,
	0x35, 0x58, 0x5f, 0x34, 0x39, 0x36, 0x4e, 0x4d, 0x10, 0x5c, 0x12, 0x3b, 0x0a, 0x37, 0x57, 0x61,
	0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x58, 0x5f, 0x31, 0x39,
	0x31, 0x58, 0x5f, 0x34, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x36, 0x35, 0x58, 0x5f,
	0x39, 0x30, 0x35, 0x4e, 0x4d, 0x10, 0x5d, 0x12, 0x3b, 0x0a, 0x37, 0x57, 0x61, 0x76, 0x65, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x31, 0x58, 0x5f,
	0x34, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x36, 0x36, 0x58, 0x5f, 0x33, 0x31, 0x34,
	0x4e, 0x4d, 0x10, 0x5e, 0x12, 0x3b, 0x0a, 0x37, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x31, 0x58, 0x5f, 0x33, 0x35, 0x54,
	0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x36, 0x36, 0x58, 0x5f, 0x37, 0x32, 0x33, 0x4e, 0x4d, 0x10,
	0x5f, 0x12, 0x3b, 0x0a, 0x37, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x31, 0x58, 0x5f, 0x33, 0x30, 0x54, 0x48, 0x5a, 0x58,
	0x5f, 0x31, 0x35, 0x36, 0x37, 0x58, 0x5f, 0x31, 0x33, 0x33, 0x4e, 0x4d, 0x10, 0x60, 0x12, 0x3b,
	0x0a, 0x37, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x58, 0x5f, 0x31, 0x39, 0x31, 0x58, 0x5f, 0x32, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35,
	0x36, 0x37, 0x58, 0x5f, 0x35, 0x34, 0x32, 0x4e, 0x4d, 0x10, 0x61, 0x12, 0x3b, 0x0a, 0x37, 0x57,
	0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x58, 0x5f, 0x31,
	0x39, 0x31, 0x58, 0x5f, 0x32, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x36, 0x37, 0x58,
	0x5f, 0x39, 0x35, 0x32, 0x4e, 0x4d, 0x10, 0x62, 0x12, 0x3b, 0x0a, 0x37, 0x57, 0x61, 0x76, 0x65,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x31, 0x58,
	0x5f, 0x31, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x36, 0x38, 0x58, 0x5f, 0x33, 0x36,
	0x32, 0x4e, 0x4d, 0x10, 0x63, 0x22, 0x53, 0x0a, 0x12, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x6f,
	0x77, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x19, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x4c, 0x6f, 0x77, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x4c, 0x6f, 0x77, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x22, 0x3e, 0x0a, 0x0b, 0x53, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x46, 0x69, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x46, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x00, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x46, 0x69, 0x62, 0x65, 0x72,
	0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x22, 0x44, 0x0a, 0x0d, 0x53, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x46, 0x69, 0x62, 0x65, 0x72, 0x52, 0x78, 0x12, 0x18, 0x0a, 0x14, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x46, 0x69, 0x62, 0x65, 0x72, 0x52, 0x78, 0x5f, 0x45, 0x4e, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x46,
	0x69, 0x62, 0x65, 0x72, 0x52, 0x78, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01,
	0x22, 0x80, 0x08, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x26, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x53, 0x46, 0x50, 0x58, 0x5f, 0x31, 0x30, 0x30, 0x30, 0x42, 0x41, 0x53,
	0x45, 0x58, 0x5f, 0x58, 0x10, 0x00, 0x12, 0x2a, 0x0a, 0x26, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x53, 0x46, 0x50, 0x58, 0x5f, 0x31, 0x30, 0x30, 0x30, 0x42, 0x41, 0x53, 0x45, 0x58, 0x5f, 0x54,
	0x10, 0x01, 0x12, 0x2d, 0x0a, 0x29, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x46, 0x50, 0x58,
	0x5f, 0x31, 0x30, 0x47, 0x42, 0x41, 0x53, 0x45, 0x58, 0x5f, 0x46, 0x49, 0x42, 0x45, 0x52, 0x10,
	0x02, 0x12, 0x2e, 0x0a, 0x2a, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x46, 0x50, 0x58, 0x5f,
	0x31, 0x30, 0x47, 0x42, 0x41, 0x53, 0x45, 0x58, 0x5f, 0x43, 0x4f, 0x50, 0x50, 0x45, 0x52, 0x10,
	0x03, 0x12, 0x2e, 0x0a, 0x2a, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x51, 0x53, 0x46, 0x50, 0x58,
	0x5f, 0x34, 0x30, 0x47, 0x42, 0x41, 0x53, 0x45, 0x58, 0x5f, 0x46, 0x49, 0x42, 0x45, 0x52, 0x10,
	0x04, 0x12, 0x2f, 0x0a, 0x2b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x51, 0x53, 0x46, 0x50, 0x58,
	0x5f, 0x34, 0x30, 0x47, 0x42, 0x41, 0x53, 0x45, 0x58, 0x5f, 0x43, 0x4f, 0x50, 0x50, 0x45, 0x52,
	0x10, 0x05, 0x12, 0x2d, 0x0a, 0x29, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x46, 0x50, 0x58,
	0x5f, 0x31, 0x30, 0x30, 0x42, 0x41, 0x53, 0x45, 0x58, 0x5f, 0x46, 0x49, 0x42, 0x45, 0x52, 0x10,
	0x07, 0x12, 0x2f, 0x0a, 0x2b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x46, 0x50, 0x32, 0x38,
	0x58, 0x5f, 0x32, 0x35, 0x47, 0x42, 0x41, 0x53, 0x45, 0x58, 0x5f, 0x46, 0x49, 0x42, 0x45, 0x52,
	0x10, 0x0b, 0x12, 0x30, 0x0a, 0x2c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x46, 0x50, 0x32,
	0x38, 0x58, 0x5f, 0x32, 0x35, 0x47, 0x42, 0x41, 0x53, 0x45, 0x58, 0x5f, 0x43, 0x4f, 0x50, 0x50,
	0x45, 0x52, 0x10, 0x0c, 0x12, 0x2d, 0x0a, 0x29, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x51, 0x53,
	0x46, 0x50, 0x32, 0x38, 0x58, 0x5f, 0x31, 0x30, 0x30, 0x47, 0x58, 0x5f, 0x46, 0x49, 0x42, 0x45,
	0x52, 0x10, 0x0d, 0x12, 0x2e, 0x0a, 0x2a, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x51, 0x53, 0x46,
	0x50, 0x32, 0x38, 0x58, 0x5f, 0x31, 0x30, 0x30, 0x47, 0x58, 0x5f, 0x43, 0x4f, 0x50, 0x50, 0x45,
	0x52, 0x10, 0x0e, 0x12, 0x2c, 0x0a, 0x28, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x46, 0x50,
	0x58, 0x5f, 0x31, 0x30, 0x47, 0x42, 0x41, 0x53, 0x45, 0x58, 0x5f, 0x44, 0x57, 0x44, 0x4d, 0x10,
	0x22, 0x12, 0x30, 0x0a, 0x2c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x51, 0x53, 0x46, 0x50, 0x32,
	0x38, 0x58, 0x5f, 0x31, 0x30, 0x30, 0x47, 0x42, 0x41, 0x53, 0x45, 0x58, 0x5f, 0x44, 0x57, 0x44,
	0x4d, 0x10, 0x23, 0x12, 0x2b, 0x0a, 0x27, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x46, 0x50,
	0x35, 0x36, 0x58, 0x5f, 0x35, 0x30, 0x47, 0x58, 0x5f, 0x46, 0x49, 0x42, 0x45, 0x52, 0x10, 0x24,
	0x12, 0x2c, 0x0a, 0x28, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4d,
	0x65, 0x64, 0x69, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x46, 0x50, 0x35, 0x36, 0x58,
	0x5f, 0x35, 0x30, 0x47, 0x58, 0x5f, 0x43, 0x4f, 0x50, 0x50, 0x45, 0x52, 0x10, 0x25, 0x12, 0x31,
	0x0a, 0x2d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x64,
	0x69, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x51, 0x53, 0x46, 0x50, 0x35, 0x36, 0x58, 0x5f,
	0x32, 0x30, 0x30, 0x47, 0x42, 0x41, 0x53, 0x45, 0x58, 0x5f, 0x46, 0x49, 0x42, 0x45, 0x52, 0x10,
	0x26, 0x12, 0x32, 0x0a, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x51, 0x53, 0x46, 0x50, 0x35,
	0x36, 0x58, 0x5f, 0x32, 0x30, 0x30, 0x47, 0x42, 0x41, 0x53, 0x45, 0x58, 0x5f, 0x43, 0x4f, 0x50,
	0x50, 0x45, 0x52, 0x10, 0x27, 0x12, 0x31, 0x0a, 0x2d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x51,
	0x53, 0x46, 0x50, 0x44, 0x44, 0x58, 0x5f, 0x34, 0x30, 0x30, 0x47, 0x42, 0x41, 0x53, 0x45, 0x58,
	0x5f, 0x46, 0x49, 0x42, 0x45, 0x52, 0x10, 0x28, 0x12, 0x32, 0x0a, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x51, 0x53, 0x46, 0x50, 0x44, 0x44, 0x58, 0x5f, 0x34, 0x30, 0x30, 0x47, 0x42, 0x41,
	0x53, 0x45, 0x58, 0x5f, 0x43, 0x4f, 0x50, 0x50, 0x45, 0x52, 0x10, 0x29, 0x12, 0x31, 0x0a, 0x2d,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x75,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x51, 0x53, 0x46, 0x50, 0x32, 0x38, 0x58, 0x5f, 0x35, 0x30,
	0x47, 0x42, 0x41, 0x53, 0x45, 0x58, 0x5f, 0x43, 0x4f, 0x50, 0x50, 0x45, 0x52, 0x10, 0x30, 0x12,
	0x22, 0x0a, 0x1d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4d, 0x65,
	0x64, 0x69, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0xff, 0x01, 0x22, 0x4f, 0x0a, 0x08, 0x47, 0x61, 0x69, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x1f, 0x0a, 0x1b, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f,
	0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x47, 0x61, 0x69, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x10, 0x00,
	0x12, 0x10, 0x0a, 0x0c, 0x47, 0x61, 0x69, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x41, 0x47, 0x43,
	0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x61, 0x69, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x41,
	0x50, 0x43, 0x10, 0x02, 0x22, 0x5d, 0x0a, 0x0b, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45,
	0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x70, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x48, 0x53, 0x45, 0x4e, 0x10, 0x02, 0x12, 0x14, 0x0a,
	0x10, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x4f, 0x53, 0x4e,
	0x52, 0x10, 0x03, 0x22, 0x5b, 0x0a, 0x0b, 0x47, 0x61, 0x69, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x53,
	0x74, 0x73, 0x12, 0x22, 0x0a, 0x1e, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e,
	0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x47, 0x61, 0x69, 0x6e, 0x4d, 0x6f, 0x64,
	0x65, 0x53, 0x74, 0x73, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x61, 0x69, 0x6e, 0x4d, 0x6f,
	0x64, 0x65, 0x53, 0x74, 0x73, 0x5f, 0x41, 0x47, 0x43, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x47,
	0x61, 0x69, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x73, 0x5f, 0x41, 0x50, 0x43, 0x10, 0x02,
	0x22, 0x75, 0x0a, 0x11, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x24, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x4f, 0x70, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x00, 0x12,
	0x1a, 0x0a, 0x16, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x48, 0x53, 0x45, 0x4e, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x4f,
	0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x4f, 0x53, 0x4e, 0x52, 0x10, 0x03, 0x22, 0x51, 0x0a, 0x0e, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x43, 0x45, 0x52, 0x54,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x4e, 0x4f, 0x4e, 0x58, 0x5f, 0x43,
	0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x01, 0x22, 0x47, 0x0a, 0x0c, 0x49, 0x73,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x64, 0x6d, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x73,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x64, 0x6d, 0x5f, 0x4e, 0x4f, 0x4e, 0x58, 0x5f,
	0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x73, 0x53,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x64, 0x6d, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52,
	0x54, 0x10, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x47, 0x61, 0x69, 0x6e, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x1a, 0xe5, 0x0e, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x72, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f,
	0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x69, 0x66, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76,
	0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72,
	0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x6c,
	0x61, 0x72, 0x6d, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x49, 0x66,
	0x64, 0x6f, 0x77, 0x6e, 0x73, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x2d, 0x61, 0x6c, 0x61,
	0x72, 0x6d, 0x2d, 0x69, 0x66, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x68, 0x6f,
	0x6c, 0x64, 0x6f, 0x66, 0x66, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x68, 0x6f, 0x6c, 0x64, 0x6f, 0x66, 0x66, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x72,
	0x12, 0x22, 0x0a, 0x0c, 0x68, 0x6f, 0x6c, 0x64, 0x75, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x68, 0x6f, 0x6c, 0x64, 0x75, 0x70, 0x2d, 0x74,
	0x69, 0x6d, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x5f, 0x62, 0x33, 0x74, 0x63, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x62, 0x33, 0x74, 0x63, 0x61, 0x12, 0x28,
	0x0a, 0x0f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x62, 0x31, 0x74, 0x63,
	0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x2d, 0x62, 0x31, 0x74, 0x63, 0x61, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x62, 0x32, 0x74, 0x63, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x62, 0x32, 0x74,
	0x63, 0x61, 0x12, 0x2c, 0x0a, 0x11, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f,
	0x62, 0x69, 0x70, 0x32, 0x74, 0x63, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x62, 0x69, 0x70, 0x32, 0x74, 0x63, 0x61,
	0x12, 0x2a, 0x0a, 0x10, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x73, 0x64,
	0x62, 0x65, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x73, 0x64, 0x62, 0x65, 0x72, 0x65, 0x12, 0x2a, 0x0a, 0x10,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x73, 0x66, 0x62, 0x65, 0x72, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x2d, 0x73, 0x66, 0x62, 0x65, 0x72, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x61, 0x6d, 0x70,
	0x5f, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x64, 0x61, 0x6d, 0x70, 0x2d, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x64, 0x61, 0x6d, 0x70, 0x5f, 0x72, 0x65, 0x75, 0x73, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x64, 0x61, 0x6d, 0x70, 0x2d, 0x72, 0x65, 0x75, 0x73, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x64, 0x61, 0x6d, 0x70, 0x5f, 0x63, 0x65, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x61, 0x6d, 0x70, 0x2d, 0x63, 0x65, 0x69, 0x6c, 0x69,
	0x6e, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x61, 0x6d, 0x70, 0x5f, 0x64, 0x65, 0x63, 0x61, 0x79,
	0x6f, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x61, 0x6d, 0x70, 0x2d, 0x64,
	0x65, 0x63, 0x61, 0x79, 0x6f, 0x6b, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x61, 0x6d, 0x70, 0x5f, 0x64,
	0x65, 0x63, 0x61, 0x79, 0x6e, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x61,
	0x6d, 0x70, 0x2d, 0x64, 0x65, 0x63, 0x61, 0x79, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x13, 0x61, 0x6c,
	0x6d, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x61, 0x6c, 0x6d, 0x2d, 0x6c, 0x61, 0x73,
	0x74, 0x2d, 0x72, 0x65, 0x73, 0x65, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2d, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x64, 0x61, 0x6d, 0x70, 0x69, 0x6e,
	0x67, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x64, 0x61, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x2d, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0xd3, 0x08, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x41, 0x6c, 0x61, 0x72,
	0x6d, 0x49, 0x66, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x12, 0x81, 0x01, 0x0a, 0x12, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x69, 0x66, 0x64, 0x6f, 0x77, 0x6e, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64,
	0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x41, 0x6c, 0x61, 0x72, 0x6d, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x41, 0x6c, 0x61, 0x72, 0x6d,
	0x49, 0x66, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x41, 0x6c, 0x61,
	0x72, 0x6d, 0x49, 0x66, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x2d,
	0x61, 0x6c, 0x61, 0x72, 0x6d, 0x2d, 0x69, 0x66, 0x64, 0x6f, 0x77, 0x6e, 0x1a, 0xb9, 0x07, 0x0a,
	0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x49, 0x66, 0x64, 0x6f, 0x77,
	0x6e, 0x12, 0x7b, 0x0a, 0x0a, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64,
	0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x41, 0x6c, 0x61, 0x72, 0x6d, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x41, 0x6c, 0x61, 0x72, 0x6d,
	0x49, 0x66, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x41, 0x6c, 0x61,
	0x72, 0x6d, 0x49, 0x66, 0x64, 0x6f, 0x77, 0x6e, 0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x69, 0x66, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x69, 0x66, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x6c,
	0x61, 0x72, 0x6d, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x73,
	0x5f, 0x69, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x2d, 0x69, 0x6e, 0x2d, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x75,
	0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x11, 0x69, 0x73, 0x2d, 0x69, 0x6e, 0x2d, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x2d, 0x69, 0x6e, 0x2d, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x6c, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x66, 0x6c,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11,
	0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x2d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x65, 0x72, 0x69, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x2d, 0x6f, 0x66, 0x2d, 0x6d,
	0x65, 0x72, 0x69, 0x74, 0x22, 0xf1, 0x03, 0x0a, 0x09, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x41, 0x55, 0x41, 0x49, 0x53, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x6c, 0x61, 0x72, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x33, 0x54, 0x43, 0x41, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e,
	0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x41, 0x49, 0x53, 0x10, 0x02,
	0x12, 0x11, 0x0a, 0x0d, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x4f,
	0x46, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x4c, 0x4f, 0x4d, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x4c, 0x4f, 0x50, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x6c, 0x61,
	0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x4f, 0x53, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e,
	0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x52, 0x44, 0x49, 0x10, 0x07,
	0x12, 0x12, 0x0a, 0x0e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x52,
	0x45, 0x49, 0x10, 0x08, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x4f, 0x4f, 0x46, 0x10, 0x09, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x6c, 0x61, 0x72, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x41, 0x49, 0x53, 0x10, 0x0a, 0x12, 0x12, 0x0a, 0x0e, 0x41,
	0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x52, 0x44, 0x49, 0x10, 0x0b, 0x12,
	0x12, 0x0a, 0x0e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x52, 0x45,
	0x49, 0x10, 0x0c, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x50, 0x50, 0x4c, 0x4d, 0x10, 0x0d, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x6c, 0x61, 0x72, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x44, 0x4f, 0x4f, 0x4c, 0x10, 0x0e, 0x12, 0x13, 0x0a, 0x0f,
	0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x52, 0x4f, 0x4f, 0x4c, 0x10,
	0x0f, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53,
	0x44, 0x42, 0x45, 0x52, 0x45, 0x10, 0x10, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x6c, 0x61, 0x72, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x46, 0x42, 0x45, 0x52, 0x45, 0x10, 0x11, 0x12, 0x13, 0x0a,
	0x0f, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x52, 0x4f, 0x4f, 0x4c,
	0x10, 0x12, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x50, 0x55, 0x4e, 0x45, 0x51, 0x10, 0x13, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x6c, 0x61, 0x72, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x43, 0x44, 0x10, 0x14, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x6c,
	0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x57, 0x4c, 0x4e, 0x4b, 0x10, 0x15, 0x12, 0x13,
	0x0a, 0x0f, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x31, 0x54, 0x43,
	0x41, 0x10, 0x28, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x42, 0x32, 0x54, 0x43, 0x41, 0x10, 0x29, 0x1a, 0x8a, 0x0f, 0x0a, 0x03, 0x50, 0x6f, 0x73,
	0x12, 0x50, 0x0a, 0x0c, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f,
	0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x52, 0x0c, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2d, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x12, 0x36, 0x0a, 0x03, 0x63, 0x72, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x24, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65,
	0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x50, 0x6f,
	0x73, 0x2e, 0x43, 0x72, 0x63, 0x52, 0x03, 0x63, 0x72, 0x63, 0x12, 0x41, 0x0a, 0x07, 0x68, 0x6f,
	0x6c, 0x64, 0x5f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x2e, 0x48, 0x6f,
	0x6c, 0x64, 0x55, 0x70, 0x52, 0x07, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x75, 0x70, 0x12, 0x3c, 0x0a,
	0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x2e, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x12, 0x41, 0x0a, 0x07, 0x6a,
	0x30, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x2e, 0x4a,
	0x30, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x6a, 0x30, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x6a, 0x30, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x6a, 0x30, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6a, 0x30,
	0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x30,
	0x2d, 0x74, 0x72, 0x61, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x07, 0x6a, 0x31, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73,
	0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x2e, 0x4a, 0x31, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x07, 0x6a, 0x31, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6a, 0x31, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6a, 0x31, 0x2d,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6a, 0x31, 0x5f, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x31, 0x2d, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x63, 0x32, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x63,
	0x32, 0x12, 0x3c, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x26, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44,
	0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x50,
	0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x12,
	0x45, 0x0a, 0x08, 0x73, 0x63, 0x72, 0x61, 0x6d, 0x62, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x29, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e,
	0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e,
	0x50, 0x6f, 0x73, 0x2e, 0x53, 0x63, 0x72, 0x61, 0x6d, 0x62, 0x6c, 0x65, 0x52, 0x08, 0x73, 0x63,
	0x72, 0x61, 0x6d, 0x62, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x78, 0x5f, 0x6a, 0x30, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x78, 0x2d,
	0x6a, 0x30, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x78, 0x5f, 0x6a,
	0x30, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72,
	0x78, 0x2d, 0x6a, 0x30, 0x2d, 0x74, 0x72, 0x61, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x78,
	0x5f, 0x6a, 0x31, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x72, 0x78, 0x2d, 0x6a, 0x31, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x72, 0x78, 0x5f, 0x6a, 0x31, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x72, 0x78, 0x2d, 0x6a, 0x31, 0x2d, 0x74, 0x72, 0x61, 0x63, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x72, 0x78, 0x5f, 0x63, 0x32, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72,
	0x78, 0x2d, 0x63, 0x32, 0x12, 0x49, 0x0a, 0x0a, 0x72, 0x78, 0x5f, 0x6a, 0x30, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x2e, 0x52, 0x78, 0x4a, 0x30, 0x4d,
	0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x78, 0x2d, 0x6a, 0x30, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x12,
	0x49, 0x0a, 0x0a, 0x72, 0x78, 0x5f, 0x6a, 0x31, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76,
	0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72,
	0x74, 0x2e, 0x50, 0x6f, 0x73, 0x2e, 0x52, 0x78, 0x4a, 0x31, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0a,
	0x72, 0x78, 0x2d, 0x6a, 0x31, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x31,
	0x74, 0x63, 0x61, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x31, 0x74, 0x63, 0x61,
	0x12, 0x14, 0x0a, 0x05, 0x62, 0x32, 0x74, 0x63, 0x61, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x62, 0x32, 0x74, 0x63, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x33, 0x74, 0x63, 0x61, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x33, 0x74, 0x63, 0x61, 0x22, 0x39, 0x0a, 0x0b,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x13, 0x0a, 0x0f, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x53, 0x44, 0x48, 0x10, 0x00,
	0x12, 0x15, 0x0a, 0x11, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f,
	0x53, 0x4f, 0x4e, 0x45, 0x54, 0x10, 0x01, 0x22, 0x27, 0x0a, 0x03, 0x43, 0x72, 0x63, 0x12, 0x0f,
	0x0a, 0x0b, 0x43, 0x72, 0x63, 0x5f, 0x58, 0x5f, 0x31, 0x36, 0x42, 0x49, 0x54, 0x10, 0x00, 0x12,
	0x0f, 0x0a, 0x0b, 0x43, 0x72, 0x63, 0x5f, 0x58, 0x5f, 0x33, 0x32, 0x42, 0x49, 0x54, 0x10, 0x01,
	0x22, 0x31, 0x0a, 0x06, 0x48, 0x6f, 0x6c, 0x64, 0x55, 0x70, 0x12, 0x13, 0x0a, 0x0f, 0x48, 0x6f,
	0x6c, 0x64, 0x55, 0x70, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x12, 0x0a, 0x0e, 0x48, 0x6f, 0x6c, 0x64, 0x55, 0x70, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45,
	0x44, 0x10, 0x01, 0x22, 0x3b, 0x0a, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x0e, 0x0a, 0x0a,
	0x53, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x55, 0x4e, 0x44, 0x4f, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c,
	0x53, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x58, 0x5f, 0x31, 0x35, 0x35, 0x4d, 0x10, 0x01, 0x12, 0x10,
	0x0a, 0x0c, 0x53, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x58, 0x5f, 0x36, 0x32, 0x32, 0x4d, 0x10, 0x02,
	0x22, 0x87, 0x01, 0x0a, 0x06, 0x4a, 0x30, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55,
	0x45, 0x5f, 0x4a, 0x30, 0x4d, 0x6f, 0x64, 0x65, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4a, 0x30,
	0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x58, 0x5f, 0x31, 0x42, 0x59, 0x54, 0x45, 0x10, 0x01, 0x12, 0x13,
	0x0a, 0x0f, 0x4a, 0x30, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x58, 0x5f, 0x31, 0x36, 0x42, 0x59, 0x54,
	0x45, 0x10, 0x10, 0x12, 0x23, 0x0a, 0x1f, 0x4a, 0x30, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x58, 0x5f,
	0x36, 0x34, 0x42, 0x59, 0x54, 0x45, 0x58, 0x5f, 0x4f, 0x52, 0x58, 0x5f, 0x4e, 0x55, 0x4c, 0x4c,
	0x58, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x40, 0x12, 0x10, 0x0a, 0x0b, 0x4a, 0x30, 0x4d, 0x6f,
	0x64, 0x65, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x10, 0x80, 0x01, 0x22, 0x87, 0x01, 0x0a, 0x06, 0x4a,
	0x31, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x4a, 0x31, 0x4d, 0x6f,
	0x64, 0x65, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4a, 0x31, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x58,
	0x5f, 0x31, 0x42, 0x59, 0x54, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x4a, 0x31, 0x4d, 0x6f,
	0x64, 0x65, 0x5f, 0x58, 0x5f, 0x31, 0x36, 0x42, 0x59, 0x54, 0x45, 0x10, 0x10, 0x12, 0x23, 0x0a,
	0x1f, 0x4a, 0x31, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x58, 0x5f, 0x36, 0x34, 0x42, 0x59, 0x54, 0x45,
	0x58, 0x5f, 0x4f, 0x52, 0x58, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x58, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x10, 0x40, 0x12, 0x10, 0x0a, 0x0b, 0x4a, 0x31, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x50, 0x45, 0x45,
	0x52, 0x10, 0x80, 0x01, 0x22, 0x2a, 0x0a, 0x05, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x10, 0x0a,
	0x0c, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x10, 0x00, 0x12,
	0x0f, 0x0a, 0x0b, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x53, 0x4c, 0x41, 0x56, 0x45, 0x10, 0x01,
	0x22, 0x37, 0x0a, 0x08, 0x53, 0x63, 0x72, 0x61, 0x6d, 0x62, 0x6c, 0x65, 0x12, 0x15, 0x0a, 0x11,
	0x53, 0x63, 0x72, 0x61, 0x6d, 0x62, 0x6c, 0x65, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x63, 0x72, 0x61, 0x6d, 0x62, 0x6c, 0x65, 0x5f,
	0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x22, 0x93, 0x01, 0x0a, 0x08, 0x52, 0x78,
	0x4a, 0x30, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x52, 0x78, 0x4a,
	0x30, 0x4d, 0x6f, 0x64, 0x65, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x78, 0x4a, 0x30, 0x4d,
	0x6f, 0x64, 0x65, 0x5f, 0x58, 0x5f, 0x31, 0x42, 0x59, 0x54, 0x45, 0x10, 0x01, 0x12, 0x15, 0x0a,
	0x11, 0x52, 0x78, 0x4a, 0x30, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x58, 0x5f, 0x31, 0x36, 0x42, 0x59,
	0x54, 0x45, 0x10, 0x10, 0x12, 0x25, 0x0a, 0x21, 0x52, 0x78, 0x4a, 0x30, 0x4d, 0x6f, 0x64, 0x65,
	0x5f, 0x58, 0x5f, 0x36, 0x34, 0x42, 0x59, 0x54, 0x45, 0x58, 0x5f, 0x4f, 0x52, 0x58, 0x5f, 0x4e,
	0x55, 0x4c, 0x4c, 0x58, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x40, 0x12, 0x12, 0x0a, 0x0d, 0x52,
	0x78, 0x4a, 0x30, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x10, 0x80, 0x01, 0x22,
	0x93, 0x01, 0x0a, 0x08, 0x52, 0x78, 0x4a, 0x31, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x1b,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c,
	0x55, 0x45, 0x5f, 0x52, 0x78, 0x4a, 0x31, 0x4d, 0x6f, 0x64, 0x65, 0x10, 0x00, 0x12, 0x14, 0x0a,
	0x10, 0x52, 0x78, 0x4a, 0x31, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x58, 0x5f, 0x31, 0x42, 0x59, 0x54,
	0x45, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x78, 0x4a, 0x31, 0x4d, 0x6f, 0x64, 0x65, 0x5f,
	0x58, 0x5f, 0x31, 0x36, 0x42, 0x59, 0x54, 0x45, 0x10, 0x10, 0x12, 0x25, 0x0a, 0x21, 0x52, 0x78,
	0x4a, 0x31, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x58, 0x5f, 0x36, 0x34, 0x42, 0x59, 0x54, 0x45, 0x58,
	0x5f, 0x4f, 0x52, 0x58, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x58, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10,
	0x40, 0x12, 0x12, 0x0a, 0x0d, 0x52, 0x78, 0x4a, 0x31, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x50, 0x45,
	0x45, 0x52, 0x10, 0x80, 0x01, 0x1a, 0x95, 0x0b, 0x0a, 0x03, 0x41, 0x74, 0x6d, 0x12, 0x41, 0x0a,
	0x07, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76,
	0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x41, 0x74, 0x6d,
	0x2e, 0x48, 0x6f, 0x6c, 0x64, 0x55, 0x70, 0x52, 0x07, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x75, 0x70,
	0x12, 0x41, 0x0a, 0x07, 0x6a, 0x30, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x27, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e,
	0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e,
	0x41, 0x74, 0x6d, 0x2e, 0x4a, 0x30, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x6a, 0x30, 0x2d, 0x6d,
	0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6a, 0x30, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x30, 0x2d, 0x74, 0x72, 0x61, 0x63, 0x65, 0x12,
	0x41, 0x0a, 0x07, 0x6a, 0x31, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x27, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44,
	0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x41,
	0x74, 0x6d, 0x2e, 0x4a, 0x31, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x6a, 0x31, 0x2d, 0x6d, 0x6f,
	0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6a, 0x31, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x31, 0x2d, 0x74, 0x72, 0x61, 0x63, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x63, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x63, 0x32, 0x12, 0x3c,
	0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d,
	0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x41, 0x74, 0x6d, 0x2e,
	0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x45, 0x0a, 0x08,
	0x73, 0x63, 0x72, 0x61, 0x6d, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76,
	0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x41, 0x74, 0x6d,
	0x2e, 0x53, 0x63, 0x72, 0x61, 0x6d, 0x62, 0x6c, 0x65, 0x52, 0x08, 0x73, 0x63, 0x72, 0x61, 0x6d,
	0x62, 0x6c, 0x65, 0x12, 0x61, 0x0a, 0x12, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x5f, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x31, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65,
	0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x41, 0x74,
	0x6d, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x53, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x64, 0x64, 0x69,
	0x6e, 0x67, 0x52, 0x12, 0x66, 0x6c, 0x61, 0x67, 0x2d, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2d, 0x70,
	0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x78, 0x5f, 0x6a, 0x30, 0x5f,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x78, 0x2d,
	0x6a, 0x30, 0x2d, 0x74, 0x72, 0x61, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x78, 0x5f, 0x6a,
	0x31, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72,
	0x78, 0x2d, 0x6a, 0x31, 0x2d, 0x74, 0x72, 0x61, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x78,
	0x5f, 0x63, 0x32, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x78, 0x2d, 0x63, 0x32,
	0x12, 0x49, 0x0a, 0x0a, 0x72, 0x78, 0x5f, 0x6a, 0x30, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65,
	0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x2e, 0x41, 0x74, 0x6d, 0x2e, 0x52, 0x78, 0x4a, 0x30, 0x4d, 0x6f, 0x64, 0x65, 0x52,
	0x0a, 0x72, 0x78, 0x2d, 0x6a, 0x30, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x49, 0x0a, 0x0a, 0x72,
	0x78, 0x5f, 0x6a, 0x31, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x29, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65,
	0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x41, 0x74,
	0x6d, 0x2e, 0x52, 0x78, 0x4a, 0x31, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x78, 0x2d, 0x6a,
	0x31, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x62, 0x5f, 0x68, 0x6f, 0x6c,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6c, 0x62,
	0x2d, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x31, 0x0a, 0x06, 0x48, 0x6f,
	0x6c, 0x64, 0x55, 0x70, 0x12, 0x13, 0x0a, 0x0f, 0x48, 0x6f, 0x6c, 0x64, 0x55, 0x70, 0x5f, 0x44,
	0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x48, 0x6f, 0x6c,
	0x64, 0x55, 0x70, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x22, 0x4e, 0x0a,
	0x06, 0x4a, 0x30, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x4a, 0x30,
	0x4d, 0x6f, 0x64, 0x65, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4a, 0x30, 0x4d, 0x6f, 0x64, 0x65,
	0x5f, 0x58, 0x5f, 0x31, 0x36, 0x42, 0x59, 0x54, 0x45, 0x10, 0x10, 0x12, 0x10, 0x0a, 0x0b, 0x4a,
	0x30, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x10, 0x80, 0x01, 0x22, 0x73, 0x0a,
	0x06, 0x4a, 0x31, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x4a, 0x31,
	0x4d, 0x6f, 0x64, 0x65, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4a, 0x31, 0x4d, 0x6f, 0x64, 0x65,
	0x5f, 0x58, 0x5f, 0x31, 0x36, 0x42, 0x59, 0x54, 0x45, 0x10, 0x10, 0x12, 0x23, 0x0a, 0x1f, 0x4a,
	0x31, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x58, 0x5f, 0x36, 0x34, 0x42, 0x59, 0x54, 0x45, 0x58, 0x5f,
	0x4f, 0x52, 0x58, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x58, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x40,
	0x12, 0x10, 0x0a, 0x0b, 0x4a, 0x31, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x10,
	0x80, 0x01, 0x22, 0x2a, 0x0a, 0x05, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x10, 0x0a, 0x0c, 0x43,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x10, 0x00, 0x12, 0x0f, 0x0a,
	0x0b, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x53, 0x4c, 0x41, 0x56, 0x45, 0x10, 0x01, 0x22, 0x37,
	0x0a, 0x08, 0x53, 0x63, 0x72, 0x61, 0x6d, 0x62, 0x6c, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x63,
	0x72, 0x61, 0x6d, 0x62, 0x6c, 0x65, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x63, 0x72, 0x61, 0x6d, 0x62, 0x6c, 0x65, 0x5f, 0x45, 0x4e,
	0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x22, 0x4d, 0x0a, 0x10, 0x46, 0x6c, 0x61, 0x67, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x18, 0x46,
	0x6c, 0x61, 0x67, 0x53, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x6c, 0x61,
	0x67, 0x53, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x45, 0x4e,
	0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x22, 0x56, 0x0a, 0x08, 0x52, 0x78, 0x4a, 0x30, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e,
	0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x52, 0x78, 0x4a, 0x30, 0x4d, 0x6f, 0x64,
	0x65, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x78, 0x4a, 0x30, 0x4d, 0x6f, 0x64, 0x65, 0x5f,
	0x58, 0x5f, 0x31, 0x36, 0x42, 0x59, 0x54, 0x45, 0x10, 0x10, 0x12, 0x12, 0x0a, 0x0d, 0x52, 0x78,
	0x4a, 0x30, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x10, 0x80, 0x01, 0x22, 0x7d,
	0x0a, 0x08, 0x52, 0x78, 0x4a, 0x31, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45,
	0x5f, 0x52, 0x78, 0x4a, 0x31, 0x4d, 0x6f, 0x64, 0x65, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x52,
	0x78, 0x4a, 0x31, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x58, 0x5f, 0x31, 0x36, 0x42, 0x59, 0x54, 0x45,
	0x10, 0x10, 0x12, 0x25, 0x0a, 0x21, 0x52, 0x78, 0x4a, 0x31, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x58,
	0x5f, 0x36, 0x34, 0x42, 0x59, 0x54, 0x45, 0x58, 0x5f, 0x4f, 0x52, 0x58, 0x5f, 0x4e, 0x55, 0x4c,
	0x4c, 0x58, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x40, 0x12, 0x12, 0x0a, 0x0d, 0x52, 0x78, 0x4a,
	0x31, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x10, 0x80, 0x01, 0x1a, 0xea, 0x18,
	0x0a, 0x04, 0x43, 0x70, 0x6f, 0x73, 0x12, 0x51, 0x0a, 0x0c, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x43, 0x70, 0x6f, 0x73, 0x2e,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x6d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x51, 0x0a, 0x0c, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65,
	0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x43, 0x70,
	0x6f, 0x73, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0c,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x2d, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x49, 0x0a, 0x09,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65,
	0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x43, 0x70,
	0x6f, 0x73, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x78, 0x52, 0x09, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x78, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x62, 0x5f, 0x68, 0x6f,
	0x6c, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6c,
	0x62, 0x2d, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x07, 0x68,
	0x6f, 0x6c, 0x64, 0x5f, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x43, 0x70, 0x6f, 0x73, 0x2e,
	0x48, 0x6f, 0x6c, 0x64, 0x55, 0x70, 0x52, 0x07, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x75, 0x70, 0x12,
	0x59, 0x0a, 0x0f, 0x68, 0x70, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x43, 0x70, 0x6f, 0x73, 0x2e, 0x48, 0x70, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0f, 0x68, 0x70, 0x2d, 0x6d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x08, 0x61, 0x69,
	0x73, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x43, 0x70, 0x6f, 0x73, 0x2e,
	0x41, 0x69, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x08, 0x61, 0x69, 0x73, 0x2d, 0x66, 0x6c, 0x61,
	0x67, 0x12, 0x4b, 0x0a, 0x0a, 0x74, 0x75, 0x61, 0x69, 0x73, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64,
	0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x2e, 0x43, 0x70, 0x6f, 0x73, 0x2e, 0x54, 0x75, 0x61, 0x69, 0x73, 0x46, 0x6c,
	0x61, 0x67, 0x52, 0x0a, 0x74, 0x75, 0x61, 0x69, 0x73, 0x2d, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x42,
	0x0a, 0x07, 0x6a, 0x30, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x28, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65,
	0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x43, 0x70,
	0x6f, 0x73, 0x2e, 0x4a, 0x30, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x6a, 0x30, 0x2d, 0x6d, 0x6f,
	0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6a, 0x30, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6a, 0x30, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x6a, 0x30, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6a, 0x30, 0x2d, 0x74, 0x72, 0x61, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x07, 0x6a, 0x31,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x43, 0x70, 0x6f, 0x73, 0x2e, 0x4a,
	0x31, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x6a, 0x31, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x6a, 0x31, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x6a, 0x31, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6a, 0x31,
	0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x31,
	0x2d, 0x74, 0x72, 0x61, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x63, 0x32, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x02, 0x63, 0x32, 0x12, 0x3d, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64,
	0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x2e, 0x43, 0x70, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x05,
	0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x62, 0x0a, 0x12, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x32, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e,
	0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e,
	0x43, 0x70, 0x6f, 0x73, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x53, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61,
	0x64, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x12, 0x66, 0x6c, 0x61, 0x67, 0x2d, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x2d, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x78, 0x5f,
	0x6a, 0x30, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x72, 0x78, 0x2d, 0x6a, 0x30, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72,
	0x78, 0x5f, 0x6a, 0x30, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x72, 0x78, 0x2d, 0x6a, 0x30, 0x2d, 0x74, 0x72, 0x61, 0x63, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x72, 0x78, 0x5f, 0x6a, 0x31, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x72, 0x78, 0x2d, 0x6a, 0x31, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x72, 0x78, 0x5f, 0x6a, 0x31, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x78, 0x2d, 0x6a, 0x31, 0x2d, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x78, 0x5f, 0x63, 0x32, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x72, 0x78, 0x2d, 0x63, 0x32, 0x12, 0x3d, 0x0a, 0x05, 0x65, 0x31, 0x74, 0x31, 0x73,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f,
	0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x2e, 0x43, 0x70, 0x6f, 0x73, 0x2e, 0x45, 0x31, 0x54, 0x31, 0x53, 0x52,
	0x05, 0x65, 0x31, 0x74, 0x31, 0x73, 0x1a, 0xc6, 0x09, 0x0a, 0x05, 0x45, 0x31, 0x54, 0x31, 0x53,
	0x12, 0x40, 0x0a, 0x04, 0x65, 0x31, 0x74, 0x31, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76,
	0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x43, 0x70, 0x6f,
	0x73, 0x2e, 0x45, 0x31, 0x54, 0x31, 0x53, 0x2e, 0x45, 0x31, 0x54, 0x31, 0x52, 0x04, 0x65, 0x31,
	0x74, 0x31, 0x1a, 0xfa, 0x08, 0x0a, 0x04, 0x45, 0x31, 0x54, 0x31, 0x12, 0x17, 0x0a, 0x07, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x37, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x53, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73,
	0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x43, 0x70, 0x6f, 0x73, 0x2e, 0x45, 0x31, 0x54, 0x31, 0x53,
	0x2e, 0x45, 0x31, 0x54, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x09,
	0x77, 0x6f, 0x72, 0x6b, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x48, 0x0a, 0x05, 0x63, 0x6c, 0x6f,
	0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x43, 0x70, 0x6f, 0x73, 0x2e, 0x45, 0x31, 0x54, 0x31,
	0x53, 0x2e, 0x45, 0x31, 0x54, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x05, 0x63, 0x6c,
	0x6f, 0x63, 0x6b, 0x12, 0x34, 0x0a, 0x15, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x15, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x2d, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x2d, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x30, 0x0a, 0x13, 0x63, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x2d, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2d, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x5c, 0x0a, 0x0c, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x38, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e,
	0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e,
	0x43, 0x70, 0x6f, 0x73, 0x2e, 0x45, 0x31, 0x54, 0x31, 0x53, 0x2e, 0x45, 0x31, 0x54, 0x31, 0x2e,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0c, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x2d, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x51, 0x0a, 0x08, 0x6c, 0x6f, 0x6f,
	0x70, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x43, 0x70, 0x6f, 0x73, 0x2e, 0x45,
	0x31, 0x54, 0x31, 0x53, 0x2e, 0x45, 0x31, 0x54, 0x31, 0x2e, 0x4c, 0x6f, 0x6f, 0x70, 0x62, 0x61,
	0x63, 0x6b, 0x52, 0x08, 0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x1a, 0x0a, 0x08,
	0x6a, 0x32, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6a, 0x32, 0x2d, 0x74, 0x72, 0x61, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x35, 0x5f, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x76, 0x35, 0x2d, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x63, 0x6c, 0x72,
	0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x61,
	0x75, 0x74, 0x6f, 0x2d, 0x63, 0x6c, 0x72, 0x2d, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x72, 0x78, 0x5f, 0x6a, 0x32, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x78, 0x2d, 0x6a, 0x32, 0x2d, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x12, 0x5c, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x65, 0x74, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f,
	0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x2e, 0x43, 0x70, 0x6f, 0x73, 0x2e, 0x45, 0x31, 0x54, 0x31, 0x53, 0x2e,
	0x45, 0x31, 0x54, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x73,
	0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x1a, 0xc1,
	0x01, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x73, 0x12, 0x65,
	0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76,
	0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72,
	0x74, 0x2e, 0x43, 0x70, 0x6f, 0x73, 0x2e, 0x45, 0x31, 0x54, 0x31, 0x53, 0x2e, 0x45, 0x31, 0x54,
	0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2d, 0x73, 0x65, 0x74, 0x1a, 0x4b, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x53, 0x65, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x39, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x6c, 0x6f, 0x74, 0x2d, 0x6c, 0x69,
	0x73, 0x74, 0x22, 0x36, 0x0a, 0x08, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x13,
	0x0a, 0x0f, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x5f,
	0x55, 0x4e, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x44, 0x10, 0x01, 0x22, 0x3c, 0x0a, 0x05, 0x43, 0x6c,
	0x6f, 0x63, 0x6b, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x4d, 0x41, 0x53,
	0x54, 0x45, 0x52, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x53,
	0x4c, 0x41, 0x56, 0x45, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x10, 0x02, 0x22, 0x3d, 0x0a, 0x0b, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x4e, 0x4f, 0x58, 0x5f, 0x43, 0x52, 0x43, 0x34, 0x10,
	0x00, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x5f, 0x43, 0x52, 0x43, 0x34, 0x10, 0x01, 0x22, 0x46, 0x0a, 0x08, 0x4c, 0x6f, 0x6f, 0x70, 0x62,
	0x61, 0x63, 0x6b, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x5f,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x6f, 0x6f, 0x70, 0x62, 0x61,
	0x63, 0x6b, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x6f,
	0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x10, 0x02, 0x22,
	0x58, 0x0a, 0x0b, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x17,
	0x0a, 0x13, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x48, 0x58,
	0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x41, 0x58, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x01,
	0x12, 0x17, 0x0a, 0x13, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x5f,
	0x4c, 0x58, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x02, 0x22, 0x39, 0x0a, 0x0b, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x53, 0x44, 0x48, 0x10, 0x00, 0x12, 0x15, 0x0a,
	0x11, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x53, 0x4f, 0x4e,
	0x45, 0x54, 0x10, 0x01, 0x22, 0x35, 0x0a, 0x09, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65,
	0x78, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x78, 0x5f, 0x41,
	0x55, 0x58, 0x5f, 0x34, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x65, 0x78, 0x5f, 0x41, 0x55, 0x58, 0x5f, 0x33, 0x10, 0x01, 0x22, 0x31, 0x0a, 0x06, 0x48,
	0x6f, 0x6c, 0x64, 0x55, 0x70, 0x12, 0x13, 0x0a, 0x0f, 0x48, 0x6f, 0x6c, 0x64, 0x55, 0x70, 0x5f,
	0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x48, 0x6f,
	0x6c, 0x64, 0x55, 0x70, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x22, 0x3e,
	0x0a, 0x0d, 0x48, 0x70, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x16, 0x0a, 0x12, 0x48, 0x70, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65,
	0x5f, 0x56, 0x43, 0x31, 0x32, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x48, 0x70, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x56, 0x43, 0x34, 0x10, 0x01, 0x22, 0x32,
	0x0a, 0x07, 0x41, 0x69, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x69, 0x73,
	0x46, 0x6c, 0x61, 0x67, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x12,
	0x0a, 0x0e, 0x41, 0x69, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x01, 0x22, 0x38, 0x0a, 0x09, 0x54, 0x75, 0x61, 0x69, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x15, 0x0a, 0x11, 0x54, 0x75, 0x61, 0x69, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x5f, 0x44, 0x49, 0x53,
	0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x75, 0x61, 0x69, 0x73, 0x46,
	0x6c, 0x61, 0x67, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x22, 0x2a, 0x0a, 0x06,
	0x4a, 0x30, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x4a, 0x30, 0x4d, 0x6f, 0x64, 0x65,
	0x5f, 0x53, 0x44, 0x48, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4a, 0x30, 0x4d, 0x6f, 0x64, 0x65,
	0x5f, 0x53, 0x4f, 0x4e, 0x45, 0x54, 0x10, 0x01, 0x22, 0x75, 0x0a, 0x06, 0x4a, 0x31, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e,
	0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x4a, 0x31, 0x4d, 0x6f, 0x64, 0x65, 0x10,
	0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4a, 0x31, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x58, 0x5f, 0x31, 0x42,
	0x59, 0x54, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x4a, 0x31, 0x4d, 0x6f, 0x64, 0x65, 0x5f,
	0x58, 0x5f, 0x31, 0x36, 0x42, 0x59, 0x54, 0x45, 0x10, 0x10, 0x12, 0x23, 0x0a, 0x1f, 0x4a, 0x31,
	0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x58, 0x5f, 0x36, 0x34, 0x42, 0x59, 0x54, 0x45, 0x58, 0x5f, 0x4f,
	0x52, 0x58, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x58, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x40, 0x22,
	0x2a, 0x0a, 0x05, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x53, 0x4c, 0x41, 0x56, 0x45, 0x10, 0x01, 0x22, 0x4d, 0x0a, 0x10, 0x46,
	0x6c, 0x61, 0x67, 0x53, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x12,
	0x1c, 0x0a, 0x18, 0x46, 0x6c, 0x61, 0x67, 0x53, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x64, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x1b, 0x0a,
	0x17, 0x46, 0x6c, 0x61, 0x67, 0x53, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x64, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0xd0, 0x2b, 0x0a, 0x09, 0x50,
	0x6f, 0x72, 0x74, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x72, 0x63, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x63, 0x72, 0x63, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x2d,
	0x64, 0x6f, 0x77, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x12, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x2d,
	0x64, 0x6f, 0x77, 0x6e, 0x12, 0x3e, 0x0a, 0x1a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2d,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x68, 0x69, 0x67, 0x68, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x12, 0x3c, 0x0a, 0x19, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2d, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x2d, 0x6c, 0x6f, 0x77, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x14, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x30, 0x0a, 0x13, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x13, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x2d, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x40, 0x0a, 0x1b, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x68, 0x69, 0x67, 0x68,
	0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x3e, 0x0a, 0x1a, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x6c, 0x6f, 0x77,
	0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x12, 0x24, 0x0a, 0x0d, 0x70, 0x68, 0x79, 0x5f, 0x75, 0x70, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x65,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x70, 0x68, 0x79, 0x2d, 0x75, 0x70, 0x64,
	0x6f, 0x77, 0x6e, 0x2d, 0x65, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x63, 0x5f, 0x70, 0x65,
	0x72, 0x5f, 0x63, 0x75, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x63,
	0x2d, 0x70, 0x65, 0x72, 0x2d, 0x63, 0x75, 0x72, 0x12, 0x5b, 0x0a, 0x0e, 0x65, 0x74, 0x68, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44,
	0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x2e, 0x45, 0x74, 0x68, 0x50, 0x6f, 0x72, 0x74,
	0x41, 0x6c, 0x61, 0x72, 0x6d, 0x52, 0x0e, 0x65, 0x74, 0x68, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2d,
	0x61, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x5b, 0x0a, 0x0e, 0x73, 0x64, 0x68, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d,
	0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x41, 0x6c, 0x61, 0x72, 0x6d, 0x2e, 0x53, 0x64, 0x68, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x6c, 0x61,
	0x72, 0x6d, 0x52, 0x0e, 0x73, 0x64, 0x68, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x61, 0x6c, 0x61,
	0x72, 0x6d, 0x12, 0x5b, 0x0a, 0x0e, 0x70, 0x64, 0x68, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x61,
	0x6c, 0x61, 0x72, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x6c, 0x61,
	0x72, 0x6d, 0x2e, 0x50, 0x64, 0x68, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x52,
	0x0e, 0x70, 0x64, 0x68, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x12,
	0x58, 0x0a, 0x0d, 0x63, 0x72, 0x63, 0x5f, 0x6d, 0x66, 0x65, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f,
	0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x2e, 0x43,
	0x72, 0x63, 0x4d, 0x66, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x52, 0x0d, 0x63, 0x72, 0x63, 0x2d,
	0x6d, 0x66, 0x65, 0x2d, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x50, 0x0a, 0x0a, 0x63, 0x72, 0x63,
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d,
	0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x41, 0x6c, 0x61, 0x72, 0x6d, 0x2e, 0x43, 0x72, 0x63, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52,
	0x0a, 0x63, 0x72, 0x63, 0x2d, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x1e,
	0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x72, 0x63, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65,
	0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x2e, 0x41, 0x6c, 0x61,
	0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x72, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x48, 0x00, 0x52, 0x13, 0x63, 0x72, 0x63, 0x2d,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12,
	0x61, 0x0a, 0x13, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6c, 0x69,
	0x6e, 0x6b, 0x5f, 0x63, 0x72, 0x63, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x41,
	0x6c, 0x61, 0x72, 0x6d, 0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c,
	0x69, 0x6e, 0x6b, 0x43, 0x72, 0x63, 0x48, 0x00, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x63,
	0x72, 0x63, 0x12, 0x6f, 0x0a, 0x18, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x63, 0x72, 0x63, 0x5f, 0x6d, 0x66, 0x73, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65,
	0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x2e, 0x41, 0x6c, 0x61,
	0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x72, 0x63, 0x4d, 0x66, 0x73, 0x41, 0x6c, 0x61,
	0x72, 0x6d, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x72, 0x63, 0x2d, 0x6d, 0x66, 0x73, 0x2d, 0x61, 0x6c,
	0x61, 0x72, 0x6d, 0x1a, 0xda, 0x06, 0x0a, 0x0c, 0x45, 0x74, 0x68, 0x50, 0x6f, 0x72, 0x74, 0x41,
	0x6c, 0x61, 0x72, 0x6d, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x13, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x2d, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x40, 0x0a, 0x1b, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x68, 0x69, 0x67, 0x68, 0x2d, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x3e, 0x0a, 0x1a, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x6c, 0x6f, 0x77, 0x2d, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x2d,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x32,
	0x0a, 0x14, 0x62, 0x69, 0x70, 0x38, 0x5f, 0x73, 0x64, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x62, 0x69,
	0x70, 0x38, 0x2d, 0x73, 0x64, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x2d, 0x64, 0x6f,
	0x77, 0x6e, 0x12, 0x42, 0x0a, 0x1c, 0x62, 0x69, 0x70, 0x38, 0x5f, 0x73, 0x64, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x62, 0x69, 0x70, 0x38, 0x2d, 0x73,
	0x64, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x68, 0x69, 0x67, 0x68, 0x2d, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x62, 0x61, 0x64, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x13, 0x62, 0x61, 0x64, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x2d, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x62, 0x61, 0x64, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x62, 0x61, 0x64, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x2d,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x44, 0x0a, 0x1d, 0x74, 0x78, 0x5f, 0x70,
	0x61, 0x75, 0x73, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x1d, 0x74, 0x78, 0x2d, 0x70, 0x61, 0x75, 0x73, 0x65, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d,
	0x68, 0x69, 0x67, 0x68, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x42,
	0x0a, 0x1c, 0x74, 0x78, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x74, 0x78, 0x2d, 0x70, 0x61, 0x75, 0x73, 0x65, 0x2d, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x2d, 0x6c, 0x6f, 0x77, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x12, 0x38, 0x0a, 0x17, 0x74, 0x78, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x17, 0x74, 0x78, 0x2d, 0x70, 0x61, 0x75, 0x73, 0x65, 0x2d, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x44, 0x0a, 0x1d,
	0x72, 0x78, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x68,
	0x69, 0x67, 0x68, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x1d, 0x72, 0x78, 0x2d, 0x70, 0x61, 0x75, 0x73, 0x65, 0x2d, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x2d, 0x68, 0x69, 0x67, 0x68, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x12, 0x42, 0x0a, 0x1c, 0x72, 0x78, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x72, 0x78, 0x2d, 0x70, 0x61, 0x75,
	0x73, 0x65, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x6c, 0x6f, 0x77, 0x2d, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x38, 0x0a, 0x17, 0x72, 0x78, 0x5f, 0x70, 0x61, 0x75,
	0x73, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x72, 0x78, 0x2d, 0x70, 0x61, 0x75, 0x73,
	0x65, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x1a, 0xac, 0x03, 0x0a, 0x0c, 0x53, 0x64, 0x68, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x6c, 0x61, 0x72,
	0x6d, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x64, 0x68, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x64, 0x68,
	0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x2d, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x3a, 0x0a,
	0x18, 0x73, 0x64, 0x68, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x18, 0x73, 0x64, 0x68, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x68, 0x69, 0x67, 0x68, 0x2d,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x38, 0x0a, 0x17, 0x73, 0x64, 0x68,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x73, 0x64, 0x68, 0x2d,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x6c, 0x6f, 0x77, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x64, 0x68, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x12, 0x73, 0x64, 0x68, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x12, 0x32, 0x0a, 0x14, 0x73, 0x64, 0x68, 0x5f, 0x62, 0x31, 0x5f, 0x65, 0x72,
	0x72, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x14, 0x73, 0x64, 0x68, 0x2d, 0x62, 0x31, 0x2d, 0x65, 0x72, 0x72, 0x2d, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x73, 0x64, 0x68, 0x5f, 0x62,
	0x32, 0x5f, 0x65, 0x72, 0x72, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x73, 0x64, 0x68, 0x2d, 0x62, 0x32, 0x2d, 0x65, 0x72,
	0x72, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x73,
	0x64, 0x68, 0x5f, 0x62, 0x31, 0x5f, 0x65, 0x72, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x73, 0x64, 0x68, 0x2d, 0x62, 0x31,
	0x2d, 0x65, 0x72, 0x72, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x30, 0x0a,
	0x13, 0x73, 0x64, 0x68, 0x5f, 0x62, 0x32, 0x5f, 0x65, 0x72, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x73, 0x64, 0x68, 0x2d,
	0x62, 0x32, 0x2d, 0x65, 0x72, 0x72, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x1a,
	0x58, 0x0a, 0x0c, 0x50, 0x64, 0x68, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12,
	0x24, 0x0a, 0x0d, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2d,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x5f,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x65, 0x73,
	0x75, 0x6d, 0x65, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x1a, 0xb1, 0x02, 0x0a, 0x0b, 0x43, 0x72,
	0x63, 0x4d, 0x66, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x40, 0x0a, 0x1b, 0x63, 0x72, 0x63,
	0x5f, 0x6d, 0x66, 0x65, 0x5f, 0x61, 0x6c, 0x6d, 0x5f, 0x74, 0x68, 0x72, 0x5f, 0x63, 0x6f, 0x65,
	0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b,
	0x63, 0x72, 0x63, 0x2d, 0x6d, 0x66, 0x65, 0x2d, 0x61, 0x6c, 0x6d, 0x2d, 0x74, 0x68, 0x72, 0x2d,
	0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x63,
	0x72, 0x63, 0x5f, 0x6d, 0x66, 0x65, 0x5f, 0x61, 0x6c, 0x6d, 0x5f, 0x74, 0x68, 0x72, 0x5f, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x63, 0x72, 0x63, 0x2d,
	0x6d, 0x66, 0x65, 0x2d, 0x61, 0x6c, 0x6d, 0x2d, 0x74, 0x68, 0x72, 0x2d, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x12, 0x42, 0x0a, 0x1c, 0x63, 0x72, 0x63, 0x5f, 0x6d, 0x66, 0x65, 0x5f, 0x72, 0x73, 0x75,
	0x6d, 0x5f, 0x74, 0x68, 0x72, 0x5f, 0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x63, 0x72, 0x63, 0x2d, 0x6d, 0x66, 0x65,
	0x2d, 0x72, 0x73, 0x75, 0x6d, 0x2d, 0x74, 0x68, 0x72, 0x2d, 0x63, 0x6f, 0x65, 0x66, 0x66, 0x69,
	0x63, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x63, 0x72, 0x63, 0x5f, 0x6d, 0x66, 0x65,
	0x5f, 0x72, 0x73, 0x75, 0x6d, 0x5f, 0x74, 0x68, 0x72, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x63, 0x72, 0x63, 0x2d, 0x6d, 0x66, 0x65, 0x2d, 0x72,
	0x73, 0x75, 0x6d, 0x2d, 0x74, 0x68, 0x72, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x2e, 0x0a,
	0x12, 0x63, 0x72, 0x63, 0x5f, 0x6d, 0x66, 0x65, 0x5f, 0x61, 0x6c, 0x6d, 0x5f, 0x6c, 0x73, 0x70,
	0x5f, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x63, 0x72, 0x63, 0x2d, 0x6d,
	0x66, 0x65, 0x2d, 0x61, 0x6c, 0x6d, 0x2d, 0x6c, 0x73, 0x70, 0x2d, 0x65, 0x6e, 0x1a, 0xc3, 0x02,
	0x0a, 0x09, 0x43, 0x72, 0x63, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x63,
	0x72, 0x63, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x5f, 0x77, 0x69, 0x6e, 0x5f,
	0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x63, 0x72,
	0x63, 0x2d, 0x70, 0x65, 0x72, 0x2d, 0x73, 0x61, 0x6d, 0x70, 0x2d, 0x77, 0x69, 0x6e, 0x2d, 0x66,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x3c, 0x0a, 0x19, 0x63, 0x72, 0x63, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x77, 0x69, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6e,
	0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x63, 0x72, 0x63, 0x2d, 0x70, 0x65,
	0x72, 0x2d, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x2d, 0x77, 0x69, 0x6e, 0x2d, 0x6d, 0x61, 0x78, 0x2d,
	0x6e, 0x75, 0x6d, 0x12, 0x40, 0x0a, 0x1b, 0x63, 0x72, 0x63, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x5f, 0x77, 0x69, 0x6e, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x6e,
	0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x63, 0x72, 0x63, 0x2d, 0x70, 0x65,
	0x72, 0x2d, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x2d, 0x77, 0x69, 0x6e, 0x2d, 0x61, 0x6c, 0x61, 0x72,
	0x6d, 0x2d, 0x6e, 0x75, 0x6d, 0x12, 0x42, 0x0a, 0x1c, 0x63, 0x72, 0x63, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x77, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6d,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x63, 0x72, 0x63,
	0x2d, 0x70, 0x65, 0x72, 0x2d, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x2d, 0x77, 0x69, 0x6e, 0x2d, 0x72,
	0x65, 0x73, 0x75, 0x6d, 0x65, 0x2d, 0x6e, 0x75, 0x6d, 0x12, 0x38, 0x0a, 0x17, 0x63, 0x72, 0x63,
	0x5f, 0x61, 0x6c, 0x67, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x63, 0x72, 0x63, 0x2d,
	0x61, 0x6c, 0x67, 0x2d, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2d, 0x66, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x1a, 0xc2, 0x03, 0x0a, 0x1b, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x43, 0x72, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x12, 0x87, 0x01, 0x0a, 0x13, 0x63, 0x72, 0x63, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x55, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e,
	0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x43, 0x72, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2e, 0x43, 0x72, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x36, 0x52, 0x13, 0x63, 0x72, 0x63, 0x2d, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x1a, 0x98, 0x02,
	0x0a, 0x12, 0x43, 0x72, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x36, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x72, 0x63, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x72,
	0x63, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x68, 0x69, 0x67, 0x68, 0x12, 0x24, 0x0a, 0x0d,
	0x63, 0x72, 0x63, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6c, 0x6f, 0x77, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x72, 0x63, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x6c,
	0x6f, 0x77, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x63, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x72, 0x63, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x2e, 0x0a, 0x12, 0x63, 0x72, 0x63, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x63, 0x72,
	0x63, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x12, 0x28, 0x0a, 0x0f, 0x63, 0x72, 0x63, 0x5f, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e,
	0x5f, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x72, 0x63, 0x2d, 0x73,
	0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x2d, 0x65, 0x6e, 0x12, 0x3c, 0x0a, 0x19, 0x63, 0x72,
	0x63, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x5f,
	0x61, 0x6c, 0x6d, 0x5f, 0x74, 0x68, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x63,
	0x72, 0x63, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x2d, 0x61, 0x6c, 0x6d, 0x2d, 0x74, 0x68, 0x72, 0x1a, 0xf5, 0x09, 0x0a, 0x11, 0x41, 0x6c, 0x61,
	0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x72, 0x63, 0x12, 0x68,
	0x0a, 0x0c, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65,
	0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x2e, 0x41, 0x6c, 0x61,
	0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x72, 0x63, 0x2e, 0x4c,
	0x69, 0x6e, 0x6b, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x6c, 0x69, 0x6e, 0x6b,
	0x2d, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x6a, 0x0a, 0x0d, 0x63, 0x72, 0x63, 0x5f,
	0x70, 0x65, 0x72, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x44, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65,
	0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x72, 0x63, 0x2e, 0x43, 0x72, 0x63, 0x50, 0x65, 0x72,
	0x41, 0x6c, 0x61, 0x72, 0x6d, 0x52, 0x0d, 0x63, 0x72, 0x63, 0x2d, 0x70, 0x65, 0x72, 0x2d, 0x61,
	0x6c, 0x61, 0x72, 0x6d, 0x12, 0x67, 0x0a, 0x0c, 0x63, 0x72, 0x63, 0x5f, 0x70, 0x65, 0x72, 0x5f,
	0x77, 0x61, 0x72, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x6c, 0x61,
	0x72, 0x6d, 0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x69, 0x6e,
	0x6b, 0x43, 0x72, 0x63, 0x2e, 0x43, 0x72, 0x63, 0x50, 0x65, 0x72, 0x57, 0x61, 0x72, 0x6e, 0x52,
	0x0c, 0x63, 0x72, 0x63, 0x2d, 0x70, 0x65, 0x72, 0x2d, 0x77, 0x61, 0x72, 0x6e, 0x1a, 0xa9, 0x02,
	0x0a, 0x0b, 0x4c, 0x69, 0x6e, 0x6b, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x4a, 0x0a,
	0x20, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x6c,
	0x6d, 0x5f, 0x74, 0x68, 0x72, 0x5f, 0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x20, 0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x2d, 0x61, 0x6c, 0x6d, 0x2d, 0x74, 0x68, 0x72, 0x2d, 0x63, 0x6f,
	0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x1a, 0x6c, 0x69, 0x6e,
	0x6b, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x6c, 0x6d, 0x5f, 0x74, 0x68,
	0x72, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x6c,
	0x69, 0x6e, 0x6b, 0x2d, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x2d, 0x61, 0x6c, 0x6d, 0x2d,
	0x74, 0x68, 0x72, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x21, 0x6c, 0x69, 0x6e,
	0x6b, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x73, 0x75, 0x6d, 0x5f, 0x74,
	0x68, 0x72, 0x5f, 0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x21, 0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x2d, 0x72, 0x73, 0x75, 0x6d, 0x2d, 0x74, 0x68, 0x72, 0x2d, 0x63, 0x6f, 0x65, 0x66,
	0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x1b, 0x6c, 0x69, 0x6e, 0x6b, 0x5f,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x73, 0x75, 0x6d, 0x5f, 0x74, 0x68, 0x72,
	0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x6c, 0x69,
	0x6e, 0x6b, 0x2d, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x2d, 0x72, 0x73, 0x75, 0x6d, 0x2d,
	0x74, 0x68, 0x72, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x1a, 0xe1, 0x02, 0x0a, 0x0b, 0x43, 0x72,
	0x63, 0x50, 0x65, 0x72, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x40, 0x0a, 0x1b, 0x63, 0x72, 0x63,
	0x5f, 0x70, 0x65, 0x72, 0x5f, 0x61, 0x6c, 0x6d, 0x5f, 0x74, 0x68, 0x72, 0x5f, 0x63, 0x6f, 0x65,
	0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b,
	0x63, 0x72, 0x63, 0x2d, 0x70, 0x65, 0x72, 0x2d, 0x61, 0x6c, 0x6d, 0x2d, 0x74, 0x68, 0x72, 0x2d,
	0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x63,
	0x72, 0x63, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x61, 0x6c, 0x6d, 0x5f, 0x74, 0x68, 0x72, 0x5f, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x63, 0x72, 0x63, 0x2d,
	0x70, 0x65, 0x72, 0x2d, 0x61, 0x6c, 0x6d, 0x2d, 0x74, 0x68, 0x72, 0x2d, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x12, 0x42, 0x0a, 0x1c, 0x63, 0x72, 0x63, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x72, 0x73, 0x75,
	0x6d, 0x5f, 0x74, 0x68, 0x72, 0x5f, 0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x63, 0x72, 0x63, 0x2d, 0x70, 0x65, 0x72,
	0x2d, 0x72, 0x73, 0x75, 0x6d, 0x2d, 0x74, 0x68, 0x72, 0x2d, 0x63, 0x6f, 0x65, 0x66, 0x66, 0x69,
	0x63, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x63, 0x72, 0x63, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x72, 0x73, 0x75, 0x6d, 0x5f, 0x74, 0x68, 0x72, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x63, 0x72, 0x63, 0x2d, 0x70, 0x65, 0x72, 0x2d, 0x72,
	0x73, 0x75, 0x6d, 0x2d, 0x74, 0x68, 0x72, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x2e, 0x0a,
	0x12, 0x63, 0x72, 0x63, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x61, 0x6c, 0x6d, 0x5f, 0x6c, 0x73, 0x70,
	0x5f, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x63, 0x72, 0x63, 0x2d, 0x70,
	0x65, 0x72, 0x2d, 0x61, 0x6c, 0x6d, 0x2d, 0x6c, 0x73, 0x70, 0x2d, 0x65, 0x6e, 0x12, 0x2e, 0x0a,
	0x12, 0x63, 0x72, 0x63, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x61, 0x6c, 0x6d, 0x5f, 0x73, 0x65, 0x63,
	0x5f, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x63, 0x72, 0x63, 0x2d, 0x70,
	0x65, 0x72, 0x2d, 0x61, 0x6c, 0x6d, 0x2d, 0x73, 0x65, 0x63, 0x2d, 0x65, 0x6e, 0x1a, 0x90, 0x02,
	0x0a, 0x0a, 0x43, 0x72, 0x63, 0x50, 0x65, 0x72, 0x57, 0x61, 0x72, 0x6e, 0x12, 0x40, 0x0a, 0x1b,
	0x63, 0x72, 0x63, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x77, 0x61, 0x72, 0x5f, 0x74, 0x68, 0x72, 0x5f,
	0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x1b, 0x63, 0x72, 0x63, 0x2d, 0x70, 0x65, 0x72, 0x2d, 0x77, 0x61, 0x72, 0x2d, 0x74,
	0x68, 0x72, 0x2d, 0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x34,
	0x0a, 0x15, 0x63, 0x72, 0x63, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x77, 0x61, 0x72, 0x5f, 0x74, 0x68,
	0x72, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x63,
	0x72, 0x63, 0x2d, 0x70, 0x65, 0x72, 0x2d, 0x77, 0x61, 0x72, 0x2d, 0x74, 0x68, 0x72, 0x2d, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x20, 0x63, 0x72, 0x63, 0x5f, 0x70, 0x65, 0x72, 0x5f,
	0x77, 0x61, 0x72, 0x5f, 0x72, 0x73, 0x75, 0x6d, 0x5f, 0x74, 0x68, 0x72, 0x5f, 0x63, 0x6f, 0x65,
	0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x20,
	0x63, 0x72, 0x63, 0x2d, 0x70, 0x65, 0x72, 0x2d, 0x77, 0x61, 0x72, 0x2d, 0x72, 0x73, 0x75, 0x6d,
	0x2d, 0x74, 0x68, 0x72, 0x2d, 0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74,
	0x12, 0x3e, 0x0a, 0x1a, 0x63, 0x72, 0x63, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x77, 0x61, 0x72, 0x5f,
	0x72, 0x73, 0x75, 0x6d, 0x5f, 0x74, 0x68, 0x72, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x63, 0x72, 0x63, 0x2d, 0x70, 0x65, 0x72, 0x2d, 0x77, 0x61,
	0x72, 0x2d, 0x72, 0x73, 0x75, 0x6d, 0x2d, 0x74, 0x68, 0x72, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x1a, 0xbd, 0x03, 0x0a, 0x15, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43,
	0x72, 0x63, 0x4d, 0x66, 0x73, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x6f, 0x0a, 0x0d, 0x63, 0x72,
	0x63, 0x5f, 0x6d, 0x66, 0x73, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x49, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e,
	0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x43, 0x72, 0x63, 0x4d, 0x66, 0x73, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x2e,
	0x43, 0x72, 0x63, 0x4d, 0x66, 0x73, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x36, 0x52, 0x0d, 0x63, 0x72,
	0x63, 0x2d, 0x6d, 0x66, 0x73, 0x2d, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x1a, 0xb2, 0x02, 0x0a, 0x0c,
	0x43, 0x72, 0x63, 0x4d, 0x66, 0x73, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x36, 0x12, 0x40, 0x0a, 0x1b,
	0x63, 0x72, 0x63, 0x5f, 0x6d, 0x66, 0x73, 0x5f, 0x61, 0x6c, 0x6d, 0x5f, 0x74, 0x68, 0x72, 0x5f,
	0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x1b, 0x63, 0x72, 0x63, 0x2d, 0x6d, 0x66, 0x73, 0x2d, 0x61, 0x6c, 0x6d, 0x2d, 0x74,
	0x68, 0x72, 0x2d, 0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x34,
	0x0a, 0x15, 0x63, 0x72, 0x63, 0x5f, 0x6d, 0x66, 0x73, 0x5f, 0x61, 0x6c, 0x6d, 0x5f, 0x74, 0x68,
	0x72, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x63,
	0x72, 0x63, 0x2d, 0x6d, 0x66, 0x73, 0x2d, 0x61, 0x6c, 0x6d, 0x2d, 0x74, 0x68, 0x72, 0x2d, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x1c, 0x63, 0x72, 0x63, 0x5f, 0x6d, 0x66, 0x73, 0x5f,
	0x72, 0x73, 0x75, 0x6d, 0x5f, 0x74, 0x68, 0x72, 0x5f, 0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63,
	0x69, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x63, 0x72, 0x63, 0x2d,
	0x6d, 0x66, 0x73, 0x2d, 0x72, 0x73, 0x75, 0x6d, 0x2d, 0x74, 0x68, 0x72, 0x2d, 0x63, 0x6f, 0x65,
	0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x63, 0x72, 0x63, 0x5f,
	0x6d, 0x66, 0x73, 0x5f, 0x72, 0x73, 0x75, 0x6d, 0x5f, 0x74, 0x68, 0x72, 0x5f, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x63, 0x72, 0x63, 0x2d, 0x6d, 0x66,
	0x73, 0x2d, 0x72, 0x73, 0x75, 0x6d, 0x2d, 0x74, 0x68, 0x72, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x12, 0x2e, 0x0a, 0x12, 0x63, 0x72, 0x63, 0x5f, 0x6d, 0x66, 0x73, 0x5f, 0x61, 0x6c, 0x6d, 0x5f,
	0x6c, 0x73, 0x70, 0x5f, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x63, 0x72,
	0x63, 0x2d, 0x6d, 0x66, 0x73, 0x2d, 0x61, 0x6c, 0x6d, 0x2d, 0x6c, 0x73, 0x70, 0x2d, 0x65, 0x6e,
	0x42, 0x0b, 0x0a, 0x09, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x1a, 0xb5, 0x03,
	0x0a, 0x07, 0x41, 0x64, 0x6d, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x78, 0x5f,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x78, 0x2d,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x78, 0x5f, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x78, 0x2d, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x74, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x74, 0x6f, 0x6e, 0x12,
	0x1e, 0x0a, 0x0a, 0x77, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12,
	0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x65, 0x63, 0x74,
	0x2d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x61, 0x76, 0x65, 0x5f,
	0x62, 0x61, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x61, 0x76, 0x65,
	0x2d, 0x62, 0x61, 0x6e, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x77, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x77,
	0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x2d, 0x6e, 0x75, 0x6d, 0x12, 0x24, 0x0a,
	0x0d, 0x74, 0x78, 0x5f, 0x77, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x78, 0x2d, 0x77, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x78, 0x5f, 0x77, 0x61, 0x76, 0x65, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x78, 0x2d, 0x77,
	0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x2c, 0x0a, 0x11, 0x74, 0x78, 0x5f,
	0x77, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x78, 0x2d, 0x77, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x2d, 0x6e, 0x75, 0x6d, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x78, 0x5f, 0x77, 0x61,
	0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x72, 0x78, 0x2d, 0x77, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x2d, 0x6e, 0x75, 0x6d, 0x1a, 0xf2, 0x1e, 0x0a, 0x09, 0x50, 0x68, 0x79, 0x53, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x12, 0x4b, 0x0a, 0x08, 0x62, 0x61, 0x75, 0x64, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64,
	0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x2e, 0x50, 0x68, 0x79, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x2e, 0x42, 0x61,
	0x75, 0x64, 0x72, 0x61, 0x74, 0x65, 0x52, 0x08, 0x62, 0x61, 0x75, 0x64, 0x72, 0x61, 0x74, 0x65,
	0x12, 0x64, 0x0a, 0x11, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x50, 0x68, 0x79, 0x53, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x52, 0x11, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x2d, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x62,
	0x69, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x2d,
	0x62, 0x69, 0x74, 0x73, 0x12, 0x56, 0x0a, 0x0c, 0x6d, 0x75, 0x78, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x50, 0x68, 0x79, 0x53, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x2e, 0x4d, 0x75, 0x78, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x0c,
	0x6d, 0x75, 0x78, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x45, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x50, 0x68, 0x79, 0x53, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x2e, 0x50, 0x61, 0x72, 0x69, 0x74, 0x79, 0x52, 0x06, 0x70, 0x61, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x61, 0x0a, 0x10, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d,
	0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x50, 0x68, 0x79, 0x53,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6c, 0x6f, 0x63, 0x6b,
	0x53, 0x65, 0x6e, 0x64, 0x52, 0x10, 0x70, 0x68, 0x61, 0x73, 0x65, 0x2d, 0x63, 0x6c, 0x6f, 0x63,
	0x6b, 0x2d, 0x73, 0x65, 0x6e, 0x64, 0x12, 0x5e, 0x0a, 0x0f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f,
	0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x34, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65,
	0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x50, 0x68,
	0x79, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6c, 0x6f,
	0x63, 0x6b, 0x52, 0x65, 0x63, 0x52, 0x0f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x2d, 0x63, 0x6c, 0x6f,
	0x63, 0x6b, 0x2d, 0x72, 0x65, 0x63, 0x12, 0x59, 0x0a, 0x0d, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63,
	0x61, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d,
	0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x50, 0x68, 0x79, 0x53,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x2e, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x4d, 0x6f,
	0x64, 0x65, 0x52, 0x0d, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x6d, 0x6f, 0x64,
	0x65, 0x12, 0x4d, 0x0a, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65,
	0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x2e, 0x50, 0x68, 0x79, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x2e, 0x50, 0x6f, 0x72,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x6d, 0x6f, 0x64, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x62, 0x69, 0x74, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x2d, 0x62, 0x69, 0x74, 0x73, 0x12, 0x4d,
	0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e,
	0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e,
	0x50, 0x68, 0x79, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f,
	0x64, 0x65, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x50, 0x0a,
	0x0a, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x30, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e,
	0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e,
	0x50, 0x68, 0x79, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x52, 0x0a, 0x70, 0x68, 0x61, 0x73, 0x65, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x12,
	0x64, 0x0a, 0x11, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x64, 0x73, 0x72, 0x5f, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x50, 0x68, 0x79, 0x53, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x44, 0x73, 0x72, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x52, 0x11, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x2d, 0x64, 0x73, 0x72, 0x2d, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x64, 0x0a, 0x11, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x5f,
	0x64, 0x74, 0x72, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x36, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44,
	0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x50,
	0x68, 0x79, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x44,
	0x74, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52, 0x11, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x2d, 0x64, 0x74, 0x72, 0x2d, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x64, 0x0a, 0x11, 0x64,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x64, 0x63, 0x64, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f,
	0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x2e, 0x50, 0x68, 0x79, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x2e, 0x44,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x44, 0x63, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52, 0x11,
	0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x2d, 0x64, 0x63, 0x64, 0x2d, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x12, 0x64, 0x0a, 0x11, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x74, 0x73, 0x5f,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x50, 0x68, 0x79, 0x53, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x43, 0x74, 0x73, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x52, 0x11, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x2d, 0x63, 0x74, 0x73,
	0x2d, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x64, 0x0a, 0x11, 0x64, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x5f, 0x72, 0x74, 0x73, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x36, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d,
	0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x2e, 0x50, 0x68, 0x79, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x52, 0x74, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52, 0x11, 0x64, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x2d, 0x72, 0x74, 0x73, 0x2d, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x4d, 0x0a,
	0x09, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44,
	0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x50,
	0x68, 0x79, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72,
	0x73, 0x52, 0x09, 0x73, 0x65, 0x72, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x73, 0x1a, 0xf0, 0x01, 0x0a,
	0x08, 0x53, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x73, 0x12, 0x53, 0x0a, 0x08, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x74, 0x74, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x50, 0x68, 0x79, 0x53, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x73, 0x2e, 0x53, 0x65, 0x72,
	0x41, 0x74, 0x74, 0x72, 0x52, 0x08, 0x73, 0x65, 0x72, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x1a, 0x8e,
	0x01, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x37, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x61, 0x75, 0x64, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x61, 0x75, 0x64, 0x72, 0x61, 0x74, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x69, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x69, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x62, 0x69, 0x74, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x62, 0x69, 0x74, 0x73, 0x22,
	0xc3, 0x07, 0x0a, 0x08, 0x42, 0x61, 0x75, 0x64, 0x72, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11,
	0x42, 0x61, 0x75, 0x64, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x58, 0x5f, 0x36, 0x30, 0x30, 0x42, 0x49,
	0x54, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x61, 0x75, 0x64, 0x72, 0x61, 0x74, 0x65, 0x5f,
	0x58, 0x5f, 0x31, 0x32, 0x30, 0x30, 0x42, 0x49, 0x54, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x42,
	0x61, 0x75, 0x64, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x58, 0x5f, 0x32, 0x34, 0x30, 0x30, 0x42, 0x49,
	0x54, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x61, 0x75, 0x64, 0x72, 0x61, 0x74, 0x65, 0x5f,
	0x58, 0x5f, 0x34, 0x38, 0x30, 0x30, 0x42, 0x49, 0x54, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x42,
	0x61, 0x75, 0x64, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x58, 0x5f, 0x39, 0x36, 0x30, 0x30, 0x42, 0x49,
	0x54, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x61, 0x75, 0x64, 0x72, 0x61, 0x74, 0x65, 0x5f,
	0x58, 0x5f, 0x31, 0x39, 0x32, 0x30, 0x30, 0x42, 0x49, 0x54, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13,
	0x42, 0x61, 0x75, 0x64, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x58, 0x5f, 0x33, 0x38, 0x34, 0x30, 0x30,
	0x42, 0x49, 0x54, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x61, 0x75, 0x64, 0x72, 0x61, 0x74,
	0x65, 0x5f, 0x58, 0x5f, 0x34, 0x38, 0x30, 0x30, 0x30, 0x42, 0x49, 0x54, 0x10, 0x07, 0x12, 0x15,
	0x0a, 0x11, 0x42, 0x61, 0x75, 0x64, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x58, 0x5f, 0x36, 0x34, 0x4b,
	0x42, 0x49, 0x54, 0x10, 0x08, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x61, 0x75, 0x64, 0x72, 0x61, 0x74,
	0x65, 0x5f, 0x58, 0x5f, 0x31, 0x32, 0x38, 0x4b, 0x42, 0x49, 0x54, 0x10, 0x09, 0x12, 0x16, 0x0a,
	0x12, 0x42, 0x61, 0x75, 0x64, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x32, 0x4b,
	0x42, 0x49, 0x54, 0x10, 0x0a, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x61, 0x75, 0x64, 0x72, 0x61, 0x74,
	0x65, 0x5f, 0x58, 0x5f, 0x32, 0x35, 0x36, 0x4b, 0x42, 0x49, 0x54, 0x10, 0x0b, 0x12, 0x16, 0x0a,
	0x12, 0x42, 0x61, 0x75, 0x64, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x58, 0x5f, 0x33, 0x32, 0x30, 0x4b,
	0x42, 0x49, 0x54, 0x10, 0x0c, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x61, 0x75, 0x64, 0x72, 0x61, 0x74,
	0x65, 0x5f, 0x58, 0x5f, 0x33, 0x38, 0x34, 0x4b, 0x42, 0x49, 0x54, 0x10, 0x0d, 0x12, 0x16, 0x0a,
	0x12, 0x42, 0x61, 0x75, 0x64, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x58, 0x5f, 0x34, 0x34, 0x38, 0x4b,
	0x42, 0x49, 0x54, 0x10, 0x0e, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x61, 0x75, 0x64, 0x72, 0x61, 0x74,
	0x65, 0x5f, 0x58, 0x5f, 0x35, 0x31, 0x32, 0x4b, 0x42, 0x49, 0x54, 0x10, 0x0f, 0x12, 0x16, 0x0a,
	0x12, 0x42, 0x61, 0x75, 0x64, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x58, 0x5f, 0x35, 0x37, 0x36, 0x4b,
	0x42, 0x49, 0x54, 0x10, 0x10, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x61, 0x75, 0x64, 0x72, 0x61, 0x74,
	0x65, 0x5f, 0x58, 0x5f, 0x36, 0x34, 0x30, 0x4b, 0x42, 0x49, 0x54, 0x10, 0x11, 0x12, 0x16, 0x0a,
	0x12, 0x42, 0x61, 0x75, 0x64, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x58, 0x5f, 0x37, 0x30, 0x34, 0x4b,
	0x42, 0x49, 0x54, 0x10, 0x12, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x61, 0x75, 0x64, 0x72, 0x61, 0x74,
	0x65, 0x5f, 0x58, 0x5f, 0x37, 0x36, 0x38, 0x4b, 0x42, 0x49, 0x54, 0x10, 0x13, 0x12, 0x16, 0x0a,
	0x12, 0x42, 0x61, 0x75, 0x64, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x58, 0x5f, 0x38, 0x33, 0x32, 0x4b,
	0x42, 0x49, 0x54, 0x10, 0x14, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x61, 0x75, 0x64, 0x72, 0x61, 0x74,
	0x65, 0x5f, 0x58, 0x5f, 0x38, 0x39, 0x36, 0x4b, 0x42, 0x49, 0x54, 0x10, 0x15, 0x12, 0x16, 0x0a,
	0x12, 0x42, 0x61, 0x75, 0x64, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x58, 0x5f, 0x39, 0x36, 0x30, 0x4b,
	0x42, 0x49, 0x54, 0x10, 0x16, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x61, 0x75, 0x64, 0x72, 0x61, 0x74,
	0x65, 0x5f, 0x58, 0x5f, 0x31, 0x30, 0x32, 0x34, 0x4b, 0x42, 0x49, 0x54, 0x10, 0x17, 0x12, 0x17,
	0x0a, 0x13, 0x42, 0x61, 0x75, 0x64, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x58, 0x5f, 0x31, 0x30, 0x38,
	0x38, 0x4b, 0x42, 0x49, 0x54, 0x10, 0x18, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x61, 0x75, 0x64, 0x72,
	0x61, 0x74, 0x65, 0x5f, 0x58, 0x5f, 0x31, 0x31, 0x35, 0x32, 0x4b, 0x42, 0x49, 0x54, 0x10, 0x19,
	0x12, 0x17, 0x0a, 0x13, 0x42, 0x61, 0x75, 0x64, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x58, 0x5f, 0x31,
	0x32, 0x31, 0x36, 0x4b, 0x42, 0x49, 0x54, 0x10, 0x1a, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x61, 0x75,
	0x64, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x58, 0x5f, 0x31, 0x32, 0x38, 0x30, 0x4b, 0x42, 0x49, 0x54,
	0x10, 0x1b, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x61, 0x75, 0x64, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x58,
	0x5f, 0x31, 0x33, 0x34, 0x34, 0x4b, 0x42, 0x49, 0x54, 0x10, 0x1c, 0x12, 0x17, 0x0a, 0x13, 0x42,
	0x61, 0x75, 0x64, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x58, 0x5f, 0x31, 0x34, 0x30, 0x38, 0x4b, 0x42,
	0x49, 0x54, 0x10, 0x1d, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x61, 0x75, 0x64, 0x72, 0x61, 0x74, 0x65,
	0x5f, 0x58, 0x5f, 0x31, 0x34, 0x37, 0x32, 0x4b, 0x42, 0x49, 0x54, 0x10, 0x1e, 0x12, 0x17, 0x0a,
	0x13, 0x42, 0x61, 0x75, 0x64, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x58, 0x5f, 0x31, 0x35, 0x33, 0x36,
	0x4b, 0x42, 0x49, 0x54, 0x10, 0x1f, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x61, 0x75, 0x64, 0x72, 0x61,
	0x74, 0x65, 0x5f, 0x58, 0x5f, 0x31, 0x36, 0x30, 0x30, 0x4b, 0x42, 0x49, 0x54, 0x10, 0x20, 0x12,
	0x17, 0x0a, 0x13, 0x42, 0x61, 0x75, 0x64, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x58, 0x5f, 0x31, 0x36,
	0x36, 0x34, 0x4b, 0x42, 0x49, 0x54, 0x10, 0x21, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x61, 0x75, 0x64,
	0x72, 0x61, 0x74, 0x65, 0x5f, 0x58, 0x5f, 0x31, 0x37, 0x32, 0x38, 0x4b, 0x42, 0x49, 0x54, 0x10,
	0x22, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x61, 0x75, 0x64, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x58, 0x5f,
	0x31, 0x37, 0x39, 0x32, 0x4b, 0x42, 0x49, 0x54, 0x10, 0x23, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x61,
	0x75, 0x64, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x58, 0x5f, 0x31, 0x38, 0x35, 0x36, 0x4b, 0x42, 0x49,
	0x54, 0x10, 0x24, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x61, 0x75, 0x64, 0x72, 0x61, 0x74, 0x65, 0x5f,
	0x58, 0x5f, 0x31, 0x39, 0x32, 0x30, 0x4b, 0x42, 0x49, 0x54, 0x10, 0x25, 0x12, 0x17, 0x0a, 0x13,
	0x42, 0x61, 0x75, 0x64, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x38, 0x34, 0x4b,
	0x42, 0x49, 0x54, 0x10, 0x26, 0x22, 0x68, 0x0a, 0x0f, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x6c, 0x6f, 0x63,
	0x6b, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x4e, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e,
	0x41, 0x4c, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x53, 0x4c, 0x41, 0x56, 0x45, 0x10, 0x02, 0x22,
	0x65, 0x0a, 0x0b, 0x4d, 0x75, 0x78, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x20,
	0x0a, 0x1c, 0x4d, 0x75, 0x78, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x53, 0x58,
	0x5f, 0x42, 0x49, 0x54, 0x58, 0x5f, 0x4c, 0x4f, 0x4f, 0x50, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x00,
	0x12, 0x19, 0x0a, 0x15, 0x4d, 0x75, 0x78, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f,
	0x53, 0x58, 0x5f, 0x42, 0x49, 0x54, 0x58, 0x5f, 0x30, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x4d,
	0x75, 0x78, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x53, 0x58, 0x5f, 0x42, 0x49,
	0x54, 0x58, 0x5f, 0x31, 0x10, 0x02, 0x22, 0x3a, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x61, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x4f, 0x44, 0x44,
	0x10, 0x02, 0x22, 0x51, 0x0a, 0x0e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6c, 0x6f, 0x63, 0x6b,
	0x53, 0x65, 0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6c, 0x6f,
	0x63, 0x6b, 0x53, 0x65, 0x6e, 0x64, 0x5f, 0x49, 0x4e, 0x58, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45,
	0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x50, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6c, 0x6f, 0x63, 0x6b,
	0x53, 0x65, 0x6e, 0x64, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x45, 0x58, 0x5f, 0x50, 0x48,
	0x41, 0x53, 0x45, 0x10, 0x01, 0x22, 0x4e, 0x0a, 0x0d, 0x50, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x63, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x68, 0x61, 0x73, 0x65, 0x43,
	0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x63, 0x5f, 0x49, 0x4e, 0x58, 0x5f, 0x50, 0x48, 0x41, 0x53,
	0x45, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6c, 0x6f, 0x63,
	0x6b, 0x52, 0x65, 0x63, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x45, 0x58, 0x5f, 0x50, 0x48,
	0x41, 0x53, 0x45, 0x10, 0x01, 0x22, 0x3d, 0x0a, 0x0c, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61,
	0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61,
	0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x41, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x00, 0x12, 0x15, 0x0a,
	0x11, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x53, 0x59,
	0x4e, 0x43, 0x10, 0x01, 0x22, 0xe5, 0x01, 0x0a, 0x08, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x52, 0x53,
	0x58, 0x5f, 0x32, 0x33, 0x32, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x6f, 0x72, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x5f, 0x52, 0x53, 0x58, 0x5f, 0x34, 0x38, 0x35, 0x10, 0x01, 0x12, 0x14, 0x0a,
	0x10, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x52, 0x53, 0x58, 0x5f, 0x34, 0x32,
	0x32, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x5f,
	0x56, 0x58, 0x5f, 0x32, 0x34, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x6f, 0x72, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x5f, 0x58, 0x58, 0x5f, 0x32, 0x31, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x50,
	0x6f, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x56, 0x58, 0x5f, 0x33, 0x35, 0x10, 0x05, 0x12,
	0x0f, 0x0a, 0x0b, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x45, 0x4d, 0x10, 0x06,
	0x12, 0x10, 0x0a, 0x0c, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x46, 0x58, 0x53,
	0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x46,
	0x58, 0x4f, 0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65,
	0x5f, 0x43, 0x33, 0x37, 0x39, 0x34, 0x10, 0x0a, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x6f, 0x72, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x4f, 0x44, 0x49, 0x52, 0x10, 0x0b, 0x22, 0x2e, 0x0a, 0x08,
	0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x57, 0x6f, 0x72, 0x6b,
	0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x44, 0x43, 0x45, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x57, 0x6f,
	0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x44, 0x54, 0x45, 0x10, 0x01, 0x22, 0x3b, 0x0a, 0x09,
	0x50, 0x68, 0x61, 0x73, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x68, 0x61,
	0x73, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x53, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x45, 0x10,
	0x00, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x68, 0x61, 0x73, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x10, 0x01, 0x22, 0x4b, 0x0a, 0x0f, 0x44, 0x65, 0x74,
	0x65, 0x63, 0x74, 0x44, 0x73, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x16,
	0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x44, 0x73, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f,
	0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x44, 0x73, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x4e, 0x4f, 0x44, 0x45,
	0x54, 0x45, 0x43, 0x54, 0x10, 0x01, 0x22, 0x4b, 0x0a, 0x0f, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x44, 0x74, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x65, 0x74,
	0x65, 0x63, 0x74, 0x44, 0x74, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x44, 0x45, 0x54,
	0x45, 0x43, 0x54, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x44,
	0x74, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x54, 0x45, 0x43,
	0x54, 0x10, 0x01, 0x22, 0x4b, 0x0a, 0x0f, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x44, 0x63, 0x64,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x44, 0x63, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54,
	0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x44, 0x63, 0x64, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x10, 0x01,
	0x22, 0x4b, 0x0a, 0x0f, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x43, 0x74, 0x73, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x43, 0x74, 0x73,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x10, 0x00, 0x12,
	0x1c, 0x0a, 0x18, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x43, 0x74, 0x73, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x10, 0x01, 0x22, 0x4b, 0x0a,
	0x0f, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x52, 0x74, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x12, 0x1a, 0x0a, 0x16, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x52, 0x74, 0x73, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18,
	0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x52, 0x74, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f,
	0x4e, 0x4f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x10, 0x01, 0x1a, 0xf5, 0x1e, 0x0a, 0x08, 0x50,
	0x68, 0x79, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x0d, 0x70, 0x63, 0x6d, 0x5f, 0x6c,
	0x61, 0x77, 0x5f, 0x76, 0x61, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76,
	0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x50, 0x68, 0x79,
	0x56, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x63, 0x6d, 0x4c, 0x61, 0x77, 0x56, 0x61, 0x75, 0x6c,
	0x65, 0x52, 0x0d, 0x70, 0x63, 0x6d, 0x2d, 0x6c, 0x61, 0x77, 0x2d, 0x76, 0x61, 0x75, 0x6c, 0x65,
	0x12, 0x3b, 0x0a, 0x03, 0x66, 0x78, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d,
	0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x50, 0x68, 0x79, 0x56,
	0x6f, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x78, 0x6f, 0x52, 0x03, 0x66, 0x78, 0x6f, 0x12, 0x3b, 0x0a,
	0x03, 0x66, 0x78, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x50, 0x68, 0x79, 0x56, 0x6f, 0x69, 0x63,
	0x65, 0x2e, 0x46, 0x78, 0x73, 0x52, 0x03, 0x66, 0x78, 0x73, 0x12, 0x38, 0x0a, 0x02, 0x65, 0x6d,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f,
	0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x2e, 0x50, 0x68, 0x79, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6d,
	0x52, 0x02, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x6e, 0x5f, 0x68, 0x6f, 0x6f, 0x6b, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x6e, 0x2d, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x1a,
	0x0a, 0x08, 0x6f, 0x66, 0x66, 0x5f, 0x68, 0x6f, 0x6f, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x6f, 0x66, 0x66, 0x2d, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x9b, 0x01, 0x0a, 0x24, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x47, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72,
	0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x50, 0x68, 0x79, 0x56, 0x6f, 0x69, 0x63, 0x65,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74,
	0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x24, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x61, 0x73, 0x73, 0x6f,
	0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x2d, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0xe8, 0x0e, 0x0a, 0x03, 0x46, 0x78, 0x6f,
	0x12, 0x1c, 0x0a, 0x09, 0x67, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x61, 0x69, 0x6e, 0x2d, 0x73, 0x65, 0x6e, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x67, 0x61, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x67, 0x61, 0x69, 0x6e, 0x2d, 0x72, 0x65, 0x63, 0x12, 0x4d, 0x0a, 0x08, 0x64, 0x63,
	0x5f, 0x69, 0x6d, 0x70, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x50, 0x68, 0x79, 0x56, 0x6f,
	0x69, 0x63, 0x65, 0x2e, 0x46, 0x78, 0x6f, 0x2e, 0x44, 0x63, 0x49, 0x6d, 0x70, 0x65, 0x64, 0x52,
	0x08, 0x64, 0x63, 0x2d, 0x69, 0x6d, 0x70, 0x65, 0x64, 0x12, 0x4d, 0x0a, 0x08, 0x61, 0x63, 0x5f,
	0x69, 0x6d, 0x70, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x50, 0x68, 0x79, 0x56, 0x6f, 0x69,
	0x63, 0x65, 0x2e, 0x46, 0x78, 0x6f, 0x2e, 0x41, 0x63, 0x49, 0x6d, 0x70, 0x65, 0x64, 0x52, 0x08,
	0x61, 0x63, 0x2d, 0x69, 0x6d, 0x70, 0x65, 0x64, 0x12, 0x58, 0x0a, 0x0c, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76,
	0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x50, 0x68, 0x79,
	0x56, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x78, 0x6f, 0x2e, 0x52, 0x69, 0x6e, 0x67, 0x4d, 0x69,
	0x6e, 0x44, 0x75, 0x72, 0x52, 0x0c, 0x72, 0x69, 0x6e, 0x67, 0x2d, 0x6d, 0x69, 0x6e, 0x2d, 0x64,
	0x75, 0x72, 0x12, 0x5e, 0x0a, 0x0e, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x50, 0x68, 0x79, 0x56, 0x6f, 0x69, 0x63,
	0x65, 0x2e, 0x46, 0x78, 0x6f, 0x2e, 0x52, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x78, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x52, 0x0e, 0x72, 0x69, 0x6e, 0x67, 0x2d, 0x6d, 0x61, 0x78, 0x2d, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x12, 0x5f, 0x0a, 0x0e, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x50, 0x68, 0x79, 0x56, 0x6f, 0x69, 0x63,
	0x65, 0x2e, 0x46, 0x78, 0x6f, 0x2e, 0x52, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x0e, 0x72, 0x69, 0x6e, 0x67, 0x2d, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x5b, 0x0a, 0x0d, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x5f, 0x61,
	0x6d, 0x70, 0x6c, 0x69, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x50, 0x68, 0x79, 0x56, 0x6f, 0x69, 0x63,
	0x65, 0x2e, 0x46, 0x78, 0x6f, 0x2e, 0x52, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x41, 0x6d, 0x70, 0x6c,
	0x69, 0x52, 0x0d, 0x72, 0x69, 0x6e, 0x67, 0x2d, 0x61, 0x63, 0x2d, 0x61, 0x6d, 0x70, 0x6c, 0x69,
	0x22, 0x34, 0x0a, 0x07, 0x44, 0x63, 0x49, 0x6d, 0x70, 0x65, 0x64, 0x12, 0x13, 0x0a, 0x0f, 0x44,
	0x63, 0x49, 0x6d, 0x70, 0x65, 0x64, 0x5f, 0x58, 0x5f, 0x35, 0x30, 0x4f, 0x48, 0x4d, 0x10, 0x00,
	0x12, 0x14, 0x0a, 0x10, 0x44, 0x63, 0x49, 0x6d, 0x70, 0x65, 0x64, 0x5f, 0x58, 0x5f, 0x38, 0x30,
	0x30, 0x4f, 0x48, 0x4d, 0x10, 0x01, 0x22, 0x9d, 0x03, 0x0a, 0x07, 0x41, 0x63, 0x49, 0x6d, 0x70,
	0x65, 0x64, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x63, 0x49, 0x6d, 0x70, 0x65, 0x64, 0x5f, 0x58, 0x5f,
	0x36, 0x30, 0x30, 0x4f, 0x48, 0x4d, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x63, 0x49, 0x6d,
	0x70, 0x65, 0x64, 0x5f, 0x58, 0x5f, 0x39, 0x30, 0x30, 0x4f, 0x48, 0x4d, 0x10, 0x01, 0x12, 0x14,
	0x0a, 0x10, 0x41, 0x63, 0x49, 0x6d, 0x70, 0x65, 0x64, 0x5f, 0x58, 0x5f, 0x32, 0x37, 0x30, 0x4f,
	0x48, 0x4d, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x63, 0x49, 0x6d, 0x70, 0x65, 0x64, 0x5f,
	0x58, 0x5f, 0x32, 0x32, 0x30, 0x4f, 0x48, 0x4d, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x63,
	0x49, 0x6d, 0x70, 0x65, 0x64, 0x5f, 0x58, 0x5f, 0x33, 0x37, 0x30, 0x4f, 0x48, 0x4d, 0x58, 0x5f,
	0x36, 0x32, 0x30, 0x4f, 0x48, 0x4d, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x63, 0x49, 0x6d,
	0x70, 0x65, 0x64, 0x5f, 0x58, 0x5f, 0x33, 0x32, 0x30, 0x4f, 0x48, 0x4d, 0x10, 0x05, 0x12, 0x1c,
	0x0a, 0x18, 0x41, 0x63, 0x49, 0x6d, 0x70, 0x65, 0x64, 0x5f, 0x58, 0x5f, 0x33, 0x37, 0x30, 0x4f,
	0x48, 0x4d, 0x58, 0x5f, 0x38, 0x32, 0x30, 0x4f, 0x48, 0x4d, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10,
	0x41, 0x63, 0x49, 0x6d, 0x70, 0x65, 0x64, 0x5f, 0x58, 0x5f, 0x32, 0x37, 0x35, 0x4f, 0x48, 0x4d,
	0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x63, 0x49, 0x6d, 0x70, 0x65, 0x64, 0x5f, 0x58, 0x5f,
	0x32, 0x30, 0x4f, 0x48, 0x4d, 0x10, 0x08, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x63, 0x49, 0x6d, 0x70,
	0x65, 0x64, 0x5f, 0x58, 0x5f, 0x33, 0x35, 0x30, 0x4f, 0x48, 0x4d, 0x10, 0x09, 0x12, 0x14, 0x0a,
	0x10, 0x41, 0x63, 0x49, 0x6d, 0x70, 0x65, 0x64, 0x5f, 0x58, 0x5f, 0x32, 0x30, 0x30, 0x4f, 0x48,
	0x4d, 0x10, 0x0a, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x63, 0x49, 0x6d, 0x70, 0x65, 0x64, 0x5f, 0x58,
	0x5f, 0x36, 0x30, 0x30, 0x4f, 0x48, 0x4d, 0x58, 0x5f, 0x32, 0x58, 0x5f, 0x31, 0x36, 0x55, 0x46,
	0x10, 0x0b, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x63, 0x49, 0x6d, 0x70, 0x65, 0x64, 0x5f, 0x58, 0x5f,
	0x39, 0x30, 0x30, 0x4f, 0x48, 0x4d, 0x58, 0x5f, 0x31, 0x55, 0x46, 0x10, 0x0c, 0x12, 0x1d, 0x0a,
	0x19, 0x41, 0x63, 0x49, 0x6d, 0x70, 0x65, 0x64, 0x5f, 0x58, 0x5f, 0x39, 0x30, 0x30, 0x4f, 0x48,
	0x4d, 0x58, 0x5f, 0x32, 0x58, 0x5f, 0x31, 0x36, 0x55, 0x46, 0x10, 0x0d, 0x12, 0x19, 0x0a, 0x15,
	0x41, 0x63, 0x49, 0x6d, 0x70, 0x65, 0x64, 0x5f, 0x58, 0x5f, 0x36, 0x30, 0x30, 0x4f, 0x48, 0x4d,
	0x58, 0x5f, 0x31, 0x55, 0x46, 0x10, 0x0e, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x63, 0x49, 0x6d, 0x70,
	0x65, 0x64, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x58, 0x5f, 0x49, 0x4d, 0x50, 0x45, 0x44,
	0x41, 0x4e, 0x43, 0x45, 0x10, 0x0f, 0x22, 0xcd, 0x01, 0x0a, 0x0a, 0x52, 0x69, 0x6e, 0x67, 0x4d,
	0x69, 0x6e, 0x44, 0x75, 0x72, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x69, 0x6e, 0x67, 0x4d, 0x69, 0x6e,
	0x44, 0x75, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x30, 0x30, 0x4d, 0x53, 0x10, 0x00, 0x12, 0x16, 0x0a,
	0x12, 0x52, 0x69, 0x6e, 0x67, 0x4d, 0x69, 0x6e, 0x44, 0x75, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x35,
	0x30, 0x4d, 0x53, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x69, 0x6e, 0x67, 0x4d, 0x69, 0x6e,
	0x44, 0x75, 0x72, 0x5f, 0x58, 0x5f, 0x32, 0x30, 0x30, 0x4d, 0x53, 0x10, 0x02, 0x12, 0x16, 0x0a,
	0x12, 0x52, 0x69, 0x6e, 0x67, 0x4d, 0x69, 0x6e, 0x44, 0x75, 0x72, 0x5f, 0x58, 0x5f, 0x32, 0x35,
	0x36, 0x4d, 0x53, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x69, 0x6e, 0x67, 0x4d, 0x69, 0x6e,
	0x44, 0x75, 0x72, 0x5f, 0x58, 0x5f, 0x33, 0x38, 0x34, 0x4d, 0x53, 0x10, 0x04, 0x12, 0x16, 0x0a,
	0x12, 0x52, 0x69, 0x6e, 0x67, 0x4d, 0x69, 0x6e, 0x44, 0x75, 0x72, 0x5f, 0x58, 0x5f, 0x35, 0x31,
	0x32, 0x4d, 0x53, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x69, 0x6e, 0x67, 0x4d, 0x69, 0x6e,
	0x44, 0x75, 0x72, 0x5f, 0x58, 0x5f, 0x36, 0x34, 0x30, 0x4d, 0x53, 0x10, 0x06, 0x12, 0x17, 0x0a,
	0x13, 0x52, 0x69, 0x6e, 0x67, 0x4d, 0x69, 0x6e, 0x44, 0x75, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x30,
	0x32, 0x34, 0x4d, 0x53, 0x10, 0x07, 0x22, 0xb7, 0x03, 0x0a, 0x0c, 0x52, 0x69, 0x6e, 0x67, 0x4d,
	0x61, 0x78, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x69, 0x6e, 0x67, 0x4d,
	0x61, 0x78, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x4e, 0x4f, 0x54, 0x58, 0x5f, 0x55, 0x53, 0x45,
	0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x78, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x32, 0x38, 0x4d, 0x53, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14,
	0x52, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x78, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x32,
	0x35, 0x36, 0x4d, 0x53, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x69, 0x6e, 0x67, 0x4d, 0x61,
	0x78, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x32, 0x38, 0x34, 0x4d, 0x53, 0x10, 0x03,
	0x12, 0x18, 0x0a, 0x14, 0x52, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x78, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x5f, 0x58, 0x5f, 0x35, 0x31, 0x32, 0x4d, 0x53, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x69,
	0x6e, 0x67, 0x4d, 0x61, 0x78, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x36, 0x34, 0x30,
	0x4d, 0x53, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x78, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x37, 0x36, 0x38, 0x4d, 0x53, 0x10, 0x06, 0x12, 0x18,
	0x0a, 0x14, 0x52, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x78, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x58,
	0x5f, 0x38, 0x39, 0x36, 0x4d, 0x53, 0x10, 0x07, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x69, 0x6e, 0x67,
	0x4d, 0x61, 0x78, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x30, 0x32, 0x34, 0x4d,
	0x53, 0x10, 0x08, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x78, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x31, 0x35, 0x32, 0x4d, 0x53, 0x10, 0x09, 0x12, 0x19,
	0x0a, 0x15, 0x52, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x78, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x58,
	0x5f, 0x31, 0x32, 0x38, 0x30, 0x4d, 0x53, 0x10, 0x0a, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x69, 0x6e,
	0x67, 0x4d, 0x61, 0x78, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x34, 0x30, 0x38,
	0x4d, 0x53, 0x10, 0x0b, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x78, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x35, 0x33, 0x36, 0x4d, 0x53, 0x10, 0x0c, 0x12,
	0x19, 0x0a, 0x15, 0x52, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x78, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x5f,
	0x58, 0x5f, 0x31, 0x36, 0x36, 0x34, 0x4d, 0x53, 0x10, 0x0d, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x69,
	0x6e, 0x67, 0x4d, 0x61, 0x78, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x37, 0x39,
	0x32, 0x4d, 0x53, 0x10, 0x0e, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x78,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x32, 0x30, 0x4d, 0x53, 0x10, 0x0f,
	0x22, 0x5d, 0x0a, 0x0d, 0x52, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x58, 0x5f, 0x31, 0x36, 0x48, 0x5a, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x52,
	0x69, 0x6e, 0x67, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x58, 0x5f, 0x32,
	0x35, 0x48, 0x5a, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x58, 0x5f, 0x35, 0x30, 0x48, 0x5a, 0x10, 0x02, 0x22,
	0x52, 0x0a, 0x0b, 0x52, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x41, 0x6d, 0x70, 0x6c, 0x69, 0x12, 0x15,
	0x0a, 0x11, 0x52, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x41, 0x6d, 0x70, 0x6c, 0x69, 0x5f, 0x58, 0x5f,
	0x37, 0x34, 0x56, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x41,
	0x6d, 0x70, 0x6c, 0x69, 0x5f, 0x58, 0x5f, 0x36, 0x35, 0x56, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11,
	0x52, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x41, 0x6d, 0x70, 0x6c, 0x69, 0x5f, 0x58, 0x5f, 0x35, 0x30,
	0x56, 0x10, 0x02, 0x1a, 0xb3, 0x07, 0x0a, 0x03, 0x46, 0x78, 0x73, 0x12, 0x56, 0x0a, 0x0b, 0x66,
	0x78, 0x73, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x34, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44,
	0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x50,
	0x68, 0x79, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x78, 0x73, 0x2e, 0x46, 0x78, 0x73, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x66, 0x78, 0x73, 0x2d, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x78, 0x73, 0x5f, 0x67, 0x61, 0x69, 0x6e, 0x5f,
	0x73, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x78, 0x73, 0x2d,
	0x67, 0x61, 0x69, 0x6e, 0x2d, 0x73, 0x65, 0x6e, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x78, 0x73,
	0x5f, 0x67, 0x61, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x66, 0x78, 0x73, 0x2d, 0x67, 0x61, 0x69, 0x6e, 0x2d, 0x72, 0x65, 0x63, 0x12, 0x5e, 0x0a,
	0x0e, 0x66, 0x78, 0x73, 0x5f, 0x68, 0x6f, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x65, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64,
	0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x2e, 0x50, 0x68, 0x79, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x78, 0x73,
	0x2e, 0x46, 0x78, 0x73, 0x48, 0x6f, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x6e, 0x52, 0x0e, 0x66,
	0x78, 0x73, 0x2d, 0x68, 0x6f, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x65, 0x6e, 0x12, 0x58, 0x0a,
	0x0c, 0x66, 0x78, 0x73, 0x5f, 0x64, 0x63, 0x5f, 0x69, 0x6d, 0x70, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76,
	0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72,
	0x74, 0x2e, 0x50, 0x68, 0x79, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x78, 0x73, 0x2e, 0x46,
	0x78, 0x73, 0x44, 0x63, 0x49, 0x6d, 0x70, 0x65, 0x64, 0x52, 0x0c, 0x66, 0x78, 0x73, 0x2d, 0x64,
	0x63, 0x2d, 0x69, 0x6d, 0x70, 0x65, 0x64, 0x22, 0x3a, 0x0a, 0x0a, 0x46, 0x78, 0x73, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x78, 0x73, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x58, 0x5f, 0x31, 0x36, 0x4d, 0x41, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11,
	0x46, 0x78, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x58, 0x5f, 0x32, 0x30, 0x4d,
	0x41, 0x10, 0x01, 0x22, 0x41, 0x0a, 0x0c, 0x46, 0x78, 0x73, 0x48, 0x6f, 0x74, 0x6c, 0x69, 0x6e,
	0x65, 0x45, 0x6e, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x78, 0x73, 0x48, 0x6f, 0x74, 0x6c, 0x69, 0x6e,
	0x65, 0x45, 0x6e, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x17, 0x0a,
	0x13, 0x46, 0x78, 0x73, 0x48, 0x6f, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x6e, 0x5f, 0x45, 0x4e,
	0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x22, 0xd0, 0x03, 0x0a, 0x0a, 0x46, 0x78, 0x73, 0x44, 0x63,
	0x49, 0x6d, 0x70, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x78, 0x73, 0x44, 0x63, 0x49, 0x6d,
	0x70, 0x65, 0x64, 0x5f, 0x58, 0x5f, 0x36, 0x30, 0x30, 0x4f, 0x48, 0x4d, 0x10, 0x00, 0x12, 0x17,
	0x0a, 0x13, 0x46, 0x78, 0x73, 0x44, 0x63, 0x49, 0x6d, 0x70, 0x65, 0x64, 0x5f, 0x58, 0x5f, 0x39,
	0x30, 0x30, 0x4f, 0x48, 0x4d, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x78, 0x73, 0x44, 0x63,
	0x49, 0x6d, 0x70, 0x65, 0x64, 0x5f, 0x58, 0x5f, 0x32, 0x37, 0x30, 0x4f, 0x48, 0x4d, 0x10, 0x02,
	0x12, 0x17, 0x0a, 0x13, 0x46, 0x78, 0x73, 0x44, 0x63, 0x49, 0x6d, 0x70, 0x65, 0x64, 0x5f, 0x58,
	0x5f, 0x32, 0x32, 0x30, 0x4f, 0x48, 0x4d, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x46, 0x78, 0x73,
	0x44, 0x63, 0x49, 0x6d, 0x70, 0x65, 0x64, 0x5f, 0x58, 0x5f, 0x33, 0x37, 0x30, 0x4f, 0x48, 0x4d,
	0x58, 0x5f, 0x36, 0x32, 0x30, 0x4f, 0x48, 0x4d, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x78,
	0x73, 0x44, 0x63, 0x49, 0x6d, 0x70, 0x65, 0x64, 0x5f, 0x58, 0x5f, 0x33, 0x32, 0x30, 0x4f, 0x48,
	0x4d, 0x10, 0x05, 0x12, 0x1f, 0x0a, 0x1b, 0x46, 0x78, 0x73, 0x44, 0x63, 0x49, 0x6d, 0x70, 0x65,
	0x64, 0x5f, 0x58, 0x5f, 0x33, 0x37, 0x30, 0x4f, 0x48, 0x4d, 0x58, 0x5f, 0x38, 0x32, 0x30, 0x4f,
	0x48, 0x4d, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x78, 0x73, 0x44, 0x63, 0x49, 0x6d, 0x70,
	0x65, 0x64, 0x5f, 0x58, 0x5f, 0x32, 0x37, 0x35, 0x4f, 0x48, 0x4d, 0x10, 0x07, 0x12, 0x16, 0x0a,
	0x12, 0x46, 0x78, 0x73, 0x44, 0x63, 0x49, 0x6d, 0x70, 0x65, 0x64, 0x5f, 0x58, 0x5f, 0x32, 0x30,
	0x4f, 0x48, 0x4d, 0x10, 0x08, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x78, 0x73, 0x44, 0x63, 0x49, 0x6d,
	0x70, 0x65, 0x64, 0x5f, 0x58, 0x5f, 0x33, 0x35, 0x30, 0x4f, 0x48, 0x4d, 0x10, 0x09, 0x12, 0x17,
	0x0a, 0x13, 0x46, 0x78, 0x73, 0x44, 0x63, 0x49, 0x6d, 0x70, 0x65, 0x64, 0x5f, 0x58, 0x5f, 0x32,
	0x30, 0x30, 0x4f, 0x48, 0x4d, 0x10, 0x0a, 0x12, 0x20, 0x0a, 0x1c, 0x46, 0x78, 0x73, 0x44, 0x63,
	0x49, 0x6d, 0x70, 0x65, 0x64, 0x5f, 0x58, 0x5f, 0x36, 0x30, 0x30, 0x4f, 0x48, 0x4d, 0x58, 0x5f,
	0x32, 0x58, 0x5f, 0x31, 0x36, 0x55, 0x46, 0x10, 0x0b, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x78, 0x73,
	0x44, 0x63, 0x49, 0x6d, 0x70, 0x65, 0x64, 0x5f, 0x58, 0x5f, 0x39, 0x30, 0x30, 0x4f, 0x48, 0x4d,
	0x58, 0x5f, 0x31, 0x55, 0x46, 0x10, 0x0c, 0x12, 0x20, 0x0a, 0x1c, 0x46, 0x78, 0x73, 0x44, 0x63,
	0x49, 0x6d, 0x70, 0x65, 0x64, 0x5f, 0x58, 0x5f, 0x39, 0x30, 0x30, 0x4f, 0x48, 0x4d, 0x58, 0x5f,
	0x32, 0x58, 0x5f, 0x31, 0x36, 0x55, 0x46, 0x10, 0x0d, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x78, 0x73,
	0x44, 0x63, 0x49, 0x6d, 0x70, 0x65, 0x64, 0x5f, 0x58, 0x5f, 0x36, 0x30, 0x30, 0x4f, 0x48, 0x4d,
	0x58, 0x5f, 0x31, 0x55, 0x46, 0x10, 0x0e, 0x12, 0x20, 0x0a, 0x1c, 0x46, 0x78, 0x73, 0x44, 0x63,
	0x49, 0x6d, 0x70, 0x65, 0x64, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x58, 0x5f, 0x49, 0x4d,
	0x50, 0x45, 0x44, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x0f, 0x1a, 0xa4, 0x03, 0x0a, 0x02, 0x45, 0x6d,
	0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6d, 0x5f, 0x67, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x6e, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6d, 0x2d, 0x67, 0x61, 0x69, 0x6e, 0x2d,
	0x73, 0x65, 0x6e, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6d, 0x5f, 0x67, 0x61, 0x69, 0x6e, 0x5f,
	0x72, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6d, 0x2d, 0x67, 0x61,
	0x69, 0x6e, 0x2d, 0x72, 0x65, 0x63, 0x12, 0x61, 0x0a, 0x0f, 0x65, 0x6d, 0x75, 0x73, 0x65, 0x72,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x37, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65,
	0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x50, 0x68,
	0x79, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6d, 0x2e, 0x45, 0x6d, 0x75, 0x73, 0x65, 0x72,
	0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0f, 0x65, 0x6d, 0x75, 0x73, 0x65, 0x72,
	0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x61, 0x0a, 0x0f, 0x65, 0x6d, 0x75,
	0x73, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x37, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d,
	0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x2e, 0x50, 0x68, 0x79, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6d, 0x2e, 0x45, 0x6d, 0x75,
	0x73, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x52, 0x0f, 0x65, 0x6d, 0x75,
	0x73, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x22, 0x48, 0x0a, 0x0e,
	0x45, 0x6d, 0x75, 0x73, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1a,
	0x0a, 0x16, 0x45, 0x6d, 0x75, 0x73, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x5f, 0x58, 0x5f, 0x32, 0x57, 0x49, 0x52, 0x45, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x6d,
	0x75, 0x73, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x58, 0x5f, 0x34,
	0x57, 0x49, 0x52, 0x45, 0x10, 0x01, 0x22, 0x48, 0x0a, 0x0e, 0x45, 0x6d, 0x75, 0x73, 0x65, 0x72,
	0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x6d, 0x75, 0x73,
	0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x5f, 0x58, 0x5f, 0x32, 0x57, 0x49,
	0x52, 0x45, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x6d, 0x75, 0x73, 0x65, 0x72, 0x6c, 0x69,
	0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x5f, 0x58, 0x5f, 0x34, 0x57, 0x49, 0x52, 0x45, 0x10, 0x01,
	0x22, 0x3d, 0x0a, 0x0b, 0x50, 0x63, 0x6d, 0x4c, 0x61, 0x77, 0x56, 0x61, 0x75, 0x6c, 0x65, 0x12,
	0x16, 0x0a, 0x12, 0x50, 0x63, 0x6d, 0x4c, 0x61, 0x77, 0x56, 0x61, 0x75, 0x6c, 0x65, 0x5f, 0x41,
	0x58, 0x5f, 0x4c, 0x41, 0x57, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x63, 0x6d, 0x4c, 0x61,
	0x77, 0x56, 0x61, 0x75, 0x6c, 0x65, 0x5f, 0x55, 0x58, 0x5f, 0x4c, 0x41, 0x57, 0x10, 0x01, 0x22,
	0x80, 0x01, 0x0a, 0x21, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x73, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x74, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2d, 0x0a, 0x29, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0x00, 0x12, 0x2c, 0x0a, 0x28, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41,
	0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x01, 0x1a, 0x82, 0x07, 0x0a, 0x04, 0x45, 0x31, 0x54, 0x31, 0x12, 0x48, 0x0a, 0x09, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76,
	0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x45, 0x31, 0x54,
	0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b,
	0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x51, 0x0a, 0x0c, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x45, 0x31, 0x54, 0x31, 0x2e, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0c, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x2d, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x3d, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x63,
	0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73,
	0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x45, 0x31, 0x54, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b,
	0x52, 0x05, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x3a, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64,
	0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x2e, 0x45, 0x31, 0x54, 0x31, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x5f,
	0x68, 0x6f, 0x6c, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11,
	0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x2d, 0x68, 0x6f, 0x6c, 0x64, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x69, 0x70, 0x76, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x69, 0x70, 0x76, 0x2d, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x61, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x66, 0x61, 0x73, 0x2d, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x72, 0x63, 0x2d, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x12, 0x51, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x73,
	0x65, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72,
	0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x45, 0x31, 0x54, 0x31, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x73, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x1a, 0xb6, 0x01, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x53, 0x65, 0x74, 0x73, 0x12, 0x5a, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x45, 0x31, 0x54, 0x31, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x53, 0x65, 0x74, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x73,
	0x65, 0x74, 0x1a, 0x4b, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x37, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x6c, 0x6f, 0x74, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x22,
	0x36, 0x0a, 0x08, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x57,
	0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x15, 0x0a, 0x11, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x55, 0x4e, 0x46,
	0x52, 0x41, 0x4d, 0x45, 0x44, 0x10, 0x01, 0x22, 0x3d, 0x0a, 0x0b, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x4e, 0x4f, 0x58, 0x5f, 0x43, 0x52, 0x43, 0x34, 0x10, 0x00,
	0x12, 0x14, 0x0a, 0x10, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f,
	0x43, 0x52, 0x43, 0x34, 0x10, 0x01, 0x22, 0x2a, 0x0a, 0x05, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x12,
	0x10, 0x0a, 0x0c, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x10,
	0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x53, 0x4c, 0x41, 0x56, 0x45,
	0x10, 0x01, 0x22, 0x23, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x6f,
	0x64, 0x65, 0x5f, 0x48, 0x44, 0x42, 0x33, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x6f, 0x64,
	0x65, 0x5f, 0x41, 0x4d, 0x49, 0x10, 0x01, 0x1a, 0x99, 0x04, 0x0a, 0x04, 0x45, 0x33, 0x54, 0x33,
	0x12, 0x48, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76,
	0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72,
	0x74, 0x2e, 0x45, 0x33, 0x54, 0x33, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x52,
	0x09, 0x77, 0x6f, 0x72, 0x6b, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x66,
	0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69,
	0x66, 0x2d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x63,
	0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73,
	0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x45, 0x33, 0x54, 0x33, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b,
	0x52, 0x05, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x51, 0x0a, 0x0c, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d,
	0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x45, 0x33, 0x54, 0x33,
	0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0c, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x2d, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x48, 0x0a, 0x09, 0x65, 0x33,
	0x74, 0x33, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d,
	0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x45, 0x33, 0x54, 0x33,
	0x2e, 0x45, 0x33, 0x54, 0x33, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x09, 0x65, 0x33, 0x74, 0x33, 0x2d,
	0x66, 0x6c, 0x61, 0x67, 0x22, 0x36, 0x0a, 0x08, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x13, 0x0a, 0x0f, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x46, 0x52, 0x41,
	0x4d, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x64,
	0x65, 0x5f, 0x55, 0x4e, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x44, 0x10, 0x01, 0x22, 0x2a, 0x0a, 0x05,
	0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x4d,
	0x41, 0x53, 0x54, 0x45, 0x52, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x53, 0x4c, 0x41, 0x56, 0x45, 0x10, 0x01, 0x22, 0x3b, 0x0a, 0x0b, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x47, 0x58, 0x5f, 0x37, 0x35, 0x31, 0x10, 0x00, 0x12,
	0x14, 0x0a, 0x10, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x01, 0x22, 0x2c, 0x0a, 0x08, 0x45, 0x33, 0x54, 0x33, 0x46, 0x6c, 0x61,
	0x67, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x33, 0x54, 0x33, 0x46, 0x6c, 0x61, 0x67, 0x5f, 0x45, 0x33,
	0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x33, 0x54, 0x33, 0x46, 0x6c, 0x61, 0x67, 0x5f, 0x54,
	0x33, 0x10, 0x01, 0x22, 0x59, 0x0a, 0x0a, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10,
	0x01, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x4e, 0x4f, 0x54, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x02, 0x22, 0xeb,
	0x02, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x45, 0x54, 0x48, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x50, 0x4f, 0x53, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x50,
	0x4f, 0x53, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x31, 0x10,
	0x04, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x47, 0x45, 0x10, 0x05, 0x12, 0x0f,
	0x0a, 0x0b, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f, 0x31, 0x30, 0x47, 0x45, 0x10, 0x06, 0x12,
	0x0b, 0x0a, 0x07, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x47, 0x46, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f, 0x31, 0x30, 0x47, 0x46, 0x10, 0x08, 0x12, 0x0f, 0x0a,
	0x0b, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f, 0x34, 0x30, 0x47, 0x46, 0x10, 0x09, 0x12, 0x12,
	0x0a, 0x0e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f, 0x31, 0x30, 0x47, 0x46, 0x43, 0x4f, 0x4d,
	0x10, 0x0a, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f, 0x34, 0x30, 0x47,
	0x46, 0x53, 0x50, 0x4c, 0x49, 0x54, 0x10, 0x0b, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x4f, 0x54, 0x4e, 0x10, 0x0c, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58,
	0x5f, 0x31, 0x30, 0x30, 0x47, 0x46, 0x10, 0x0d, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x58, 0x5f, 0x34, 0x30, 0x30, 0x47, 0x46, 0x10, 0x0e, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x58, 0x5f, 0x32, 0x35, 0x47, 0x46, 0x10, 0x0f, 0x12, 0x0f, 0x0a, 0x0b, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f, 0x35, 0x30, 0x47, 0x46, 0x10, 0x10, 0x12, 0x10, 0x0a, 0x0c,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f, 0x32, 0x30, 0x30, 0x47, 0x46, 0x10, 0x11, 0x12, 0x11,
	0x0a, 0x0d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x55, 0x4c, 0x41, 0x52, 0x10,
	0x12, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x45, 0x10, 0x13, 0x12, 0x0e,
	0x0a, 0x0a, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x4c, 0x45, 0x58, 0x45, 0x10, 0x14, 0x12, 0x0c,
	0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x56, 0x53, 0x52, 0x10, 0x15, 0x22, 0xe7, 0x02, 0x0a,
	0x08, 0x48, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x48, 0x61, 0x72,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x1b, 0x0a, 0x17, 0x48, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x54, 0x48, 0x58,
	0x5f, 0x4d, 0x47, 0x45, 0x58, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18,
	0x48, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x54, 0x48, 0x58, 0x5f, 0x31, 0x30,
	0x47, 0x46, 0x58, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x48, 0x61,
	0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x54, 0x48, 0x58, 0x5f, 0x32, 0x35, 0x47, 0x46,
	0x58, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x48, 0x61, 0x72, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x54, 0x48, 0x58, 0x5f, 0x34, 0x30, 0x47, 0x46, 0x58, 0x5f,
	0x50, 0x4f, 0x52, 0x54, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x48, 0x61, 0x72, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x45, 0x54, 0x48, 0x58, 0x5f, 0x35, 0x30, 0x47, 0x46, 0x58, 0x5f, 0x50, 0x4f,
	0x52, 0x54, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x48, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x45, 0x54, 0x48, 0x58, 0x5f, 0x31, 0x30, 0x30, 0x47, 0x46, 0x58, 0x5f, 0x50, 0x4f, 0x52,
	0x54, 0x10, 0x06, 0x12, 0x1d, 0x0a, 0x19, 0x48, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x45, 0x54, 0x48, 0x58, 0x5f, 0x32, 0x30, 0x30, 0x47, 0x46, 0x58, 0x5f, 0x50, 0x4f, 0x52, 0x54,
	0x10, 0x07, 0x12, 0x1d, 0x0a, 0x19, 0x48, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45,
	0x54, 0x48, 0x58, 0x5f, 0x34, 0x30, 0x30, 0x47, 0x46, 0x58, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10,
	0x08, 0x12, 0x1a, 0x0a, 0x16, 0x48, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x54,
	0x48, 0x58, 0x5f, 0x47, 0x45, 0x58, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x09, 0x12, 0x1a, 0x0a,
	0x16, 0x48, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x54, 0x48, 0x58, 0x5f, 0x47,
	0x46, 0x58, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x0a, 0x12, 0x1b, 0x0a, 0x17, 0x48, 0x61, 0x72,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x55, 0x4c, 0x41, 0x52, 0x58, 0x5f,
	0x50, 0x4f, 0x52, 0x54, 0x10, 0x0b, 0x22, 0x8a, 0x01, 0x0a, 0x0c, 0x4c, 0x6f, 0x6f, 0x70, 0x62,
	0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x4c, 0x6f, 0x6f, 0x70, 0x62,
	0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x4e, 0x4f, 0x4c, 0x4f, 0x4f, 0x50, 0x42, 0x41,
	0x43, 0x4b, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x4c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b,
	0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x4c, 0x4f, 0x4f, 0x50, 0x42, 0x41,
	0x43, 0x4b, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x4c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b,
	0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x4c, 0x4f, 0x4f, 0x50, 0x42,
	0x41, 0x43, 0x4b, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x4c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63,
	0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x4d, 0x41, 0x43, 0x4c, 0x4f, 0x4f, 0x50, 0x42, 0x41, 0x43,
	0x4b, 0x10, 0x03, 0x22, 0x56, 0x0a, 0x0a, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x4e, 0x4f, 0x54, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15,
	0x0a, 0x11, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x4f, 0x50,
	0x50, 0x45, 0x52, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x46, 0x49, 0x42, 0x45, 0x52, 0x10, 0x02, 0x1a, 0xf3, 0x0b, 0x0a, 0x0a,
	0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x46, 0x0a, 0x0a, 0x6c, 0x6f,
	0x67, 0x69, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76,
	0x6d, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x4c, 0x6f, 0x67,
	0x69, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x0a, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2d, 0x70, 0x6f,
	0x72, 0x74, 0x1a, 0x9c, 0x0b, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x6f, 0x72, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x2d, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x4d, 0x0a, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64,
	0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x6f,
	0x72, 0x74, 0x73, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x53, 0x0a, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e,
	0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63,
	0x50, 0x6f, 0x72, 0x74, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4d, 0x0a, 0x09,
	0x68, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65,
	0x76, 0x6d, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x4c, 0x6f,
	0x67, 0x69, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x09, 0x68, 0x61, 0x72, 0x64, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x19, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2d, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x42, 0x0a, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x6f, 0x67, 0x69,
	0x63, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x6f, 0x72, 0x74,
	0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xc7, 0x03,
	0x0a, 0x08, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x6f,
	0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x10, 0x0a, 0x0c, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x54, 0x48,
	0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50,
	0x4f, 0x53, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x43, 0x50, 0x4f, 0x53, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x6f, 0x72, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x45, 0x31, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x6f, 0x72, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x47, 0x45, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x6f, 0x72,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f, 0x31, 0x30, 0x47, 0x45, 0x10, 0x06, 0x12, 0x0f,
	0x0a, 0x0b, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x47, 0x46, 0x10, 0x07, 0x12,
	0x13, 0x0a, 0x0f, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f, 0x31, 0x30,
	0x47, 0x46, 0x10, 0x08, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x58, 0x5f, 0x34, 0x30, 0x47, 0x46, 0x10, 0x09, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x6f, 0x72,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f, 0x31, 0x30, 0x47, 0x46, 0x43, 0x4f, 0x4d, 0x10,
	0x0a, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f,
	0x34, 0x30, 0x47, 0x46, 0x53, 0x50, 0x4c, 0x49, 0x54, 0x10, 0x0b, 0x12, 0x10, 0x0a, 0x0c, 0x50,
	0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4f, 0x54, 0x4e, 0x10, 0x0c, 0x12, 0x14, 0x0a,
	0x10, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f, 0x31, 0x30, 0x30, 0x47,
	0x46, 0x10, 0x0d, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x58, 0x5f, 0x34, 0x30, 0x30, 0x47, 0x46, 0x10, 0x0e, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x6f, 0x72,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f, 0x32, 0x35, 0x47, 0x46, 0x10, 0x0f, 0x12, 0x13,
	0x0a, 0x0f, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f, 0x35, 0x30, 0x47,
	0x46, 0x10, 0x10, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x58, 0x5f, 0x32, 0x30, 0x30, 0x47, 0x46, 0x10, 0x11, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x6f, 0x72,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x55, 0x4c, 0x41, 0x52, 0x10, 0x12,
	0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x45, 0x10,
	0x13, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x4c,
	0x45, 0x58, 0x45, 0x10, 0x14, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x56, 0x53, 0x52, 0x10, 0x15, 0x22, 0x59, 0x0a, 0x0a, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x00, 0x12, 0x15,
	0x0a, 0x11, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x4e, 0x4f, 0x54, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44,
	0x10, 0x02, 0x22, 0xe7, 0x02, 0x0a, 0x08, 0x48, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x10, 0x48, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x48, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x45, 0x54, 0x48, 0x58, 0x5f, 0x4d, 0x47, 0x45, 0x58, 0x5f, 0x50, 0x4f, 0x52, 0x54,
	0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x48, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45,
	0x54, 0x48, 0x58, 0x5f, 0x31, 0x30, 0x47, 0x46, 0x58, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x02,
	0x12, 0x1c, 0x0a, 0x18, 0x48, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x54, 0x48,
	0x58, 0x5f, 0x32, 0x35, 0x47, 0x46, 0x58, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x03, 0x12, 0x1c,
	0x0a, 0x18, 0x48, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x54, 0x48, 0x58, 0x5f,
	0x34, 0x30, 0x47, 0x46, 0x58, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18,
	0x48, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x54, 0x48, 0x58, 0x5f, 0x35, 0x30,
	0x47, 0x46, 0x58, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x48, 0x61,
	0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x54, 0x48, 0x58, 0x5f, 0x31, 0x30, 0x30, 0x47,
	0x46, 0x58, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x06, 0x12, 0x1d, 0x0a, 0x19, 0x48, 0x61, 0x72,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x54, 0x48, 0x58, 0x5f, 0x32, 0x30, 0x30, 0x47, 0x46,
	0x58, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x07, 0x12, 0x1d, 0x0a, 0x19, 0x48, 0x61, 0x72, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x54, 0x48, 0x58, 0x5f, 0x34, 0x30, 0x30, 0x47, 0x46, 0x58,
	0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x08, 0x12, 0x1a, 0x0a, 0x16, 0x48, 0x61, 0x72, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x45, 0x54, 0x48, 0x58, 0x5f, 0x47, 0x45, 0x58, 0x5f, 0x50, 0x4f, 0x52,
	0x54, 0x10, 0x09, 0x12, 0x1a, 0x0a, 0x16, 0x48, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x45, 0x54, 0x48, 0x58, 0x5f, 0x47, 0x46, 0x58, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x0a, 0x12,
	0x1b, 0x0a, 0x17, 0x48, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x45, 0x4c, 0x4c,
	0x55, 0x4c, 0x41, 0x52, 0x58, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x0b, 0x22, 0x33, 0x0a, 0x05,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x47, 0x45, 0x10,
	0x01, 0x1a, 0xd3, 0x06, 0x0a, 0x0d, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x0c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x0c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2d, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x1a, 0xf0, 0x05, 0x0a, 0x0b, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x12, 0x55, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x69,
	0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x69, 0x73, 0x2d, 0x72, 0x65, 0x73, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x2c, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x6f, 0x76, 0x65, 0x72,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x2d, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xb7, 0x04,
	0x0a, 0x09, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x00,
	0x12, 0x15, 0x0a, 0x11, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x43, 0x48,
	0x41, 0x53, 0x53, 0x49, 0x53, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x4d, 0x50, 0x55, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x10, 0x04,
	0x12, 0x17, 0x0a, 0x13, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x4c, 0x50,
	0x55, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x53, 0x46, 0x55, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45,
	0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x5f,
	0x43, 0x4c, 0x4f, 0x43, 0x4b, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x10, 0x07, 0x12, 0x18, 0x0a,
	0x14, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x4d,
	0x4f, 0x44, 0x55, 0x4c, 0x45, 0x10, 0x09, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x0a, 0x12, 0x11, 0x0a, 0x0d, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x46, 0x41, 0x4e, 0x10, 0x10, 0x12, 0x19,
	0x0a, 0x15, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x50, 0x4f, 0x57, 0x45,
	0x52, 0x53, 0x55, 0x50, 0x50, 0x4c, 0x59, 0x10, 0x11, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x52,
	0x10, 0x12, 0x12, 0x17, 0x0a, 0x12, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x5f,
	0x50, 0x50, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x10, 0x8c, 0x20, 0x12, 0x18, 0x0a, 0x13, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x53, 0x57, 0x46, 0x4d, 0x4f, 0x44, 0x55,
	0x4c, 0x45, 0x10, 0x8d, 0x20, 0x12, 0x18, 0x0a, 0x13, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61,
	0x6d, 0x65, 0x5f, 0x45, 0x43, 0x55, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x10, 0x8e, 0x20, 0x12,
	0x18, 0x0a, 0x13, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x49, 0x43, 0x55,
	0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x10, 0x8f, 0x20, 0x12, 0x12, 0x0a, 0x0d, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x4c, 0x46, 0x45, 0x10, 0xc2, 0x20, 0x12, 0x17, 0x0a,
	0x12, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x43, 0x46, 0x4d, 0x4f, 0x44,
	0x55, 0x4c, 0x45, 0x10, 0xca, 0x20, 0x12, 0x12, 0x0a, 0x0d, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4e,
	0x61, 0x6d, 0x65, 0x5f, 0x4c, 0x43, 0x44, 0x10, 0xd5, 0x20, 0x12, 0x12, 0x0a, 0x0d, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x50, 0x45, 0x4d, 0x10, 0x8e, 0x27, 0x12, 0x18,
	0x0a, 0x13, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x43, 0x4d, 0x55, 0x4d,
	0x4f, 0x44, 0x55, 0x4c, 0x45, 0x10, 0x92, 0x27, 0x12, 0x12, 0x0a, 0x0d, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x50, 0x49, 0x43, 0x10, 0x93, 0x27, 0x12, 0x12, 0x0a, 0x0d,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x54, 0x53, 0x55, 0x10, 0x94, 0x27,
	0x12, 0x12, 0x0a, 0x0d, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x50, 0x4d,
	0x55, 0x10, 0xa7, 0x27, 0x12, 0x11, 0x0a, 0x0c, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d,
	0x65, 0x5f, 0x50, 0x4d, 0x10, 0xa8, 0x27, 0x1a, 0xf3, 0x0b, 0x0a, 0x13, 0x49, 0x6e, 0x63, 0x6f,
	0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x73, 0x12,
	0x6a, 0x0a, 0x13, 0x69, 0x6e, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e,
	0x49, 0x6e, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x73, 0x2e, 0x49, 0x6e, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x13, 0x69, 0x6e, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x74, 0x2d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x1a, 0xef, 0x0a, 0x0a, 0x12,
	0x49, 0x6e, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x54, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e,
	0x44, 0x65, 0x76, 0x6d, 0x2e, 0x49, 0x6e, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x73, 0x2e, 0x49, 0x6e, 0x63, 0x6f, 0x6e, 0x73, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x2d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x68, 0x0a, 0x0c, 0x6c, 0x6f,
	0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x44, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44,
	0x65, 0x76, 0x6d, 0x2e, 0x49, 0x6e, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x73, 0x2e, 0x49, 0x6e, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63,
	0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x6b, 0x0a, 0x0d, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x45, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x49,
	0x6e, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x73, 0x2e, 0x49, 0x6e, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0d, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x62, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64,
	0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x49, 0x6e, 0x63, 0x6f, 0x6e, 0x73, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x73, 0x2e, 0x49, 0x6e, 0x63,
	0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x2d,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0xd3, 0x03, 0x0a, 0x05, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12,
	0x0f, 0x0a, 0x0b, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x00,
	0x12, 0x11, 0x0a, 0x0d, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x48, 0x41, 0x53, 0x53, 0x49,
	0x53, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x4d, 0x50, 0x55,
	0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x4c, 0x50, 0x55, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x10, 0x05, 0x12, 0x13, 0x0a,
	0x0f, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x53, 0x46, 0x55, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45,
	0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x4c, 0x4f, 0x43,
	0x4b, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x10, 0x09, 0x12,
	0x0e, 0x0a, 0x0a, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x0a, 0x12,
	0x0d, 0x0a, 0x09, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x46, 0x41, 0x4e, 0x10, 0x10, 0x12, 0x15,
	0x0a, 0x11, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x53, 0x55, 0x50,
	0x50, 0x4c, 0x59, 0x10, 0x11, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43,
	0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x52, 0x10, 0x12, 0x12, 0x13, 0x0a, 0x0e, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x50, 0x50, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x10, 0x8c, 0x20, 0x12,
	0x14, 0x0a, 0x0f, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x53, 0x57, 0x46, 0x4d, 0x4f, 0x44, 0x55,
	0x4c, 0x45, 0x10, 0x8d, 0x20, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x45,
	0x43, 0x55, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x10, 0x8e, 0x20, 0x12, 0x14, 0x0a, 0x0f, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x49, 0x43, 0x55, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x10, 0x8f,
	0x20, 0x12, 0x0e, 0x0a, 0x09, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x4c, 0x46, 0x45, 0x10, 0xc2,
	0x20, 0x12, 0x13, 0x0a, 0x0e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x46, 0x4d, 0x4f, 0x44,
	0x55, 0x4c, 0x45, 0x10, 0xca, 0x20, 0x12, 0x0e, 0x0a, 0x09, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x4c, 0x43, 0x44, 0x10, 0xd5, 0x20, 0x12, 0x0e, 0x0a, 0x09, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x50, 0x45, 0x4d, 0x10, 0x8e, 0x27, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x43, 0x4d, 0x55, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x10, 0x92, 0x27, 0x12, 0x0e, 0x0a, 0x09,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x50, 0x49, 0x43, 0x10, 0x93, 0x27, 0x12, 0x0e, 0x0a, 0x09,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x54, 0x53, 0x55, 0x10, 0x94, 0x27, 0x12, 0x0e, 0x0a, 0x09,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x50, 0x4d, 0x55, 0x10, 0xa7, 0x27, 0x12, 0x0d, 0x0a, 0x08,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x50, 0x4d, 0x10, 0xa8, 0x27, 0x22, 0x26, 0x0a, 0x0b, 0x4c,
	0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x4c, 0x6f,
	0x67, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x22, 0x28, 0x0a, 0x0c, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x22, 0xdd, 0x02,
	0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x4f,
	0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x70, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x02, 0x12, 0x15, 0x0a,
	0x11, 0x4f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x49,
	0x4e, 0x45, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x4e, 0x4f, 0x54, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x04,
	0x12, 0x20, 0x0a, 0x1c, 0x4f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x4f, 0x50,
	0x54, 0x49, 0x43, 0x41, 0x4c, 0x4e, 0x4f, 0x54, 0x45, 0x51, 0x55, 0x49, 0x50, 0x50, 0x45, 0x44,
	0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x4e, 0x4f, 0x54, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13,
	0x4f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x57, 0x52, 0x4f, 0x4e, 0x47, 0x54,
	0x59, 0x50, 0x45, 0x10, 0x07, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x45, 0x44, 0x10, 0x08, 0x12,
	0x1a, 0x0a, 0x16, 0x4f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x55, 0x4e, 0x52,
	0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x45, 0x44, 0x10, 0x09, 0x12, 0x16, 0x0a, 0x12, 0x4f,
	0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x4f, 0x46,
	0x46, 0x10, 0x0a, 0x12, 0x22, 0x0a, 0x1e, 0x4f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x50, 0x4f, 0x52, 0x54, 0x58, 0x5f, 0x50, 0x48, 0x59, 0x53, 0x49, 0x43, 0x41, 0x4c, 0x58,
	0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x0b, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x70, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x0c, 0x1a, 0x94, 0x02,
	0x0a, 0x0b, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x66, 0x67, 0x73, 0x12, 0x3f, 0x0a,
	0x07, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76,
	0x6d, 0x2e, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x66, 0x67, 0x73, 0x2e, 0x4f, 0x66,
	0x66, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x07, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x1a, 0xc3,
	0x01, 0x0a, 0x07, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x41, 0x0a, 0x05, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4f, 0x66, 0x66,
	0x6c, 0x69, 0x6e, 0x65, 0x43, 0x66, 0x67, 0x73, 0x2e, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65,
	0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x59, 0x0a, 0x05, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e,
	0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x10, 0x00,
	0x12, 0x11, 0x0a, 0x0d, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x48, 0x41, 0x53, 0x53, 0x49,
	0x53, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x42, 0x4f, 0x41,
	0x52, 0x44, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x41,
	0x52, 0x44, 0x10, 0x08, 0x1a, 0x4c, 0x0a, 0x0e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x74, 0x69,
	0x6d, 0x65, 0x1a, 0x8b, 0x02, 0x0a, 0x08, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12,
	0x3c, 0x0a, 0x07, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44,
	0x65, 0x76, 0x6d, 0x2e, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x4f, 0x66, 0x66,
	0x6c, 0x69, 0x6e, 0x65, 0x52, 0x07, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x1a, 0xc0, 0x01,
	0x0a, 0x07, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x3e, 0x0a, 0x05, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x4f, 0x66, 0x66, 0x6c,
	0x69, 0x6e, 0x65, 0x73, 0x2e, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x59, 0x0a, 0x05, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x1c,
	0x0a, 0x18, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56,
	0x41, 0x4c, 0x55, 0x45, 0x5f, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x48, 0x41, 0x53, 0x53, 0x49, 0x53, 0x10, 0x01, 0x12,
	0x0f, 0x0a, 0x0b, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x10, 0x03,
	0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x08,
	0x1a, 0xec, 0x03, 0x0a, 0x0b, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73,
	0x12, 0x48, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65,
	0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x0a,
	0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x1a, 0x92, 0x03, 0x0a, 0x0a, 0x43,
	0x6c, 0x6f, 0x63, 0x6b, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x65, 0x6e, 0x74, 0x2d, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x52, 0x0a, 0x0a, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x2e, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x75, 0x70, 0x2d, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x52, 0x0a, 0x0a, 0x73, 0x72, 0x61, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64,
	0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e,
	0x53, 0x72, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x73, 0x72, 0x61, 0x6d, 0x2d,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x36, 0x0a, 0x09, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x01, 0x22, 0x50, 0x0a,
	0x09, 0x53, 0x72, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x72,
	0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x41, 0x42, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c,
	0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x72, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x72, 0x61, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x02, 0x1a,
	0xa2, 0x5d, 0x0a, 0x06, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x04, 0x63, 0x6d,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x2e, 0x43, 0x6d, 0x75, 0x73, 0x52, 0x04, 0x63, 0x6d, 0x75, 0x73, 0x12, 0x2e, 0x0a,
	0x03, 0x70, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x6d, 0x73, 0x52, 0x03, 0x70, 0x6d, 0x73, 0x12, 0x31, 0x0a,
	0x04, 0x63, 0x63, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x44,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x63, 0x75, 0x73, 0x52, 0x04, 0x63, 0x63, 0x75, 0x73,
	0x12, 0x34, 0x0a, 0x05, 0x64, 0x61, 0x63, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65,
	0x76, 0x6d, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x61, 0x63, 0x73, 0x73, 0x52,
	0x05, 0x64, 0x61, 0x63, 0x73, 0x73, 0x12, 0x31, 0x0a, 0x04, 0x66, 0x61, 0x6e, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65,
	0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x46,
	0x61, 0x6e, 0x73, 0x52, 0x04, 0x66, 0x61, 0x6e, 0x73, 0x12, 0x31, 0x0a, 0x04, 0x69, 0x63, 0x75,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x2e, 0x49, 0x63, 0x75, 0x73, 0x52, 0x04, 0x69, 0x63, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x04,
	0x70, 0x6d, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x6d, 0x75, 0x73, 0x52, 0x04, 0x70, 0x6d, 0x75, 0x73, 0x12,
	0x4b, 0x0a, 0x0d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f,
	0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x73, 0x52, 0x0d, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x2d, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x73, 0x12, 0x31, 0x0a, 0x04,
	0x64, 0x6d, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x6d, 0x75, 0x73, 0x52, 0x04, 0x64, 0x6d, 0x75, 0x73, 0x12,
	0x31, 0x0a, 0x04, 0x70, 0x64, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d,
	0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x52, 0x04, 0x70, 0x64,
	0x75, 0x73, 0x12, 0x31, 0x0a, 0x04, 0x76, 0x73, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44,
	0x65, 0x76, 0x6d, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x56, 0x73, 0x75, 0x73, 0x52,
	0x04, 0x76, 0x73, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x04, 0x65, 0x63, 0x75, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76,
	0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x45, 0x63,
	0x75, 0x73, 0x52, 0x04, 0x65, 0x63, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x04, 0x6c, 0x63, 0x64, 0x73,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f,
	0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x2e, 0x4c, 0x63, 0x64, 0x73, 0x52, 0x04, 0x6c, 0x63, 0x64, 0x73, 0x12, 0x34, 0x0a, 0x05, 0x64,
	0x69, 0x73, 0x6b, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x52, 0x05, 0x64, 0x69, 0x73, 0x6b,
	0x73, 0x1a, 0xd2, 0x24, 0x0a, 0x04, 0x43, 0x6d, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x03, 0x63, 0x6d,
	0x75, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x2e, 0x43, 0x6d, 0x75, 0x73, 0x2e, 0x43, 0x6d, 0x75, 0x52, 0x03, 0x63, 0x6d, 0x75, 0x1a,
	0x94, 0x24, 0x0a, 0x03, 0x43, 0x6d, 0x75, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x64, 0x72, 0x61, 0x6d,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x64, 0x72,
	0x61, 0x6d, 0x2d, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x6c, 0x61, 0x73, 0x68,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66, 0x6c, 0x61,
	0x73, 0x68, 0x2d, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x75, 0x70, 0x2d, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x3a, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x26, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65,
	0x76, 0x6d, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6d, 0x75, 0x73, 0x2e, 0x43,
	0x6d, 0x75, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x4e, 0x0a,
	0x0b, 0x63, 0x6d, 0x75, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d,
	0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6d, 0x75,
	0x73, 0x2e, 0x43, 0x6d, 0x75, 0x2e, 0x43, 0x6d, 0x75, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x73,
	0x52, 0x0b, 0x63, 0x6d, 0x75, 0x2d, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x73, 0x12, 0x4b, 0x0a,
	0x0a, 0x63, 0x6d, 0x75, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e,
	0x44, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6d, 0x75, 0x73,
	0x2e, 0x43, 0x6d, 0x75, 0x2e, 0x43, 0x6d, 0x75, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x73, 0x52, 0x0a,
	0x63, 0x6d, 0x75, 0x2d, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x73, 0x12, 0x4e, 0x0a, 0x0b, 0x63, 0x6d,
	0x75, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65,
	0x76, 0x6d, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6d, 0x75, 0x73, 0x2e, 0x43,
	0x6d, 0x75, 0x2e, 0x43, 0x6d, 0x75, 0x41, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x52, 0x0b, 0x63,
	0x6d, 0x75, 0x2d, 0x61, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x4b, 0x0a, 0x0a, 0x63, 0x6d,
	0x75, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76,
	0x6d, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6d, 0x75, 0x73, 0x2e, 0x43, 0x6d,
	0x75, 0x2e, 0x43, 0x6d, 0x75, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x52, 0x0a, 0x63, 0x6d, 0x75,
	0x2d, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x12, 0x43, 0x0a, 0x07, 0x73, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x2e, 0x43, 0x6d, 0x75, 0x73, 0x2e, 0x43, 0x6d, 0x75, 0x2e, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x73, 0x52, 0x07, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x73, 0x12, 0x40, 0x0a, 0x06,
	0x72, 0x65, 0x6c, 0x61, 0x79, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e,
	0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6d, 0x75, 0x73, 0x2e, 0x43, 0x6d, 0x75, 0x2e,
	0x52, 0x65, 0x6c, 0x61, 0x79, 0x73, 0x52, 0x06, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x73, 0x12, 0x43,
	0x0a, 0x07, 0x61, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65,
	0x76, 0x6d, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6d, 0x75, 0x73, 0x2e, 0x43,
	0x6d, 0x75, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x52, 0x07, 0x61, 0x6e, 0x61, 0x6c,
	0x6f, 0x67, 0x73, 0x12, 0x51, 0x0a, 0x0c, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x2e, 0x43, 0x6d, 0x75, 0x73, 0x2e, 0x43, 0x6d, 0x75, 0x2e, 0x41, 0x6c, 0x61,
	0x72, 0x6d, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x0c, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x2d,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x1a, 0xf7, 0x03, 0x0a, 0x0a, 0x43, 0x6d, 0x75, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x73, 0x12, 0x56, 0x0a, 0x0a, 0x63, 0x6d, 0x75, 0x5f, 0x73, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x2e, 0x43, 0x6d, 0x75, 0x73, 0x2e, 0x43, 0x6d, 0x75, 0x2e, 0x43, 0x6d, 0x75,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x73, 0x2e, 0x43, 0x6d, 0x75, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x52, 0x0a, 0x63, 0x6d, 0x75, 0x2d, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x1a, 0x90, 0x03,
	0x0a, 0x09, 0x43, 0x6d, 0x75, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2d, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x60, 0x0a, 0x0a, 0x61,
	0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x40, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65,
	0x76, 0x6d, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6d, 0x75, 0x73, 0x2e, 0x43,
	0x6d, 0x75, 0x2e, 0x43, 0x6d, 0x75, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x73, 0x2e, 0x43, 0x6d,
	0x75, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x4d, 0x6f, 0x64,
	0x65, 0x52, 0x0a, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x60, 0x0a,
	0x0a, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x66, 0x6f, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x40, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e,
	0x44, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6d, 0x75, 0x73,
	0x2e, 0x43, 0x6d, 0x75, 0x2e, 0x43, 0x6d, 0x75, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x73, 0x2e,
	0x43, 0x6d, 0x75, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x46, 0x6f, 0x67, 0x52, 0x0a, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2d, 0x66, 0x6f, 0x67, 0x22,
	0x48, 0x0a, 0x09, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x0e,
	0x41, 0x6c, 0x61, 0x72, 0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x00,
	0x12, 0x13, 0x0a, 0x0f, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x4c,
	0x4f, 0x53, 0x45, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x4d, 0x6f,
	0x64, 0x65, 0x5f, 0x55, 0x4e, 0x44, 0x4f, 0x10, 0x02, 0x22, 0x35, 0x0a, 0x09, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x46, 0x6f, 0x67, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x46, 0x6f, 0x67, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a,
	0x0d, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x46, 0x6f, 0x67, 0x5f, 0x46, 0x4f, 0x47, 0x10, 0x01,
	0x1a, 0xf7, 0x02, 0x0a, 0x09, 0x43, 0x6d, 0x75, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x73, 0x12, 0x52,
	0x0a, 0x09, 0x63, 0x6d, 0x75, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e,
	0x44, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6d, 0x75, 0x73,
	0x2e, 0x43, 0x6d, 0x75, 0x2e, 0x43, 0x6d, 0x75, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x73, 0x2e, 0x43,
	0x6d, 0x75, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x52, 0x09, 0x63, 0x6d, 0x75, 0x2d, 0x72, 0x65, 0x6c,
	0x61, 0x79, 0x1a, 0x95, 0x02, 0x0a, 0x08, 0x43, 0x6d, 0x75, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x72,
	0x65, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x6f, 0x0a, 0x10, 0x72,
	0x65, 0x6c, 0x61, 0x79, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x43, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64,
	0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e,
	0x43, 0x6d, 0x75, 0x73, 0x2e, 0x43, 0x6d, 0x75, 0x2e, 0x43, 0x6d, 0x75, 0x52, 0x65, 0x6c, 0x61,
	0x79, 0x73, 0x2e, 0x43, 0x6d, 0x75, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x6c, 0x61,
	0x79, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x10, 0x72, 0x65, 0x6c, 0x61,
	0x79, 0x2d, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x5c, 0x0a, 0x0e,
	0x52, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x17,
	0x0a, 0x13, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x4d, 0x6f, 0x64, 0x65,
	0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x65, 0x6c, 0x61, 0x79,
	0x41, 0x6c, 0x61, 0x72, 0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10,
	0x01, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x4d,
	0x6f, 0x64, 0x65, 0x5f, 0x55, 0x4e, 0x44, 0x4f, 0x10, 0x02, 0x1a, 0xcb, 0x05, 0x0a, 0x0a, 0x43,
	0x6d, 0x75, 0x41, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x56, 0x0a, 0x0a, 0x63, 0x6d, 0x75,
	0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d,
	0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6d, 0x75, 0x73, 0x2e, 0x43, 0x6d, 0x75,
	0x2e, 0x43, 0x6d, 0x75, 0x41, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x43, 0x6d, 0x75, 0x41,
	0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x0a, 0x63, 0x6d, 0x75, 0x2d, 0x61, 0x6e, 0x61, 0x6c, 0x6f,
	0x67, 0x1a, 0xe4, 0x04, 0x0a, 0x09, 0x43, 0x6d, 0x75, 0x41, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x61, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x2d, 0x69, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x61, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x61, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x63, 0x0a, 0x0b, 0x61, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65,
	0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x43,
	0x6d, 0x75, 0x73, 0x2e, 0x43, 0x6d, 0x75, 0x2e, 0x43, 0x6d, 0x75, 0x41, 0x6e, 0x61, 0x6c, 0x6f,
	0x67, 0x73, 0x2e, 0x43, 0x6d, 0x75, 0x41, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x41, 0x6e, 0x61,
	0x6c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x61, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x69, 0x0a, 0x0d, 0x61, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x43, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x44,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6d, 0x75, 0x73, 0x2e, 0x43, 0x6d, 0x75, 0x2e, 0x43,
	0x6d, 0x75, 0x41, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x43, 0x6d, 0x75, 0x41, 0x6e, 0x61,
	0x6c, 0x6f, 0x67, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x0d, 0x61, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x2d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6c, 0x6f, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x2d, 0x6c, 0x6f, 0x77, 0x12, 0x1c, 0x0a, 0x09, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x77, 0x6f, 0x72, 0x6b, 0x2d, 0x68, 0x69, 0x67, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x61, 0x6e,
	0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x61, 0x6e, 0x74, 0x65,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x6c, 0x6f, 0x77, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x2d, 0x6c, 0x6f, 0x77, 0x12,
	0x1e, 0x0a, 0x0a, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x2d, 0x68, 0x69, 0x67, 0x68, 0x22,
	0x54, 0x0a, 0x0a, 0x41, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a,
	0x12, 0x41, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x16, 0x0a,
	0x12, 0x41, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x56, 0x4f, 0x4c, 0x54,
	0x41, 0x47, 0x45, 0x10, 0x02, 0x22, 0x61, 0x0a, 0x0c, 0x41, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x1c, 0x0a, 0x18, 0x41, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x54, 0x45, 0x4d, 0x50, 0x45, 0x52, 0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x19, 0x0a,
	0x15, 0x41, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x48, 0x55,
	0x4d, 0x49, 0x44, 0x49, 0x54, 0x59, 0x10, 0x03, 0x1a, 0xb9, 0x02, 0x0a, 0x09, 0x43, 0x6d, 0x75,
	0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x12, 0x52, 0x0a, 0x09, 0x63, 0x6d, 0x75, 0x5f, 0x61, 0x6c,
	0x61, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x2e, 0x43, 0x6d, 0x75, 0x73, 0x2e, 0x43, 0x6d, 0x75, 0x2e, 0x43, 0x6d, 0x75,
	0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x2e, 0x43, 0x6d, 0x75, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x52,
	0x09, 0x63, 0x6d, 0x75, 0x2d, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x1a, 0xd7, 0x01, 0x0a, 0x08, 0x43,
	0x6d, 0x75, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6c, 0x61, 0x72, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x6c, 0x61, 0x72, 0x6d,
	0x2d, 0x69, 0x64, 0x12, 0x61, 0x0a, 0x0b, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x2e, 0x43, 0x6d, 0x75, 0x73, 0x2e, 0x43, 0x6d, 0x75, 0x2e, 0x43, 0x6d, 0x75, 0x41,
	0x6c, 0x61, 0x72, 0x6d, 0x73, 0x2e, 0x43, 0x6d, 0x75, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x2e, 0x41,
	0x6c, 0x61, 0x72, 0x6d, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x0b, 0x61, 0x6c, 0x61, 0x72, 0x6d,
	0x2d, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x4c, 0x0a, 0x0a, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x6c, 0x61,
	0x72, 0x6d, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0x01, 0x12,
	0x13, 0x0a, 0x0f, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x55, 0x4e,
	0x44, 0x4f, 0x10, 0x02, 0x1a, 0xa2, 0x04, 0x0a, 0x07, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x73,
	0x12, 0x48, 0x0a, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44,
	0x65, 0x76, 0x6d, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6d, 0x75, 0x73, 0x2e,
	0x43, 0x6d, 0x75, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x73, 0x2e, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x52, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x1a, 0xcc, 0x03, 0x0a, 0x06, 0x53,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x2d, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x7a, 0x0a, 0x15, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x44, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65,
	0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x43,
	0x6d, 0x75, 0x73, 0x2e, 0x43, 0x6d, 0x75, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x73, 0x2e,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x15, 0x61, 0x6c, 0x61, 0x72,
	0x6d, 0x2d, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x2d, 0x6d, 0x6f, 0x64,
	0x65, 0x12, 0x5d, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f,
	0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x2e, 0x43, 0x6d, 0x75, 0x73, 0x2e, 0x43, 0x6d, 0x75, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x73, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x0b, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2d, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x62, 0x0a, 0x13, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x21, 0x41, 0x6c, 0x61, 0x72, 0x6d,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x46,
	0x41, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x58, 0x5f, 0x45, 0x44, 0x47, 0x45, 0x10, 0x00, 0x12, 0x24,
	0x0a, 0x20, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x69, 0x6e,
	0x67, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x52, 0x49, 0x53, 0x49, 0x4e, 0x47, 0x58, 0x5f, 0x45, 0x44,
	0x47, 0x45, 0x10, 0x01, 0x22, 0x43, 0x0a, 0x0a, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e,
	0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x5f, 0x46, 0x4f, 0x47, 0x10, 0x01, 0x1a, 0xa4, 0x02, 0x0a, 0x06, 0x52, 0x65,
	0x6c, 0x61, 0x79, 0x73, 0x12, 0x44, 0x0a, 0x05, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76,
	0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6d,
	0x75, 0x73, 0x2e, 0x43, 0x6d, 0x75, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x73, 0x2e, 0x52, 0x65,
	0x6c, 0x61, 0x79, 0x52, 0x05, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x1a, 0xd3, 0x01, 0x0a, 0x05, 0x52,
	0x65, 0x6c, 0x61, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x69, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x58, 0x0a, 0x0a, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65,
	0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x43,
	0x6d, 0x75, 0x73, 0x2e, 0x43, 0x6d, 0x75, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x73, 0x2e, 0x52,
	0x65, 0x6c, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0a,
	0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x34, 0x0a, 0x09, 0x52, 0x65,
	0x6c, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x65, 0x6c, 0x61, 0x79,
	0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x52,
	0x65, 0x6c, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0x01,
	0x1a, 0xb1, 0x06, 0x0a, 0x07, 0x41, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x48, 0x0a, 0x06,
	0x61, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e,
	0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6d, 0x75, 0x73, 0x2e, 0x43, 0x6d, 0x75, 0x2e,
	0x41, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x06,
	0x61, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x1a, 0xdb, 0x05, 0x0a, 0x06, 0x41, 0x6e, 0x61, 0x6c, 0x6f,
	0x67, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x2d, 0x69, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x61, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x2d, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x63, 0x0a, 0x0d, 0x61, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x2e, 0x43, 0x6d, 0x75, 0x73, 0x2e, 0x43, 0x6d, 0x75, 0x2e, 0x41, 0x6e, 0x61, 0x6c,
	0x6f, 0x67, 0x73, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x6f,
	0x67, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0d, 0x61, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x2d,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x71, 0x0a, 0x12, 0x61, 0x6e, 0x61, 0x6c, 0x6f, 0x67,
	0x5f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x41, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d,
	0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6d, 0x75,
	0x73, 0x2e, 0x43, 0x6d, 0x75, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x41, 0x6e,
	0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x53, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x12, 0x61, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x2d, 0x73, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x6f, 0x77,
	0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x6c, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x75,
	0x70, 0x70, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x75, 0x70, 0x70, 0x65, 0x72, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x24, 0x0a,
	0x0d, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x61, 0x6c, 0x61,
	0x72, 0x6d, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x15, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x2d,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x68, 0x69, 0x67,
	0x68, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x68, 0x69, 0x67, 0x68, 0x2d, 0x61, 0x6c,
	0x61, 0x72, 0x6d, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22, 0x6c, 0x0a,
	0x0c, 0x41, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x23, 0x0a,
	0x1f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41,
	0x4c, 0x55, 0x45, 0x5f, 0x41, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x45, 0x52, 0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0x02,
	0x12, 0x19, 0x0a, 0x15, 0x41, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x48, 0x55, 0x4d, 0x49, 0x44, 0x49, 0x54, 0x59, 0x10, 0x03, 0x22, 0x77, 0x0a, 0x10, 0x41,
	0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x27, 0x0a, 0x23, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f,
	0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x53, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x6e, 0x61, 0x6c,
	0x6f, 0x67, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x55, 0x52,
	0x52, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x6e, 0x61, 0x6c, 0x6f, 0x67,
	0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x56, 0x4f, 0x4c, 0x54, 0x41,
	0x47, 0x45, 0x10, 0x02, 0x1a, 0x89, 0x01, 0x0a, 0x0b, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x12, 0x3c, 0x0a, 0x19, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x5f, 0x72, 0x65,
	0x6c, 0x61, 0x79, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x2d, 0x72,
	0x65, 0x6c, 0x61, 0x79, 0x2d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x3c, 0x0a, 0x19, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x6c, 0x61,
	0x79, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x2d, 0x72, 0x65, 0x6c,
	0x61, 0x79, 0x2d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x22, 0x34, 0x0a, 0x04, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x6f, 0x6c, 0x65,
	0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x6f, 0x6c,
	0x65, 0x5f, 0x53, 0x4c, 0x41, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x6f, 0x6c,
	0x65, 0x5f, 0x4e, 0x41, 0x10, 0x02, 0x1a, 0xe3, 0x07, 0x0a, 0x03, 0x50, 0x6d, 0x73, 0x12, 0x2f,
	0x0a, 0x02, 0x70, 0x6d, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x6d, 0x73, 0x2e, 0x50, 0x6d, 0x52, 0x02, 0x70, 0x6d, 0x1a,
	0xaa, 0x07, 0x0a, 0x02, 0x50, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x2d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x4f, 0x0a, 0x0c, 0x73, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76,
	0x6d, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x6d, 0x73, 0x2e, 0x50, 0x6d, 0x2e,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x0c, 0x73, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x2d, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x63, 0x0a,
	0x13, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x6d, 0x73, 0x2e, 0x50, 0x6d, 0x2e, 0x4d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x13, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2d, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x2d, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x6f, 0x6c, 0x74,
	0x61, 0x67, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2d, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x2d, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2d, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2c, 0x0a, 0x11,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2d, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x2d, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x38,
	0x0a, 0x17, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69,
	0x63, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x17, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63,
	0x61, 0x6c, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6d, 0x5f, 0x61,
	0x72, 0x65, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6d, 0x2d, 0x61, 0x72,
	0x65, 0x61, 0x12, 0x46, 0x0a, 0x09, 0x70, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64,
	0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e,
	0x50, 0x6d, 0x73, 0x2e, 0x50, 0x6d, 0x2e, 0x50, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x09, 0x70, 0x6d, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x47, 0x0a, 0x0b, 0x53, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x4e, 0x41, 0x10, 0x00, 0x12, 0x11, 0x0a,
	0x0d, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x41, 0x10, 0x01,
	0x12, 0x11, 0x0a, 0x0d, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x5f,
	0x42, 0x10, 0x02, 0x22, 0x4f, 0x0a, 0x11, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x43, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x55, 0x4e,
	0x58, 0x5f, 0x50, 0x4c, 0x55, 0x47, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x50, 0x4c,
	0x55, 0x47, 0x10, 0x01, 0x22, 0x36, 0x0a, 0x08, 0x50, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x13, 0x0a, 0x0f, 0x50, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x4e, 0x4f, 0x52,
	0x4d, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x41, 0x42, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x01, 0x1a, 0x6e, 0x0a, 0x04,
	0x43, 0x63, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x03, 0x63, 0x63, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e,
	0x44, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x63, 0x75, 0x73,
	0x2e, 0x43, 0x63, 0x75, 0x52, 0x03, 0x63, 0x63, 0x75, 0x1a, 0x31, 0x0a, 0x03, 0x43, 0x63, 0x75,
	0x12, 0x2a, 0x0a, 0x10, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x6f, 0x66, 0x74,
	0x77, 0x61, 0x72, 0x65, 0x2d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0xf7, 0x04, 0x0a,
	0x05, 0x44, 0x61, 0x63, 0x73, 0x73, 0x12, 0x37, 0x0a, 0x04, 0x64, 0x61, 0x63, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65,
	0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x44,
	0x61, 0x63, 0x73, 0x73, 0x2e, 0x44, 0x61, 0x63, 0x73, 0x52, 0x04, 0x64, 0x61, 0x63, 0x73, 0x1a,
	0xb4, 0x04, 0x0a, 0x04, 0x44, 0x61, 0x63, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x2d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x61,
	0x63, 0x73, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64,
	0x61, 0x63, 0x73, 0x2d, 0x61, 0x72, 0x65, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x42, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e,
	0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x61, 0x63, 0x73, 0x73, 0x2e, 0x44, 0x61, 0x63,
	0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x61, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2d, 0x61, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x62, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x69, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2d, 0x62,
	0x12, 0x32, 0x0a, 0x14, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61,
	0x67, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x2d, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x30, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x11,
	0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10,
	0x00, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x41, 0x42, 0x4e, 0x4f,
	0x52, 0x4d, 0x41, 0x4c, 0x10, 0x01, 0x1a, 0xb6, 0x07, 0x0a, 0x04, 0x46, 0x61, 0x6e, 0x73, 0x12,
	0x33, 0x0a, 0x03, 0x66, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e,
	0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x46, 0x61, 0x6e, 0x73, 0x2e, 0x46, 0x61, 0x6e, 0x52,
	0x03, 0x66, 0x61, 0x6e, 0x1a, 0xf8, 0x06, 0x0a, 0x03, 0x46, 0x61, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1e, 0x0a, 0x0a,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x09,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65,
	0x76, 0x6d, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x46, 0x61, 0x6e, 0x73, 0x2e, 0x46,
	0x61, 0x6e, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x77, 0x6f, 0x72,
	0x6b, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x66, 0x61, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x66, 0x61, 0x6e, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x65, 0x0a, 0x13, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64,
	0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e,
	0x46, 0x61, 0x6e, 0x73, 0x2e, 0x46, 0x61, 0x6e, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x43, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x13, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x2d, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x46, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e,
	0x44, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x46, 0x61, 0x6e, 0x73,
	0x2e, 0x46, 0x61, 0x6e, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x08, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x2e, 0x46, 0x61, 0x6e, 0x73, 0x2e, 0x46, 0x61, 0x6e, 0x2e, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x52, 0x07, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x66, 0x61, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x66, 0x61, 0x6e, 0x2d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2d, 0x73, 0x70, 0x65, 0x65, 0x64,
	0x22, 0xb0, 0x01, 0x0a, 0x08, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a,
	0x1b, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41,
	0x4c, 0x55, 0x45, 0x5f, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x10, 0x00, 0x12, 0x11,
	0x0a, 0x0d, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x10,
	0x01, 0x12, 0x13, 0x0a, 0x0f, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x4d, 0x41,
	0x4e, 0x55, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f,
	0x64, 0x65, 0x5f, 0x53, 0x49, 0x4c, 0x45, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x57,
	0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x05, 0x12, 0x1d,
	0x0a, 0x19, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x4d, 0x49, 0x4e, 0x49, 0x4d,
	0x55, 0x4d, 0x58, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x10, 0x09, 0x12, 0x14, 0x0a,
	0x10, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x44, 0x45, 0x4e, 0x4f, 0x49, 0x53,
	0x45, 0x10, 0x0b, 0x22, 0x4f, 0x0a, 0x11, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x43, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x55, 0x4e,
	0x58, 0x5f, 0x50, 0x4c, 0x55, 0x47, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x50, 0x4c,
	0x55, 0x47, 0x10, 0x01, 0x22, 0x2d, 0x0a, 0x08, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x4e, 0x4f, 0x10,
	0x00, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x59, 0x45,
	0x53, 0x10, 0x01, 0x22, 0x2a, 0x0a, 0x07, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x0e,
	0x0a, 0x0a, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x4e, 0x4f, 0x10, 0x00, 0x12, 0x0f,
	0x0a, 0x0b, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x59, 0x45, 0x53, 0x10, 0x01, 0x1a,
	0xfd, 0x01, 0x0a, 0x04, 0x49, 0x63, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x03, 0x69, 0x63, 0x75, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64,
	0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e,
	0x49, 0x63, 0x75, 0x73, 0x2e, 0x49, 0x63, 0x75, 0x52, 0x03, 0x69, 0x63, 0x75, 0x1a, 0xbf, 0x01,
	0x0a, 0x03, 0x49, 0x63, 0x75, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2d,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x64, 0x72, 0x61, 0x6d, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x64, 0x72, 0x61, 0x6d,
	0x2d, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66, 0x6c, 0x61, 0x73, 0x68,
	0x2d, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x75, 0x70, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x1a,
	0x8b, 0x02, 0x0a, 0x04, 0x50, 0x6d, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x03, 0x70, 0x6d, 0x75, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64,
	0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e,
	0x50, 0x6d, 0x75, 0x73, 0x2e, 0x50, 0x6d, 0x75, 0x52, 0x03, 0x70, 0x6d, 0x75, 0x1a, 0xcd, 0x01,
	0x0a, 0x03, 0x50, 0x6d, 0x75, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2d,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x68, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x68, 0x61, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x6f, 0x72,
	0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x77, 0x6f, 0x72, 0x6b, 0x1a, 0xd2, 0x0a,
	0x0a, 0x0c, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x73, 0x12, 0x55,
	0x0a, 0x0c, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65,
	0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x73, 0x2e, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x0c, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x73,
	0x75, 0x70, 0x70, 0x6c, 0x79, 0x1a, 0xea, 0x09, 0x0a, 0x0b, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53,
	0x75, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2d,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x58, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x73, 0x2e,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x12,
	0x75, 0x0a, 0x13, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x43, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e,
	0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70,
	0x6c, 0x79, 0x73, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x2e,
	0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x13, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2d, 0x63, 0x61, 0x62, 0x6c, 0x65,
	0x2d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x62, 0x6e, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x61, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2d, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x2d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x73, 0x0a, 0x12, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65,
	0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x73, 0x2e, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x12, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x2d, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0xf9, 0x03,
	0x0a, 0x11, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x82, 0x01, 0x0a, 0x11, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x65, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x54, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65,
	0x76, 0x6d, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53,
	0x75, 0x70, 0x70, 0x6c, 0x79, 0x73, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70,
	0x6c, 0x79, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0xde, 0x02, 0x0a, 0x10, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x65, 0x6d, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x70, 0x65, 0x6d, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x24, 0x0a, 0x0d, 0x76,
	0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x2d, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2c, 0x0a,
	0x11, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2c, 0x0a,
	0x11, 0x6f, 0x75, 0x74, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x75, 0x74, 0x2d, 0x76, 0x6f,
	0x6c, 0x74, 0x61, 0x67, 0x65, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x6f,
	0x75, 0x74, 0x5f, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6f, 0x75, 0x74, 0x2d, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x28, 0x0a, 0x0f, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x76, 0x0a, 0x08, 0x57, 0x6f, 0x72,
	0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x57, 0x6f, 0x72, 0x6b,
	0x4d, 0x6f, 0x64, 0x65, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f,
	0x64, 0x65, 0x5f, 0x44, 0x43, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x57, 0x6f, 0x72, 0x6b, 0x4d,
	0x6f, 0x64, 0x65, 0x5f, 0x41, 0x43, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x57, 0x6f, 0x72, 0x6b,
	0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x48, 0x56, 0x44, 0x43, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x57,
	0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x04, 0x22, 0x4f, 0x0a, 0x11, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x43, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x55, 0x4e, 0x58, 0x5f,
	0x50, 0x4c, 0x55, 0x47, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x50, 0x4c, 0x55, 0x47,
	0x10, 0x01, 0x1a, 0xed, 0x01, 0x0a, 0x04, 0x44, 0x6d, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x03, 0x64,
	0x6d, 0x75, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x2e, 0x44, 0x6d, 0x75, 0x73, 0x2e, 0x44, 0x6d, 0x75, 0x52, 0x03, 0x64, 0x6d, 0x75,
	0x1a, 0xaf, 0x01, 0x0a, 0x03, 0x44, 0x6d, 0x75, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x77, 0x6f,
	0x72, 0x6b, 0x1a, 0xd7, 0x03, 0x0a, 0x04, 0x50, 0x64, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x03, 0x70,
	0x64, 0x75, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x2e, 0x50, 0x64, 0x75, 0x52, 0x03, 0x70, 0x64, 0x75,
	0x1a, 0x99, 0x03, 0x0a, 0x03, 0x50, 0x64, 0x75, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x44,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x64, 0x75, 0x73, 0x2e, 0x50, 0x64, 0x75, 0x2e, 0x57,
	0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x2d, 0x6d, 0x6f,
	0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61,
	0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x24,
	0x0a, 0x0d, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2d, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x22, 0x76, 0x0a, 0x08, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d,
	0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x10,
	0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x44, 0x43,
	0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x41,
	0x43, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x5f,
	0x48, 0x56, 0x44, 0x43, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f,
	0x64, 0x65, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x04, 0x1a, 0x8f, 0x02, 0x0a,
	0x04, 0x56, 0x73, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x03, 0x76, 0x73, 0x75, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d,
	0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x56, 0x73, 0x75,
	0x73, 0x2e, 0x56, 0x73, 0x75, 0x52, 0x03, 0x76, 0x73, 0x75, 0x1a, 0xd1, 0x01, 0x0a, 0x03, 0x56,
	0x73, 0x75, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51,
	0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65,
	0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x56,
	0x73, 0x75, 0x73, 0x2e, 0x56, 0x73, 0x75, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70,
	0x65, 0x22, 0x5b, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x22, 0x0a, 0x1e, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d,
	0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x43, 0x47, 0x4e, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x51, 0x4f, 0x45, 0x10, 0x03, 0x1a, 0xd9,
	0x02, 0x0a, 0x04, 0x45, 0x63, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x03, 0x65, 0x63, 0x75, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65,
	0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x45,
	0x63, 0x75, 0x73, 0x2e, 0x45, 0x63, 0x75, 0x52, 0x03, 0x65, 0x63, 0x75, 0x1a, 0x9b, 0x02, 0x0a,
	0x03, 0x45, 0x63, 0x75, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2d, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x64, 0x72, 0x61, 0x6d, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x64, 0x72, 0x61, 0x6d, 0x2d,
	0x73, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x2d,
	0x73, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x75, 0x70, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x6f, 0x66, 0x63, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6f, 0x66, 0x63, 0x2d, 0x63, 0x61, 0x72,
	0x64, 0x2d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x75, 0x62, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x73, 0x75, 0x62, 0x63, 0x61, 0x72, 0x64, 0x2d, 0x73,
	0x6c, 0x6f, 0x74, 0x2d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0xa2, 0x01, 0x0a, 0x04, 0x4c,
	0x63, 0x64, 0x73, 0x12, 0x33, 0x0a, 0x03, 0x6c, 0x63, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44,
	0x65, 0x76, 0x6d, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x63, 0x64, 0x73, 0x2e,
	0x4c, 0x63, 0x64, 0x52, 0x03, 0x6c, 0x63, 0x64, 0x1a, 0x65, 0x0a, 0x03, 0x4c, 0x63, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x1e, 0x0a, 0x0a, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x1a,
	0x92, 0x03, 0x0a, 0x05, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x12, 0x37, 0x0a, 0x04, 0x64, 0x69, 0x73,
	0x6b, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x04, 0x64, 0x69,
	0x73, 0x6b, 0x1a, 0xcf, 0x02, 0x0a, 0x04, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64,
	0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e,
	0x44, 0x69, 0x73, 0x6b, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x2d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x2a, 0x0a, 0x10, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x69, 0x72, 0x6d, 0x77,
	0x61, 0x72, 0x65, 0x2d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x37, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x48, 0x41, 0x52, 0x44,
	0x58, 0x5f, 0x44, 0x49, 0x53, 0x4b, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x55, 0x53, 0x42, 0x58, 0x5f, 0x46, 0x4c, 0x41, 0x53, 0x48, 0x58, 0x5f, 0x44, 0x52, 0x49,
	0x56, 0x45, 0x10, 0x01, 0x1a, 0x90, 0x02, 0x0a, 0x14, 0x46, 0x77, 0x64, 0x50, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x12, 0x70, 0x0a,
	0x15, 0x66, 0x77, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e,
	0x46, 0x77, 0x64, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x6c,
	0x61, 0x72, 0x6d, 0x73, 0x2e, 0x46, 0x77, 0x64, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x6e, 0x63, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x52, 0x15, 0x66, 0x77, 0x64, 0x2d, 0x70, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2d, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x1a,
	0x85, 0x01, 0x0a, 0x13, 0x46, 0x77, 0x64, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e,
	0x63, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x2d, 0x69,
	0x64, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x28, 0x0a,
	0x0f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x2d, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x1a, 0xfe, 0x01, 0x0a, 0x11, 0x46, 0x77, 0x64, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x12, 0x64, 0x0a,
	0x12, 0x66, 0x77, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x61, 0x6c,
	0x61, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x46, 0x77, 0x64,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x2e, 0x46,
	0x77, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x52,
	0x12, 0x66, 0x77, 0x64, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2d, 0x61, 0x6c,
	0x61, 0x72, 0x6d, 0x1a, 0x82, 0x01, 0x0a, 0x10, 0x46, 0x77, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6c, 0x6f, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x2d,
	0x69, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x28,
	0x0a, 0x0f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x2d, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x1a, 0x8a, 0x02, 0x0a, 0x13, 0x46, 0x77, 0x64,
	0x52, 0x65, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73,
	0x12, 0x6c, 0x0a, 0x14, 0x66, 0x77, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62,
	0x6c, 0x79, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76,
	0x6d, 0x2e, 0x46, 0x77, 0x64, 0x52, 0x65, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x41,
	0x6c, 0x61, 0x72, 0x6d, 0x73, 0x2e, 0x46, 0x77, 0x64, 0x52, 0x65, 0x61, 0x73, 0x73, 0x65, 0x6d,
	0x62, 0x6c, 0x79, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x52, 0x14, 0x66, 0x77, 0x64, 0x2d, 0x72, 0x65,
	0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x2d, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x1a, 0x84,
	0x01, 0x0a, 0x12, 0x46, 0x77, 0x64, 0x52, 0x65, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79,
	0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x2d, 0x69, 0x64, 0x12,
	0x2a, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x63,
	0x6c, 0x65, 0x61, 0x72, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x2d, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x1a, 0x90, 0x03, 0x0a, 0x12, 0x46, 0x77, 0x64, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x12, 0x6a, 0x0a, 0x14,
	0x66, 0x77, 0x64, 0x5f, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x61,
	0x6c, 0x61, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x46, 0x77,
	0x64, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73,
	0x2e, 0x46, 0x77, 0x64, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x41, 0x6c, 0x61,
	0x72, 0x6d, 0x52, 0x14, 0x66, 0x77, 0x64, 0x2d, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2d, 0x66, 0x6c,
	0x6f, 0x77, 0x2d, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x1a, 0x8d, 0x02, 0x0a, 0x11, 0x46, 0x77, 0x64,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x6c, 0x6f, 0x74, 0x2d, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x16, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2d,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x12, 0x34, 0x0a, 0x15, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x15, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2d, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x2d, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x38, 0x0a, 0x17, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2d,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x12, 0x36, 0x0a, 0x16, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72,
	0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x16, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x2d, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x1a, 0x71, 0x0a, 0x0f, 0x46, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x43, 0x70, 0x75, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x6f, 0x67,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6c,
	0x6f, 0x67, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61,
	0x70, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x74, 0x72, 0x61, 0x70, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0x72, 0x0a, 0x10, 0x46,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x56, 0x63, 0x70, 0x75, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x6c, 0x6f, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x6c, 0x6f, 0x67, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x70, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x1a,
	0xe1, 0x02, 0x0a, 0x18, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x82, 0x01, 0x0a,
	0x1a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x42, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e,
	0x44, 0x65, 0x76, 0x6d, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x41, 0x6c, 0x61, 0x72,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x1a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x2d, 0x68, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x2d, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x2d, 0x69, 0x6e, 0x66,
	0x6f, 0x1a, 0xbf, 0x01, 0x0a, 0x17, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x48, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x2d, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69,
	0x6e, 0x66, 0x6f, 0x1a, 0xe7, 0x02, 0x0a, 0x19, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x48,
	0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x12, 0x86, 0x01, 0x0a, 0x1b, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x68, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x1b, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2d, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x2d,
	0x61, 0x6c, 0x61, 0x72, 0x6d, 0x2d, 0x69, 0x6e, 0x66, 0x6f, 0x1a, 0xc0, 0x01, 0x0a, 0x18, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x41, 0x6c,
	0x61, 0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x2d, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x1a, 0xef, 0x7a,
	0x0a, 0x0b, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x4a, 0x0a,
	0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d,
	0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74,
	0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x0b, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0x93, 0x7a, 0x0a, 0x0a, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x5b, 0x0a, 0x0d,
	0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76,
	0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72,
	0x74, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x4c, 0x6f,
	0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0d, 0x6c, 0x6f, 0x6f, 0x70,
	0x62, 0x61, 0x63, 0x6b, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x78, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x74, 0x78, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2d, 0x64, 0x65,
	0x6c, 0x61, 0x79, 0x12, 0x4d, 0x0a, 0x08, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64,
	0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50,
	0x6f, 0x72, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x2e,
	0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x52, 0x08, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x12, 0x44, 0x0a, 0x05, 0x6c, 0x61, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e,
	0x44, 0x65, 0x76, 0x6d, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73,
	0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x4c, 0x61, 0x73, 0x65,
	0x72, 0x52, 0x05, 0x6c, 0x61, 0x73, 0x65, 0x72, 0x12, 0x5e, 0x0a, 0x0e, 0x6f, 0x70, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44,
	0x65, 0x76, 0x6d, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x0e, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x6a, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65,
	0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f,
	0x72, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x61, 0x72, 0x6d,
	0x52, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x61,
	0x6c, 0x61, 0x72, 0x6d, 0x12, 0x52, 0x0a, 0x0a, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x61, 0x6c, 0x61,
	0x72, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f,
	0x72, 0x74, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x52, 0x0a, 0x70, 0x6f,
	0x72, 0x74, 0x2d, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x1a, 0x94, 0x18, 0x0a, 0x08, 0x45, 0x74, 0x68,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x12, 0x61, 0x0a, 0x0c, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x46,
	0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x0c, 0x66, 0x6c, 0x6f, 0x77,
	0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x5b, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x68, 0x6f,
	0x6c, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x64,
	0x6f, 0x77, 0x6e, 0x2d, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x75, 0x70, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x75, 0x70, 0x2d, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x52, 0x0a, 0x07, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x38, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d,
	0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74,
	0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x45, 0x74, 0x68,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x48, 0x6f, 0x6c, 0x64, 0x55, 0x70, 0x52, 0x07, 0x68, 0x6f,
	0x6c, 0x64, 0x2d, 0x75, 0x70, 0x12, 0x6c, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x67, 0x61, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x40, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65,
	0x76, 0x6d, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x47, 0x61,
	0x70, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d,
	0x67, 0x61, 0x70, 0x12, 0x60, 0x0a, 0x0c, 0x65, 0x74, 0x68, 0x5f, 0x77, 0x61, 0x6e, 0x5f, 0x61,
	0x74, 0x74, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50,
	0x6f, 0x72, 0x74, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x45, 0x74, 0x68,
	0x57, 0x61, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x52, 0x0c, 0x65, 0x74, 0x68, 0x2d, 0x77, 0x61, 0x6e,
	0x2d, 0x61, 0x74, 0x74, 0x72, 0x12, 0x4d, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65,
	0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f,
	0x72, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x45,
	0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x53, 0x70, 0x65, 0x65, 0x64, 0x52, 0x05, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x12, 0x50, 0x0a, 0x06, 0x64, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65,
	0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f,
	0x72, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x45,
	0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x44, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x52, 0x06,
	0x64, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x12, 0x5f, 0x0a, 0x0b, 0x6e, 0x65, 0x67, 0x6f, 0x74, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4e,
	0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x6e, 0x65, 0x67, 0x6f,
	0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6d, 0x0a, 0x10, 0x6e, 0x65, 0x67, 0x6f, 0x74,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x41, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e,
	0x44, 0x65, 0x76, 0x6d, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73,
	0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x45, 0x74, 0x68, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x10, 0x6e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x63, 0x0a, 0x0d, 0x67, 0x66, 0x5f, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d,
	0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x2e, 0x47, 0x66, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x67, 0x66,
	0x2d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x72, 0x0a, 0x12, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72,
	0x74, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x12, 0x66, 0x6c, 0x6f,
	0x77, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a,
	0x81, 0x08, 0x0a, 0x0a, 0x45, 0x74, 0x68, 0x57, 0x61, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x12, 0x6c,
	0x0a, 0x0c, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x48, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65,
	0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f,
	0x72, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x45,
	0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x45, 0x74, 0x68, 0x57, 0x61, 0x6e, 0x41, 0x74,
	0x74, 0x72, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0c,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x2d, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x5d, 0x0a, 0x07,
	0x6a, 0x30, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x43, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d,
	0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x2e, 0x45, 0x74, 0x68, 0x57, 0x61, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x2e, 0x4a, 0x30, 0x4d, 0x6f,
	0x64, 0x65, 0x52, 0x07, 0x6a, 0x30, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6a,
	0x30, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6a,
	0x30, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6a, 0x30, 0x5f, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x30, 0x2d, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x07, 0x6a, 0x31, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x43, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65,
	0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f,
	0x72, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x45,
	0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x45, 0x74, 0x68, 0x57, 0x61, 0x6e, 0x41, 0x74,
	0x74, 0x72, 0x2e, 0x4a, 0x31, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x6a, 0x31, 0x2d, 0x6d, 0x6f,
	0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6a, 0x31, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6a, 0x31, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x6a, 0x31, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6a, 0x31, 0x2d, 0x74, 0x72, 0x61, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x63, 0x32,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x63, 0x32, 0x12, 0x58, 0x0a, 0x05, 0x63, 0x6c,
	0x6f, 0x63, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50,
	0x6f, 0x72, 0x74, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x45, 0x74, 0x68,
	0x57, 0x61, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x05, 0x63,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x61, 0x0a, 0x08, 0x73, 0x63, 0x72, 0x61, 0x6d, 0x62, 0x6c, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x45, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f,
	0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74,
	0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x45, 0x74, 0x68, 0x57, 0x61, 0x6e,
	0x41, 0x74, 0x74, 0x72, 0x2e, 0x53, 0x63, 0x72, 0x61, 0x6d, 0x62, 0x6c, 0x65, 0x52, 0x08, 0x73,
	0x63, 0x72, 0x61, 0x6d, 0x62, 0x6c, 0x65, 0x22, 0x39, 0x0a, 0x0b, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x53, 0x44, 0x48, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x53, 0x4f, 0x4e, 0x45, 0x54,
	0x10, 0x01, 0x22, 0x75, 0x0a, 0x06, 0x4a, 0x30, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x19,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c,
	0x55, 0x45, 0x5f, 0x4a, 0x30, 0x4d, 0x6f, 0x64, 0x65, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4a,
	0x30, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x58, 0x5f, 0x31, 0x42, 0x59, 0x54, 0x45, 0x10, 0x01, 0x12,
	0x13, 0x0a, 0x0f, 0x4a, 0x30, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x58, 0x5f, 0x31, 0x36, 0x42, 0x59,
	0x54, 0x45, 0x10, 0x10, 0x12, 0x23, 0x0a, 0x1f, 0x4a, 0x30, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x58,
	0x5f, 0x36, 0x34, 0x42, 0x59, 0x54, 0x45, 0x58, 0x5f, 0x4f, 0x52, 0x58, 0x5f, 0x4e, 0x55, 0x4c,
	0x4c, 0x58, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x40, 0x22, 0x75, 0x0a, 0x06, 0x4a, 0x31, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45,
	0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x4a, 0x31, 0x4d, 0x6f, 0x64, 0x65,
	0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4a, 0x31, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x58, 0x5f, 0x31,
	0x42, 0x59, 0x54, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x4a, 0x31, 0x4d, 0x6f, 0x64, 0x65,
	0x5f, 0x58, 0x5f, 0x31, 0x36, 0x42, 0x59, 0x54, 0x45, 0x10, 0x10, 0x12, 0x23, 0x0a, 0x1f, 0x4a,
	0x31, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x58, 0x5f, 0x36, 0x34, 0x42, 0x59, 0x54, 0x45, 0x58, 0x5f,
	0x4f, 0x52, 0x58, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x58, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x40,
	0x22, 0x2a, 0x0a, 0x05, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x43,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x53, 0x4c, 0x41, 0x56, 0x45, 0x10, 0x01, 0x22, 0x35, 0x0a, 0x08,
	0x53, 0x63, 0x72, 0x61, 0x6d, 0x62, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x63, 0x72, 0x61,
	0x6d, 0x62, 0x6c, 0x65, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x13,
	0x0a, 0x0f, 0x53, 0x63, 0x72, 0x61, 0x6d, 0x62, 0x6c, 0x65, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c,
	0x45, 0x10, 0x03, 0x22, 0x87, 0x01, 0x0a, 0x0b, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x5f, 0x41, 0x4c, 0x4c, 0x58, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x58, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x58, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02,
	0x12, 0x1b, 0x0a, 0x17, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f,
	0x41, 0x4c, 0x4c, 0x58, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x03, 0x22, 0x3d, 0x0a,
	0x09, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x4c, 0x41, 0x4e, 0x58, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x4d, 0x6f, 0x64, 0x65,
	0x5f, 0x57, 0x41, 0x4e, 0x58, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x01, 0x22, 0x2f, 0x0a, 0x06,
	0x48, 0x6f, 0x6c, 0x64, 0x55, 0x70, 0x12, 0x12, 0x0a, 0x0e, 0x48, 0x6f, 0x6c, 0x64, 0x55, 0x70,
	0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x48, 0x6f,
	0x6c, 0x64, 0x55, 0x70, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x22, 0x4b, 0x0a,
	0x0e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x47, 0x61, 0x70, 0x12,
	0x19, 0x0a, 0x15, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x47, 0x61,
	0x70, 0x5f, 0x53, 0x48, 0x52, 0x49, 0x4e, 0x4b, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x47, 0x61, 0x70, 0x5f, 0x4e, 0x4f, 0x4e,
	0x58, 0x5f, 0x53, 0x48, 0x52, 0x49, 0x4e, 0x4b, 0x10, 0x01, 0x22, 0x4d, 0x0a, 0x05, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x58, 0x5f, 0x31,
	0x30, 0x4d, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x58, 0x5f,
	0x31, 0x30, 0x30, 0x4d, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x70, 0x65, 0x65, 0x64, 0x5f,
	0x58, 0x5f, 0x31, 0x30, 0x30, 0x30, 0x4d, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x70, 0x65,
	0x65, 0x64, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x10, 0x09, 0x22, 0x3b, 0x0a, 0x06, 0x44, 0x75, 0x70,
	0x6c, 0x65, 0x78, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x5f, 0x41, 0x55,
	0x54, 0x4f, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x5f, 0x48,
	0x41, 0x4c, 0x46, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x5f,
	0x46, 0x55, 0x4c, 0x4c, 0x10, 0x02, 0x22, 0x58, 0x0a, 0x0b, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x16,
	0x0a, 0x12, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x45, 0x4e,
	0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0xff, 0x01,
	0x22, 0x48, 0x0a, 0x0f, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x53, 0x4c, 0x41, 0x56, 0x45, 0x10, 0x00, 0x12, 0x1a,
	0x0a, 0x16, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64,
	0x65, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x10, 0x01, 0x22, 0x70, 0x0a, 0x0b, 0x47, 0x66,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x66, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x10, 0x00, 0x12,
	0x19, 0x0a, 0x15, 0x47, 0x66, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46,
	0x49, 0x42, 0x45, 0x52, 0x31, 0x30, 0x30, 0x30, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x47, 0x66,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x49, 0x42, 0x45, 0x52, 0x31,
	0x30, 0x30, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x66, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x43, 0x4f, 0x50, 0x50, 0x45, 0x52, 0x10, 0x03, 0x22, 0xa0, 0x01, 0x0a,
	0x10, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x21, 0x0a, 0x1d, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x41, 0x4c, 0x4c, 0x58, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45,
	0x58, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x46, 0x6c,
	0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x53,
	0x45, 0x4e, 0x44, 0x58, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x20, 0x0a,
	0x1c, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x41, 0x4c, 0x4c, 0x58, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x03, 0x1a,
	0xf9, 0x01, 0x0a, 0x05, 0x4c, 0x61, 0x73, 0x65, 0x72, 0x12, 0x69, 0x0a, 0x10, 0x61, 0x75, 0x74,
	0x6f, 0x5f, 0x73, 0x68, 0x75, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76,
	0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72,
	0x74, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x4c, 0x61,
	0x73, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x68, 0x75, 0x74, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x2d, 0x73, 0x68, 0x75, 0x74, 0x2d, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x2d, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x2d, 0x74, 0x69,
	0x6d, 0x65, 0x22, 0x47, 0x0a, 0x0e, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x68, 0x75, 0x74, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x68, 0x75, 0x74,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00,
	0x12, 0x19, 0x0a, 0x15, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x68, 0x75, 0x74, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0xf2, 0x2f, 0x0a, 0x0d,
	0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x3c, 0x0a,
	0x19, 0x72, 0x78, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x77,
	0x61, 0x72, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x19, 0x72, 0x78, 0x2d, 0x68, 0x69, 0x67, 0x68, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d,
	0x77, 0x61, 0x72, 0x6e, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x72,
	0x78, 0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x77, 0x61, 0x72, 0x6e,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x72,
	0x78, 0x2d, 0x6c, 0x6f, 0x77, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x77, 0x61, 0x72, 0x6e,
	0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3c, 0x0a, 0x19, 0x74, 0x78, 0x5f, 0x68, 0x69,
	0x67, 0x68, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x74, 0x78, 0x2d, 0x68,
	0x69, 0x67, 0x68, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x77, 0x61, 0x72, 0x6e, 0x2d, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x74, 0x78, 0x5f, 0x6c, 0x6f, 0x77, 0x5f,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x74, 0x78, 0x2d, 0x6c, 0x6f, 0x77, 0x2d,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x77, 0x61, 0x72, 0x6e, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x34, 0x0a, 0x15, 0x76, 0x6f, 0x6c, 0x74, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x77,
	0x61, 0x72, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x15, 0x76, 0x6f, 0x6c, 0x74, 0x2d, 0x68, 0x69, 0x67, 0x68, 0x2d, 0x77, 0x61, 0x72, 0x6e,
	0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x76, 0x6f, 0x6c, 0x74, 0x5f,
	0x6c, 0x6f, 0x77, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x76, 0x6f, 0x6c, 0x74, 0x2d, 0x6c, 0x6f, 0x77, 0x2d,
	0x77, 0x61, 0x72, 0x6e, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x8c, 0x01, 0x0a, 0x19,
	0x77, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x4e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65,
	0x76, 0x6d, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x19, 0x77, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x2d, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x2d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x12, 0x74, 0x75,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x77, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x74, 0x75, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2d,
	0x77, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x2c, 0x0a, 0x11, 0x74, 0x75,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x74, 0x75, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2d, 0x66,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x95, 0x2b, 0x0a, 0x17, 0x57, 0x61, 0x76,
	0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x58, 0x5f, 0x31, 0x39, 0x36, 0x58, 0x5f, 0x31, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35,
	0x32, 0x38, 0x58, 0x5f, 0x37, 0x37, 0x33, 0x4e, 0x4d, 0x10, 0x00, 0x12, 0x35, 0x0a, 0x31, 0x57,
	0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x36, 0x58, 0x5f, 0x30, 0x35,
	0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x32, 0x39, 0x58, 0x5f, 0x31, 0x36, 0x33, 0x4e, 0x4d,
	0x10, 0x01, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f,
	0x31, 0x39, 0x36, 0x58, 0x5f, 0x30, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x32, 0x39,
	0x58, 0x5f, 0x35, 0x35, 0x33, 0x4e, 0x4d, 0x10, 0x02, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76,
	0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x35, 0x58, 0x5f, 0x39, 0x35, 0x54, 0x48,
	0x5a, 0x58, 0x5f, 0x31, 0x35, 0x32, 0x39, 0x58, 0x5f, 0x39, 0x34, 0x34, 0x4e, 0x4d, 0x10, 0x03,
	0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39,
	0x35, 0x58, 0x5f, 0x39, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x33, 0x30, 0x58, 0x5f,
	0x33, 0x33, 0x34, 0x4e, 0x4d, 0x10, 0x04, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x35, 0x58, 0x5f, 0x38, 0x35, 0x54, 0x48, 0x5a, 0x58,
	0x5f, 0x31, 0x35, 0x33, 0x30, 0x58, 0x5f, 0x37, 0x32, 0x35, 0x4e, 0x4d, 0x10, 0x05, 0x12, 0x35,
	0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x35, 0x58,
	0x5f, 0x38, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x33, 0x31, 0x58, 0x5f, 0x31, 0x31,
	0x36, 0x4e, 0x4d, 0x10, 0x06, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x58, 0x5f, 0x31, 0x39, 0x35, 0x58, 0x5f, 0x37, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31,
	0x35, 0x33, 0x31, 0x58, 0x5f, 0x35, 0x30, 0x37, 0x4e, 0x4d, 0x10, 0x07, 0x12, 0x35, 0x0a, 0x31,
	0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x35, 0x58, 0x5f, 0x37,
	0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x33, 0x31, 0x58, 0x5f, 0x38, 0x39, 0x38, 0x4e,
	0x4d, 0x10, 0x08, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58,
	0x5f, 0x31, 0x39, 0x35, 0x58, 0x5f, 0x36, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x33,
	0x32, 0x58, 0x5f, 0x32, 0x39, 0x30, 0x4e, 0x4d, 0x10, 0x09, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61,
	0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x35, 0x58, 0x5f, 0x36, 0x30, 0x54,
	0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x33, 0x32, 0x58, 0x5f, 0x36, 0x38, 0x31, 0x4e, 0x4d, 0x10,
	0x0a, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31,
	0x39, 0x35, 0x58, 0x5f, 0x35, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x33, 0x33, 0x58,
	0x5f, 0x30, 0x37, 0x33, 0x4e, 0x4d, 0x10, 0x0b, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x35, 0x58, 0x5f, 0x35, 0x30, 0x54, 0x48, 0x5a,
	0x58, 0x5f, 0x31, 0x35, 0x33, 0x33, 0x58, 0x5f, 0x34, 0x36, 0x35, 0x4e, 0x4d, 0x10, 0x0c, 0x12,
	0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x35,
	0x58, 0x5f, 0x34, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x33, 0x33, 0x58, 0x5f, 0x38,
	0x35, 0x38, 0x4e, 0x4d, 0x10, 0x0d, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x35, 0x58, 0x5f, 0x34, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f,
	0x31, 0x35, 0x33, 0x34, 0x58, 0x5f, 0x32, 0x35, 0x30, 0x4e, 0x4d, 0x10, 0x0e, 0x12, 0x35, 0x0a,
	0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x35, 0x58, 0x5f,
	0x33, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x33, 0x34, 0x58, 0x5f, 0x36, 0x34, 0x33,
	0x4e, 0x4d, 0x10, 0x0f, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x58, 0x5f, 0x31, 0x39, 0x35, 0x58, 0x5f, 0x33, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35,
	0x33, 0x35, 0x58, 0x5f, 0x30, 0x33, 0x36, 0x4e, 0x4d, 0x10, 0x10, 0x12, 0x35, 0x0a, 0x31, 0x57,
	0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x35, 0x58, 0x5f, 0x32, 0x35,
	0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x33, 0x35, 0x58, 0x5f, 0x34, 0x32, 0x39, 0x4e, 0x4d,
	0x10, 0x11, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f,
	0x31, 0x39, 0x35, 0x58, 0x5f, 0x32, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x33, 0x35,
	0x58, 0x5f, 0x38, 0x32, 0x32, 0x4e, 0x4d, 0x10, 0x12, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76,
	0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x35, 0x58, 0x5f, 0x31, 0x35, 0x54, 0x48,
	0x5a, 0x58, 0x5f, 0x31, 0x35, 0x33, 0x36, 0x58, 0x5f, 0x32, 0x31, 0x36, 0x4e, 0x4d, 0x10, 0x13,
	0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39,
	0x35, 0x58, 0x5f, 0x31, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x33, 0x36, 0x58, 0x5f,
	0x36, 0x30, 0x39, 0x4e, 0x4d, 0x10, 0x14, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x35, 0x58, 0x5f, 0x30, 0x35, 0x54, 0x48, 0x5a, 0x58,
	0x5f, 0x31, 0x35, 0x33, 0x37, 0x58, 0x5f, 0x30, 0x30, 0x33, 0x4e, 0x4d, 0x10, 0x15, 0x12, 0x35,
	0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x35, 0x58,
	0x5f, 0x30, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x33, 0x37, 0x58, 0x5f, 0x33, 0x39,
	0x37, 0x4e, 0x4d, 0x10, 0x16, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x58, 0x5f, 0x31, 0x39, 0x34, 0x58, 0x5f, 0x39, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31,
	0x35, 0x33, 0x37, 0x58, 0x5f, 0x37, 0x39, 0x32, 0x4e, 0x4d, 0x10, 0x17, 0x12, 0x35, 0x0a, 0x31,
	0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x34, 0x58, 0x5f, 0x39,
	0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x33, 0x38, 0x58, 0x5f, 0x31, 0x38, 0x36, 0x4e,
	0x4d, 0x10, 0x18, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58,
	0x5f, 0x31, 0x39, 0x34, 0x58, 0x5f, 0x38, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x33,
	0x38, 0x58, 0x5f, 0x35, 0x38, 0x31, 0x4e, 0x4d, 0x10, 0x19, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61,
	0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x34, 0x58, 0x5f, 0x38, 0x30, 0x54,
	0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x33, 0x38, 0x58, 0x5f, 0x39, 0x37, 0x36, 0x4e, 0x4d, 0x10,
	0x1a, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31,
	0x39, 0x34, 0x58, 0x5f, 0x37, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x33, 0x39, 0x58,
	0x5f, 0x33, 0x37, 0x31, 0x4e, 0x4d, 0x10, 0x1b, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x34, 0x58, 0x5f, 0x37, 0x30, 0x54, 0x48, 0x5a,
	0x58, 0x5f, 0x31, 0x35, 0x33, 0x39, 0x58, 0x5f, 0x37, 0x36, 0x36, 0x4e, 0x4d, 0x10, 0x1c, 0x12,
	0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x34,
	0x58, 0x5f, 0x36, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x34, 0x30, 0x58, 0x5f, 0x31,
	0x36, 0x32, 0x4e, 0x4d, 0x10, 0x1d, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x34, 0x58, 0x5f, 0x36, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f,
	0x31, 0x35, 0x34, 0x30, 0x58, 0x5f, 0x35, 0x35, 0x37, 0x4e, 0x4d, 0x10, 0x1e, 0x12, 0x35, 0x0a,
	0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x34, 0x58, 0x5f,
	0x35, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x34, 0x30, 0x58, 0x5f, 0x39, 0x35, 0x33,
	0x4e, 0x4d, 0x10, 0x1f, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x58, 0x5f, 0x31, 0x39, 0x34, 0x58, 0x5f, 0x35, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35,
	0x34, 0x31, 0x58, 0x5f, 0x33, 0x34, 0x39, 0x4e, 0x4d, 0x10, 0x20, 0x12, 0x35, 0x0a, 0x31, 0x57,
	0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x34, 0x58, 0x5f, 0x34, 0x35,
	0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x34, 0x31, 0x58, 0x5f, 0x37, 0x34, 0x36, 0x4e, 0x4d,
	0x10, 0x21, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f,
	0x31, 0x39, 0x34, 0x58, 0x5f, 0x34, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x34, 0x32,
	0x58, 0x5f, 0x31, 0x34, 0x32, 0x4e, 0x4d, 0x10, 0x22, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76,
	0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x34, 0x58, 0x5f, 0x33, 0x35, 0x54, 0x48,
	0x5a, 0x58, 0x5f, 0x31, 0x35, 0x34, 0x32, 0x58, 0x5f, 0x35, 0x33, 0x39, 0x4e, 0x4d, 0x10, 0x23,
	0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39,
	0x34, 0x58, 0x5f, 0x33, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x34, 0x32, 0x58, 0x5f,
	0x39, 0x33, 0x36, 0x4e, 0x4d, 0x10, 0x24, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x34, 0x58, 0x5f, 0x32, 0x35, 0x54, 0x48, 0x5a, 0x58,
	0x5f, 0x31, 0x35, 0x34, 0x33, 0x58, 0x5f, 0x33, 0x33, 0x33, 0x4e, 0x4d, 0x10, 0x25, 0x12, 0x35,
	0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x34, 0x58,
	0x5f, 0x32, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x34, 0x33, 0x58, 0x5f, 0x37, 0x33,
	0x30, 0x4e, 0x4d, 0x10, 0x26, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x58, 0x5f, 0x31, 0x39, 0x34, 0x58, 0x5f, 0x31, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31,
	0x35, 0x34, 0x34, 0x58, 0x5f, 0x31, 0x32, 0x38, 0x4e, 0x4d, 0x10, 0x27, 0x12, 0x35, 0x0a, 0x31,
	0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x34, 0x58, 0x5f, 0x31,
	0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x34, 0x34, 0x58, 0x5f, 0x35, 0x32, 0x36, 0x4e,
	0x4d, 0x10, 0x28, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58,
	0x5f, 0x31, 0x39, 0x34, 0x58, 0x5f, 0x30, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x34,
	0x34, 0x58, 0x5f, 0x39, 0x32, 0x34, 0x4e, 0x4d, 0x10, 0x29, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61,
	0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x34, 0x58, 0x5f, 0x30, 0x30, 0x54,
	0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x34, 0x35, 0x58, 0x5f, 0x33, 0x32, 0x32, 0x4e, 0x4d, 0x10,
	0x2a, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31,
	0x39, 0x33, 0x58, 0x5f, 0x39, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x34, 0x35, 0x58,
	0x5f, 0x37, 0x32, 0x30, 0x4e, 0x4d, 0x10, 0x2b, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x33, 0x58, 0x5f, 0x39, 0x30, 0x54, 0x48, 0x5a,
	0x58, 0x5f, 0x31, 0x35, 0x34, 0x36, 0x58, 0x5f, 0x31, 0x31, 0x39, 0x4e, 0x4d, 0x10, 0x2c, 0x12,
	0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x33,
	0x58, 0x5f, 0x38, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x34, 0x36, 0x58, 0x5f, 0x35,
	0x31, 0x38, 0x4e, 0x4d, 0x10, 0x2d, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x33, 0x58, 0x5f, 0x38, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f,
	0x31, 0x35, 0x34, 0x36, 0x58, 0x5f, 0x39, 0x31, 0x37, 0x4e, 0x4d, 0x10, 0x2e, 0x12, 0x35, 0x0a,
	0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x33, 0x58, 0x5f,
	0x37, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x34, 0x37, 0x58, 0x5f, 0x33, 0x31, 0x36,
	0x4e, 0x4d, 0x10, 0x2f, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x58, 0x5f, 0x31, 0x39, 0x33, 0x58, 0x5f, 0x37, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35,
	0x34, 0x37, 0x58, 0x5f, 0x37, 0x31, 0x35, 0x4e, 0x4d, 0x10, 0x30, 0x12, 0x35, 0x0a, 0x31, 0x57,
	0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x33, 0x58, 0x5f, 0x36, 0x35,
	0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x34, 0x38, 0x58, 0x5f, 0x31, 0x31, 0x35, 0x4e, 0x4d,
	0x10, 0x31, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f,
	0x31, 0x39, 0x33, 0x58, 0x5f, 0x36, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x34, 0x38,
	0x58, 0x5f, 0x35, 0x31, 0x35, 0x4e, 0x4d, 0x10, 0x32, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76,
	0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x33, 0x58, 0x5f, 0x35, 0x35, 0x54, 0x48,
	0x5a, 0x58, 0x5f, 0x31, 0x35, 0x34, 0x38, 0x58, 0x5f, 0x39, 0x31, 0x35, 0x4e, 0x4d, 0x10, 0x33,
	0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39,
	0x33, 0x58, 0x5f, 0x35, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x34, 0x39, 0x58, 0x5f,
	0x33, 0x31, 0x35, 0x4e, 0x4d, 0x10, 0x34, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x33, 0x58, 0x5f, 0x34, 0x35, 0x54, 0x48, 0x5a, 0x58,
	0x5f, 0x31, 0x35, 0x34, 0x39, 0x58, 0x5f, 0x37, 0x31, 0x35, 0x4e, 0x4d, 0x10, 0x35, 0x12, 0x35,
	0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x33, 0x58,
	0x5f, 0x34, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x35, 0x30, 0x58, 0x5f, 0x31, 0x31,
	0x36, 0x4e, 0x4d, 0x10, 0x36, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x58, 0x5f, 0x31, 0x39, 0x33, 0x58, 0x5f, 0x33, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31,
	0x35, 0x35, 0x30, 0x58, 0x5f, 0x35, 0x31, 0x37, 0x4e, 0x4d, 0x10, 0x37, 0x12, 0x35, 0x0a, 0x31,
	0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x33, 0x58, 0x5f, 0x33,
	0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x35, 0x30, 0x58, 0x5f, 0x39, 0x31, 0x38, 0x4e,
	0x4d, 0x10, 0x38, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58,
	0x5f, 0x31, 0x39, 0x33, 0x58, 0x5f, 0x32, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x35,
	0x31, 0x58, 0x5f, 0x33, 0x31, 0x39, 0x4e, 0x4d, 0x10, 0x39, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61,
	0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x33, 0x58, 0x5f, 0x32, 0x30, 0x54,
	0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x35, 0x31, 0x58, 0x5f, 0x37, 0x32, 0x31, 0x4e, 0x4d, 0x10,
	0x3a, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31,
	0x39, 0x33, 0x58, 0x5f, 0x31, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x35, 0x32, 0x58,
	0x5f, 0x31, 0x32, 0x32, 0x4e, 0x4d, 0x10, 0x3b, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x33, 0x58, 0x5f, 0x31, 0x30, 0x54, 0x48, 0x5a,
	0x58, 0x5f, 0x31, 0x35, 0x35, 0x32, 0x58, 0x5f, 0x35, 0x32, 0x34, 0x4e, 0x4d, 0x10, 0x3c, 0x12,
	0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x33,
	0x58, 0x5f, 0x30, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x35, 0x32, 0x58, 0x5f, 0x39,
	0x32, 0x36, 0x4e, 0x4d, 0x10, 0x3d, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x33, 0x58, 0x5f, 0x30, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f,
	0x31, 0x35, 0x35, 0x33, 0x58, 0x5f, 0x33, 0x32, 0x39, 0x4e, 0x4d, 0x10, 0x3e, 0x12, 0x35, 0x0a,
	0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x32, 0x58, 0x5f,
	0x39, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x35, 0x33, 0x58, 0x5f, 0x37, 0x33, 0x31,
	0x4e, 0x4d, 0x10, 0x3f, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x58, 0x5f, 0x31, 0x39, 0x32, 0x58, 0x5f, 0x39, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35,
	0x35, 0x34, 0x58, 0x5f, 0x31, 0x33, 0x34, 0x4e, 0x4d, 0x10, 0x40, 0x12, 0x35, 0x0a, 0x31, 0x57,
	0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x32, 0x58, 0x5f, 0x38, 0x35,
	0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x35, 0x34, 0x58, 0x5f, 0x35, 0x33, 0x37, 0x4e, 0x4d,
	0x10, 0x41, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f,
	0x31, 0x39, 0x32, 0x58, 0x5f, 0x38, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x35, 0x34,
	0x58, 0x5f, 0x39, 0x34, 0x30, 0x4e, 0x4d, 0x10, 0x42, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76,
	0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x32, 0x58, 0x5f, 0x37, 0x35, 0x54, 0x48,
	0x5a, 0x58, 0x5f, 0x31, 0x35, 0x35, 0x35, 0x58, 0x5f, 0x33, 0x34, 0x33, 0x4e, 0x4d, 0x10, 0x43,
	0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39,
	0x32, 0x58, 0x5f, 0x37, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x35, 0x35, 0x58, 0x5f,
	0x37, 0x34, 0x37, 0x4e, 0x4d, 0x10, 0x44, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x32, 0x58, 0x5f, 0x36, 0x35, 0x54, 0x48, 0x5a, 0x58,
	0x5f, 0x31, 0x35, 0x35, 0x36, 0x58, 0x5f, 0x31, 0x35, 0x31, 0x4e, 0x4d, 0x10, 0x45, 0x12, 0x35,
	0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x32, 0x58,
	0x5f, 0x36, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x35, 0x36, 0x58, 0x5f, 0x35, 0x35,
	0x35, 0x4e, 0x4d, 0x10, 0x46, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x58, 0x5f, 0x31, 0x39, 0x32, 0x58, 0x5f, 0x35, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31,
	0x35, 0x35, 0x36, 0x58, 0x5f, 0x39, 0x35, 0x39, 0x4e, 0x4d, 0x10, 0x47, 0x12, 0x35, 0x0a, 0x31,
	0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x32, 0x58, 0x5f, 0x35,
	0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x35, 0x37, 0x58, 0x5f, 0x33, 0x36, 0x33, 0x4e,
	0x4d, 0x10, 0x48, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58,
	0x5f, 0x31, 0x39, 0x32, 0x58, 0x5f, 0x34, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x35,
	0x37, 0x58, 0x5f, 0x37, 0x36, 0x38, 0x4e, 0x4d, 0x10, 0x49, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61,
	0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x32, 0x58, 0x5f, 0x34, 0x30, 0x54,
	0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x35, 0x38, 0x58, 0x5f, 0x31, 0x37, 0x33, 0x4e, 0x4d, 0x10,
	0x4a, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31,
	0x39, 0x32, 0x58, 0x5f, 0x33, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x35, 0x38, 0x58,
	0x5f, 0x35, 0x37, 0x38, 0x4e, 0x4d, 0x10, 0x4b, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x32, 0x58, 0x5f, 0x33, 0x30, 0x54, 0x48, 0x5a,
	0x58, 0x5f, 0x31, 0x35, 0x35, 0x38, 0x58, 0x5f, 0x39, 0x38, 0x33, 0x4e, 0x4d, 0x10, 0x4c, 0x12,
	0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x32,
	0x58, 0x5f, 0x32, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x35, 0x39, 0x58, 0x5f, 0x33,
	0x38, 0x39, 0x4e, 0x4d, 0x10, 0x4d, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x32, 0x58, 0x5f, 0x32, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f,
	0x31, 0x35, 0x35, 0x39, 0x58, 0x5f, 0x37, 0x39, 0x34, 0x4e, 0x4d, 0x10, 0x4e, 0x12, 0x35, 0x0a,
	0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x32, 0x58, 0x5f,
	0x31, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x36, 0x30, 0x58, 0x5f, 0x32, 0x30, 0x30,
	0x4e, 0x4d, 0x10, 0x4f, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x58, 0x5f, 0x31, 0x39, 0x32, 0x58, 0x5f, 0x31, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35,
	0x36, 0x30, 0x58, 0x5f, 0x36, 0x30, 0x36, 0x4e, 0x4d, 0x10, 0x50, 0x12, 0x35, 0x0a, 0x31, 0x57,
	0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x32, 0x58, 0x5f, 0x30, 0x35,
	0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x36, 0x31, 0x58, 0x5f, 0x30, 0x31, 0x33, 0x4e, 0x4d,
	0x10, 0x51, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f,
	0x31, 0x39, 0x32, 0x58, 0x5f, 0x30, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x36, 0x31,
	0x58, 0x5f, 0x34, 0x31, 0x39, 0x4e, 0x4d, 0x10, 0x52, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76,
	0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x31, 0x58, 0x5f, 0x39, 0x35, 0x54, 0x48,
	0x5a, 0x58, 0x5f, 0x31, 0x35, 0x36, 0x31, 0x58, 0x5f, 0x38, 0x32, 0x36, 0x4e, 0x4d, 0x10, 0x53,
	0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39,
	0x31, 0x58, 0x5f, 0x39, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x36, 0x32, 0x58, 0x5f,
	0x32, 0x33, 0x33, 0x4e, 0x4d, 0x10, 0x54, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x31, 0x58, 0x5f, 0x38, 0x35, 0x54, 0x48, 0x5a, 0x58,
	0x5f, 0x31, 0x35, 0x36, 0x32, 0x58, 0x5f, 0x36, 0x34, 0x30, 0x4e, 0x4d, 0x10, 0x55, 0x12, 0x35,
	0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x31, 0x58,
	0x5f, 0x38, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x36, 0x33, 0x58, 0x5f, 0x30, 0x34,
	0x37, 0x4e, 0x4d, 0x10, 0x56, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x58, 0x5f, 0x31, 0x39, 0x31, 0x58, 0x5f, 0x37, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31,
	0x35, 0x36, 0x33, 0x58, 0x5f, 0x34, 0x35, 0x35, 0x4e, 0x4d, 0x10, 0x57, 0x12, 0x35, 0x0a, 0x31,
	0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x31, 0x58, 0x5f, 0x37,
	0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x36, 0x33, 0x58, 0x5f, 0x38, 0x36, 0x33, 0x4e,
	0x4d, 0x10, 0x58, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58,
	0x5f, 0x31, 0x39, 0x31, 0x58, 0x5f, 0x36, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x36,
	0x34, 0x58, 0x5f, 0x32, 0x37, 0x31, 0x4e, 0x4d, 0x10, 0x59, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61,
	0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x31, 0x58, 0x5f, 0x36, 0x30, 0x54,
	0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x36, 0x34, 0x58, 0x5f, 0x36, 0x37, 0x39, 0x4e, 0x4d, 0x10,
	0x5a, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31,
	0x39, 0x31, 0x58, 0x5f, 0x35, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x36, 0x35, 0x58,
	0x5f, 0x30, 0x38, 0x37, 0x4e, 0x4d, 0x10, 0x5b, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x31, 0x58, 0x5f, 0x35, 0x30, 0x54, 0x48, 0x5a,
	0x58, 0x5f, 0x31, 0x35, 0x36, 0x35, 0x58, 0x5f, 0x34, 0x39, 0x36, 0x4e, 0x4d, 0x10, 0x5c, 0x12,
	0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x31,
	0x58, 0x5f, 0x34, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x36, 0x35, 0x58, 0x5f, 0x39,
	0x30, 0x35, 0x4e, 0x4d, 0x10, 0x5d, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x31, 0x58, 0x5f, 0x34, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f,
	0x31, 0x35, 0x36, 0x36, 0x58, 0x5f, 0x33, 0x31, 0x34, 0x4e, 0x4d, 0x10, 0x5e, 0x12, 0x35, 0x0a,
	0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x31, 0x58, 0x5f,
	0x33, 0x35, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x36, 0x36, 0x58, 0x5f, 0x37, 0x32, 0x33,
	0x4e, 0x4d, 0x10, 0x5f, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x58, 0x5f, 0x31, 0x39, 0x31, 0x58, 0x5f, 0x33, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35,
	0x36, 0x37, 0x58, 0x5f, 0x31, 0x33, 0x33, 0x4e, 0x4d, 0x10, 0x60, 0x12, 0x35, 0x0a, 0x31, 0x57,
	0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x31, 0x58, 0x5f, 0x32, 0x35,
	0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x36, 0x37, 0x58, 0x5f, 0x35, 0x34, 0x32, 0x4e, 0x4d,
	0x10, 0x61, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f,
	0x31, 0x39, 0x31, 0x58, 0x5f, 0x32, 0x30, 0x54, 0x48, 0x5a, 0x58, 0x5f, 0x31, 0x35, 0x36, 0x37,
	0x58, 0x5f, 0x39, 0x35, 0x32, 0x4e, 0x4d, 0x10, 0x62, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x61, 0x76,
	0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x58, 0x5f, 0x31, 0x39, 0x31, 0x58, 0x5f, 0x31, 0x35, 0x54, 0x48,
	0x5a, 0x58, 0x5f, 0x31, 0x35, 0x36, 0x38, 0x58, 0x5f, 0x33, 0x36, 0x32, 0x4e, 0x4d, 0x10, 0x63,
	0x1a, 0xad, 0x0b, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x24, 0x0a, 0x0d, 0x68, 0x6f, 0x6c, 0x64, 0x6f, 0x66,
	0x66, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x68,
	0x6f, 0x6c, 0x64, 0x6f, 0x66, 0x66, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c,
	0x68, 0x6f, 0x6c, 0x64, 0x75, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x68, 0x6f, 0x6c, 0x64, 0x75, 0x70, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x72,
	0x12, 0x28, 0x0a, 0x0f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x62, 0x33,
	0x74, 0x63, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x62, 0x33, 0x74, 0x63, 0x61, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x62, 0x31, 0x74, 0x63, 0x61, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x62,
	0x31, 0x74, 0x63, 0x61, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x5f, 0x62, 0x32, 0x74, 0x63, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x62, 0x32, 0x74, 0x63, 0x61, 0x12, 0x2a,
	0x0a, 0x10, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x73, 0x64, 0x62, 0x65,
	0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x2d, 0x73, 0x64, 0x62, 0x65, 0x72, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x73, 0x66, 0x62, 0x65, 0x72, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2d,
	0x73, 0x66, 0x62, 0x65, 0x72, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x61, 0x6d, 0x70, 0x5f, 0x73,
	0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x64,
	0x61, 0x6d, 0x70, 0x2d, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x64, 0x61, 0x6d, 0x70, 0x5f, 0x72, 0x65, 0x75, 0x73, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x64, 0x61, 0x6d, 0x70, 0x2d, 0x72, 0x65, 0x75, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x64, 0x61, 0x6d, 0x70, 0x5f, 0x63, 0x65, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x64, 0x61, 0x6d, 0x70, 0x2d, 0x63, 0x65, 0x69, 0x6c, 0x69, 0x6e, 0x67,
	0x12, 0x24, 0x0a, 0x0d, 0x64, 0x61, 0x6d, 0x70, 0x5f, 0x64, 0x65, 0x63, 0x61, 0x79, 0x5f, 0x6f,
	0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x64, 0x61, 0x6d, 0x70, 0x2d, 0x64, 0x65,
	0x63, 0x61, 0x79, 0x2d, 0x6f, 0x6b, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x61, 0x6d, 0x70, 0x5f, 0x64,
	0x65, 0x63, 0x61, 0x79, 0x5f, 0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x64,
	0x61, 0x6d, 0x70, 0x2d, 0x64, 0x65, 0x63, 0x61, 0x79, 0x2d, 0x6e, 0x67, 0x12, 0x80, 0x01, 0x0a,
	0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x69, 0x66, 0x5f,
	0x64, 0x6f, 0x77, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x41, 0x6c, 0x61,
	0x72, 0x6d, 0x49, 0x66, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x52, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x2d, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x2d, 0x69, 0x66, 0x2d, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x1a,
	0xbe, 0x06, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x49, 0x66,
	0x44, 0x6f, 0x77, 0x6e, 0x73, 0x12, 0x8f, 0x01, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f,
	0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x69, 0x66, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x5d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76,
	0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72,
	0x74, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x49, 0x66, 0x44, 0x6f, 0x77, 0x6e,
	0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x49, 0x66, 0x44, 0x6f,
	0x77, 0x6e, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x2d, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x2d,
	0x69, 0x66, 0x2d, 0x64, 0x6f, 0x77, 0x6e, 0x1a, 0x96, 0x05, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x49, 0x66, 0x44, 0x6f, 0x77, 0x6e, 0x12, 0x87, 0x01, 0x0a,
	0x0a, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x67, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e,
	0x44, 0x65, 0x76, 0x6d, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73,
	0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x49, 0x66, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x49, 0x66, 0x44, 0x6f, 0x77, 0x6e,
	0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x61, 0x6c, 0x61, 0x72,
	0x6d, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x66, 0x5f, 0x64, 0x6f, 0x77,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x66, 0x2d, 0x64, 0x6f, 0x77, 0x6e,
	0x22, 0xdd, 0x03, 0x0a, 0x09, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13,
	0x0a, 0x0f, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x41, 0x55, 0x41, 0x49,
	0x53, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x42, 0x33, 0x54, 0x43, 0x41, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x6c, 0x61, 0x72,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x41, 0x49, 0x53, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d,
	0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x4f, 0x46, 0x10, 0x03, 0x12,
	0x11, 0x0a, 0x0d, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x4f, 0x4d,
	0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x4c, 0x4f, 0x50, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x4c, 0x4f, 0x53, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x6c, 0x61, 0x72,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x52, 0x44, 0x49, 0x10, 0x07, 0x12, 0x12, 0x0a, 0x0e,
	0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x52, 0x45, 0x49, 0x10, 0x08,
	0x12, 0x11, 0x0a, 0x0d, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4f, 0x4f,
	0x46, 0x10, 0x09, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x50, 0x41, 0x49, 0x53, 0x10, 0x0a, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x6c, 0x61, 0x72, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x52, 0x44, 0x49, 0x10, 0x0b, 0x12, 0x12, 0x0a, 0x0e, 0x41,
	0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x52, 0x45, 0x49, 0x10, 0x0c, 0x12,
	0x12, 0x0a, 0x0e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x50, 0x4c,
	0x4d, 0x10, 0x0d, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x52, 0x44, 0x4f, 0x4f, 0x4c, 0x10, 0x0e, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x6c, 0x61, 0x72,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x52, 0x4f, 0x4f, 0x4c, 0x10, 0x0f, 0x12, 0x14, 0x0a,
	0x10, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x44, 0x42, 0x45, 0x52,
	0x45, 0x10, 0x10, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x53, 0x46, 0x42, 0x45, 0x52, 0x45, 0x10, 0x11, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x6c, 0x61,
	0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x52, 0x4f, 0x4f, 0x4c, 0x10, 0x12, 0x12, 0x13,
	0x0a, 0x0f, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x55, 0x4e, 0x45,
	0x51, 0x10, 0x13, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x4c, 0x43, 0x44, 0x10, 0x14, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x42, 0x31, 0x54, 0x43, 0x41, 0x10, 0x28, 0x12, 0x13, 0x0a, 0x0f, 0x41,
	0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x32, 0x54, 0x43, 0x41, 0x10, 0x29,
	0x1a, 0x8e, 0x1f, 0x0a, 0x09, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x28,
	0x0a, 0x0f, 0x63, 0x72, 0x63, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x6f, 0x77,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x72, 0x63, 0x2d, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x2d, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x2d, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x3e, 0x0a, 0x1a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x68, 0x69, 0x67, 0x68, 0x2d, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x3c, 0x0a, 0x19, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x6c, 0x6f, 0x77, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x14, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x12, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x2d, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x40, 0x0a, 0x1b, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x68, 0x69, 0x67, 0x68,
	0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x3e, 0x0a, 0x1a, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x6c, 0x6f, 0x77,
	0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x12, 0x36, 0x0a, 0x16, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64,
	0x6f, 0x77, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x16, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x75, 0x70, 0x64, 0x6f, 0x77,
	0x6e, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x67, 0x0a, 0x0e, 0x65, 0x74, 0x68, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44,
	0x65, 0x76, 0x6d, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x41,
	0x6c, 0x61, 0x72, 0x6d, 0x2e, 0x45, 0x74, 0x68, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x6c, 0x61, 0x72,
	0x6d, 0x52, 0x0e, 0x65, 0x74, 0x68, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x61, 0x6c, 0x61, 0x72,
	0x6d, 0x12, 0x67, 0x0a, 0x0e, 0x73, 0x64, 0x68, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x61, 0x6c,
	0x61, 0x72, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50,
	0x6f, 0x72, 0x74, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x2e, 0x53, 0x64,
	0x68, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x52, 0x0e, 0x73, 0x64, 0x68, 0x2d,
	0x70, 0x6f, 0x72, 0x74, 0x2d, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x8d, 0x01, 0x0a, 0x1e, 0x61,
	0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x72, 0x63, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76,
	0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72,
	0x74, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x43, 0x72, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x48, 0x00, 0x52, 0x13, 0x63, 0x72, 0x63, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x6d, 0x0a, 0x13, 0x61, 0x6c,
	0x61, 0x72, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x63, 0x72,
	0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72,
	0x74, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x2e, 0x41, 0x6c, 0x61, 0x72,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x72, 0x63, 0x48, 0x00, 0x52,
	0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x63, 0x72, 0x63, 0x1a, 0x92, 0x05, 0x0a, 0x0c, 0x45, 0x74,
	0x68, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x6f, 0x77, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x2d, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2d, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x40, 0x0a, 0x1b, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x1b, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x68, 0x69,
	0x67, 0x68, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x3e, 0x0a, 0x1a,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6c, 0x6f, 0x77,
	0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x1a, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x6c,
	0x6f, 0x77, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x34, 0x0a, 0x15,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x12, 0x30, 0x0a, 0x13, 0x62, 0x69, 0x70, 0x38, 0x5f, 0x73, 0x64, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x13, 0x62, 0x69, 0x70, 0x38, 0x2d, 0x73, 0x64, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2d,
	0x64, 0x6f, 0x77, 0x6e, 0x12, 0x42, 0x0a, 0x1c, 0x62, 0x69, 0x70, 0x38, 0x5f, 0x73, 0x64, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x62, 0x69, 0x70, 0x38,
	0x2d, 0x73, 0x64, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x68, 0x69, 0x67, 0x68, 0x2d, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x62, 0x61, 0x64, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x62, 0x61, 0x64, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x62, 0x61,
	0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x62, 0x61, 0x64, 0x2d, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x44, 0x0a, 0x1d, 0x74, 0x78,
	0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x68, 0x69, 0x67,
	0x68, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x1d, 0x74, 0x78, 0x2d, 0x70, 0x61, 0x75, 0x73, 0x65, 0x2d, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x2d, 0x68, 0x69, 0x67, 0x68, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x12, 0x42, 0x0a, 0x1c, 0x74, 0x78, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x74, 0x78, 0x2d, 0x70, 0x61, 0x75, 0x73, 0x65,
	0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x6c, 0x6f, 0x77, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x12, 0x38, 0x0a, 0x17, 0x74, 0x78, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x74, 0x78, 0x2d, 0x70, 0x61, 0x75, 0x73, 0x65, 0x2d,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x1a, 0xba,
	0x03, 0x0a, 0x0c, 0x53, 0x64, 0x68, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12,
	0x28, 0x0a, 0x0f, 0x73, 0x64, 0x68, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x6f,
	0x77, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x73, 0x64, 0x68, 0x2d, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x2d, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x3a, 0x0a, 0x18, 0x73, 0x64, 0x68,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x73, 0x64, 0x68,
	0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x68, 0x69, 0x67, 0x68, 0x2d, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x38, 0x0a, 0x17, 0x73, 0x64, 0x68, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x73, 0x64, 0x68, 0x2d, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x2d, 0x6c, 0x6f, 0x77, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12,
	0x2e, 0x0a, 0x12, 0x73, 0x64, 0x68, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x73, 0x64, 0x68,
	0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12,
	0x36, 0x0a, 0x16, 0x73, 0x64, 0x68, 0x5f, 0x62, 0x31, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x16, 0x73, 0x64, 0x68, 0x2d, 0x62, 0x31, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x73, 0x64, 0x68, 0x5f, 0x62,
	0x31, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x73, 0x64, 0x68, 0x2d, 0x62, 0x31, 0x2d, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x36, 0x0a,
	0x16, 0x73, 0x64, 0x68, 0x5f, 0x62, 0x32, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x73,
	0x64, 0x68, 0x2d, 0x62, 0x32, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x73, 0x64, 0x68, 0x5f, 0x62, 0x32, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x73, 0x64, 0x68, 0x2d, 0x62, 0x32, 0x2d, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x1a, 0xb8, 0x03, 0x0a, 0x1b,
	0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x72, 0x63, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x93, 0x01, 0x0a, 0x13,
	0x63, 0x72, 0x63, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x61, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50,
	0x6f, 0x72, 0x74, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x2e, 0x41, 0x6c,
	0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x72, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2e, 0x43, 0x72, 0x63, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x36, 0x52, 0x13, 0x63, 0x72,
	0x63, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x1a, 0x82, 0x02, 0x0a, 0x12, 0x43, 0x72, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x36, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x72, 0x63, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x63, 0x72, 0x63, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x68, 0x69, 0x67, 0x68,
	0x12, 0x24, 0x0a, 0x0d, 0x63, 0x72, 0x63, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6c, 0x6f,
	0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x72, 0x63, 0x2d, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x2d, 0x6c, 0x6f, 0x77, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x72, 0x63, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x12, 0x63, 0x72, 0x63, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x30, 0x0a, 0x13, 0x63, 0x72, 0x63, 0x5f, 0x73, 0x68,
	0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x13, 0x63, 0x72, 0x63, 0x2d, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77,
	0x6e, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3c, 0x0a, 0x19, 0x63, 0x72, 0x63, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6c,
	0x6d, 0x5f, 0x74, 0x68, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x63, 0x72, 0x63,
	0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x2d, 0x61,
	0x6c, 0x6d, 0x2d, 0x74, 0x68, 0x72, 0x1a, 0xeb, 0x0a, 0x0a, 0x11, 0x41, 0x6c, 0x61, 0x72, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x72, 0x63, 0x12, 0x74, 0x0a, 0x0c,
	0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x50, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d,
	0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74,
	0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x50, 0x6f, 0x72,
	0x74, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x72, 0x63, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x76, 0x0a, 0x0d, 0x63, 0x72, 0x63, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x61, 0x6c,
	0x61, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50,
	0x6f, 0x72, 0x74, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x2e, 0x41, 0x6c,
	0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x72, 0x63, 0x2e,
	0x43, 0x72, 0x63, 0x50, 0x65, 0x72, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x52, 0x0d, 0x63, 0x72, 0x63,
	0x2d, 0x70, 0x65, 0x72, 0x2d, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x1a, 0xa9, 0x02, 0x0a, 0x0b, 0x4c,
	0x69, 0x6e, 0x6b, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x4a, 0x0a, 0x20, 0x6c, 0x69,
	0x6e, 0x6b, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x6c, 0x6d, 0x5f, 0x74,
	0x68, 0x72, 0x5f, 0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x20, 0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x2d, 0x61, 0x6c, 0x6d, 0x2d, 0x74, 0x68, 0x72, 0x2d, 0x63, 0x6f, 0x65, 0x66, 0x66,
	0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x1a, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x6c, 0x6d, 0x5f, 0x74, 0x68, 0x72, 0x5f, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x6c, 0x69, 0x6e, 0x6b,
	0x2d, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x2d, 0x61, 0x6c, 0x6d, 0x2d, 0x74, 0x68, 0x72,
	0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x21, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x73, 0x75, 0x6d, 0x5f, 0x74, 0x68, 0x72, 0x5f,
	0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x21, 0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x2d,
	0x72, 0x73, 0x75, 0x6d, 0x2d, 0x74, 0x68, 0x72, 0x2d, 0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63,
	0x69, 0x65, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x1b, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x73, 0x75, 0x6d, 0x5f, 0x74, 0x68, 0x72, 0x5f, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x6c, 0x69, 0x6e, 0x6b, 0x2d,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x2d, 0x72, 0x73, 0x75, 0x6d, 0x2d, 0x74, 0x68, 0x72,
	0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x1a, 0xbb, 0x06, 0x0a, 0x0b, 0x43, 0x72, 0x63, 0x50, 0x65,
	0x72, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x40, 0x0a, 0x1b, 0x63, 0x72, 0x63, 0x5f, 0x70, 0x65,
	0x72, 0x5f, 0x61, 0x6c, 0x6d, 0x5f, 0x74, 0x68, 0x72, 0x5f, 0x63, 0x6f, 0x65, 0x66, 0x66, 0x69,
	0x63, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x63, 0x72, 0x63,
	0x2d, 0x70, 0x65, 0x72, 0x2d, 0x61, 0x6c, 0x6d, 0x2d, 0x74, 0x68, 0x72, 0x2d, 0x63, 0x6f, 0x65,
	0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x63, 0x72, 0x63, 0x5f,
	0x70, 0x65, 0x72, 0x5f, 0x61, 0x6c, 0x6d, 0x5f, 0x74, 0x68, 0x72, 0x5f, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x63, 0x72, 0x63, 0x2d, 0x70, 0x65, 0x72,
	0x2d, 0x61, 0x6c, 0x6d, 0x2d, 0x74, 0x68, 0x72, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x42,
	0x0a, 0x1c, 0x63, 0x72, 0x63, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x72, 0x73, 0x75, 0x6d, 0x5f, 0x74,
	0x68, 0x72, 0x5f, 0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x63, 0x72, 0x63, 0x2d, 0x70, 0x65, 0x72, 0x2d, 0x72, 0x73,
	0x75, 0x6d, 0x2d, 0x74, 0x68, 0x72, 0x2d, 0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65,
	0x6e, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x63, 0x72, 0x63, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x72, 0x73,
	0x75, 0x6d, 0x5f, 0x74, 0x68, 0x72, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x16, 0x63, 0x72, 0x63, 0x2d, 0x70, 0x65, 0x72, 0x2d, 0x72, 0x73, 0x75, 0x6d,
	0x2d, 0x74, 0x68, 0x72, 0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x16, 0x63, 0x72,
	0x63, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x61, 0x6c, 0x6d, 0x5f, 0x6c, 0x73, 0x70, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x63, 0x72, 0x63, 0x2d,
	0x70, 0x65, 0x72, 0x2d, 0x61, 0x6c, 0x6d, 0x2d, 0x6c, 0x73, 0x70, 0x2d, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x63, 0x72, 0x63, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x61, 0x6c,
	0x6d, 0x5f, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x63, 0x72, 0x63, 0x2d, 0x70, 0x65, 0x72, 0x2d,
	0x61, 0x6c, 0x6d, 0x2d, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x7a, 0x0a, 0x0a, 0x63, 0x72, 0x63, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f,
	0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74,
	0x2e, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x72, 0x63, 0x2e, 0x43, 0x72, 0x63,
	0x50, 0x65, 0x72, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x2e, 0x43, 0x72, 0x63, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x52, 0x0a, 0x63, 0x72, 0x63, 0x2d, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x1a, 0xc3,
	0x02, 0x0a, 0x09, 0x43, 0x72, 0x63, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x17,
	0x63, 0x72, 0x63, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x5f, 0x77, 0x69, 0x6e,
	0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x63,
	0x72, 0x63, 0x2d, 0x70, 0x65, 0x72, 0x2d, 0x73, 0x61, 0x6d, 0x70, 0x2d, 0x77, 0x69, 0x6e, 0x2d,
	0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x3c, 0x0a, 0x19, 0x63, 0x72, 0x63, 0x5f, 0x70, 0x65,
	0x72, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x77, 0x69, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x63, 0x72, 0x63, 0x2d, 0x70,
	0x65, 0x72, 0x2d, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x2d, 0x77, 0x69, 0x6e, 0x2d, 0x6d, 0x61, 0x78,
	0x2d, 0x6e, 0x75, 0x6d, 0x12, 0x40, 0x0a, 0x1b, 0x63, 0x72, 0x63, 0x5f, 0x70, 0x65, 0x72, 0x5f,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x77, 0x69, 0x6e, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x63, 0x72, 0x63, 0x2d, 0x70,
	0x65, 0x72, 0x2d, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x2d, 0x77, 0x69, 0x6e, 0x2d, 0x61, 0x6c, 0x61,
	0x72, 0x6d, 0x2d, 0x6e, 0x75, 0x6d, 0x12, 0x42, 0x0a, 0x1c, 0x63, 0x72, 0x63, 0x5f, 0x70, 0x65,
	0x72, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x77, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6d, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x63, 0x72,
	0x63, 0x2d, 0x70, 0x65, 0x72, 0x2d, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x2d, 0x77, 0x69, 0x6e, 0x2d,
	0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x2d, 0x6e, 0x75, 0x6d, 0x12, 0x38, 0x0a, 0x17, 0x63, 0x72,
	0x63, 0x5f, 0x61, 0x6c, 0x67, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x63, 0x72, 0x63,
	0x2d, 0x61, 0x6c, 0x67, 0x2d, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2d, 0x66, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x6c, 0x0a, 0x0c, 0x4c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x1b, 0x0a, 0x17, 0x4c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x64,
	0x65, 0x5f, 0x4e, 0x4f, 0x4c, 0x4f, 0x4f, 0x50, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x00, 0x12, 0x1e,
	0x0a, 0x1a, 0x4c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x4c,
	0x4f, 0x43, 0x41, 0x4c, 0x4c, 0x4f, 0x4f, 0x50, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x01, 0x12, 0x1f,
	0x0a, 0x1b, 0x4c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x52,
	0x45, 0x4d, 0x4f, 0x54, 0x45, 0x4c, 0x4f, 0x4f, 0x50, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x02, 0x1a,
	0xe1, 0x01, 0x0a, 0x15, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x12, 0x74, 0x0a, 0x16, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x61, 0x6c,
	0x61, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x6d, 0x2e, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x41, 0x6c, 0x61, 0x72,
	0x6d, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x52, 0x16, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x2d, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x2d, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x1a,
	0x52, 0x0a, 0x14, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6c, 0x61, 0x72, 0x6d,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x6c, 0x61,
	0x72, 0x6d, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x2d, 0x69, 0x64, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x2f, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_huawei_devm_proto_rawDescOnce sync.Once
	file_huawei_devm_proto_rawDescData = file_huawei_devm_proto_rawDesc
)

func file_huawei_devm_proto_rawDescGZIP() []byte {
	file_huawei_devm_proto_rawDescOnce.Do(func() {
		file_huawei_devm_proto_rawDescData = protoimpl.X.CompressGZIP(file_huawei_devm_proto_rawDescData)
	})
	return file_huawei_devm_proto_rawDescData
}

var file_huawei_devm_proto_enumTypes = make([]protoimpl.EnumInfo, 344)
var file_huawei_devm_proto_msgTypes = make([]protoimpl.MessageInfo, 523)
var file_huawei_devm_proto_goTypes = []interface{}{
	(Devm_PhysicalEntitys_PhysicalEntity_Class)(0),                                                                           // 0: huawei_devm.Devm.PhysicalEntitys.PhysicalEntity.Class
	(Devm_PhysicalEntitys_PhysicalEntity_AdminState)(0),                                                                      // 1: huawei_devm.Devm.PhysicalEntitys.PhysicalEntity.AdminState
	(Devm_PhysicalEntitys_PhysicalEntity_RunningState)(0),                                                                    // 2: huawei_devm.Devm.PhysicalEntitys.PhysicalEntity.RunningState
	(Devm_PhysicalEntitys_PhysicalEntity_StandbyState)(0),                                                                    // 3: huawei_devm.Devm.PhysicalEntitys.PhysicalEntity.StandbyState
	(Devm_LogicEntitys_LogicEntity_Class)(0),                                                                                 // 4: huawei_devm.Devm.LogicEntitys.LogicEntity.Class
	(Devm_LogicEntitys_LogicEntity_OperState)(0),                                                                             // 5: huawei_devm.Devm.LogicEntitys.LogicEntity.OperState
	(Devm_Chassiss_Chassis_CurrentRunMode)(0),                                                                                // 6: huawei_devm.Devm.Chassiss.Chassis.CurrentRunMode
	(Devm_Chassiss_Chassis_NextRunMode)(0),                                                                                   // 7: huawei_devm.Devm.Chassiss.Chassis.NextRunMode
	(Devm_Chassiss_Chassis_FanAttribute_Workmode)(0),                                                                         // 8: huawei_devm.Devm.Chassiss.Chassis.FanAttribute.Workmode
	(Devm_Chassiss_Chassis_PowerSupplyAttribute_PmInputVoltage110)(0),                                                        // 9: huawei_devm.Devm.Chassiss.Chassis.PowerSupplyAttribute.PmInputVoltage110
	(Devm_Chassiss_Chassis_PowerSupplyAttribute_PowerSupplyMode)(0),                                                          // 10: huawei_devm.Devm.Chassiss.Chassis.PowerSupplyAttribute.PowerSupplyMode
	(Devm_Chassiss_Chassis_PowerSupplyAttribute_PowerSupplyTemp)(0),                                                          // 11: huawei_devm.Devm.Chassiss.Chassis.PowerSupplyAttribute.PowerSupplyTemp
	(Devm_Chassiss_Chassis_DustproofAttribute_Dustproofcheck)(0),                                                             // 12: huawei_devm.Devm.Chassiss.Chassis.DustproofAttribute.Dustproofcheck
	(Devm_Chassiss_Chassis_ChassisRunMode_CurrentRunMode)(0),                                                                 // 13: huawei_devm.Devm.Chassiss.Chassis.ChassisRunMode.CurrentRunMode
	(Devm_Chassiss_Chassis_ChassisRunMode_NextRunMode)(0),                                                                    // 14: huawei_devm.Devm.Chassiss.Chassis.ChassisRunMode.NextRunMode
	(Devm_Chassiss_Chassis_PmInputAttribute_PmInputMode)(0),                                                                  // 15: huawei_devm.Devm.Chassiss.Chassis.PmInputAttribute.PmInputMode
	(Devm_Chassiss_Chassis_ChassisSfuMode_CurrentSfuMode)(0),                                                                 // 16: huawei_devm.Devm.Chassiss.Chassis.ChassisSfuMode.CurrentSfuMode
	(Devm_Chassiss_Chassis_ChassisSfuMode_NextSfuMode)(0),                                                                    // 17: huawei_devm.Devm.Chassiss.Chassis.ChassisSfuMode.NextSfuMode
	(Devm_LogicContainers_LogicContainer_ContainerType)(0),                                                                   // 18: huawei_devm.Devm.LogicContainers.LogicContainer.ContainerType
	(Devm_LogicContainers_LogicContainer_EquipedEntityType)(0),                                                               // 19: huawei_devm.Devm.LogicContainers.LogicContainer.EquipedEntityType
	(Devm_LogicContainers_LogicContainer_SupportedEntityTypes_SupportedEntityType_EntityType)(0),                             // 20: huawei_devm.Devm.LogicContainers.LogicContainer.SupportedEntityTypes.SupportedEntityType.EntityType
	(Devm_Containers_Container_Present)(0),                                                                                   // 21: huawei_devm.Devm.Containers.Container.Present
	(Devm_MpuBoards_MpuBoard_LsRole)(0),                                                                                      // 22: huawei_devm.Devm.MpuBoards.MpuBoard.LsRole
	(Devm_MpuBoards_MpuBoard_Bras_FlowStatisticFrequency_Type)(0),                                                            // 23: huawei_devm.Devm.MpuBoards.MpuBoard.Bras.FlowStatisticFrequency.Type
	(Devm_MpuBoards_MpuBoard_L2Tp_ForwardMode_ModeValue)(0),                                                                  // 24: huawei_devm.Devm.MpuBoards.MpuBoard.L2Tp.ForwardMode.ModeValue
	(Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_Type)(0),                                                 // 25: huawei_devm.Devm.MpuBoards.MpuBoard.CpudefendDevm.BrasHostCars.BrasHostCar.Type
	(Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType)(0),                                                        // 26: huawei_devm.Devm.MpuBoards.MpuBoard.CpudefendDevm.SpuCars.SpuCar.CarType
	(Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms_NdAttackAlarm_Type)(0),                                   // 27: huawei_devm.Devm.MpuBoards.MpuBoard.CpudefendDevm.NdVlanCar.NdAttackAlarms.NdAttackAlarm.Type
	(Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_Level2Cars_Level2Car_Type)(0),                                           // 28: huawei_devm.Devm.MpuBoards.MpuBoard.CpudefendDevm.NdVlanCar.Level2Cars.Level2Car.Type
	(Devm_MpuBoards_MpuBoard_CmacPadding_Padding)(0),                                                                         // 29: huawei_devm.Devm.MpuBoards.MpuBoard.CmacPadding.Padding
	(Devm_MpuBoards_MpuBoard_Fim_ForwardMode)(0),                                                                             // 30: huawei_devm.Devm.MpuBoards.MpuBoard.Fim.ForwardMode
	(Devm_MpuBoards_MpuBoard_Fim_VlanMissEnable)(0),                                                                          // 31: huawei_devm.Devm.MpuBoards.MpuBoard.Fim.VlanMissEnable
	(Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Lldp)(0),                                                                  // 32: huawei_devm.Devm.MpuBoards.MpuBoard.LinkProtocolTransport.Lldp
	(Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Lacp)(0),                                                                  // 33: huawei_devm.Devm.MpuBoards.MpuBoard.LinkProtocolTransport.Lacp
	(Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Oam)(0),                                                                   // 34: huawei_devm.Devm.MpuBoards.MpuBoard.LinkProtocolTransport.Oam
	(Devm_MpuBoards_MpuBoard_LinkProtocolTransport_Esmc)(0),                                                                  // 35: huawei_devm.Devm.MpuBoards.MpuBoard.LinkProtocolTransport.Esmc
	(Devm_MpuBoards_MpuBoard_Loadbalance_HashArithmetic_Arithmetic)(0),                                                       // 36: huawei_devm.Devm.MpuBoards.MpuBoard.Loadbalance.HashArithmetic.Arithmetic
	(Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField_TrunkEcmp)(0),                                                  // 37: huawei_devm.Devm.MpuBoards.MpuBoard.Loadbalance.HashFields.HashField.TrunkEcmp
	(Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField_Material)(0),                                                   // 38: huawei_devm.Devm.MpuBoards.MpuBoard.Loadbalance.HashFields.HashField.Material
	(Devm_MpuBoards_MpuBoard_Loadbalance_HashMultipe_MultipeFlag)(0),                                                         // 39: huawei_devm.Devm.MpuBoards.MpuBoard.Loadbalance.HashMultipe.MultipeFlag
	(Devm_MpuBoards_MpuBoard_MplsForward_MplsHashMode_Hashcfg)(0),                                                            // 40: huawei_devm.Devm.MpuBoards.MpuBoard.MplsForward.MplsHashMode.Hashcfg
	(Devm_MpuBoards_MpuBoard_MplsForward_Mplsfrags_MplsfragEnable)(0),                                                        // 41: huawei_devm.Devm.MpuBoards.MpuBoard.MplsForward.Mplsfrags.MplsfragEnable
	(Devm_MpuBoards_MpuBoard_MplsForward_MplsLoadCtrwords_MplsloadCtrwordDisable)(0),                                         // 42: huawei_devm.Devm.MpuBoards.MpuBoard.MplsForward.MplsLoadCtrwords.MplsloadCtrwordDisable
	(Devm_MpuBoards_MpuBoard_Netstream_SamplerModes_SamplerMode_FlowType)(0),                                                 // 43: huawei_devm.Devm.MpuBoards.MpuBoard.Netstream.SamplerModes.SamplerMode.FlowType
	(Devm_MpuBoards_MpuBoard_Netstream_SamplerModes_SamplerMode_SamplerMode7)(0),                                             // 44: huawei_devm.Devm.MpuBoards.MpuBoard.Netstream.SamplerModes.SamplerMode.SamplerMode7
	(Devm_MpuBoards_MpuBoard_Netstream_SequenceMode_Mode)(0),                                                                 // 45: huawei_devm.Devm.MpuBoards.MpuBoard.Netstream.SequenceMode.Mode
	(Devm_MpuBoards_MpuBoard_Netstream_ExportHosts_ExportHost_FlowType)(0),                                                   // 46: huawei_devm.Devm.MpuBoards.MpuBoard.Netstream.ExportHosts.ExportHost.FlowType
	(Devm_MpuBoards_MpuBoard_Netstream_ExportHosts_ExportHost_AddressType)(0),                                                // 47: huawei_devm.Devm.MpuBoards.MpuBoard.Netstream.ExportHosts.ExportHost.AddressType
	(Devm_MpuBoards_MpuBoard_Pbr_RoutingFilters_RoutingFilter_Type)(0),                                                       // 48: huawei_devm.Devm.MpuBoards.MpuBoard.Pbr.RoutingFilters.RoutingFilter.Type
	(Devm_MpuBoards_MpuBoard_Pbr_RoutingFilters_RoutingFilter_RoutingType)(0),                                                // 49: huawei_devm.Devm.MpuBoards.MpuBoard.Pbr.RoutingFilters.RoutingFilter.RoutingType
	(Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch_Type)(0),                                             // 50: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.TrafficPolicyMatchs.TrafficPolicyMatch.Type
	(Devm_MpuBoards_MpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Direction)(0),                                        // 51: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.PqSchedulePrioritys.PqSchedulePriority.Direction
	(Devm_MpuBoards_MpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Mode)(0),                                             // 52: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.PqSchedulePrioritys.PqSchedulePriority.Mode
	(Devm_MpuBoards_MpuBoard_Qos_PqSchedulePriorityOnCards_PqSchedulePriorityOnCard_Mode)(0),                                 // 53: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.PqSchedulePriorityOnCards.PqSchedulePriorityOnCard.Mode
	(Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ServiceClass)(0),                                     // 54: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.MulticastPortQueues.MulticastPortQueue.ServiceClass
	(Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_QueueScheduleMode)(0),                                // 55: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.MulticastPortQueues.MulticastPortQueue.QueueScheduleMode
	(Devm_MpuBoards_MpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingTypeMode_ShapingType)(0),                      // 56: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.MulticastPortShaping.ShapingParameters_ShapingTypeMode.ShapingType
	(Devm_MpuBoards_MpuBoard_Qos_ExpPhbDisable_ForwardType)(0),                                                               // 57: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.ExpPhbDisable.ForwardType
	(Devm_MpuBoards_MpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold_ServiceClass)(0),                                 // 58: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.PacketBlockThresholds.PacketBlockThreshold.ServiceClass
	(Devm_MpuBoards_MpuBoard_Qos_ChannelAlarms_ChannelAlarm_AlarmType)(0),                                                    // 59: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.ChannelAlarms.ChannelAlarm.AlarmType
	(Devm_MpuBoards_MpuBoard_Qos_ChannelAlarms_ChannelAlarm_Pool)(0),                                                         // 60: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.ChannelAlarms.ChannelAlarm.Pool
	(Devm_MpuBoards_MpuBoard_Qos_ChannelProfilePrecision_Type)(0),                                                            // 61: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.ChannelProfilePrecision.Type
	(Devm_MpuBoards_MpuBoard_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass)(0),                                             // 62: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.PortQueueAlarms.PortQueueAlarm.ServiceClass
	(Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_ServiceClass)(0),                                       // 63: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.QueueDiscardAlarms.QueueDiscardAlarm.ServiceClass
	(Devm_MpuBoards_MpuBoard_Qos_BurstSizes_BurstSize_ServiceClass)(0),                                                       // 64: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.BurstSizes.BurstSize.ServiceClass
	(Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareThresholds_GlobalBufferShareThreshold_Direction)(0),                        // 65: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.GlobalBufferShareThresholds.GlobalBufferShareThreshold.Direction
	(Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_ServiceClass)(0),                             // 66: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.GlobalBufferShareQueues.GlobalBufferShareQueue.ServiceClass
	(Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_Direction)(0),                                // 67: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.GlobalBufferShareQueues.GlobalBufferShareQueue.Direction
	(Devm_MpuBoards_MpuBoard_Qos_UserQueueResource8CosEnhances_UserQueueResource8CosEnhance_Direction)(0),                    // 68: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.UserQueueResource8CosEnhances.UserQueueResource8CosEnhance.Direction
	(Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_LoopLevelThresholds_LoopLevelThreshold_InterfaceType)(0),                       // 69: huawei_devm.Devm.MpuBoards.MpuBoard.Soc.L2LoopDetect.LoopLevelThresholds.LoopLevelThreshold.InterfaceType
	(Devm_MpuBoards_MpuBoard_UnicastForward_GreTtlMode_TtlMode)(0),                                                           // 70: huawei_devm.Devm.MpuBoards.MpuBoard.UnicastForward.GreTtlMode.TtlMode
	(Devm_MpuBoards_MpuBoard_Dcb_DeadlockRecoveryBehavior_Behavior)(0),                                                       // 71: huawei_devm.Devm.MpuBoards.MpuBoard.Dcb.DeadlockRecoveryBehavior.Behavior
	(Devm_MpuBoards_MpuBoard_Dcb_PfcMappingType_Type)(0),                                                                     // 72: huawei_devm.Devm.MpuBoards.MpuBoard.Dcb.PfcMappingType.Type
	(Devm_LpuBoards_LpuBoard_ServiceType)(0),                                                                                 // 73: huawei_devm.Devm.LpuBoards.LpuBoard.ServiceType
	(Devm_LpuBoards_LpuBoard_NextServiceType)(0),                                                                             // 74: huawei_devm.Devm.LpuBoards.LpuBoard.NextServiceType
	(Devm_LpuBoards_LpuBoard_Bras_FlowStatisticFrequency_Type)(0),                                                            // 75: huawei_devm.Devm.LpuBoards.LpuBoard.Bras.FlowStatisticFrequency.Type
	(Devm_LpuBoards_LpuBoard_L2Tp_ForwardMode_ModeValue)(0),                                                                  // 76: huawei_devm.Devm.LpuBoards.LpuBoard.L2Tp.ForwardMode.ModeValue
	(Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_Type)(0),                                                 // 77: huawei_devm.Devm.LpuBoards.LpuBoard.CpudefendDevm.BrasHostCars.BrasHostCar.Type
	(Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar_CarType)(0),                                                        // 78: huawei_devm.Devm.LpuBoards.LpuBoard.CpudefendDevm.SpuCars.SpuCar.CarType
	(Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms_NdAttackAlarm_Type)(0),                                   // 79: huawei_devm.Devm.LpuBoards.LpuBoard.CpudefendDevm.NdVlanCar.NdAttackAlarms.NdAttackAlarm.Type
	(Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_Level2Cars_Level2Car_Type)(0),                                           // 80: huawei_devm.Devm.LpuBoards.LpuBoard.CpudefendDevm.NdVlanCar.Level2Cars.Level2Car.Type
	(Devm_LpuBoards_LpuBoard_Driver_L3Clocks_L3Clock_L3ClockState)(0),                                                        // 81: huawei_devm.Devm.LpuBoards.LpuBoard.Driver.L3Clocks.L3Clock.L3ClockState
	(Devm_LpuBoards_LpuBoard_CmacPadding_Padding)(0),                                                                         // 82: huawei_devm.Devm.LpuBoards.LpuBoard.CmacPadding.Padding
	(Devm_LpuBoards_LpuBoard_Fim_ForwardMode)(0),                                                                             // 83: huawei_devm.Devm.LpuBoards.LpuBoard.Fim.ForwardMode
	(Devm_LpuBoards_LpuBoard_Fim_VlanMissEnable)(0),                                                                          // 84: huawei_devm.Devm.LpuBoards.LpuBoard.Fim.VlanMissEnable
	(Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Lldp)(0),                                                                  // 85: huawei_devm.Devm.LpuBoards.LpuBoard.LinkProtocolTransport.Lldp
	(Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Lacp)(0),                                                                  // 86: huawei_devm.Devm.LpuBoards.LpuBoard.LinkProtocolTransport.Lacp
	(Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Oam)(0),                                                                   // 87: huawei_devm.Devm.LpuBoards.LpuBoard.LinkProtocolTransport.Oam
	(Devm_LpuBoards_LpuBoard_LinkProtocolTransport_Esmc)(0),                                                                  // 88: huawei_devm.Devm.LpuBoards.LpuBoard.LinkProtocolTransport.Esmc
	(Devm_LpuBoards_LpuBoard_Loadbalance_HashArithmetic_Arithmetic)(0),                                                       // 89: huawei_devm.Devm.LpuBoards.LpuBoard.Loadbalance.HashArithmetic.Arithmetic
	(Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField_TrunkEcmp)(0),                                                  // 90: huawei_devm.Devm.LpuBoards.LpuBoard.Loadbalance.HashFields.HashField.TrunkEcmp
	(Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField_Material)(0),                                                   // 91: huawei_devm.Devm.LpuBoards.LpuBoard.Loadbalance.HashFields.HashField.Material
	(Devm_LpuBoards_LpuBoard_Loadbalance_HashMultipe_MultipeFlag)(0),                                                         // 92: huawei_devm.Devm.LpuBoards.LpuBoard.Loadbalance.HashMultipe.MultipeFlag
	(Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_Type)(0),                                                                 // 93: huawei_devm.Devm.LpuBoards.LpuBoard.Loadbalance.Hashs.Hash.Type
	(Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_TrunkEcmp)(0),                                                            // 94: huawei_devm.Devm.LpuBoards.LpuBoard.Loadbalance.Hashs.Hash.TrunkEcmp
	(Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_Arithmetic)(0),                                                           // 95: huawei_devm.Devm.LpuBoards.LpuBoard.Loadbalance.Hashs.Hash.Arithmetic
	(Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash_Material)(0),                                                             // 96: huawei_devm.Devm.LpuBoards.LpuBoard.Loadbalance.Hashs.Hash.Material
	(Devm_LpuBoards_LpuBoard_MplsForward_MplsHashMode_Hashcfg)(0),                                                            // 97: huawei_devm.Devm.LpuBoards.LpuBoard.MplsForward.MplsHashMode.Hashcfg
	(Devm_LpuBoards_LpuBoard_MplsForward_Mplsfrags_MplsfragEnable)(0),                                                        // 98: huawei_devm.Devm.LpuBoards.LpuBoard.MplsForward.Mplsfrags.MplsfragEnable
	(Devm_LpuBoards_LpuBoard_MplsForward_MplsLoadCtrwords_MplsloadCtrwordDisable)(0),                                         // 99: huawei_devm.Devm.LpuBoards.LpuBoard.MplsForward.MplsLoadCtrwords.MplsloadCtrwordDisable
	(Devm_LpuBoards_LpuBoard_Netstream_SamplerModes_SamplerMode_FlowType)(0),                                                 // 100: huawei_devm.Devm.LpuBoards.LpuBoard.Netstream.SamplerModes.SamplerMode.FlowType
	(Devm_LpuBoards_LpuBoard_Netstream_SamplerModes_SamplerMode_SamplerMode7)(0),                                             // 101: huawei_devm.Devm.LpuBoards.LpuBoard.Netstream.SamplerModes.SamplerMode.SamplerMode7
	(Devm_LpuBoards_LpuBoard_Netstream_SequenceMode_Mode)(0),                                                                 // 102: huawei_devm.Devm.LpuBoards.LpuBoard.Netstream.SequenceMode.Mode
	(Devm_LpuBoards_LpuBoard_Netstream_ExportHosts_ExportHost_FlowType)(0),                                                   // 103: huawei_devm.Devm.LpuBoards.LpuBoard.Netstream.ExportHosts.ExportHost.FlowType
	(Devm_LpuBoards_LpuBoard_Netstream_ExportHosts_ExportHost_AddressType)(0),                                                // 104: huawei_devm.Devm.LpuBoards.LpuBoard.Netstream.ExportHosts.ExportHost.AddressType
	(Devm_LpuBoards_LpuBoard_Pbr_RoutingFilters_RoutingFilter_Type)(0),                                                       // 105: huawei_devm.Devm.LpuBoards.LpuBoard.Pbr.RoutingFilters.RoutingFilter.Type
	(Devm_LpuBoards_LpuBoard_Pbr_RoutingFilters_RoutingFilter_RoutingType)(0),                                                // 106: huawei_devm.Devm.LpuBoards.LpuBoard.Pbr.RoutingFilters.RoutingFilter.RoutingType
	(Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch_Type)(0),                                             // 107: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.TrafficPolicyMatchs.TrafficPolicyMatch.Type
	(Devm_LpuBoards_LpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Direction)(0),                                        // 108: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.PqSchedulePrioritys.PqSchedulePriority.Direction
	(Devm_LpuBoards_LpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority_Mode)(0),                                             // 109: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.PqSchedulePrioritys.PqSchedulePriority.Mode
	(Devm_LpuBoards_LpuBoard_Qos_PqSchedulePriorityOnCards_PqSchedulePriorityOnCard_Mode)(0),                                 // 110: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.PqSchedulePriorityOnCards.PqSchedulePriorityOnCard.Mode
	(Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ServiceClass)(0),                                     // 111: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.MulticastPortQueues.MulticastPortQueue.ServiceClass
	(Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_QueueScheduleMode)(0),                                // 112: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.MulticastPortQueues.MulticastPortQueue.QueueScheduleMode
	(Devm_LpuBoards_LpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingTypeMode_ShapingType)(0),                      // 113: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.MulticastPortShaping.ShapingParameters_ShapingTypeMode.ShapingType
	(Devm_LpuBoards_LpuBoard_Qos_ExpPhbDisable_ForwardType)(0),                                                               // 114: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.ExpPhbDisable.ForwardType
	(Devm_LpuBoards_LpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold_ServiceClass)(0),                                 // 115: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.PacketBlockThresholds.PacketBlockThreshold.ServiceClass
	(Devm_LpuBoards_LpuBoard_Qos_ChannelAlarms_ChannelAlarm_AlarmType)(0),                                                    // 116: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.ChannelAlarms.ChannelAlarm.AlarmType
	(Devm_LpuBoards_LpuBoard_Qos_ChannelAlarms_ChannelAlarm_Pool)(0),                                                         // 117: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.ChannelAlarms.ChannelAlarm.Pool
	(Devm_LpuBoards_LpuBoard_Qos_ChannelProfilePrecision_Type)(0),                                                            // 118: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.ChannelProfilePrecision.Type
	(Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate_SpecificServiceClasss_SpecificServiceClass_ServiceClass)(0), // 119: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.MulticastShapingServiceTemplate.SpecificServiceClasss.SpecificServiceClass.ServiceClass
	(Devm_LpuBoards_LpuBoard_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass)(0),                                             // 120: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.PortQueueAlarms.PortQueueAlarm.ServiceClass
	(Devm_LpuBoards_LpuBoard_Qos_MulticastShapers_MulticastShaper_Priority)(0),                                               // 121: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.MulticastShapers.MulticastShaper.Priority
	(Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_ServiceClass)(0),                                       // 122: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.QueueDiscardAlarms.QueueDiscardAlarm.ServiceClass
	(Devm_LpuBoards_LpuBoard_Qos_BurstSizes_BurstSize_ServiceClass)(0),                                                       // 123: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.BurstSizes.BurstSize.ServiceClass
	(Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareThresholds_GlobalBufferShareThreshold_Direction)(0),                        // 124: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.GlobalBufferShareThresholds.GlobalBufferShareThreshold.Direction
	(Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_ServiceClass)(0),                             // 125: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.GlobalBufferShareQueues.GlobalBufferShareQueue.ServiceClass
	(Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue_Direction)(0),                                // 126: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.GlobalBufferShareQueues.GlobalBufferShareQueue.Direction
	(Devm_LpuBoards_LpuBoard_Qos_UserQueueResource8CosEnhances_UserQueueResource8CosEnhance_Direction)(0),                    // 127: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.UserQueueResource8CosEnhances.UserQueueResource8CosEnhance.Direction
	(Devm_LpuBoards_LpuBoard_Qos_ChannelAutoAdjustSwitch_AutoAdjustQuantity)(0),                                              // 128: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.ChannelAutoAdjustSwitch.AutoAdjustQuantity
	(Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_LoopLevelThresholds_LoopLevelThreshold_InterfaceType)(0),                       // 129: huawei_devm.Devm.LpuBoards.LpuBoard.Soc.L2LoopDetect.LoopLevelThresholds.LoopLevelThreshold.InterfaceType
	(Devm_LpuBoards_LpuBoard_UnicastForward_GreTtlMode_TtlMode)(0),                                                           // 130: huawei_devm.Devm.LpuBoards.LpuBoard.UnicastForward.GreTtlMode.TtlMode
	(Devm_LpuBoards_LpuBoard_UnicastForward_L3LcsCapacitys_SlotL3LcsCapacity_ServiceType)(0),                                 // 131: huawei_devm.Devm.LpuBoards.LpuBoard.UnicastForward.L3LcsCapacitys.SlotL3LcsCapacity.ServiceType
	(Devm_LpuBoards_LpuBoard_UnicastForward_VxlanRdrTrunks_VxlanRdrTrunk_RedirectType)(0),                                    // 132: huawei_devm.Devm.LpuBoards.LpuBoard.UnicastForward.VxlanRdrTrunks.VxlanRdrTrunk.RedirectType
	(Devm_LpuBoards_LpuBoard_Dcb_DeadlockRecoveryBehavior_Behavior)(0),                                                       // 133: huawei_devm.Devm.LpuBoards.LpuBoard.Dcb.DeadlockRecoveryBehavior.Behavior
	(Devm_LpuBoards_LpuBoard_Dcb_PfcMappingType_Type)(0),                                                                     // 134: huawei_devm.Devm.LpuBoards.LpuBoard.Dcb.PfcMappingType.Type
	(Devm_Cards_Card_InitStatus)(0),                                                                                          // 135: huawei_devm.Devm.Cards.Card.InitStatus
	(Devm_Cards_Card_RegisterStatus)(0),                                                                                      // 136: huawei_devm.Devm.Cards.Card.RegisterStatus
	(Devm_Cards_Card_Pic_LogicStatus)(0),                                                                                     // 137: huawei_devm.Devm.Cards.Card.Pic.LogicStatus
	(Devm_Cards_Card_CardTdmParam_Impedance)(0),                                                                              // 138: huawei_devm.Devm.Cards.Card.CardTdmParam.Impedance
	(Devm_Cards_Card_ServiceMode_Portrate)(0),                                                                                // 139: huawei_devm.Devm.Cards.Card.ServiceMode.Portrate
	(Devm_Cards_Card_ServiceMode_BandwidthMode)(0),                                                                           // 140: huawei_devm.Devm.Cards.Card.ServiceMode.BandwidthMode
	(Devm_Cards_Card_PortGroupModes_PortGroupMode_ModeType)(0),                                                               // 141: huawei_devm.Devm.Cards.Card.PortGroupModes.PortGroupMode.ModeType
	(Devm_Cards_Card_QueuePriority_QueuePriEnable)(0),                                                                        // 142: huawei_devm.Devm.Cards.Card.QueuePriority.QueuePriEnable
	(Devm_Cards_Card_FrameFormat_FrameFormat5)(0),                                                                            // 143: huawei_devm.Devm.Cards.Card.FrameFormat.FrameFormat5
	(Devm_Cards_Card_ProcessMode_ShieldMode)(0),                                                                              // 144: huawei_devm.Devm.Cards.Card.ProcessMode.ShieldMode
	(Devm_Cards_Card_ProcessMode_FaultProcessModeStatus)(0),                                                                  // 145: huawei_devm.Devm.Cards.Card.ProcessMode.FaultProcessModeStatus
	(Devm_Cards_Card_ProcessMode_ProcessMode5)(0),                                                                            // 146: huawei_devm.Devm.Cards.Card.ProcessMode.ProcessMode5
	(Devm_Cards_Card_EmSet_SingleMode)(0),                                                                                    // 147: huawei_devm.Devm.Cards.Card.EmSet.SingleMode
	(Devm_Cards_Card_EmSet_UserlineMode)(0),                                                                                  // 148: huawei_devm.Devm.Cards.Card.EmSet.UserlineMode
	(Devm_Cards_Card_ServiceSwitch_ServiceSwitchMode)(0),                                                                     // 149: huawei_devm.Devm.Cards.Card.ServiceSwitch.ServiceSwitchMode
	(Devm_Ports_Port_AdminState)(0),                                                                                          // 150: huawei_devm.Devm.Ports.Port.AdminState
	(Devm_Ports_Port_Type)(0),                                                                                                // 151: huawei_devm.Devm.Ports.Port.Type
	(Devm_Ports_Port_HardType)(0),                                                                                            // 152: huawei_devm.Devm.Ports.Port.HardType
	(Devm_Ports_Port_LoopbackMode)(0),                                                                                        // 153: huawei_devm.Devm.Ports.Port.LoopbackMode
	(Devm_Ports_Port_MediumType)(0),                                                                                          // 154: huawei_devm.Devm.Ports.Port.MediumType
	(Devm_Ports_Port_Ethernet_Speed)(0),                                                                                      // 155: huawei_devm.Devm.Ports.Port.Ethernet.Speed
	(Devm_Ports_Port_Ethernet_Duplex)(0),                                                                                     // 156: huawei_devm.Devm.Ports.Port.Ethernet.Duplex
	(Devm_Ports_Port_Ethernet_Negotiation)(0),                                                                                // 157: huawei_devm.Devm.Ports.Port.Ethernet.Negotiation
	(Devm_Ports_Port_Ethernet_NegotiationMode)(0),                                                                            // 158: huawei_devm.Devm.Ports.Port.Ethernet.NegotiationMode
	(Devm_Ports_Port_Ethernet_TransMode)(0),                                                                                  // 159: huawei_devm.Devm.Ports.Port.Ethernet.TransMode
	(Devm_Ports_Port_Ethernet_SpeedSwitchMode)(0),                                                                            // 160: huawei_devm.Devm.Ports.Port.Ethernet.SpeedSwitchMode
	(Devm_Ports_Port_Ethernet_BitError)(0),                                                                                   // 161: huawei_devm.Devm.Ports.Port.Ethernet.BitError
	(Devm_Ports_Port_Ethernet_TriggerTimeType)(0),                                                                            // 162: huawei_devm.Devm.Ports.Port.Ethernet.TriggerTimeType
	(Devm_Ports_Port_Ethernet_TxPowerCfgType)(0),                                                                             // 163: huawei_devm.Devm.Ports.Port.Ethernet.TxPowerCfgType
	(Devm_Ports_Port_Ethernet_FecMode)(0),                                                                                    // 164: huawei_devm.Devm.Ports.Port.Ethernet.FecMode
	(Devm_Ports_Port_Ethernet_EthFecMode)(0),                                                                                 // 165: huawei_devm.Devm.Ports.Port.Ethernet.EthFecMode
	(Devm_Ports_Port_Ethernet_Flowctl)(0),                                                                                    // 166: huawei_devm.Devm.Ports.Port.Ethernet.Flowctl
	(Devm_Ports_Port_Ethernet_GfMediaType)(0),                                                                                // 167: huawei_devm.Devm.Ports.Port.Ethernet.GfMediaType
	(Devm_Ports_Port_Ethernet_HoldUp)(0),                                                                                     // 168: huawei_devm.Devm.Ports.Port.Ethernet.HoldUp
	(Devm_Ports_Port_Ethernet_Txipg)(0),                                                                                      // 169: huawei_devm.Devm.Ports.Port.Ethernet.Txipg
	(Devm_Ports_Port_Ethernet_SwitchSpeed)(0),                                                                                // 170: huawei_devm.Devm.Ports.Port.Ethernet.SwitchSpeed
	(Devm_Ports_Port_Ethernet_PromiscuousMode)(0),                                                                            // 171: huawei_devm.Devm.Ports.Port.Ethernet.PromiscuousMode
	(Devm_Ports_Port_Ethernet_FlexphySpeed)(0),                                                                               // 172: huawei_devm.Devm.Ports.Port.Ethernet.FlexphySpeed
	(Devm_Ports_Port_Ethernet_MacItfMode)(0),                                                                                 // 173: huawei_devm.Devm.Ports.Port.Ethernet.MacItfMode
	(Devm_Ports_Port_Ethernet_RemoteFault)(0),                                                                                // 174: huawei_devm.Devm.Ports.Port.Ethernet.RemoteFault
	(Devm_Ports_Port_Ethernet_LosTrapDownHold)(0),                                                                            // 175: huawei_devm.Devm.Ports.Port.Ethernet.LosTrapDownHold
	(Devm_Ports_Port_Ethernet_DownFilter)(0),                                                                                 // 176: huawei_devm.Devm.Ports.Port.Ethernet.DownFilter
	(Devm_Ports_Port_Ethernet_LocalFaultStatus)(0),                                                                           // 177: huawei_devm.Devm.Ports.Port.Ethernet.LocalFaultStatus
	(Devm_Ports_Port_Ethernet_RomoteFaultStatus)(0),                                                                          // 178: huawei_devm.Devm.Ports.Port.Ethernet.RomoteFaultStatus
	(Devm_Ports_Port_Ethernet_DuplexAuto)(0),                                                                                 // 179: huawei_devm.Devm.Ports.Port.Ethernet.DuplexAuto
	(Devm_Ports_Port_Ethernet_ComboMode)(0),                                                                                  // 180: huawei_devm.Devm.Ports.Port.Ethernet.ComboMode
	(Devm_Ports_Port_Ethernet_FaultDetect)(0),                                                                                // 181: huawei_devm.Devm.Ports.Port.Ethernet.FaultDetect
	(Devm_Ports_Port_Ethernet_StatisticsIncludeInterframe)(0),                                                                // 182: huawei_devm.Devm.Ports.Port.Ethernet.StatisticsIncludeInterframe
	(Devm_Ports_Port_Ethernet_LinkFlapProtection)(0),                                                                         // 183: huawei_devm.Devm.Ports.Port.Ethernet.LinkFlapProtection
	(Devm_Ports_Port_Ethernet_SpeedAutos)(0),                                                                                 // 184: huawei_devm.Devm.Ports.Port.Ethernet.SpeedAutos
	(Devm_Ports_Port_Ethernet_Combo)(0),                                                                                      // 185: huawei_devm.Devm.Ports.Port.Ethernet.Combo
	(Devm_Ports_Port_Ethernet_Eee)(0),                                                                                        // 186: huawei_devm.Devm.Ports.Port.Ethernet.Eee
	(Devm_Ports_Port_Ethernet_EthWanAttr_FrameFormat)(0),                                                                     // 187: huawei_devm.Devm.Ports.Port.Ethernet.EthWanAttr.FrameFormat
	(Devm_Ports_Port_Ethernet_EthWanAttr_J0Mode)(0),                                                                          // 188: huawei_devm.Devm.Ports.Port.Ethernet.EthWanAttr.J0Mode
	(Devm_Ports_Port_Ethernet_EthWanAttr_J1Mode)(0),                                                                          // 189: huawei_devm.Devm.Ports.Port.Ethernet.EthWanAttr.J1Mode
	(Devm_Ports_Port_Ethernet_EthWanAttr_Clock)(0),                                                                           // 190: huawei_devm.Devm.Ports.Port.Ethernet.EthWanAttr.Clock
	(Devm_Ports_Port_Ethernet_EthWanAttr_Scramble)(0),                                                                        // 191: huawei_devm.Devm.Ports.Port.Ethernet.EthWanAttr.Scramble
	(Devm_Ports_Port_Ethernet_EthWanAttr_RxJ0Mode)(0),                                                                        // 192: huawei_devm.Devm.Ports.Port.Ethernet.EthWanAttr.RxJ0Mode
	(Devm_Ports_Port_Ethernet_EthWanAttr_RxJ1Mode)(0),                                                                        // 193: huawei_devm.Devm.Ports.Port.Ethernet.EthWanAttr.RxJ1Mode
	(Devm_Ports_Port_Ethernet_NegotiationCompatibleMode_NegotiationCompatibleMode6)(0),                                       // 194: huawei_devm.Devm.Ports.Port.Ethernet.NegotiationCompatibleMode.NegotiationCompatibleMode6
	(Devm_Ports_Port_Ethernet_LocalLoopbackResult_Result)(0),                                                                 // 195: huawei_devm.Devm.Ports.Port.Ethernet.LocalLoopbackResult.Result
	(Devm_Ports_Port_Ethernet_LocalLoopbackResult_LinkStatus)(0),                                                             // 196: huawei_devm.Devm.Ports.Port.Ethernet.LocalLoopbackResult.LinkStatus
	(Devm_Ports_Port_Laser_AutoShutEnable)(0),                                                                                // 197: huawei_devm.Devm.Ports.Port.Laser.AutoShutEnable
	(Devm_Ports_Port_Laser_Status)(0),                                                                                        // 198: huawei_devm.Devm.Ports.Port.Laser.Status
	(Devm_Ports_Port_OpticalModule_TransMode)(0),                                                                             // 199: huawei_devm.Devm.Ports.Port.OpticalModule.TransMode
	(Devm_Ports_Port_OpticalModule_Type)(0),                                                                                  // 200: huawei_devm.Devm.Ports.Port.OpticalModule.Type
	(Devm_Ports_Port_OpticalModule_FiberType)(0),                                                                             // 201: huawei_devm.Devm.Ports.Port.OpticalModule.FiberType
	(Devm_Ports_Port_OpticalModule_Tunable)(0),                                                                               // 202: huawei_devm.Devm.Ports.Port.OpticalModule.Tunable
	(Devm_Ports_Port_OpticalModule_DirectionType)(0),                                                                         // 203: huawei_devm.Devm.Ports.Port.OpticalModule.DirectionType
	(Devm_Ports_Port_OpticalModule_WaveModulationMode)(0),                                                                    // 204: huawei_devm.Devm.Ports.Port.OpticalModule.WaveModulationMode
	(Devm_Ports_Port_OpticalModule_WavelengthChannelNumber)(0),                                                               // 205: huawei_devm.Devm.Ports.Port.OpticalModule.WavelengthChannelNumber
	(Devm_Ports_Port_OpticalModule_WavelengthChannelNumberStatus)(0),                                                         // 206: huawei_devm.Devm.Ports.Port.OpticalModule.WavelengthChannelNumberStatus
	(Devm_Ports_Port_OpticalModule_PowerLowProtection)(0),                                                                    // 207: huawei_devm.Devm.Ports.Port.OpticalModule.PowerLowProtection
	(Devm_Ports_Port_OpticalModule_SingleFiber)(0),                                                                           // 208: huawei_devm.Devm.Ports.Port.OpticalModule.SingleFiber
	(Devm_Ports_Port_OpticalModule_SingleFiberRx)(0),                                                                         // 209: huawei_devm.Devm.Ports.Port.OpticalModule.SingleFiberRx
	(Devm_Ports_Port_OpticalModule_TransceiverMediumType)(0),                                                                 // 210: huawei_devm.Devm.Ports.Port.OpticalModule.TransceiverMediumType
	(Devm_Ports_Port_OpticalModule_GainMode)(0),                                                                              // 211: huawei_devm.Devm.Ports.Port.OpticalModule.GainMode
	(Devm_Ports_Port_OpticalModule_OpticalMode)(0),                                                                           // 212: huawei_devm.Devm.Ports.Port.OpticalModule.OpticalMode
	(Devm_Ports_Port_OpticalModule_GainModeSts)(0),                                                                           // 213: huawei_devm.Devm.Ports.Port.OpticalModule.GainModeSts
	(Devm_Ports_Port_OpticalModule_OpticalModeStatus)(0),                                                                     // 214: huawei_devm.Devm.Ports.Port.OpticalModule.OpticalModeStatus
	(Devm_Ports_Port_OpticalModule_CertifiedState)(0),                                                                        // 215: huawei_devm.Devm.Ports.Port.OpticalModule.CertifiedState
	(Devm_Ports_Port_OpticalModule_IsSupportDdm)(0),                                                                          // 216: huawei_devm.Devm.Ports.Port.OpticalModule.IsSupportDdm
	(Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown_AlarmType)(0),                                      // 217: huawei_devm.Devm.Ports.Port.TransmissionAlarm.TransAlarmIfdowns.TransAlarmIfdown.AlarmType
	(Devm_Ports_Port_Pos_FrameFormat)(0),                                                                                     // 218: huawei_devm.Devm.Ports.Port.Pos.FrameFormat
	(Devm_Ports_Port_Pos_Crc)(0),                                                                                             // 219: huawei_devm.Devm.Ports.Port.Pos.Crc
	(Devm_Ports_Port_Pos_HoldUp)(0),                                                                                          // 220: huawei_devm.Devm.Ports.Port.Pos.HoldUp
	(Devm_Ports_Port_Pos_Speed)(0),                                                                                           // 221: huawei_devm.Devm.Ports.Port.Pos.Speed
	(Devm_Ports_Port_Pos_J0Mode)(0),                                                                                          // 222: huawei_devm.Devm.Ports.Port.Pos.J0Mode
	(Devm_Ports_Port_Pos_J1Mode)(0),                                                                                          // 223: huawei_devm.Devm.Ports.Port.Pos.J1Mode
	(Devm_Ports_Port_Pos_Clock)(0),                                                                                           // 224: huawei_devm.Devm.Ports.Port.Pos.Clock
	(Devm_Ports_Port_Pos_Scramble)(0),                                                                                        // 225: huawei_devm.Devm.Ports.Port.Pos.Scramble
	(Devm_Ports_Port_Pos_RxJ0Mode)(0),                                                                                        // 226: huawei_devm.Devm.Ports.Port.Pos.RxJ0Mode
	(Devm_Ports_Port_Pos_RxJ1Mode)(0),                                                                                        // 227: huawei_devm.Devm.Ports.Port.Pos.RxJ1Mode
	(Devm_Ports_Port_Atm_HoldUp)(0),                                                                                          // 228: huawei_devm.Devm.Ports.Port.Atm.HoldUp
	(Devm_Ports_Port_Atm_J0Mode)(0),                                                                                          // 229: huawei_devm.Devm.Ports.Port.Atm.J0Mode
	(Devm_Ports_Port_Atm_J1Mode)(0),                                                                                          // 230: huawei_devm.Devm.Ports.Port.Atm.J1Mode
	(Devm_Ports_Port_Atm_Clock)(0),                                                                                           // 231: huawei_devm.Devm.Ports.Port.Atm.Clock
	(Devm_Ports_Port_Atm_Scramble)(0),                                                                                        // 232: huawei_devm.Devm.Ports.Port.Atm.Scramble
	(Devm_Ports_Port_Atm_FlagSpacePadding)(0),                                                                                // 233: huawei_devm.Devm.Ports.Port.Atm.FlagSpacePadding
	(Devm_Ports_Port_Atm_RxJ0Mode)(0),                                                                                        // 234: huawei_devm.Devm.Ports.Port.Atm.RxJ0Mode
	(Devm_Ports_Port_Atm_RxJ1Mode)(0),                                                                                        // 235: huawei_devm.Devm.Ports.Port.Atm.RxJ1Mode
	(Devm_Ports_Port_Cpos_MappingMode)(0),                                                                                    // 236: huawei_devm.Devm.Ports.Port.Cpos.MappingMode
	(Devm_Ports_Port_Cpos_FrameFormat)(0),                                                                                    // 237: huawei_devm.Devm.Ports.Port.Cpos.FrameFormat
	(Devm_Ports_Port_Cpos_Multiplex)(0),                                                                                      // 238: huawei_devm.Devm.Ports.Port.Cpos.Multiplex
	(Devm_Ports_Port_Cpos_HoldUp)(0),                                                                                         // 239: huawei_devm.Devm.Ports.Port.Cpos.HoldUp
	(Devm_Ports_Port_Cpos_HpMappingMode)(0),                                                                                  // 240: huawei_devm.Devm.Ports.Port.Cpos.HpMappingMode
	(Devm_Ports_Port_Cpos_AisFlag)(0),                                                                                        // 241: huawei_devm.Devm.Ports.Port.Cpos.AisFlag
	(Devm_Ports_Port_Cpos_TuaisFlag)(0),                                                                                      // 242: huawei_devm.Devm.Ports.Port.Cpos.TuaisFlag
	(Devm_Ports_Port_Cpos_J0Mode)(0),                                                                                         // 243: huawei_devm.Devm.Ports.Port.Cpos.J0Mode
	(Devm_Ports_Port_Cpos_J1Mode)(0),                                                                                         // 244: huawei_devm.Devm.Ports.Port.Cpos.J1Mode
	(Devm_Ports_Port_Cpos_Clock)(0),                                                                                          // 245: huawei_devm.Devm.Ports.Port.Cpos.Clock
	(Devm_Ports_Port_Cpos_FlagSpacePadding)(0),                                                                               // 246: huawei_devm.Devm.Ports.Port.Cpos.FlagSpacePadding
	(Devm_Ports_Port_Cpos_E1T1S_E1T1_WorkMode)(0),                                                                            // 247: huawei_devm.Devm.Ports.Port.Cpos.E1T1S.E1T1.WorkMode
	(Devm_Ports_Port_Cpos_E1T1S_E1T1_Clock)(0),                                                                               // 248: huawei_devm.Devm.Ports.Port.Cpos.E1T1S.E1T1.Clock
	(Devm_Ports_Port_Cpos_E1T1S_E1T1_FrameFormat)(0),                                                                         // 249: huawei_devm.Devm.Ports.Port.Cpos.E1T1S.E1T1.FrameFormat
	(Devm_Ports_Port_Cpos_E1T1S_E1T1_Loopback)(0),                                                                            // 250: huawei_devm.Devm.Ports.Port.Cpos.E1T1S.E1T1.Loopback
	(Devm_Ports_Port_PhySerial_Baudrate)(0),                                                                                  // 251: huawei_devm.Devm.Ports.Port.PhySerial.Baudrate
	(Devm_Ports_Port_PhySerial_ClockSourceMode)(0),                                                                           // 252: huawei_devm.Devm.Ports.Port.PhySerial.ClockSourceMode
	(Devm_Ports_Port_PhySerial_MuxProtocol)(0),                                                                               // 253: huawei_devm.Devm.Ports.Port.PhySerial.MuxProtocol
	(Devm_Ports_Port_PhySerial_Parity)(0),                                                                                    // 254: huawei_devm.Devm.Ports.Port.PhySerial.Parity
	(Devm_Ports_Port_PhySerial_PhaseClockSend)(0),                                                                            // 255: huawei_devm.Devm.Ports.Port.PhySerial.PhaseClockSend
	(Devm_Ports_Port_PhySerial_PhaseClockRec)(0),                                                                             // 256: huawei_devm.Devm.Ports.Port.PhySerial.PhaseClockRec
	(Devm_Ports_Port_PhySerial_PhysicalMode)(0),                                                                              // 257: huawei_devm.Devm.Ports.Port.PhySerial.PhysicalMode
	(Devm_Ports_Port_PhySerial_PortMode)(0),                                                                                  // 258: huawei_devm.Devm.Ports.Port.PhySerial.PortMode
	(Devm_Ports_Port_PhySerial_WorkMode)(0),                                                                                  // 259: huawei_devm.Devm.Ports.Port.PhySerial.WorkMode
	(Devm_Ports_Port_PhySerial_PhaseMode)(0),                                                                                 // 260: huawei_devm.Devm.Ports.Port.PhySerial.PhaseMode
	(Devm_Ports_Port_PhySerial_DetectDsrSignal)(0),                                                                           // 261: huawei_devm.Devm.Ports.Port.PhySerial.DetectDsrSignal
	(Devm_Ports_Port_PhySerial_DetectDtrSignal)(0),                                                                           // 262: huawei_devm.Devm.Ports.Port.PhySerial.DetectDtrSignal
	(Devm_Ports_Port_PhySerial_DetectDcdSignal)(0),                                                                           // 263: huawei_devm.Devm.Ports.Port.PhySerial.DetectDcdSignal
	(Devm_Ports_Port_PhySerial_DetectCtsSignal)(0),                                                                           // 264: huawei_devm.Devm.Ports.Port.PhySerial.DetectCtsSignal
	(Devm_Ports_Port_PhySerial_DetectRtsSignal)(0),                                                                           // 265: huawei_devm.Devm.Ports.Port.PhySerial.DetectRtsSignal
	(Devm_Ports_Port_PhyVoice_PcmLawVaule)(0),                                                                                // 266: huawei_devm.Devm.Ports.Port.PhyVoice.PcmLawVaule
	(Devm_Ports_Port_PhyVoice_ChannelAssociatedSignallingEnable)(0),                                                          // 267: huawei_devm.Devm.Ports.Port.PhyVoice.ChannelAssociatedSignallingEnable
	(Devm_Ports_Port_PhyVoice_Fxo_DcImped)(0),                                                                                // 268: huawei_devm.Devm.Ports.Port.PhyVoice.Fxo.DcImped
	(Devm_Ports_Port_PhyVoice_Fxo_AcImped)(0),                                                                                // 269: huawei_devm.Devm.Ports.Port.PhyVoice.Fxo.AcImped
	(Devm_Ports_Port_PhyVoice_Fxo_RingMinDur)(0),                                                                             // 270: huawei_devm.Devm.Ports.Port.PhyVoice.Fxo.RingMinDur
	(Devm_Ports_Port_PhyVoice_Fxo_RingMaxInter)(0),                                                                           // 271: huawei_devm.Devm.Ports.Port.PhyVoice.Fxo.RingMaxInter
	(Devm_Ports_Port_PhyVoice_Fxo_RingFrequence)(0),                                                                          // 272: huawei_devm.Devm.Ports.Port.PhyVoice.Fxo.RingFrequence
	(Devm_Ports_Port_PhyVoice_Fxo_RingAcAmpli)(0),                                                                            // 273: huawei_devm.Devm.Ports.Port.PhyVoice.Fxo.RingAcAmpli
	(Devm_Ports_Port_PhyVoice_Fxs_FxsCurrent)(0),                                                                             // 274: huawei_devm.Devm.Ports.Port.PhyVoice.Fxs.FxsCurrent
	(Devm_Ports_Port_PhyVoice_Fxs_FxsHotlineEn)(0),                                                                           // 275: huawei_devm.Devm.Ports.Port.PhyVoice.Fxs.FxsHotlineEn
	(Devm_Ports_Port_PhyVoice_Fxs_FxsDcImped)(0),                                                                             // 276: huawei_devm.Devm.Ports.Port.PhyVoice.Fxs.FxsDcImped
	(Devm_Ports_Port_PhyVoice_Em_EmuserlineMode)(0),                                                                          // 277: huawei_devm.Devm.Ports.Port.PhyVoice.Em.EmuserlineMode
	(Devm_Ports_Port_PhyVoice_Em_EmuserlineStat)(0),                                                                          // 278: huawei_devm.Devm.Ports.Port.PhyVoice.Em.EmuserlineStat
	(Devm_Ports_Port_E1T1_WorkMode)(0),                                                                                       // 279: huawei_devm.Devm.Ports.Port.E1T1.WorkMode
	(Devm_Ports_Port_E1T1_FrameFormat)(0),                                                                                    // 280: huawei_devm.Devm.Ports.Port.E1T1.FrameFormat
	(Devm_Ports_Port_E1T1_Clock)(0),                                                                                          // 281: huawei_devm.Devm.Ports.Port.E1T1.Clock
	(Devm_Ports_Port_E1T1_Code)(0),                                                                                           // 282: huawei_devm.Devm.Ports.Port.E1T1.Code
	(Devm_Ports_Port_E3T3_WorkMode)(0),                                                                                       // 283: huawei_devm.Devm.Ports.Port.E3T3.WorkMode
	(Devm_Ports_Port_E3T3_Clock)(0),                                                                                          // 284: huawei_devm.Devm.Ports.Port.E3T3.Clock
	(Devm_Ports_Port_E3T3_FrameFormat)(0),                                                                                    // 285: huawei_devm.Devm.Ports.Port.E3T3.FrameFormat
	(Devm_Ports_Port_E3T3_E3T3Flag)(0),                                                                                       // 286: huawei_devm.Devm.Ports.Port.E3T3.E3T3Flag
	(Devm_LogicPorts_LogicPort_PortType)(0),                                                                                  // 287: huawei_devm.Devm.LogicPorts.LogicPort.PortType
	(Devm_LogicPorts_LogicPort_AdminState)(0),                                                                                // 288: huawei_devm.Devm.LogicPorts.LogicPort.AdminState
	(Devm_LogicPorts_LogicPort_HardType)(0),                                                                                  // 289: huawei_devm.Devm.LogicPorts.LogicPort.HardType
	(Devm_LogicPorts_LogicPort_Level)(0),                                                                                     // 290: huawei_devm.Devm.LogicPorts.LogicPort.Level
	(Devm_EntityClasses_EntityClass_ClassName)(0),                                                                            // 291: huawei_devm.Devm.EntityClasses.EntityClass.ClassName
	(Devm_InconsistentEntitys_InconsistentEntity_Class)(0),                                                                   // 292: huawei_devm.Devm.InconsistentEntitys.InconsistentEntity.Class
	(Devm_InconsistentEntitys_InconsistentEntity_LogicalType)(0),                                                             // 293: huawei_devm.Devm.InconsistentEntitys.InconsistentEntity.LogicalType
	(Devm_InconsistentEntitys_InconsistentEntity_PhysicalType)(0),                                                            // 294: huawei_devm.Devm.InconsistentEntitys.InconsistentEntity.PhysicalType
	(Devm_InconsistentEntitys_InconsistentEntity_OperState)(0),                                                               // 295: huawei_devm.Devm.InconsistentEntitys.InconsistentEntity.OperState
	(Devm_OfflineCfgs_Offline_Class)(0),                                                                                      // 296: huawei_devm.Devm.OfflineCfgs.Offline.Class
	(Devm_Offlines_Offline_Class)(0),                                                                                         // 297: huawei_devm.Devm.Offlines.Offline.Class
	(Devm_Clockboards_Clockboard_BoardType)(0),                                                                               // 298: huawei_devm.Devm.Clockboards.Clockboard.BoardType
	(Devm_Clockboards_Clockboard_SramState)(0),                                                                               // 299: huawei_devm.Devm.Clockboards.Clockboard.SramState
	(Devm_Driver_Cmus_Cmu_Role)(0),                                                                                           // 300: huawei_devm.Devm.Driver.Cmus.Cmu.Role
	(Devm_Driver_Cmus_Cmu_CmuSwitchs_CmuSwitch_AlarmMode)(0),                                                                 // 301: huawei_devm.Devm.Driver.Cmus.Cmu.CmuSwitchs.CmuSwitch.AlarmMode
	(Devm_Driver_Cmus_Cmu_CmuSwitchs_CmuSwitch_SwitchFog)(0),                                                                 // 302: huawei_devm.Devm.Driver.Cmus.Cmu.CmuSwitchs.CmuSwitch.SwitchFog
	(Devm_Driver_Cmus_Cmu_CmuRelays_CmuRelay_RelayAlarmMode)(0),                                                              // 303: huawei_devm.Devm.Driver.Cmus.Cmu.CmuRelays.CmuRelay.RelayAlarmMode
	(Devm_Driver_Cmus_Cmu_CmuAnalogs_CmuAnalog_AnalogType)(0),                                                                // 304: huawei_devm.Devm.Driver.Cmus.Cmu.CmuAnalogs.CmuAnalog.AnalogType
	(Devm_Driver_Cmus_Cmu_CmuAnalogs_CmuAnalog_AnalogObject)(0),                                                              // 305: huawei_devm.Devm.Driver.Cmus.Cmu.CmuAnalogs.CmuAnalog.AnalogObject
	(Devm_Driver_Cmus_Cmu_CmuAlarms_CmuAlarm_AlarmLevel)(0),                                                                  // 306: huawei_devm.Devm.Driver.Cmus.Cmu.CmuAlarms.CmuAlarm.AlarmLevel
	(Devm_Driver_Cmus_Cmu_Switchs_Switch_AlarmTriggeringMode)(0),                                                             // 307: huawei_devm.Devm.Driver.Cmus.Cmu.Switchs.Switch.AlarmTriggeringMode
	(Devm_Driver_Cmus_Cmu_Switchs_Switch_SensorName)(0),                                                                      // 308: huawei_devm.Devm.Driver.Cmus.Cmu.Switchs.Switch.SensorName
	(Devm_Driver_Cmus_Cmu_Relays_Relay_RelayMode)(0),                                                                         // 309: huawei_devm.Devm.Driver.Cmus.Cmu.Relays.Relay.RelayMode
	(Devm_Driver_Cmus_Cmu_Analogs_Analog_AnalogObject)(0),                                                                    // 310: huawei_devm.Devm.Driver.Cmus.Cmu.Analogs.Analog.AnalogObject
	(Devm_Driver_Cmus_Cmu_Analogs_Analog_AnalogSensorType)(0),                                                                // 311: huawei_devm.Devm.Driver.Cmus.Cmu.Analogs.Analog.AnalogSensorType
	(Devm_Driver_Pms_Pm_SingleInput)(0),                                                                                      // 312: huawei_devm.Devm.Driver.Pms.Pm.SingleInput
	(Devm_Driver_Pms_Pm_MonitorCableState)(0),                                                                                // 313: huawei_devm.Devm.Driver.Pms.Pm.MonitorCableState
	(Devm_Driver_Pms_Pm_PmStatus)(0),                                                                                         // 314: huawei_devm.Devm.Driver.Pms.Pm.PmStatus
	(Devm_Driver_Dacss_Dacs_Status)(0),                                                                                       // 315: huawei_devm.Devm.Driver.Dacss.Dacs.Status
	(Devm_Driver_Fans_Fan_WorkMode)(0),                                                                                       // 316: huawei_devm.Devm.Driver.Fans.Fan.WorkMode
	(Devm_Driver_Fans_Fan_MonitorCableState)(0),                                                                              // 317: huawei_devm.Devm.Driver.Fans.Fan.MonitorCableState
	(Devm_Driver_Fans_Fan_Register)(0),                                                                                       // 318: huawei_devm.Devm.Driver.Fans.Fan.Register
	(Devm_Driver_Fans_Fan_Present)(0),                                                                                        // 319: huawei_devm.Devm.Driver.Fans.Fan.Present
	(Devm_Driver_PowerSupplys_PowerSupply_WorkMode)(0),                                                                       // 320: huawei_devm.Devm.Driver.PowerSupplys.PowerSupply.WorkMode
	(Devm_Driver_PowerSupplys_PowerSupply_MonitorCableState)(0),                                                              // 321: huawei_devm.Devm.Driver.PowerSupplys.PowerSupply.MonitorCableState
	(Devm_Driver_Pdus_Pdu_WorkMode)(0),                                                                                       // 322: huawei_devm.Devm.Driver.Pdus.Pdu.WorkMode
	(Devm_Driver_Vsus_Vsu_ServiceType)(0),                                                                                    // 323: huawei_devm.Devm.Driver.Vsus.Vsu.ServiceType
	(Devm_Driver_Disks_Disk_Type)(0),                                                                                         // 324: huawei_devm.Devm.Driver.Disks.Disk.Type
	(Devm_RemotePorts_RemotePort_LoopbackMode)(0),                                                                            // 325: huawei_devm.Devm.RemotePorts.RemotePort.LoopbackMode
	(Devm_RemotePorts_RemotePort_Ethernet_FlowControl)(0),                                                                    // 326: huawei_devm.Devm.RemotePorts.RemotePort.Ethernet.FlowControl
	(Devm_RemotePorts_RemotePort_Ethernet_TransMode)(0),                                                                      // 327: huawei_devm.Devm.RemotePorts.RemotePort.Ethernet.TransMode
	(Devm_RemotePorts_RemotePort_Ethernet_HoldUp)(0),                                                                         // 328: huawei_devm.Devm.RemotePorts.RemotePort.Ethernet.HoldUp
	(Devm_RemotePorts_RemotePort_Ethernet_InterPacketGap)(0),                                                                 // 329: huawei_devm.Devm.RemotePorts.RemotePort.Ethernet.InterPacketGap
	(Devm_RemotePorts_RemotePort_Ethernet_Speed)(0),                                                                          // 330: huawei_devm.Devm.RemotePorts.RemotePort.Ethernet.Speed
	(Devm_RemotePorts_RemotePort_Ethernet_Duplex)(0),                                                                         // 331: huawei_devm.Devm.RemotePorts.RemotePort.Ethernet.Duplex
	(Devm_RemotePorts_RemotePort_Ethernet_Negotiation)(0),                                                                    // 332: huawei_devm.Devm.RemotePorts.RemotePort.Ethernet.Negotiation
	(Devm_RemotePorts_RemotePort_Ethernet_NegotiationMode)(0),                                                                // 333: huawei_devm.Devm.RemotePorts.RemotePort.Ethernet.NegotiationMode
	(Devm_RemotePorts_RemotePort_Ethernet_GfMediaType)(0),                                                                    // 334: huawei_devm.Devm.RemotePorts.RemotePort.Ethernet.GfMediaType
	(Devm_RemotePorts_RemotePort_Ethernet_FlowControlState)(0),                                                               // 335: huawei_devm.Devm.RemotePorts.RemotePort.Ethernet.FlowControlState
	(Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_FrameFormat)(0),                                                         // 336: huawei_devm.Devm.RemotePorts.RemotePort.Ethernet.EthWanAttr.FrameFormat
	(Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_J0Mode)(0),                                                              // 337: huawei_devm.Devm.RemotePorts.RemotePort.Ethernet.EthWanAttr.J0Mode
	(Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_J1Mode)(0),                                                              // 338: huawei_devm.Devm.RemotePorts.RemotePort.Ethernet.EthWanAttr.J1Mode
	(Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_Clock)(0),                                                               // 339: huawei_devm.Devm.RemotePorts.RemotePort.Ethernet.EthWanAttr.Clock
	(Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr_Scramble)(0),                                                            // 340: huawei_devm.Devm.RemotePorts.RemotePort.Ethernet.EthWanAttr.Scramble
	(Devm_RemotePorts_RemotePort_Laser_AutoShutEnable)(0),                                                                    // 341: huawei_devm.Devm.RemotePorts.RemotePort.Laser.AutoShutEnable
	(Devm_RemotePorts_RemotePort_OpticalModule_WavelengthChannelNumber)(0),                                                   // 342: huawei_devm.Devm.RemotePorts.RemotePort.OpticalModule.WavelengthChannelNumber
	(Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns_TransAlarmIfDown_AlarmType)(0),                          // 343: huawei_devm.Devm.RemotePorts.RemotePort.TransmissionAlarm.TransAlarmIfDowns.TransAlarmIfDown.AlarmType
	(*Devm)(nil),                                                         // 344: huawei_devm.Devm
	(*Devm_PhysicalEntitys)(nil),                                         // 345: huawei_devm.Devm.PhysicalEntitys
	(*Devm_LogicEntitys)(nil),                                            // 346: huawei_devm.Devm.LogicEntitys
	(*Devm_Chassiss)(nil),                                                // 347: huawei_devm.Devm.Chassiss
	(*Devm_LogicContainers)(nil),                                         // 348: huawei_devm.Devm.LogicContainers
	(*Devm_Containers)(nil),                                              // 349: huawei_devm.Devm.Containers
	(*Devm_MpuBoards)(nil),                                               // 350: huawei_devm.Devm.MpuBoards
	(*Devm_LpuBoards)(nil),                                               // 351: huawei_devm.Devm.LpuBoards
	(*Devm_SfuBoards)(nil),                                               // 352: huawei_devm.Devm.SfuBoards
	(*Devm_Cards)(nil),                                                   // 353: huawei_devm.Devm.Cards
	(*Devm_CfCards)(nil),                                                 // 354: huawei_devm.Devm.CfCards
	(*Devm_Ports)(nil),                                                   // 355: huawei_devm.Devm.Ports
	(*Devm_LogicPorts)(nil),                                              // 356: huawei_devm.Devm.LogicPorts
	(*Devm_EntityClasses)(nil),                                           // 357: huawei_devm.Devm.EntityClasses
	(*Devm_InconsistentEntitys)(nil),                                     // 358: huawei_devm.Devm.InconsistentEntitys
	(*Devm_OfflineCfgs)(nil),                                             // 359: huawei_devm.Devm.OfflineCfgs
	(*Devm_ScheduleReboot)(nil),                                          // 360: huawei_devm.Devm.ScheduleReboot
	(*Devm_Offlines)(nil),                                                // 361: huawei_devm.Devm.Offlines
	(*Devm_Clockboards)(nil),                                             // 362: huawei_devm.Devm.Clockboards
	(*Devm_Driver)(nil),                                                  // 363: huawei_devm.Devm.Driver
	(*Devm_FwdPerformanceAlarms)(nil),                                    // 364: huawei_devm.Devm.FwdPerformanceAlarms
	(*Devm_FwdServicesAlarms)(nil),                                       // 365: huawei_devm.Devm.FwdServicesAlarms
	(*Devm_FwdReassemblyAlarms)(nil),                                     // 366: huawei_devm.Devm.FwdReassemblyAlarms
	(*Devm_FwdBoardFlowAlarms)(nil),                                      // 367: huawei_devm.Devm.FwdBoardFlowAlarms
	(*Devm_ForwardCpuAlarm)(nil),                                         // 368: huawei_devm.Devm.ForwardCpuAlarm
	(*Devm_ForwardVcpuAlarm)(nil),                                        // 369: huawei_devm.Devm.ForwardVcpuAlarm
	(*Devm_ActiveHardwareAlarmInfos)(nil),                                // 370: huawei_devm.Devm.ActiveHardwareAlarmInfos
	(*Devm_HistoryHardwareAlarmInfos)(nil),                               // 371: huawei_devm.Devm.HistoryHardwareAlarmInfos
	(*Devm_RemotePorts)(nil),                                             // 372: huawei_devm.Devm.RemotePorts
	(*Devm_DisableHardwareAlarms)(nil),                                   // 373: huawei_devm.Devm.DisableHardwareAlarms
	(*Devm_PhysicalEntitys_PhysicalEntity)(nil),                          // 374: huawei_devm.Devm.PhysicalEntitys.PhysicalEntity
	(*Devm_LogicEntitys_LogicEntity)(nil),                                // 375: huawei_devm.Devm.LogicEntitys.LogicEntity
	(*Devm_Chassiss_Chassis)(nil),                                        // 376: huawei_devm.Devm.Chassiss.Chassis
	(*Devm_Chassiss_Chassis_MonitorBoardChanges)(nil),                    // 377: huawei_devm.Devm.Chassiss.Chassis.MonitorBoardChanges
	(*Devm_Chassiss_Chassis_FanAttribute)(nil),                           // 378: huawei_devm.Devm.Chassiss.Chassis.FanAttribute
	(*Devm_Chassiss_Chassis_PowerSupplyAttribute)(nil),                   // 379: huawei_devm.Devm.Chassiss.Chassis.PowerSupplyAttribute
	(*Devm_Chassiss_Chassis_DustproofAttribute)(nil),                     // 380: huawei_devm.Devm.Chassiss.Chassis.DustproofAttribute
	(*Devm_Chassiss_Chassis_ChassisId)(nil),                              // 381: huawei_devm.Devm.Chassiss.Chassis.ChassisId
	(*Devm_Chassiss_Chassis_ChassisRunMode)(nil),                         // 382: huawei_devm.Devm.Chassiss.Chassis.ChassisRunMode
	(*Devm_Chassiss_Chassis_PmInputAttribute)(nil),                       // 383: huawei_devm.Devm.Chassiss.Chassis.PmInputAttribute
	(*Devm_Chassiss_Chassis_ChassisSfuMode)(nil),                         // 384: huawei_devm.Devm.Chassiss.Chassis.ChassisSfuMode
	(*Devm_Chassiss_Chassis_MonitorBoardChanges_MonitorBoardChange)(nil), // 385: huawei_devm.Devm.Chassiss.Chassis.MonitorBoardChanges.MonitorBoardChange
	(*Devm_LogicContainers_LogicContainer)(nil),                          // 386: huawei_devm.Devm.LogicContainers.LogicContainer
	(*Devm_LogicContainers_LogicContainer_SupportedEntityTypes)(nil),     // 387: huawei_devm.Devm.LogicContainers.LogicContainer.SupportedEntityTypes
	(*Devm_LogicContainers_LogicContainer_SupportedEntityTypes_SupportedEntityType)(nil), // 388: huawei_devm.Devm.LogicContainers.LogicContainer.SupportedEntityTypes.SupportedEntityType
	(*Devm_Containers_Container)(nil),                                                                              // 389: huawei_devm.Devm.Containers.Container
	(*Devm_Containers_Container_SupportedEntityTypes)(nil),                                                         // 390: huawei_devm.Devm.Containers.Container.SupportedEntityTypes
	(*Devm_Containers_Container_SupportedEntityTypes_SupportedEntityType)(nil),                                     // 391: huawei_devm.Devm.Containers.Container.SupportedEntityTypes.SupportedEntityType
	(*Devm_MpuBoards_MpuBoard)(nil),                                                                                // 392: huawei_devm.Devm.MpuBoards.MpuBoard
	(*Devm_MpuBoards_MpuBoard_Bras)(nil),                                                                           // 393: huawei_devm.Devm.MpuBoards.MpuBoard.Bras
	(*Devm_MpuBoards_MpuBoard_L2Tp)(nil),                                                                           // 394: huawei_devm.Devm.MpuBoards.MpuBoard.L2Tp
	(*Devm_MpuBoards_MpuBoard_BrasPppox)(nil),                                                                      // 395: huawei_devm.Devm.MpuBoards.MpuBoard.BrasPppox
	(*Devm_MpuBoards_MpuBoard_Cpudefend)(nil),                                                                      // 396: huawei_devm.Devm.MpuBoards.MpuBoard.Cpudefend
	(*Devm_MpuBoards_MpuBoard_CpudefendDevm)(nil),                                                                  // 397: huawei_devm.Devm.MpuBoards.MpuBoard.CpudefendDevm
	(*Devm_MpuBoards_MpuBoard_CmacPadding)(nil),                                                                    // 398: huawei_devm.Devm.MpuBoards.MpuBoard.CmacPadding
	(*Devm_MpuBoards_MpuBoard_Fim)(nil),                                                                            // 399: huawei_devm.Devm.MpuBoards.MpuBoard.Fim
	(*Devm_MpuBoards_MpuBoard_MacmtuDiscardStatistics)(nil),                                                        // 400: huawei_devm.Devm.MpuBoards.MpuBoard.MacmtuDiscardStatistics
	(*Devm_MpuBoards_MpuBoard_VeMacAddress)(nil),                                                                   // 401: huawei_devm.Devm.MpuBoards.MpuBoard.VeMacAddress
	(*Devm_MpuBoards_MpuBoard_ManagementPlaneDefendSlot)(nil),                                                      // 402: huawei_devm.Devm.MpuBoards.MpuBoard.ManagementPlaneDefendSlot
	(*Devm_MpuBoards_MpuBoard_LinkProtocolTransport)(nil),                                                          // 403: huawei_devm.Devm.MpuBoards.MpuBoard.LinkProtocolTransport
	(*Devm_MpuBoards_MpuBoard_Loadbalance)(nil),                                                                    // 404: huawei_devm.Devm.MpuBoards.MpuBoard.Loadbalance
	(*Devm_MpuBoards_MpuBoard_Mirror)(nil),                                                                         // 405: huawei_devm.Devm.MpuBoards.MpuBoard.Mirror
	(*Devm_MpuBoards_MpuBoard_MplsForward)(nil),                                                                    // 406: huawei_devm.Devm.MpuBoards.MpuBoard.MplsForward
	(*Devm_MpuBoards_MpuBoard_Netstream)(nil),                                                                      // 407: huawei_devm.Devm.MpuBoards.MpuBoard.Netstream
	(*Devm_MpuBoards_MpuBoard_Pbr)(nil),                                                                            // 408: huawei_devm.Devm.MpuBoards.MpuBoard.Pbr
	(*Devm_MpuBoards_MpuBoard_Qos)(nil),                                                                            // 409: huawei_devm.Devm.MpuBoards.MpuBoard.Qos
	(*Devm_MpuBoards_MpuBoard_Soc)(nil),                                                                            // 410: huawei_devm.Devm.MpuBoards.MpuBoard.Soc
	(*Devm_MpuBoards_MpuBoard_UnicastForward)(nil),                                                                 // 411: huawei_devm.Devm.MpuBoards.MpuBoard.UnicastForward
	(*Devm_MpuBoards_MpuBoard_CfmMacLevelEnableMpu)(nil),                                                           // 412: huawei_devm.Devm.MpuBoards.MpuBoard.CfmMacLevelEnableMpu
	(*Devm_MpuBoards_MpuBoard_Dhcpv6Access)(nil),                                                                   // 413: huawei_devm.Devm.MpuBoards.MpuBoard.Dhcpv6Access
	(*Devm_MpuBoards_MpuBoard_HttpsRedirect)(nil),                                                                  // 414: huawei_devm.Devm.MpuBoards.MpuBoard.HttpsRedirect
	(*Devm_MpuBoards_MpuBoard_FramePaddingFix)(nil),                                                                // 415: huawei_devm.Devm.MpuBoards.MpuBoard.FramePaddingFix
	(*Devm_MpuBoards_MpuBoard_PppNet)(nil),                                                                         // 416: huawei_devm.Devm.MpuBoards.MpuBoard.PppNet
	(*Devm_MpuBoards_MpuBoard_Sflow)(nil),                                                                          // 417: huawei_devm.Devm.MpuBoards.MpuBoard.Sflow
	(*Devm_MpuBoards_MpuBoard_Dcb)(nil),                                                                            // 418: huawei_devm.Devm.MpuBoards.MpuBoard.Dcb
	(*Devm_MpuBoards_MpuBoard_Bras_FlowStatisticFrequency)(nil),                                                    // 419: huawei_devm.Devm.MpuBoards.MpuBoard.Bras.FlowStatisticFrequency
	(*Devm_MpuBoards_MpuBoard_Bras_Vas)(nil),                                                                       // 420: huawei_devm.Devm.MpuBoards.MpuBoard.Bras.Vas
	(*Devm_MpuBoards_MpuBoard_Bras_Multicast)(nil),                                                                 // 421: huawei_devm.Devm.MpuBoards.MpuBoard.Bras.Multicast
	(*Devm_MpuBoards_MpuBoard_Bras_Vas_StatisticFrequency)(nil),                                                    // 422: huawei_devm.Devm.MpuBoards.MpuBoard.Bras.Vas.StatisticFrequency
	(*Devm_MpuBoards_MpuBoard_Bras_Multicast_BasPolicyCac)(nil),                                                    // 423: huawei_devm.Devm.MpuBoards.MpuBoard.Bras.Multicast.BasPolicyCac
	(*Devm_MpuBoards_MpuBoard_L2Tp_IcrqLimit)(nil),                                                                 // 424: huawei_devm.Devm.MpuBoards.MpuBoard.L2Tp.IcrqLimit
	(*Devm_MpuBoards_MpuBoard_L2Tp_ForwardMode)(nil),                                                               // 425: huawei_devm.Devm.MpuBoards.MpuBoard.L2Tp.ForwardMode
	(*Devm_MpuBoards_MpuBoard_BrasPppox_SlotAccessLimit)(nil),                                                      // 426: huawei_devm.Devm.MpuBoards.MpuBoard.BrasPppox.SlotAccessLimit
	(*Devm_MpuBoards_MpuBoard_BrasPppox_AccessIp)(nil),                                                             // 427: huawei_devm.Devm.MpuBoards.MpuBoard.BrasPppox.AccessIp
	(*Devm_MpuBoards_MpuBoard_BrasPppox_AccessIpLimit)(nil),                                                        // 428: huawei_devm.Devm.MpuBoards.MpuBoard.BrasPppox.AccessIpLimit
	(*Devm_MpuBoards_MpuBoard_BrasPppox_LoadBalanceIdentifyPppoe)(nil),                                             // 429: huawei_devm.Devm.MpuBoards.MpuBoard.BrasPppox.LoadBalanceIdentifyPppoe
	(*Devm_MpuBoards_MpuBoard_BrasPppox_MaxSessions)(nil),                                                          // 430: huawei_devm.Devm.MpuBoards.MpuBoard.BrasPppox.MaxSessions
	(*Devm_MpuBoards_MpuBoard_BrasPppox_PppoeSlotStatistic)(nil),                                                   // 431: huawei_devm.Devm.MpuBoards.MpuBoard.BrasPppox.PppoeSlotStatistic
	(*Devm_MpuBoards_MpuBoard_BrasPppox_PppSlotStatistic)(nil),                                                     // 432: huawei_devm.Devm.MpuBoards.MpuBoard.BrasPppox.PppSlotStatistic
	(*Devm_MpuBoards_MpuBoard_BrasPppox_UrpfDiscardStatistics)(nil),                                                // 433: huawei_devm.Devm.MpuBoards.MpuBoard.BrasPppox.UrpfDiscardStatistics
	(*Devm_MpuBoards_MpuBoard_BrasPppox_PppEchoDeployMode)(nil),                                                    // 434: huawei_devm.Devm.MpuBoards.MpuBoard.BrasPppox.PppEchoDeployMode
	(*Devm_MpuBoards_MpuBoard_BrasPppox_UrpfDiscardStatistics_UrpfIpv4DiscardStatistic)(nil),                       // 435: huawei_devm.Devm.MpuBoards.MpuBoard.BrasPppox.UrpfDiscardStatistics.UrpfIpv4DiscardStatistic
	(*Devm_MpuBoards_MpuBoard_BrasPppox_UrpfDiscardStatistics_UrpfIpv6DiscardStatistic)(nil),                       // 436: huawei_devm.Devm.MpuBoards.MpuBoard.BrasPppox.UrpfDiscardStatistics.UrpfIpv6DiscardStatistic
	(*Devm_MpuBoards_MpuBoard_CpudefendDevm_IgnoreHostcarAcl)(nil),                                                 // 437: huawei_devm.Devm.MpuBoards.MpuBoard.CpudefendDevm.IgnoreHostcarAcl
	(*Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars)(nil),                                                     // 438: huawei_devm.Devm.MpuBoards.MpuBoard.CpudefendDevm.BrasHostCars
	(*Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars)(nil),                                                          // 439: huawei_devm.Devm.MpuBoards.MpuBoard.CpudefendDevm.SpuCars
	(*Devm_MpuBoards_MpuBoard_CpudefendDevm_ArpVlanCar)(nil),                                                       // 440: huawei_devm.Devm.MpuBoards.MpuBoard.CpudefendDevm.ArpVlanCar
	(*Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar)(nil),                                                        // 441: huawei_devm.Devm.MpuBoards.MpuBoard.CpudefendDevm.NdVlanCar
	(*Devm_MpuBoards_MpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclType_ByIdentity)(nil),                          // 442: huawei_devm.Devm.MpuBoards.MpuBoard.CpudefendDevm.IgnoreHostcarAcl.Ipv4AclType_ByIdentity
	(*Devm_MpuBoards_MpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclType_ByNumber)(nil),                            // 443: huawei_devm.Devm.MpuBoards.MpuBoard.CpudefendDevm.IgnoreHostcarAcl.Ipv4AclType_ByNumber
	(*Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar)(nil),                                         // 444: huawei_devm.Devm.MpuBoards.MpuBoard.CpudefendDevm.BrasHostCars.BrasHostCar
	(*Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_RateLimit)(nil),                               // 445: huawei_devm.Devm.MpuBoards.MpuBoard.CpudefendDevm.BrasHostCars.BrasHostCar.RateLimit
	(*Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_Logging)(nil),                                 // 446: huawei_devm.Devm.MpuBoards.MpuBoard.CpudefendDevm.BrasHostCars.BrasHostCar.Logging
	(*Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_AttackDetect)(nil),                            // 447: huawei_devm.Devm.MpuBoards.MpuBoard.CpudefendDevm.BrasHostCars.BrasHostCar.AttackDetect
	(*Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar)(nil),                                                   // 448: huawei_devm.Devm.MpuBoards.MpuBoard.CpudefendDevm.SpuCars.SpuCar
	(*Devm_MpuBoards_MpuBoard_CpudefendDevm_ArpVlanCar_Level2Car)(nil),                                             // 449: huawei_devm.Devm.MpuBoards.MpuBoard.CpudefendDevm.ArpVlanCar.Level2Car
	(*Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms)(nil),                                         // 450: huawei_devm.Devm.MpuBoards.MpuBoard.CpudefendDevm.NdVlanCar.NdAttackAlarms
	(*Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_Level2Cars)(nil),                                             // 451: huawei_devm.Devm.MpuBoards.MpuBoard.CpudefendDevm.NdVlanCar.Level2Cars
	(*Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms_NdAttackAlarm)(nil),                           // 452: huawei_devm.Devm.MpuBoards.MpuBoard.CpudefendDevm.NdVlanCar.NdAttackAlarms.NdAttackAlarm
	(*Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_Level2Cars_Level2Car)(nil),                                   // 453: huawei_devm.Devm.MpuBoards.MpuBoard.CpudefendDevm.NdVlanCar.Level2Cars.Level2Car
	(*Devm_MpuBoards_MpuBoard_Loadbalance_DynamicAdjust)(nil),                                                      // 454: huawei_devm.Devm.MpuBoards.MpuBoard.Loadbalance.DynamicAdjust
	(*Devm_MpuBoards_MpuBoard_Loadbalance_HashArithmetic)(nil),                                                     // 455: huawei_devm.Devm.MpuBoards.MpuBoard.Loadbalance.HashArithmetic
	(*Devm_MpuBoards_MpuBoard_Loadbalance_HashFields)(nil),                                                         // 456: huawei_devm.Devm.MpuBoards.MpuBoard.Loadbalance.HashFields
	(*Devm_MpuBoards_MpuBoard_Loadbalance_HashSeed)(nil),                                                           // 457: huawei_devm.Devm.MpuBoards.MpuBoard.Loadbalance.HashSeed
	(*Devm_MpuBoards_MpuBoard_Loadbalance_HashMultipe)(nil),                                                        // 458: huawei_devm.Devm.MpuBoards.MpuBoard.Loadbalance.HashMultipe
	(*Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField)(nil),                                               // 459: huawei_devm.Devm.MpuBoards.MpuBoard.Loadbalance.HashFields.HashField
	(*Devm_MpuBoards_MpuBoard_Mirror_SlotObserve)(nil),                                                             // 460: huawei_devm.Devm.MpuBoards.MpuBoard.Mirror.SlotObserve
	(*Devm_MpuBoards_MpuBoard_Mirror_ObserveFilters)(nil),                                                          // 461: huawei_devm.Devm.MpuBoards.MpuBoard.Mirror.ObserveFilters
	(*Devm_MpuBoards_MpuBoard_Mirror_ObserveFilters_ObserveFilter)(nil),                                            // 462: huawei_devm.Devm.MpuBoards.MpuBoard.Mirror.ObserveFilters.ObserveFilter
	(*Devm_MpuBoards_MpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolType_Ppp)(nil),                           // 463: huawei_devm.Devm.MpuBoards.MpuBoard.Mirror.ObserveFilters.ObserveFilter.ProtocolType_Ppp
	(*Devm_MpuBoards_MpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolType_Ip)(nil),                            // 464: huawei_devm.Devm.MpuBoards.MpuBoard.Mirror.ObserveFilters.ObserveFilter.ProtocolType_Ip
	(*Devm_MpuBoards_MpuBoard_MplsForward_MplsHashMode)(nil),                                                       // 465: huawei_devm.Devm.MpuBoards.MpuBoard.MplsForward.MplsHashMode
	(*Devm_MpuBoards_MpuBoard_MplsForward_Mplsfrags)(nil),                                                          // 466: huawei_devm.Devm.MpuBoards.MpuBoard.MplsForward.Mplsfrags
	(*Devm_MpuBoards_MpuBoard_MplsForward_MplsLoadCtrwords)(nil),                                                   // 467: huawei_devm.Devm.MpuBoards.MpuBoard.MplsForward.MplsLoadCtrwords
	(*Devm_MpuBoards_MpuBoard_Netstream_SamplerModes)(nil),                                                         // 468: huawei_devm.Devm.MpuBoards.MpuBoard.Netstream.SamplerModes
	(*Devm_MpuBoards_MpuBoard_Netstream_SequenceMode)(nil),                                                         // 469: huawei_devm.Devm.MpuBoards.MpuBoard.Netstream.SequenceMode
	(*Devm_MpuBoards_MpuBoard_Netstream_ExportHosts)(nil),                                                          // 470: huawei_devm.Devm.MpuBoards.MpuBoard.Netstream.ExportHosts
	(*Devm_MpuBoards_MpuBoard_Netstream_SamplerModes_SamplerMode)(nil),                                             // 471: huawei_devm.Devm.MpuBoards.MpuBoard.Netstream.SamplerModes.SamplerMode
	(*Devm_MpuBoards_MpuBoard_Netstream_ExportHosts_ExportHost)(nil),                                               // 472: huawei_devm.Devm.MpuBoards.MpuBoard.Netstream.ExportHosts.ExportHost
	(*Devm_MpuBoards_MpuBoard_Pbr_RoutingFilters)(nil),                                                             // 473: huawei_devm.Devm.MpuBoards.MpuBoard.Pbr.RoutingFilters
	(*Devm_MpuBoards_MpuBoard_Pbr_RoutingFilters_RoutingFilter)(nil),                                               // 474: huawei_devm.Devm.MpuBoards.MpuBoard.Pbr.RoutingFilters.RoutingFilter
	(*Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchs)(nil),                                                        // 475: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.TrafficPolicyMatchs
	(*Devm_MpuBoards_MpuBoard_Qos_PqSchedulePrioritys)(nil),                                                        // 476: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.PqSchedulePrioritys
	(*Devm_MpuBoards_MpuBoard_Qos_PqSchedulePriorityOnCards)(nil),                                                  // 477: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.PqSchedulePriorityOnCards
	(*Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues)(nil),                                                        // 478: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.MulticastPortQueues
	(*Devm_MpuBoards_MpuBoard_Qos_MulticastPortShaping)(nil),                                                       // 479: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.MulticastPortShaping
	(*Devm_MpuBoards_MpuBoard_Qos_UserQueuePirPrecision)(nil),                                                      // 480: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.UserQueuePirPrecision
	(*Devm_MpuBoards_MpuBoard_Qos_ExpPhbDisable)(nil),                                                              // 481: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.ExpPhbDisable
	(*Devm_MpuBoards_MpuBoard_Qos_PacketBlockThresholds)(nil),                                                      // 482: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.PacketBlockThresholds
	(*Devm_MpuBoards_MpuBoard_Qos_PacketBlockThresholdAll)(nil),                                                    // 483: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.PacketBlockThresholdAll
	(*Devm_MpuBoards_MpuBoard_Qos_ChannelAlarms)(nil),                                                              // 484: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.ChannelAlarms
	(*Devm_MpuBoards_MpuBoard_Qos_ChannelProfilePrecision)(nil),                                                    // 485: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.ChannelProfilePrecision
	(*Devm_MpuBoards_MpuBoard_Qos_ChannelProfileApply)(nil),                                                        // 486: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.ChannelProfileApply
	(*Devm_MpuBoards_MpuBoard_Qos_MulticastShaping)(nil),                                                           // 487: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.MulticastShaping
	(*Devm_MpuBoards_MpuBoard_Qos_PortQueueAlarms)(nil),                                                            // 488: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.PortQueueAlarms
	(*Devm_MpuBoards_MpuBoard_Qos_UserQueueRecoveryDisable)(nil),                                                   // 489: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.UserQueueRecoveryDisable
	(*Devm_MpuBoards_MpuBoard_Qos_AccessUserBoardScheduleEnable)(nil),                                              // 490: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.AccessUserBoardScheduleEnable
	(*Devm_MpuBoards_MpuBoard_Qos_ConvergentPrecedenceHighs)(nil),                                                  // 491: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.ConvergentPrecedenceHighs
	(*Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms)(nil),                                                         // 492: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.QueueDiscardAlarms
	(*Devm_MpuBoards_MpuBoard_Qos_UserQueueBurst)(nil),                                                             // 493: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.UserQueueBurst
	(*Devm_MpuBoards_MpuBoard_Qos_BurstSizes)(nil),                                                                 // 494: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.BurstSizes
	(*Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareThresholds)(nil),                                                // 495: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.GlobalBufferShareThresholds
	(*Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues)(nil),                                                    // 496: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.GlobalBufferShareQueues
	(*Devm_MpuBoards_MpuBoard_Qos_FlowQueueBackpressureOff)(nil),                                                   // 497: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.FlowQueueBackpressureOff
	(*Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchType)(nil),                                                     // 498: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.TrafficPolicyMatchType
	(*Devm_MpuBoards_MpuBoard_Qos_UserQueueResource4Cos)(nil),                                                      // 499: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.UserQueueResource4Cos
	(*Devm_MpuBoards_MpuBoard_Qos_UserQueueResource8CosEnhances)(nil),                                              // 500: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.UserQueueResource8CosEnhances
	(*Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch)(nil),                                     // 501: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.TrafficPolicyMatchs.TrafficPolicyMatch
	(*Devm_MpuBoards_MpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority)(nil),                                     // 502: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.PqSchedulePrioritys.PqSchedulePriority
	(*Devm_MpuBoards_MpuBoard_Qos_PqSchedulePriorityOnCards_PqSchedulePriorityOnCard)(nil),                         // 503: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.PqSchedulePriorityOnCards.PqSchedulePriorityOnCard
	(*Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue)(nil),                                     // 504: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.MulticastPortQueues.MulticastPortQueue
	(*Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParameters_Shaping)(nil),           // 505: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.MulticastPortQueues.MulticastPortQueue.ShapingParameters_Shaping
	(*Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParameters_ShapingPercent)(nil),    // 506: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.MulticastPortQueues.MulticastPortQueue.ShapingParameters_ShapingPercent
	(*Devm_MpuBoards_MpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingTypeMode)(nil),                     // 507: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.MulticastPortShaping.ShapingParameters_ShapingTypeMode
	(*Devm_MpuBoards_MpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingValueMode)(nil),                    // 508: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.MulticastPortShaping.ShapingParameters_ShapingValueMode
	(*Devm_MpuBoards_MpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold)(nil),                                 // 509: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.PacketBlockThresholds.PacketBlockThreshold
	(*Devm_MpuBoards_MpuBoard_Qos_ChannelAlarms_ChannelAlarm)(nil),                                                 // 510: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.ChannelAlarms.ChannelAlarm
	(*Devm_MpuBoards_MpuBoard_Qos_PortQueueAlarms_PortQueueAlarm)(nil),                                             // 511: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.PortQueueAlarms.PortQueueAlarm
	(*Devm_MpuBoards_MpuBoard_Qos_ConvergentPrecedenceHighs_ConvergentPrecedenceHigh)(nil),                         // 512: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.ConvergentPrecedenceHighs.ConvergentPrecedenceHigh
	(*Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm)(nil),                                       // 513: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.QueueDiscardAlarms.QueueDiscardAlarm
	(*Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType_Bytes)(nil),                     // 514: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.QueueDiscardAlarms.QueueDiscardAlarm.DiscardType_Bytes
	(*Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType_Packets)(nil),                   // 515: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.QueueDiscardAlarms.QueueDiscardAlarm.DiscardType_Packets
	(*Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType_PacketRatio)(nil),               // 516: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.QueueDiscardAlarms.QueueDiscardAlarm.DiscardType_PacketRatio
	(*Devm_MpuBoards_MpuBoard_Qos_BurstSizes_BurstSize)(nil),                                                       // 517: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.BurstSizes.BurstSize
	(*Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareThresholds_GlobalBufferShareThreshold)(nil),                     // 518: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.GlobalBufferShareThresholds.GlobalBufferShareThreshold
	(*Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue)(nil),                             // 519: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.GlobalBufferShareQueues.GlobalBufferShareQueue
	(*Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchType_DestinationUser)(nil),                                     // 520: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.TrafficPolicyMatchType.DestinationUser
	(*Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchType_InterfaceAcl)(nil),                                        // 521: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.TrafficPolicyMatchType.InterfaceAcl
	(*Devm_MpuBoards_MpuBoard_Qos_UserQueueResource8CosEnhances_UserQueueResource8CosEnhance)(nil),                 // 522: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.UserQueueResource8CosEnhances.UserQueueResource8CosEnhance
	(*Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect)(nil),                                                               // 523: huawei_devm.Devm.MpuBoards.MpuBoard.Soc.L2LoopDetect
	(*Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_SlotL2Loopdet)(nil),                                                 // 524: huawei_devm.Devm.MpuBoards.MpuBoard.Soc.L2LoopDetect.SlotL2Loopdet
	(*Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_Action)(nil),                                                        // 525: huawei_devm.Devm.MpuBoards.MpuBoard.Soc.L2LoopDetect.Action
	(*Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_LoopLevelThresholds)(nil),                                           // 526: huawei_devm.Devm.MpuBoards.MpuBoard.Soc.L2LoopDetect.LoopLevelThresholds
	(*Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_Action_Shutdown)(nil),                                               // 527: huawei_devm.Devm.MpuBoards.MpuBoard.Soc.L2LoopDetect.Action.Shutdown
	(*Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_Action_Trap)(nil),                                                   // 528: huawei_devm.Devm.MpuBoards.MpuBoard.Soc.L2LoopDetect.Action.Trap
	(*Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_LoopLevelThresholds_LoopLevelThreshold)(nil),                        // 529: huawei_devm.Devm.MpuBoards.MpuBoard.Soc.L2LoopDetect.LoopLevelThresholds.LoopLevelThreshold
	(*Devm_MpuBoards_MpuBoard_UnicastForward_Ipv4Uc)(nil),                                                          // 530: huawei_devm.Devm.MpuBoards.MpuBoard.UnicastForward.Ipv4Uc
	(*Devm_MpuBoards_MpuBoard_UnicastForward_ArpFastReply)(nil),                                                    // 531: huawei_devm.Devm.MpuBoards.MpuBoard.UnicastForward.ArpFastReply
	(*Devm_MpuBoards_MpuBoard_UnicastForward_GreTtlMode)(nil),                                                      // 532: huawei_devm.Devm.MpuBoards.MpuBoard.UnicastForward.GreTtlMode
	(*Devm_MpuBoards_MpuBoard_UnicastForward_NdFastReply)(nil),                                                     // 533: huawei_devm.Devm.MpuBoards.MpuBoard.UnicastForward.NdFastReply
	(*Devm_MpuBoards_MpuBoard_HttpsRedirect_ChastenFlow)(nil),                                                      // 534: huawei_devm.Devm.MpuBoards.MpuBoard.HttpsRedirect.ChastenFlow
	(*Devm_MpuBoards_MpuBoard_HttpsRedirect_ChastenRedirect)(nil),                                                  // 535: huawei_devm.Devm.MpuBoards.MpuBoard.HttpsRedirect.ChastenRedirect
	(*Devm_MpuBoards_MpuBoard_PppNet_LoadBalanceIdentifyPppoe)(nil),                                                // 536: huawei_devm.Devm.MpuBoards.MpuBoard.PppNet.LoadBalanceIdentifyPppoe
	(*Devm_MpuBoards_MpuBoard_Sflow_SlotSampling)(nil),                                                             // 537: huawei_devm.Devm.MpuBoards.MpuBoard.Sflow.SlotSampling
	(*Devm_MpuBoards_MpuBoard_Dcb_HeadroomPool)(nil),                                                               // 538: huawei_devm.Devm.MpuBoards.MpuBoard.Dcb.HeadroomPool
	(*Devm_MpuBoards_MpuBoard_Dcb_DeadlockRecoveryBehavior)(nil),                                                   // 539: huawei_devm.Devm.MpuBoards.MpuBoard.Dcb.DeadlockRecoveryBehavior
	(*Devm_MpuBoards_MpuBoard_Dcb_PfcMappingType)(nil),                                                             // 540: huawei_devm.Devm.MpuBoards.MpuBoard.Dcb.PfcMappingType
	(*Devm_LpuBoards_LpuBoard)(nil),                                                                                // 541: huawei_devm.Devm.LpuBoards.LpuBoard
	(*Devm_LpuBoards_LpuBoard_Bras)(nil),                                                                           // 542: huawei_devm.Devm.LpuBoards.LpuBoard.Bras
	(*Devm_LpuBoards_LpuBoard_HttpsRedirect)(nil),                                                                  // 543: huawei_devm.Devm.LpuBoards.LpuBoard.HttpsRedirect
	(*Devm_LpuBoards_LpuBoard_L2Tp)(nil),                                                                           // 544: huawei_devm.Devm.LpuBoards.LpuBoard.L2Tp
	(*Devm_LpuBoards_LpuBoard_BrasPppox)(nil),                                                                      // 545: huawei_devm.Devm.LpuBoards.LpuBoard.BrasPppox
	(*Devm_LpuBoards_LpuBoard_Cpudefend)(nil),                                                                      // 546: huawei_devm.Devm.LpuBoards.LpuBoard.Cpudefend
	(*Devm_LpuBoards_LpuBoard_CpudefendDevm)(nil),                                                                  // 547: huawei_devm.Devm.LpuBoards.LpuBoard.CpudefendDevm
	(*Devm_LpuBoards_LpuBoard_Driver)(nil),                                                                         // 548: huawei_devm.Devm.LpuBoards.LpuBoard.Driver
	(*Devm_LpuBoards_LpuBoard_CmacPadding)(nil),                                                                    // 549: huawei_devm.Devm.LpuBoards.LpuBoard.CmacPadding
	(*Devm_LpuBoards_LpuBoard_Fim)(nil),                                                                            // 550: huawei_devm.Devm.LpuBoards.LpuBoard.Fim
	(*Devm_LpuBoards_LpuBoard_MacmtuDiscardStatistics)(nil),                                                        // 551: huawei_devm.Devm.LpuBoards.LpuBoard.MacmtuDiscardStatistics
	(*Devm_LpuBoards_LpuBoard_VeMacAddress)(nil),                                                                   // 552: huawei_devm.Devm.LpuBoards.LpuBoard.VeMacAddress
	(*Devm_LpuBoards_LpuBoard_FlowspecForward)(nil),                                                                // 553: huawei_devm.Devm.LpuBoards.LpuBoard.FlowspecForward
	(*Devm_LpuBoards_LpuBoard_ManagementPlaneDefendSlot)(nil),                                                      // 554: huawei_devm.Devm.LpuBoards.LpuBoard.ManagementPlaneDefendSlot
	(*Devm_LpuBoards_LpuBoard_LinkProtocolTransport)(nil),                                                          // 555: huawei_devm.Devm.LpuBoards.LpuBoard.LinkProtocolTransport
	(*Devm_LpuBoards_LpuBoard_Loadbalance)(nil),                                                                    // 556: huawei_devm.Devm.LpuBoards.LpuBoard.Loadbalance
	(*Devm_LpuBoards_LpuBoard_MacSync)(nil),                                                                        // 557: huawei_devm.Devm.LpuBoards.LpuBoard.MacSync
	(*Devm_LpuBoards_LpuBoard_Mirror)(nil),                                                                         // 558: huawei_devm.Devm.LpuBoards.LpuBoard.Mirror
	(*Devm_LpuBoards_LpuBoard_MplsForward)(nil),                                                                    // 559: huawei_devm.Devm.LpuBoards.LpuBoard.MplsForward
	(*Devm_LpuBoards_LpuBoard_Netstream)(nil),                                                                      // 560: huawei_devm.Devm.LpuBoards.LpuBoard.Netstream
	(*Devm_LpuBoards_LpuBoard_Pbr)(nil),                                                                            // 561: huawei_devm.Devm.LpuBoards.LpuBoard.Pbr
	(*Devm_LpuBoards_LpuBoard_Qos)(nil),                                                                            // 562: huawei_devm.Devm.LpuBoards.LpuBoard.Qos
	(*Devm_LpuBoards_LpuBoard_Soc)(nil),                                                                            // 563: huawei_devm.Devm.LpuBoards.LpuBoard.Soc
	(*Devm_LpuBoards_LpuBoard_UnicastForward)(nil),                                                                 // 564: huawei_devm.Devm.LpuBoards.LpuBoard.UnicastForward
	(*Devm_LpuBoards_LpuBoard_CfmMacLevelEnableLpu)(nil),                                                           // 565: huawei_devm.Devm.LpuBoards.LpuBoard.CfmMacLevelEnableLpu
	(*Devm_LpuBoards_LpuBoard_Dhcpv6Access)(nil),                                                                   // 566: huawei_devm.Devm.LpuBoards.LpuBoard.Dhcpv6Access
	(*Devm_LpuBoards_LpuBoard_FramePaddingFix)(nil),                                                                // 567: huawei_devm.Devm.LpuBoards.LpuBoard.FramePaddingFix
	(*Devm_LpuBoards_LpuBoard_PppNet)(nil),                                                                         // 568: huawei_devm.Devm.LpuBoards.LpuBoard.PppNet
	(*Devm_LpuBoards_LpuBoard_Sflow)(nil),                                                                          // 569: huawei_devm.Devm.LpuBoards.LpuBoard.Sflow
	(*Devm_LpuBoards_LpuBoard_Dcb)(nil),                                                                            // 570: huawei_devm.Devm.LpuBoards.LpuBoard.Dcb
	(*Devm_LpuBoards_LpuBoard_MulticastLeafCfcChecks)(nil),                                                         // 571: huawei_devm.Devm.LpuBoards.LpuBoard.MulticastLeafCfcChecks
	(*Devm_LpuBoards_LpuBoard_Bras_FlowStatisticFrequency)(nil),                                                    // 572: huawei_devm.Devm.LpuBoards.LpuBoard.Bras.FlowStatisticFrequency
	(*Devm_LpuBoards_LpuBoard_Bras_Vas)(nil),                                                                       // 573: huawei_devm.Devm.LpuBoards.LpuBoard.Bras.Vas
	(*Devm_LpuBoards_LpuBoard_Bras_Multicast)(nil),                                                                 // 574: huawei_devm.Devm.LpuBoards.LpuBoard.Bras.Multicast
	(*Devm_LpuBoards_LpuBoard_Bras_IpUnrHostRoute)(nil),                                                            // 575: huawei_devm.Devm.LpuBoards.LpuBoard.Bras.IpUnrHostRoute
	(*Devm_LpuBoards_LpuBoard_Bras_Block)(nil),                                                                     // 576: huawei_devm.Devm.LpuBoards.LpuBoard.Bras.Block
	(*Devm_LpuBoards_LpuBoard_Bras_Vas_StatisticFrequency)(nil),                                                    // 577: huawei_devm.Devm.LpuBoards.LpuBoard.Bras.Vas.StatisticFrequency
	(*Devm_LpuBoards_LpuBoard_Bras_Multicast_BasPolicyCac)(nil),                                                    // 578: huawei_devm.Devm.LpuBoards.LpuBoard.Bras.Multicast.BasPolicyCac
	(*Devm_LpuBoards_LpuBoard_HttpsRedirect_ChastenFlow)(nil),                                                      // 579: huawei_devm.Devm.LpuBoards.LpuBoard.HttpsRedirect.ChastenFlow
	(*Devm_LpuBoards_LpuBoard_HttpsRedirect_ChastenRedirect)(nil),                                                  // 580: huawei_devm.Devm.LpuBoards.LpuBoard.HttpsRedirect.ChastenRedirect
	(*Devm_LpuBoards_LpuBoard_L2Tp_IcrqLimit)(nil),                                                                 // 581: huawei_devm.Devm.LpuBoards.LpuBoard.L2Tp.IcrqLimit
	(*Devm_LpuBoards_LpuBoard_L2Tp_ForwardMode)(nil),                                                               // 582: huawei_devm.Devm.LpuBoards.LpuBoard.L2Tp.ForwardMode
	(*Devm_LpuBoards_LpuBoard_BrasPppox_SlotAccessLimit)(nil),                                                      // 583: huawei_devm.Devm.LpuBoards.LpuBoard.BrasPppox.SlotAccessLimit
	(*Devm_LpuBoards_LpuBoard_BrasPppox_AccessIp)(nil),                                                             // 584: huawei_devm.Devm.LpuBoards.LpuBoard.BrasPppox.AccessIp
	(*Devm_LpuBoards_LpuBoard_BrasPppox_AccessIpLimit)(nil),                                                        // 585: huawei_devm.Devm.LpuBoards.LpuBoard.BrasPppox.AccessIpLimit
	(*Devm_LpuBoards_LpuBoard_BrasPppox_LoadBalanceIdentifyPppoe)(nil),                                             // 586: huawei_devm.Devm.LpuBoards.LpuBoard.BrasPppox.LoadBalanceIdentifyPppoe
	(*Devm_LpuBoards_LpuBoard_BrasPppox_MaxSessions)(nil),                                                          // 587: huawei_devm.Devm.LpuBoards.LpuBoard.BrasPppox.MaxSessions
	(*Devm_LpuBoards_LpuBoard_BrasPppox_PppoeSlotStatistic)(nil),                                                   // 588: huawei_devm.Devm.LpuBoards.LpuBoard.BrasPppox.PppoeSlotStatistic
	(*Devm_LpuBoards_LpuBoard_BrasPppox_PppSlotStatistic)(nil),                                                     // 589: huawei_devm.Devm.LpuBoards.LpuBoard.BrasPppox.PppSlotStatistic
	(*Devm_LpuBoards_LpuBoard_BrasPppox_UrpfDiscardStatistics)(nil),                                                // 590: huawei_devm.Devm.LpuBoards.LpuBoard.BrasPppox.UrpfDiscardStatistics
	(*Devm_LpuBoards_LpuBoard_BrasPppox_PppEchoDeployMode)(nil),                                                    // 591: huawei_devm.Devm.LpuBoards.LpuBoard.BrasPppox.PppEchoDeployMode
	(*Devm_LpuBoards_LpuBoard_BrasPppox_UrpfDiscardStatistics_UrpfIpv4DiscardStatistic)(nil),                       // 592: huawei_devm.Devm.LpuBoards.LpuBoard.BrasPppox.UrpfDiscardStatistics.UrpfIpv4DiscardStatistic
	(*Devm_LpuBoards_LpuBoard_BrasPppox_UrpfDiscardStatistics_UrpfIpv6DiscardStatistic)(nil),                       // 593: huawei_devm.Devm.LpuBoards.LpuBoard.BrasPppox.UrpfDiscardStatistics.UrpfIpv6DiscardStatistic
	(*Devm_LpuBoards_LpuBoard_CpudefendDevm_IgnoreHostcarAcl)(nil),                                                 // 594: huawei_devm.Devm.LpuBoards.LpuBoard.CpudefendDevm.IgnoreHostcarAcl
	(*Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars)(nil),                                                     // 595: huawei_devm.Devm.LpuBoards.LpuBoard.CpudefendDevm.BrasHostCars
	(*Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars)(nil),                                                          // 596: huawei_devm.Devm.LpuBoards.LpuBoard.CpudefendDevm.SpuCars
	(*Devm_LpuBoards_LpuBoard_CpudefendDevm_ArpVlanCar)(nil),                                                       // 597: huawei_devm.Devm.LpuBoards.LpuBoard.CpudefendDevm.ArpVlanCar
	(*Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar)(nil),                                                        // 598: huawei_devm.Devm.LpuBoards.LpuBoard.CpudefendDevm.NdVlanCar
	(*Devm_LpuBoards_LpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclType_ByIdentity)(nil),                          // 599: huawei_devm.Devm.LpuBoards.LpuBoard.CpudefendDevm.IgnoreHostcarAcl.Ipv4AclType_ByIdentity
	(*Devm_LpuBoards_LpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclType_ByNumber)(nil),                            // 600: huawei_devm.Devm.LpuBoards.LpuBoard.CpudefendDevm.IgnoreHostcarAcl.Ipv4AclType_ByNumber
	(*Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar)(nil),                                         // 601: huawei_devm.Devm.LpuBoards.LpuBoard.CpudefendDevm.BrasHostCars.BrasHostCar
	(*Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_RateLimit)(nil),                               // 602: huawei_devm.Devm.LpuBoards.LpuBoard.CpudefendDevm.BrasHostCars.BrasHostCar.RateLimit
	(*Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_Logging)(nil),                                 // 603: huawei_devm.Devm.LpuBoards.LpuBoard.CpudefendDevm.BrasHostCars.BrasHostCar.Logging
	(*Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_AttackDetect)(nil),                            // 604: huawei_devm.Devm.LpuBoards.LpuBoard.CpudefendDevm.BrasHostCars.BrasHostCar.AttackDetect
	(*Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar)(nil),                                                   // 605: huawei_devm.Devm.LpuBoards.LpuBoard.CpudefendDevm.SpuCars.SpuCar
	(*Devm_LpuBoards_LpuBoard_CpudefendDevm_ArpVlanCar_Level2Car)(nil),                                             // 606: huawei_devm.Devm.LpuBoards.LpuBoard.CpudefendDevm.ArpVlanCar.Level2Car
	(*Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms)(nil),                                         // 607: huawei_devm.Devm.LpuBoards.LpuBoard.CpudefendDevm.NdVlanCar.NdAttackAlarms
	(*Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_Level2Cars)(nil),                                             // 608: huawei_devm.Devm.LpuBoards.LpuBoard.CpudefendDevm.NdVlanCar.Level2Cars
	(*Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms_NdAttackAlarm)(nil),                           // 609: huawei_devm.Devm.LpuBoards.LpuBoard.CpudefendDevm.NdVlanCar.NdAttackAlarms.NdAttackAlarm
	(*Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_Level2Cars_Level2Car)(nil),                                   // 610: huawei_devm.Devm.LpuBoards.LpuBoard.CpudefendDevm.NdVlanCar.Level2Cars.Level2Car
	(*Devm_LpuBoards_LpuBoard_Driver_L3Clocks)(nil),                                                                // 611: huawei_devm.Devm.LpuBoards.LpuBoard.Driver.L3Clocks
	(*Devm_LpuBoards_LpuBoard_Driver_L3Clocks_L3Clock)(nil),                                                        // 612: huawei_devm.Devm.LpuBoards.LpuBoard.Driver.L3Clocks.L3Clock
	(*Devm_LpuBoards_LpuBoard_FlowspecForward_Ipv6FlowspecEnable)(nil),                                             // 613: huawei_devm.Devm.LpuBoards.LpuBoard.FlowspecForward.Ipv6FlowspecEnable
	(*Devm_LpuBoards_LpuBoard_Loadbalance_DynamicAdjust)(nil),                                                      // 614: huawei_devm.Devm.LpuBoards.LpuBoard.Loadbalance.DynamicAdjust
	(*Devm_LpuBoards_LpuBoard_Loadbalance_HashArithmetic)(nil),                                                     // 615: huawei_devm.Devm.LpuBoards.LpuBoard.Loadbalance.HashArithmetic
	(*Devm_LpuBoards_LpuBoard_Loadbalance_HashFields)(nil),                                                         // 616: huawei_devm.Devm.LpuBoards.LpuBoard.Loadbalance.HashFields
	(*Devm_LpuBoards_LpuBoard_Loadbalance_HashSeed)(nil),                                                           // 617: huawei_devm.Devm.LpuBoards.LpuBoard.Loadbalance.HashSeed
	(*Devm_LpuBoards_LpuBoard_Loadbalance_HashMultipe)(nil),                                                        // 618: huawei_devm.Devm.LpuBoards.LpuBoard.Loadbalance.HashMultipe
	(*Devm_LpuBoards_LpuBoard_Loadbalance_Hashs)(nil),                                                              // 619: huawei_devm.Devm.LpuBoards.LpuBoard.Loadbalance.Hashs
	(*Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField)(nil),                                               // 620: huawei_devm.Devm.LpuBoards.LpuBoard.Loadbalance.HashFields.HashField
	(*Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash)(nil),                                                         // 621: huawei_devm.Devm.LpuBoards.LpuBoard.Loadbalance.Hashs.Hash
	(*Devm_LpuBoards_LpuBoard_Mirror_SlotObserve)(nil),                                                             // 622: huawei_devm.Devm.LpuBoards.LpuBoard.Mirror.SlotObserve
	(*Devm_LpuBoards_LpuBoard_Mirror_RateLimitPercent)(nil),                                                        // 623: huawei_devm.Devm.LpuBoards.LpuBoard.Mirror.RateLimitPercent
	(*Devm_LpuBoards_LpuBoard_Mirror_ObserveFilters)(nil),                                                          // 624: huawei_devm.Devm.LpuBoards.LpuBoard.Mirror.ObserveFilters
	(*Devm_LpuBoards_LpuBoard_Mirror_ObserveFilters_ObserveFilter)(nil),                                            // 625: huawei_devm.Devm.LpuBoards.LpuBoard.Mirror.ObserveFilters.ObserveFilter
	(*Devm_LpuBoards_LpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolType_Ppp)(nil),                           // 626: huawei_devm.Devm.LpuBoards.LpuBoard.Mirror.ObserveFilters.ObserveFilter.ProtocolType_Ppp
	(*Devm_LpuBoards_LpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolType_Ip)(nil),                            // 627: huawei_devm.Devm.LpuBoards.LpuBoard.Mirror.ObserveFilters.ObserveFilter.ProtocolType_Ip
	(*Devm_LpuBoards_LpuBoard_MplsForward_MplsHashMode)(nil),                                                       // 628: huawei_devm.Devm.LpuBoards.LpuBoard.MplsForward.MplsHashMode
	(*Devm_LpuBoards_LpuBoard_MplsForward_Mplsfrags)(nil),                                                          // 629: huawei_devm.Devm.LpuBoards.LpuBoard.MplsForward.Mplsfrags
	(*Devm_LpuBoards_LpuBoard_MplsForward_MplsLoadCtrwords)(nil),                                                   // 630: huawei_devm.Devm.LpuBoards.LpuBoard.MplsForward.MplsLoadCtrwords
	(*Devm_LpuBoards_LpuBoard_Netstream_SamplerModes)(nil),                                                         // 631: huawei_devm.Devm.LpuBoards.LpuBoard.Netstream.SamplerModes
	(*Devm_LpuBoards_LpuBoard_Netstream_SequenceMode)(nil),                                                         // 632: huawei_devm.Devm.LpuBoards.LpuBoard.Netstream.SequenceMode
	(*Devm_LpuBoards_LpuBoard_Netstream_ExportHosts)(nil),                                                          // 633: huawei_devm.Devm.LpuBoards.LpuBoard.Netstream.ExportHosts
	(*Devm_LpuBoards_LpuBoard_Netstream_SamplerModes_SamplerMode)(nil),                                             // 634: huawei_devm.Devm.LpuBoards.LpuBoard.Netstream.SamplerModes.SamplerMode
	(*Devm_LpuBoards_LpuBoard_Netstream_ExportHosts_ExportHost)(nil),                                               // 635: huawei_devm.Devm.LpuBoards.LpuBoard.Netstream.ExportHosts.ExportHost
	(*Devm_LpuBoards_LpuBoard_Pbr_RoutingFilters)(nil),                                                             // 636: huawei_devm.Devm.LpuBoards.LpuBoard.Pbr.RoutingFilters
	(*Devm_LpuBoards_LpuBoard_Pbr_RoutingFilters_RoutingFilter)(nil),                                               // 637: huawei_devm.Devm.LpuBoards.LpuBoard.Pbr.RoutingFilters.RoutingFilter
	(*Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchs)(nil),                                                        // 638: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.TrafficPolicyMatchs
	(*Devm_LpuBoards_LpuBoard_Qos_PqSchedulePrioritys)(nil),                                                        // 639: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.PqSchedulePrioritys
	(*Devm_LpuBoards_LpuBoard_Qos_PqSchedulePriorityOnCards)(nil),                                                  // 640: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.PqSchedulePriorityOnCards
	(*Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues)(nil),                                                        // 641: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.MulticastPortQueues
	(*Devm_LpuBoards_LpuBoard_Qos_MulticastPortShaping)(nil),                                                       // 642: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.MulticastPortShaping
	(*Devm_LpuBoards_LpuBoard_Qos_UserQueuePirPrecision)(nil),                                                      // 643: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.UserQueuePirPrecision
	(*Devm_LpuBoards_LpuBoard_Qos_ExpPhbDisable)(nil),                                                              // 644: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.ExpPhbDisable
	(*Devm_LpuBoards_LpuBoard_Qos_PacketBlockThresholds)(nil),                                                      // 645: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.PacketBlockThresholds
	(*Devm_LpuBoards_LpuBoard_Qos_PacketBlockThresholdAll)(nil),                                                    // 646: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.PacketBlockThresholdAll
	(*Devm_LpuBoards_LpuBoard_Qos_ChannelAlarms)(nil),                                                              // 647: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.ChannelAlarms
	(*Devm_LpuBoards_LpuBoard_Qos_ChannelProfilePrecision)(nil),                                                    // 648: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.ChannelProfilePrecision
	(*Devm_LpuBoards_LpuBoard_Qos_ChannelProfileApply)(nil),                                                        // 649: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.ChannelProfileApply
	(*Devm_LpuBoards_LpuBoard_Qos_FabricQueueStatisticEnable)(nil),                                                 // 650: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.FabricQueueStatisticEnable
	(*Devm_LpuBoards_LpuBoard_Qos_OverRideAdjustNumber)(nil),                                                       // 651: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.OverRideAdjustNumber
	(*Devm_LpuBoards_LpuBoard_Qos_OverRideDegradeCycle)(nil),                                                       // 652: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.OverRideDegradeCycle
	(*Devm_LpuBoards_LpuBoard_Qos_OverRideUpgradeCycle)(nil),                                                       // 653: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.OverRideUpgradeCycle
	(*Devm_LpuBoards_LpuBoard_Qos_OverRideSwitch)(nil),                                                             // 654: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.OverRideSwitch
	(*Devm_LpuBoards_LpuBoard_Qos_OverRideInboundThresholdAdjust)(nil),                                             // 655: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.OverRideInboundThresholdAdjust
	(*Devm_LpuBoards_LpuBoard_Qos_OverRideOutboundThresholdAdjust)(nil),                                            // 656: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.OverRideOutboundThresholdAdjust
	(*Devm_LpuBoards_LpuBoard_Qos_OverRideMonitorNumber)(nil),                                                      // 657: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.OverRideMonitorNumber
	(*Devm_LpuBoards_LpuBoard_Qos_OverRideEnableSwitch)(nil),                                                       // 658: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.OverRideEnableSwitch
	(*Devm_LpuBoards_LpuBoard_Qos_MulticastShaping)(nil),                                                           // 659: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.MulticastShaping
	(*Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate)(nil),                                            // 660: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.MulticastShapingServiceTemplate
	(*Devm_LpuBoards_LpuBoard_Qos_PortQueueAlarms)(nil),                                                            // 661: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.PortQueueAlarms
	(*Devm_LpuBoards_LpuBoard_Qos_UserQueueRecoveryDisable)(nil),                                                   // 662: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.UserQueueRecoveryDisable
	(*Devm_LpuBoards_LpuBoard_Qos_MulticastShapers)(nil),                                                           // 663: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.MulticastShapers
	(*Devm_LpuBoards_LpuBoard_Qos_AccessUserBoardScheduleEnable)(nil),                                              // 664: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.AccessUserBoardScheduleEnable
	(*Devm_LpuBoards_LpuBoard_Qos_ConvergentPrecedenceHighs)(nil),                                                  // 665: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.ConvergentPrecedenceHighs
	(*Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms)(nil),                                                         // 666: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.QueueDiscardAlarms
	(*Devm_LpuBoards_LpuBoard_Qos_UserQueueBurst)(nil),                                                             // 667: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.UserQueueBurst
	(*Devm_LpuBoards_LpuBoard_Qos_BurstSizes)(nil),                                                                 // 668: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.BurstSizes
	(*Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareThresholds)(nil),                                                // 669: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.GlobalBufferShareThresholds
	(*Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues)(nil),                                                    // 670: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.GlobalBufferShareQueues
	(*Devm_LpuBoards_LpuBoard_Qos_FlowQueueBackpressureOff)(nil),                                                   // 671: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.FlowQueueBackpressureOff
	(*Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchType)(nil),                                                     // 672: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.TrafficPolicyMatchType
	(*Devm_LpuBoards_LpuBoard_Qos_UserQueueResource4Cos)(nil),                                                      // 673: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.UserQueueResource4Cos
	(*Devm_LpuBoards_LpuBoard_Qos_UserQueueResource8CosEnhances)(nil),                                              // 674: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.UserQueueResource8CosEnhances
	(*Devm_LpuBoards_LpuBoard_Qos_ChannelAutoAdjustSwitch)(nil),                                                    // 675: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.ChannelAutoAdjustSwitch
	(*Devm_LpuBoards_LpuBoard_Qos_OverRideEnableInboundSwitch)(nil),                                                // 676: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.OverRideEnableInboundSwitch
	(*Devm_LpuBoards_LpuBoard_Qos_OverRideInitialGrade)(nil),                                                       // 677: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.OverRideInitialGrade
	(*Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch)(nil),                                     // 678: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.TrafficPolicyMatchs.TrafficPolicyMatch
	(*Devm_LpuBoards_LpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority)(nil),                                     // 679: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.PqSchedulePrioritys.PqSchedulePriority
	(*Devm_LpuBoards_LpuBoard_Qos_PqSchedulePriorityOnCards_PqSchedulePriorityOnCard)(nil),                         // 680: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.PqSchedulePriorityOnCards.PqSchedulePriorityOnCard
	(*Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue)(nil),                                     // 681: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.MulticastPortQueues.MulticastPortQueue
	(*Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParameters_Shaping)(nil),           // 682: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.MulticastPortQueues.MulticastPortQueue.ShapingParameters_Shaping
	(*Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParameters_ShapingPercent)(nil),    // 683: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.MulticastPortQueues.MulticastPortQueue.ShapingParameters_ShapingPercent
	(*Devm_LpuBoards_LpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingTypeMode)(nil),                     // 684: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.MulticastPortShaping.ShapingParameters_ShapingTypeMode
	(*Devm_LpuBoards_LpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingValueMode)(nil),                    // 685: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.MulticastPortShaping.ShapingParameters_ShapingValueMode
	(*Devm_LpuBoards_LpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold)(nil),                                 // 686: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.PacketBlockThresholds.PacketBlockThreshold
	(*Devm_LpuBoards_LpuBoard_Qos_ChannelAlarms_ChannelAlarm)(nil),                                                 // 687: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.ChannelAlarms.ChannelAlarm
	(*Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate_AllServiceClass)(nil),                            // 688: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.MulticastShapingServiceTemplate.AllServiceClass
	(*Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate_SpecificServiceClasss)(nil),                      // 689: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.MulticastShapingServiceTemplate.SpecificServiceClasss
	(*Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate_SpecificServiceClasss_SpecificServiceClass)(nil), // 690: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.MulticastShapingServiceTemplate.SpecificServiceClasss.SpecificServiceClass
	(*Devm_LpuBoards_LpuBoard_Qos_PortQueueAlarms_PortQueueAlarm)(nil),                                             // 691: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.PortQueueAlarms.PortQueueAlarm
	(*Devm_LpuBoards_LpuBoard_Qos_MulticastShapers_MulticastShaper)(nil),                                           // 692: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.MulticastShapers.MulticastShaper
	(*Devm_LpuBoards_LpuBoard_Qos_ConvergentPrecedenceHighs_ConvergentPrecedenceHigh)(nil),                         // 693: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.ConvergentPrecedenceHighs.ConvergentPrecedenceHigh
	(*Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm)(nil),                                       // 694: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.QueueDiscardAlarms.QueueDiscardAlarm
	(*Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType_Bytes)(nil),                     // 695: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.QueueDiscardAlarms.QueueDiscardAlarm.DiscardType_Bytes
	(*Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType_Packets)(nil),                   // 696: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.QueueDiscardAlarms.QueueDiscardAlarm.DiscardType_Packets
	(*Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType_PacketRatio)(nil),               // 697: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.QueueDiscardAlarms.QueueDiscardAlarm.DiscardType_PacketRatio
	(*Devm_LpuBoards_LpuBoard_Qos_BurstSizes_BurstSize)(nil),                                                       // 698: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.BurstSizes.BurstSize
	(*Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareThresholds_GlobalBufferShareThreshold)(nil),                     // 699: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.GlobalBufferShareThresholds.GlobalBufferShareThreshold
	(*Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue)(nil),                             // 700: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.GlobalBufferShareQueues.GlobalBufferShareQueue
	(*Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchType_DestinationUser)(nil),                                     // 701: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.TrafficPolicyMatchType.DestinationUser
	(*Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchType_InterfaceAcl)(nil),                                        // 702: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.TrafficPolicyMatchType.InterfaceAcl
	(*Devm_LpuBoards_LpuBoard_Qos_UserQueueResource8CosEnhances_UserQueueResource8CosEnhance)(nil),                 // 703: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.UserQueueResource8CosEnhances.UserQueueResource8CosEnhance
	(*Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect)(nil),                                                               // 704: huawei_devm.Devm.LpuBoards.LpuBoard.Soc.L2LoopDetect
	(*Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_SlotL2Loopdet)(nil),                                                 // 705: huawei_devm.Devm.LpuBoards.LpuBoard.Soc.L2LoopDetect.SlotL2Loopdet
	(*Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_Action)(nil),                                                        // 706: huawei_devm.Devm.LpuBoards.LpuBoard.Soc.L2LoopDetect.Action
	(*Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_LoopLevelThresholds)(nil),                                           // 707: huawei_devm.Devm.LpuBoards.LpuBoard.Soc.L2LoopDetect.LoopLevelThresholds
	(*Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_Action_Shutdown)(nil),                                               // 708: huawei_devm.Devm.LpuBoards.LpuBoard.Soc.L2LoopDetect.Action.Shutdown
	(*Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_Action_Trap)(nil),                                                   // 709: huawei_devm.Devm.LpuBoards.LpuBoard.Soc.L2LoopDetect.Action.Trap
	(*Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_LoopLevelThresholds_LoopLevelThreshold)(nil),                        // 710: huawei_devm.Devm.LpuBoards.LpuBoard.Soc.L2LoopDetect.LoopLevelThresholds.LoopLevelThreshold
	(*Devm_LpuBoards_LpuBoard_UnicastForward_Ipv4Uc)(nil),                                                          // 711: huawei_devm.Devm.LpuBoards.LpuBoard.UnicastForward.Ipv4Uc
	(*Devm_LpuBoards_LpuBoard_UnicastForward_ArpFastReply)(nil),                                                    // 712: huawei_devm.Devm.LpuBoards.LpuBoard.UnicastForward.ArpFastReply
	(*Devm_LpuBoards_LpuBoard_UnicastForward_GreTtlMode)(nil),                                                      // 713: huawei_devm.Devm.LpuBoards.LpuBoard.UnicastForward.GreTtlMode
	(*Devm_LpuBoards_LpuBoard_UnicastForward_L3LcsCapacitys)(nil),                                                  // 714: huawei_devm.Devm.LpuBoards.LpuBoard.UnicastForward.L3LcsCapacitys
	(*Devm_LpuBoards_LpuBoard_UnicastForward_NdFastReply)(nil),                                                     // 715: huawei_devm.Devm.LpuBoards.LpuBoard.UnicastForward.NdFastReply
	(*Devm_LpuBoards_LpuBoard_UnicastForward_VxlanRdrTrunks)(nil),                                                  // 716: huawei_devm.Devm.LpuBoards.LpuBoard.UnicastForward.VxlanRdrTrunks
	(*Devm_LpuBoards_LpuBoard_UnicastForward_L3LcsCapacitys_SlotL3LcsCapacity)(nil),                                // 717: huawei_devm.Devm.LpuBoards.LpuBoard.UnicastForward.L3LcsCapacitys.SlotL3LcsCapacity
	(*Devm_LpuBoards_LpuBoard_UnicastForward_VxlanRdrTrunks_VxlanRdrTrunk)(nil),                                    // 718: huawei_devm.Devm.LpuBoards.LpuBoard.UnicastForward.VxlanRdrTrunks.VxlanRdrTrunk
	(*Devm_LpuBoards_LpuBoard_PppNet_PppMinPacketLength)(nil),                                                      // 719: huawei_devm.Devm.LpuBoards.LpuBoard.PppNet.PppMinPacketLength
	(*Devm_LpuBoards_LpuBoard_PppNet_LoadBalanceIdentifyPppoe)(nil),                                                // 720: huawei_devm.Devm.LpuBoards.LpuBoard.PppNet.LoadBalanceIdentifyPppoe
	(*Devm_LpuBoards_LpuBoard_Sflow_SlotSampling)(nil),                                                             // 721: huawei_devm.Devm.LpuBoards.LpuBoard.Sflow.SlotSampling
	(*Devm_LpuBoards_LpuBoard_Dcb_HeadroomPool)(nil),                                                               // 722: huawei_devm.Devm.LpuBoards.LpuBoard.Dcb.HeadroomPool
	(*Devm_LpuBoards_LpuBoard_Dcb_DeadlockRecoveryBehavior)(nil),                                                   // 723: huawei_devm.Devm.LpuBoards.LpuBoard.Dcb.DeadlockRecoveryBehavior
	(*Devm_LpuBoards_LpuBoard_Dcb_PfcMappingType)(nil),                                                             // 724: huawei_devm.Devm.LpuBoards.LpuBoard.Dcb.PfcMappingType
	(*Devm_LpuBoards_LpuBoard_MulticastLeafCfcChecks_MulticastLeafCfcCheck)(nil),                                   // 725: huawei_devm.Devm.LpuBoards.LpuBoard.MulticastLeafCfcChecks.MulticastLeafCfcCheck
	(*Devm_SfuBoards_SfuBoard)(nil),                                                                                // 726: huawei_devm.Devm.SfuBoards.SfuBoard
	(*Devm_Cards_Card)(nil),                                                                                        // 727: huawei_devm.Devm.Cards.Card
	(*Devm_Cards_Card_Pic)(nil),                                                                                    // 728: huawei_devm.Devm.Cards.Card.Pic
	(*Devm_Cards_Card_CardTdmParam)(nil),                                                                           // 729: huawei_devm.Devm.Cards.Card.CardTdmParam
	(*Devm_Cards_Card_ServiceMode)(nil),                                                                            // 730: huawei_devm.Devm.Cards.Card.ServiceMode
	(*Devm_Cards_Card_PortGroupModes)(nil),                                                                         // 731: huawei_devm.Devm.Cards.Card.PortGroupModes
	(*Devm_Cards_Card_QueuePriority)(nil),                                                                          // 732: huawei_devm.Devm.Cards.Card.QueuePriority
	(*Devm_Cards_Card_FrameFormat)(nil),                                                                            // 733: huawei_devm.Devm.Cards.Card.FrameFormat
	(*Devm_Cards_Card_ProcessMode)(nil),                                                                            // 734: huawei_devm.Devm.Cards.Card.ProcessMode
	(*Devm_Cards_Card_EmSet)(nil),                                                                                  // 735: huawei_devm.Devm.Cards.Card.EmSet
	(*Devm_Cards_Card_ServiceSwitch)(nil),                                                                          // 736: huawei_devm.Devm.Cards.Card.ServiceSwitch
	(*Devm_Cards_Card_PanelSlots)(nil),                                                                             // 737: huawei_devm.Devm.Cards.Card.PanelSlots
	(*Devm_Cards_Card_InvalidPorts)(nil),                                                                           // 738: huawei_devm.Devm.Cards.Card.InvalidPorts
	(*Devm_Cards_Card_PortGroupModes_PortGroupMode)(nil),                                                           // 739: huawei_devm.Devm.Cards.Card.PortGroupModes.PortGroupMode
	(*Devm_Cards_Card_InvalidPorts_Port)(nil),                                                                      // 740: huawei_devm.Devm.Cards.Card.InvalidPorts.Port
	(*Devm_CfCards_CfCard)(nil),                                                                                    // 741: huawei_devm.Devm.CfCards.CfCard
	(*Devm_Ports_Port)(nil),                                                                                        // 742: huawei_devm.Devm.Ports.Port
	(*Devm_Ports_Port_Ethernet)(nil),                                                                               // 743: huawei_devm.Devm.Ports.Port.Ethernet
	(*Devm_Ports_Port_Laser)(nil),                                                                                  // 744: huawei_devm.Devm.Ports.Port.Laser
	(*Devm_Ports_Port_OpticalModule)(nil),                                                                          // 745: huawei_devm.Devm.Ports.Port.OpticalModule
	(*Devm_Ports_Port_TransmissionAlarm)(nil),                                                                      // 746: huawei_devm.Devm.Ports.Port.TransmissionAlarm
	(*Devm_Ports_Port_Pos)(nil),                                                                                    // 747: huawei_devm.Devm.Ports.Port.Pos
	(*Devm_Ports_Port_Atm)(nil),                                                                                    // 748: huawei_devm.Devm.Ports.Port.Atm
	(*Devm_Ports_Port_Cpos)(nil),                                                                                   // 749: huawei_devm.Devm.Ports.Port.Cpos
	(*Devm_Ports_Port_PortAlarm)(nil),                                                                              // 750: huawei_devm.Devm.Ports.Port.PortAlarm
	(*Devm_Ports_Port_AdmPort)(nil),                                                                                // 751: huawei_devm.Devm.Ports.Port.AdmPort
	(*Devm_Ports_Port_PhySerial)(nil),                                                                              // 752: huawei_devm.Devm.Ports.Port.PhySerial
	(*Devm_Ports_Port_PhyVoice)(nil),                                                                               // 753: huawei_devm.Devm.Ports.Port.PhyVoice
	(*Devm_Ports_Port_E1T1)(nil),                                                                                   // 754: huawei_devm.Devm.Ports.Port.E1T1
	(*Devm_Ports_Port_E3T3)(nil),                                                                                   // 755: huawei_devm.Devm.Ports.Port.E3T3
	(*Devm_Ports_Port_Ethernet_EthWanAttr)(nil),                                                                    // 756: huawei_devm.Devm.Ports.Port.Ethernet.EthWanAttr
	(*Devm_Ports_Port_Ethernet_FecErrorStatistics)(nil),                                                            // 757: huawei_devm.Devm.Ports.Port.Ethernet.FecErrorStatistics
	(*Devm_Ports_Port_Ethernet_NegotiationCompatibleMode)(nil),                                                     // 758: huawei_devm.Devm.Ports.Port.Ethernet.NegotiationCompatibleMode
	(*Devm_Ports_Port_Ethernet_LocalLoopbackResult)(nil),                                                           // 759: huawei_devm.Devm.Ports.Port.Ethernet.LocalLoopbackResult
	(*Devm_Ports_Port_OpticalModule_Channels)(nil),                                                                 // 760: huawei_devm.Devm.Ports.Port.OpticalModule.Channels
	(*Devm_Ports_Port_OpticalModule_WaveMapping)(nil),                                                              // 761: huawei_devm.Devm.Ports.Port.OpticalModule.WaveMapping
	(*Devm_Ports_Port_OpticalModule_GainPower_Gain)(nil),                                                           // 762: huawei_devm.Devm.Ports.Port.OpticalModule.GainPower_Gain
	(*Devm_Ports_Port_OpticalModule_GainPower_Power)(nil),                                                          // 763: huawei_devm.Devm.Ports.Port.OpticalModule.GainPower_Power
	(*Devm_Ports_Port_OpticalModule_Channels_Channel)(nil),                                                         // 764: huawei_devm.Devm.Ports.Port.OpticalModule.Channels.Channel
	(*Devm_Ports_Port_OpticalModule_WaveMapping_WaveMap)(nil),                                                      // 765: huawei_devm.Devm.Ports.Port.OpticalModule.WaveMapping.WaveMap
	(*Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns)(nil),                                                    // 766: huawei_devm.Devm.Ports.Port.TransmissionAlarm.TransAlarmIfdowns
	(*Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown)(nil),                                   // 767: huawei_devm.Devm.Ports.Port.TransmissionAlarm.TransAlarmIfdowns.TransAlarmIfdown
	(*Devm_Ports_Port_Cpos_E1T1S)(nil),                                                                             // 768: huawei_devm.Devm.Ports.Port.Cpos.E1T1S
	(*Devm_Ports_Port_Cpos_E1T1S_E1T1)(nil),                                                                        // 769: huawei_devm.Devm.Ports.Port.Cpos.E1T1S.E1T1
	(*Devm_Ports_Port_Cpos_E1T1S_E1T1_ChannelSets)(nil),                                                            // 770: huawei_devm.Devm.Ports.Port.Cpos.E1T1S.E1T1.ChannelSets
	(*Devm_Ports_Port_Cpos_E1T1S_E1T1_ChannelSets_ChannelSet)(nil),                                                 // 771: huawei_devm.Devm.Ports.Port.Cpos.E1T1S.E1T1.ChannelSets.ChannelSet
	(*Devm_Ports_Port_PortAlarm_EthPortAlarm)(nil),                                                                 // 772: huawei_devm.Devm.Ports.Port.PortAlarm.EthPortAlarm
	(*Devm_Ports_Port_PortAlarm_SdhPortAlarm)(nil),                                                                 // 773: huawei_devm.Devm.Ports.Port.PortAlarm.SdhPortAlarm
	(*Devm_Ports_Port_PortAlarm_PdhPortAlarm)(nil),                                                                 // 774: huawei_devm.Devm.Ports.Port.PortAlarm.PdhPortAlarm
	(*Devm_Ports_Port_PortAlarm_CrcMfeAlarm)(nil),                                                                  // 775: huawei_devm.Devm.Ports.Port.PortAlarm.CrcMfeAlarm
	(*Devm_Ports_Port_PortAlarm_CrcSample)(nil),                                                                    // 776: huawei_devm.Devm.Ports.Port.PortAlarm.CrcSample
	(*Devm_Ports_Port_PortAlarm_AlarmType_CrcErrorThreshold)(nil),                                                  // 777: huawei_devm.Devm.Ports.Port.PortAlarm.AlarmType_CrcErrorThreshold
	(*Devm_Ports_Port_PortAlarm_AlarmType_LinkCrc)(nil),                                                            // 778: huawei_devm.Devm.Ports.Port.PortAlarm.AlarmType_LinkCrc
	(*Devm_Ports_Port_PortAlarm_AlarmType_CrcMfsAlarm)(nil),                                                        // 779: huawei_devm.Devm.Ports.Port.PortAlarm.AlarmType_CrcMfsAlarm
	(*Devm_Ports_Port_PortAlarm_AlarmType_CrcErrorThreshold_CrcErrorThreshold6)(nil),                               // 780: huawei_devm.Devm.Ports.Port.PortAlarm.AlarmType_CrcErrorThreshold.CrcErrorThreshold6
	(*Devm_Ports_Port_PortAlarm_AlarmType_LinkCrc_LinkQuality)(nil),                                                // 781: huawei_devm.Devm.Ports.Port.PortAlarm.AlarmType_LinkCrc.LinkQuality
	(*Devm_Ports_Port_PortAlarm_AlarmType_LinkCrc_CrcPerAlarm)(nil),                                                // 782: huawei_devm.Devm.Ports.Port.PortAlarm.AlarmType_LinkCrc.CrcPerAlarm
	(*Devm_Ports_Port_PortAlarm_AlarmType_LinkCrc_CrcPerWarn)(nil),                                                 // 783: huawei_devm.Devm.Ports.Port.PortAlarm.AlarmType_LinkCrc.CrcPerWarn
	(*Devm_Ports_Port_PortAlarm_AlarmType_CrcMfsAlarm_CrcMfsAlarm6)(nil),                                           // 784: huawei_devm.Devm.Ports.Port.PortAlarm.AlarmType_CrcMfsAlarm.CrcMfsAlarm6
	(*Devm_Ports_Port_PhySerial_SerAttrs)(nil),                                                                     // 785: huawei_devm.Devm.Ports.Port.PhySerial.SerAttrs
	(*Devm_Ports_Port_PhySerial_SerAttrs_SerAttr)(nil),                                                             // 786: huawei_devm.Devm.Ports.Port.PhySerial.SerAttrs.SerAttr
	(*Devm_Ports_Port_PhyVoice_Fxo)(nil),                                                                           // 787: huawei_devm.Devm.Ports.Port.PhyVoice.Fxo
	(*Devm_Ports_Port_PhyVoice_Fxs)(nil),                                                                           // 788: huawei_devm.Devm.Ports.Port.PhyVoice.Fxs
	(*Devm_Ports_Port_PhyVoice_Em)(nil),                                                                            // 789: huawei_devm.Devm.Ports.Port.PhyVoice.Em
	(*Devm_Ports_Port_E1T1_ChannelSets)(nil),                                                                       // 790: huawei_devm.Devm.Ports.Port.E1T1.ChannelSets
	(*Devm_Ports_Port_E1T1_ChannelSets_ChannelSet)(nil),                                                            // 791: huawei_devm.Devm.Ports.Port.E1T1.ChannelSets.ChannelSet
	(*Devm_LogicPorts_LogicPort)(nil),                                                                              // 792: huawei_devm.Devm.LogicPorts.LogicPort
	(*Devm_EntityClasses_EntityClass)(nil),                                                                         // 793: huawei_devm.Devm.EntityClasses.EntityClass
	(*Devm_InconsistentEntitys_InconsistentEntity)(nil),                                                            // 794: huawei_devm.Devm.InconsistentEntitys.InconsistentEntity
	(*Devm_OfflineCfgs_Offline)(nil),                                                                               // 795: huawei_devm.Devm.OfflineCfgs.Offline
	(*Devm_Offlines_Offline)(nil),                                                                                  // 796: huawei_devm.Devm.Offlines.Offline
	(*Devm_Clockboards_Clockboard)(nil),                                                                            // 797: huawei_devm.Devm.Clockboards.Clockboard
	(*Devm_Driver_Cmus)(nil),                                                                                       // 798: huawei_devm.Devm.Driver.Cmus
	(*Devm_Driver_Pms)(nil),                                                                                        // 799: huawei_devm.Devm.Driver.Pms
	(*Devm_Driver_Ccus)(nil),                                                                                       // 800: huawei_devm.Devm.Driver.Ccus
	(*Devm_Driver_Dacss)(nil),                                                                                      // 801: huawei_devm.Devm.Driver.Dacss
	(*Devm_Driver_Fans)(nil),                                                                                       // 802: huawei_devm.Devm.Driver.Fans
	(*Devm_Driver_Icus)(nil),                                                                                       // 803: huawei_devm.Devm.Driver.Icus
	(*Devm_Driver_Pmus)(nil),                                                                                       // 804: huawei_devm.Devm.Driver.Pmus
	(*Devm_Driver_PowerSupplys)(nil),                                                                               // 805: huawei_devm.Devm.Driver.PowerSupplys
	(*Devm_Driver_Dmus)(nil),                                                                                       // 806: huawei_devm.Devm.Driver.Dmus
	(*Devm_Driver_Pdus)(nil),                                                                                       // 807: huawei_devm.Devm.Driver.Pdus
	(*Devm_Driver_Vsus)(nil),                                                                                       // 808: huawei_devm.Devm.Driver.Vsus
	(*Devm_Driver_Ecus)(nil),                                                                                       // 809: huawei_devm.Devm.Driver.Ecus
	(*Devm_Driver_Lcds)(nil),                                                                                       // 810: huawei_devm.Devm.Driver.Lcds
	(*Devm_Driver_Disks)(nil),                                                                                      // 811: huawei_devm.Devm.Driver.Disks
	(*Devm_Driver_Cmus_Cmu)(nil),                                                                                   // 812: huawei_devm.Devm.Driver.Cmus.Cmu
	(*Devm_Driver_Cmus_Cmu_CmuSwitchs)(nil),                                                                        // 813: huawei_devm.Devm.Driver.Cmus.Cmu.CmuSwitchs
	(*Devm_Driver_Cmus_Cmu_CmuRelays)(nil),                                                                         // 814: huawei_devm.Devm.Driver.Cmus.Cmu.CmuRelays
	(*Devm_Driver_Cmus_Cmu_CmuAnalogs)(nil),                                                                        // 815: huawei_devm.Devm.Driver.Cmus.Cmu.CmuAnalogs
	(*Devm_Driver_Cmus_Cmu_CmuAlarms)(nil),                                                                         // 816: huawei_devm.Devm.Driver.Cmus.Cmu.CmuAlarms
	(*Devm_Driver_Cmus_Cmu_Switchs)(nil),                                                                           // 817: huawei_devm.Devm.Driver.Cmus.Cmu.Switchs
	(*Devm_Driver_Cmus_Cmu_Relays)(nil),                                                                            // 818: huawei_devm.Devm.Driver.Cmus.Cmu.Relays
	(*Devm_Driver_Cmus_Cmu_Analogs)(nil),                                                                           // 819: huawei_devm.Devm.Driver.Cmus.Cmu.Analogs
	(*Devm_Driver_Cmus_Cmu_AlarmOutput)(nil),                                                                       // 820: huawei_devm.Devm.Driver.Cmus.Cmu.AlarmOutput
	(*Devm_Driver_Cmus_Cmu_CmuSwitchs_CmuSwitch)(nil),                                                              // 821: huawei_devm.Devm.Driver.Cmus.Cmu.CmuSwitchs.CmuSwitch
	(*Devm_Driver_Cmus_Cmu_CmuRelays_CmuRelay)(nil),                                                                // 822: huawei_devm.Devm.Driver.Cmus.Cmu.CmuRelays.CmuRelay
	(*Devm_Driver_Cmus_Cmu_CmuAnalogs_CmuAnalog)(nil),                                                              // 823: huawei_devm.Devm.Driver.Cmus.Cmu.CmuAnalogs.CmuAnalog
	(*Devm_Driver_Cmus_Cmu_CmuAlarms_CmuAlarm)(nil),                                                                // 824: huawei_devm.Devm.Driver.Cmus.Cmu.CmuAlarms.CmuAlarm
	(*Devm_Driver_Cmus_Cmu_Switchs_Switch)(nil),                                                                    // 825: huawei_devm.Devm.Driver.Cmus.Cmu.Switchs.Switch
	(*Devm_Driver_Cmus_Cmu_Relays_Relay)(nil),                                                                      // 826: huawei_devm.Devm.Driver.Cmus.Cmu.Relays.Relay
	(*Devm_Driver_Cmus_Cmu_Analogs_Analog)(nil),                                                                    // 827: huawei_devm.Devm.Driver.Cmus.Cmu.Analogs.Analog
	(*Devm_Driver_Pms_Pm)(nil),                                                                                     // 828: huawei_devm.Devm.Driver.Pms.Pm
	(*Devm_Driver_Ccus_Ccu)(nil),                                                                                   // 829: huawei_devm.Devm.Driver.Ccus.Ccu
	(*Devm_Driver_Dacss_Dacs)(nil),                                                                                 // 830: huawei_devm.Devm.Driver.Dacss.Dacs
	(*Devm_Driver_Fans_Fan)(nil),                                                                                   // 831: huawei_devm.Devm.Driver.Fans.Fan
	(*Devm_Driver_Icus_Icu)(nil),                                                                                   // 832: huawei_devm.Devm.Driver.Icus.Icu
	(*Devm_Driver_Pmus_Pmu)(nil),                                                                                   // 833: huawei_devm.Devm.Driver.Pmus.Pmu
	(*Devm_Driver_PowerSupplys_PowerSupply)(nil),                                                                   // 834: huawei_devm.Devm.Driver.PowerSupplys.PowerSupply
	(*Devm_Driver_PowerSupplys_PowerSupply_PowerEnvironments)(nil),                                                 // 835: huawei_devm.Devm.Driver.PowerSupplys.PowerSupply.PowerEnvironments
	(*Devm_Driver_PowerSupplys_PowerSupply_PowerEnvironments_PowerEnvironment)(nil),                                // 836: huawei_devm.Devm.Driver.PowerSupplys.PowerSupply.PowerEnvironments.PowerEnvironment
	(*Devm_Driver_Dmus_Dmu)(nil),                                                                                   // 837: huawei_devm.Devm.Driver.Dmus.Dmu
	(*Devm_Driver_Pdus_Pdu)(nil),                                                                                   // 838: huawei_devm.Devm.Driver.Pdus.Pdu
	(*Devm_Driver_Vsus_Vsu)(nil),                                                                                   // 839: huawei_devm.Devm.Driver.Vsus.Vsu
	(*Devm_Driver_Ecus_Ecu)(nil),                                                                                   // 840: huawei_devm.Devm.Driver.Ecus.Ecu
	(*Devm_Driver_Lcds_Lcd)(nil),                                                                                   // 841: huawei_devm.Devm.Driver.Lcds.Lcd
	(*Devm_Driver_Disks_Disk)(nil),                                                                                 // 842: huawei_devm.Devm.Driver.Disks.Disk
	(*Devm_FwdPerformanceAlarms_FwdPerformanceAlarm)(nil),                                                          // 843: huawei_devm.Devm.FwdPerformanceAlarms.FwdPerformanceAlarm
	(*Devm_FwdServicesAlarms_FwdServicesAlarm)(nil),                                                                // 844: huawei_devm.Devm.FwdServicesAlarms.FwdServicesAlarm
	(*Devm_FwdReassemblyAlarms_FwdReassemblyAlarm)(nil),                                                            // 845: huawei_devm.Devm.FwdReassemblyAlarms.FwdReassemblyAlarm
	(*Devm_FwdBoardFlowAlarms_FwdBoardFlowAlarm)(nil),                                                              // 846: huawei_devm.Devm.FwdBoardFlowAlarms.FwdBoardFlowAlarm
	(*Devm_ActiveHardwareAlarmInfos_ActiveHardwareAlarmInfo)(nil),                                                  // 847: huawei_devm.Devm.ActiveHardwareAlarmInfos.ActiveHardwareAlarmInfo
	(*Devm_HistoryHardwareAlarmInfos_HistoryHardwareAlarmInfo)(nil),                                                // 848: huawei_devm.Devm.HistoryHardwareAlarmInfos.HistoryHardwareAlarmInfo
	(*Devm_RemotePorts_RemotePort)(nil),                                                                            // 849: huawei_devm.Devm.RemotePorts.RemotePort
	(*Devm_RemotePorts_RemotePort_Ethernet)(nil),                                                                   // 850: huawei_devm.Devm.RemotePorts.RemotePort.Ethernet
	(*Devm_RemotePorts_RemotePort_Laser)(nil),                                                                      // 851: huawei_devm.Devm.RemotePorts.RemotePort.Laser
	(*Devm_RemotePorts_RemotePort_OpticalModule)(nil),                                                              // 852: huawei_devm.Devm.RemotePorts.RemotePort.OpticalModule
	(*Devm_RemotePorts_RemotePort_TransmissionAlarm)(nil),                                                          // 853: huawei_devm.Devm.RemotePorts.RemotePort.TransmissionAlarm
	(*Devm_RemotePorts_RemotePort_PortAlarm)(nil),                                                                  // 854: huawei_devm.Devm.RemotePorts.RemotePort.PortAlarm
	(*Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr)(nil),                                                        // 855: huawei_devm.Devm.RemotePorts.RemotePort.Ethernet.EthWanAttr
	(*Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns)(nil),                                        // 856: huawei_devm.Devm.RemotePorts.RemotePort.TransmissionAlarm.TransAlarmIfDowns
	(*Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns_TransAlarmIfDown)(nil),                       // 857: huawei_devm.Devm.RemotePorts.RemotePort.TransmissionAlarm.TransAlarmIfDowns.TransAlarmIfDown
	(*Devm_RemotePorts_RemotePort_PortAlarm_EthPortAlarm)(nil),                                                     // 858: huawei_devm.Devm.RemotePorts.RemotePort.PortAlarm.EthPortAlarm
	(*Devm_RemotePorts_RemotePort_PortAlarm_SdhPortAlarm)(nil),                                                     // 859: huawei_devm.Devm.RemotePorts.RemotePort.PortAlarm.SdhPortAlarm
	(*Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_CrcErrorThreshold)(nil),                                      // 860: huawei_devm.Devm.RemotePorts.RemotePort.PortAlarm.AlarmType_CrcErrorThreshold
	(*Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_LinkCrc)(nil),                                                // 861: huawei_devm.Devm.RemotePorts.RemotePort.PortAlarm.AlarmType_LinkCrc
	(*Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_CrcErrorThreshold_CrcErrorThreshold6)(nil),                   // 862: huawei_devm.Devm.RemotePorts.RemotePort.PortAlarm.AlarmType_CrcErrorThreshold.CrcErrorThreshold6
	(*Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_LinkCrc_LinkQuality)(nil),                                    // 863: huawei_devm.Devm.RemotePorts.RemotePort.PortAlarm.AlarmType_LinkCrc.LinkQuality
	(*Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_LinkCrc_CrcPerAlarm)(nil),                                    // 864: huawei_devm.Devm.RemotePorts.RemotePort.PortAlarm.AlarmType_LinkCrc.CrcPerAlarm
	(*Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_LinkCrc_CrcPerAlarm_CrcSample)(nil),                          // 865: huawei_devm.Devm.RemotePorts.RemotePort.PortAlarm.AlarmType_LinkCrc.CrcPerAlarm.CrcSample
	(*Devm_DisableHardwareAlarms_DisableHardwareAlarm)(nil),                                                        // 866: huawei_devm.Devm.DisableHardwareAlarms.DisableHardwareAlarm
}
var file_huawei_devm_proto_depIdxs = []int32{
	345, // 0: huawei_devm.Devm.physical_entitys:type_name -> huawei_devm.Devm.PhysicalEntitys
	346, // 1: huawei_devm.Devm.logic_entitys:type_name -> huawei_devm.Devm.LogicEntitys
	347, // 2: huawei_devm.Devm.chassiss:type_name -> huawei_devm.Devm.Chassiss
	348, // 3: huawei_devm.Devm.logic_containers:type_name -> huawei_devm.Devm.LogicContainers
	349, // 4: huawei_devm.Devm.containers:type_name -> huawei_devm.Devm.Containers
	350, // 5: huawei_devm.Devm.mpu_boards:type_name -> huawei_devm.Devm.MpuBoards
	351, // 6: huawei_devm.Devm.lpu_boards:type_name -> huawei_devm.Devm.LpuBoards
	352, // 7: huawei_devm.Devm.sfu_boards:type_name -> huawei_devm.Devm.SfuBoards
	353, // 8: huawei_devm.Devm.cards:type_name -> huawei_devm.Devm.Cards
	354, // 9: huawei_devm.Devm.cf_cards:type_name -> huawei_devm.Devm.CfCards
	355, // 10: huawei_devm.Devm.ports:type_name -> huawei_devm.Devm.Ports
	356, // 11: huawei_devm.Devm.logic_ports:type_name -> huawei_devm.Devm.LogicPorts
	357, // 12: huawei_devm.Devm.entity_classes:type_name -> huawei_devm.Devm.EntityClasses
	358, // 13: huawei_devm.Devm.inconsistent_entitys:type_name -> huawei_devm.Devm.InconsistentEntitys
	359, // 14: huawei_devm.Devm.offline_cfgs:type_name -> huawei_devm.Devm.OfflineCfgs
	360, // 15: huawei_devm.Devm.schedule_reboot:type_name -> huawei_devm.Devm.ScheduleReboot
	361, // 16: huawei_devm.Devm.offlines:type_name -> huawei_devm.Devm.Offlines
	362, // 17: huawei_devm.Devm.clockboards:type_name -> huawei_devm.Devm.Clockboards
	363, // 18: huawei_devm.Devm.driver:type_name -> huawei_devm.Devm.Driver
	364, // 19: huawei_devm.Devm.fwd_performance_alarms:type_name -> huawei_devm.Devm.FwdPerformanceAlarms
	365, // 20: huawei_devm.Devm.fwd_services_alarms:type_name -> huawei_devm.Devm.FwdServicesAlarms
	366, // 21: huawei_devm.Devm.fwd_reassembly_alarms:type_name -> huawei_devm.Devm.FwdReassemblyAlarms
	367, // 22: huawei_devm.Devm.fwd_board_flow_alarms:type_name -> huawei_devm.Devm.FwdBoardFlowAlarms
	368, // 23: huawei_devm.Devm.forward_cpu_alarm:type_name -> huawei_devm.Devm.ForwardCpuAlarm
	369, // 24: huawei_devm.Devm.forward_vcpu_alarm:type_name -> huawei_devm.Devm.ForwardVcpuAlarm
	370, // 25: huawei_devm.Devm.active_hardware_alarm_infos:type_name -> huawei_devm.Devm.ActiveHardwareAlarmInfos
	371, // 26: huawei_devm.Devm.history_hardware_alarm_infos:type_name -> huawei_devm.Devm.HistoryHardwareAlarmInfos
	372, // 27: huawei_devm.Devm.remote_ports:type_name -> huawei_devm.Devm.RemotePorts
	373, // 28: huawei_devm.Devm.disable_hardware_alarms:type_name -> huawei_devm.Devm.DisableHardwareAlarms
	374, // 29: huawei_devm.Devm.PhysicalEntitys.physical_entity:type_name -> huawei_devm.Devm.PhysicalEntitys.PhysicalEntity
	375, // 30: huawei_devm.Devm.LogicEntitys.logic_entity:type_name -> huawei_devm.Devm.LogicEntitys.LogicEntity
	376, // 31: huawei_devm.Devm.Chassiss.chassis:type_name -> huawei_devm.Devm.Chassiss.Chassis
	386, // 32: huawei_devm.Devm.LogicContainers.logic_container:type_name -> huawei_devm.Devm.LogicContainers.LogicContainer
	389, // 33: huawei_devm.Devm.Containers.container:type_name -> huawei_devm.Devm.Containers.Container
	392, // 34: huawei_devm.Devm.MpuBoards.mpu_board:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard
	541, // 35: huawei_devm.Devm.LpuBoards.lpu_board:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard
	726, // 36: huawei_devm.Devm.SfuBoards.sfu_board:type_name -> huawei_devm.Devm.SfuBoards.SfuBoard
	727, // 37: huawei_devm.Devm.Cards.card:type_name -> huawei_devm.Devm.Cards.Card
	741, // 38: huawei_devm.Devm.CfCards.cf_card:type_name -> huawei_devm.Devm.CfCards.CfCard
	742, // 39: huawei_devm.Devm.Ports.port:type_name -> huawei_devm.Devm.Ports.Port
	792, // 40: huawei_devm.Devm.LogicPorts.logic_port:type_name -> huawei_devm.Devm.LogicPorts.LogicPort
	793, // 41: huawei_devm.Devm.EntityClasses.entity_class:type_name -> huawei_devm.Devm.EntityClasses.EntityClass
	794, // 42: huawei_devm.Devm.InconsistentEntitys.inconsistent_entity:type_name -> huawei_devm.Devm.InconsistentEntitys.InconsistentEntity
	795, // 43: huawei_devm.Devm.OfflineCfgs.offline:type_name -> huawei_devm.Devm.OfflineCfgs.Offline
	796, // 44: huawei_devm.Devm.Offlines.offline:type_name -> huawei_devm.Devm.Offlines.Offline
	797, // 45: huawei_devm.Devm.Clockboards.clockboard:type_name -> huawei_devm.Devm.Clockboards.Clockboard
	798, // 46: huawei_devm.Devm.Driver.cmus:type_name -> huawei_devm.Devm.Driver.Cmus
	799, // 47: huawei_devm.Devm.Driver.pms:type_name -> huawei_devm.Devm.Driver.Pms
	800, // 48: huawei_devm.Devm.Driver.ccus:type_name -> huawei_devm.Devm.Driver.Ccus
	801, // 49: huawei_devm.Devm.Driver.dacss:type_name -> huawei_devm.Devm.Driver.Dacss
	802, // 50: huawei_devm.Devm.Driver.fans:type_name -> huawei_devm.Devm.Driver.Fans
	803, // 51: huawei_devm.Devm.Driver.icus:type_name -> huawei_devm.Devm.Driver.Icus
	804, // 52: huawei_devm.Devm.Driver.pmus:type_name -> huawei_devm.Devm.Driver.Pmus
	805, // 53: huawei_devm.Devm.Driver.power_supplys:type_name -> huawei_devm.Devm.Driver.PowerSupplys
	806, // 54: huawei_devm.Devm.Driver.dmus:type_name -> huawei_devm.Devm.Driver.Dmus
	807, // 55: huawei_devm.Devm.Driver.pdus:type_name -> huawei_devm.Devm.Driver.Pdus
	808, // 56: huawei_devm.Devm.Driver.vsus:type_name -> huawei_devm.Devm.Driver.Vsus
	809, // 57: huawei_devm.Devm.Driver.ecus:type_name -> huawei_devm.Devm.Driver.Ecus
	810, // 58: huawei_devm.Devm.Driver.lcds:type_name -> huawei_devm.Devm.Driver.Lcds
	811, // 59: huawei_devm.Devm.Driver.disks:type_name -> huawei_devm.Devm.Driver.Disks
	843, // 60: huawei_devm.Devm.FwdPerformanceAlarms.fwd_performance_alarm:type_name -> huawei_devm.Devm.FwdPerformanceAlarms.FwdPerformanceAlarm
	844, // 61: huawei_devm.Devm.FwdServicesAlarms.fwd_services_alarm:type_name -> huawei_devm.Devm.FwdServicesAlarms.FwdServicesAlarm
	845, // 62: huawei_devm.Devm.FwdReassemblyAlarms.fwd_reassembly_alarm:type_name -> huawei_devm.Devm.FwdReassemblyAlarms.FwdReassemblyAlarm
	846, // 63: huawei_devm.Devm.FwdBoardFlowAlarms.fwd_board_flow_alarm:type_name -> huawei_devm.Devm.FwdBoardFlowAlarms.FwdBoardFlowAlarm
	847, // 64: huawei_devm.Devm.ActiveHardwareAlarmInfos.active_hardware_alarm_info:type_name -> huawei_devm.Devm.ActiveHardwareAlarmInfos.ActiveHardwareAlarmInfo
	848, // 65: huawei_devm.Devm.HistoryHardwareAlarmInfos.history_hardware_alarm_info:type_name -> huawei_devm.Devm.HistoryHardwareAlarmInfos.HistoryHardwareAlarmInfo
	849, // 66: huawei_devm.Devm.RemotePorts.remote_port:type_name -> huawei_devm.Devm.RemotePorts.RemotePort
	866, // 67: huawei_devm.Devm.DisableHardwareAlarms.disable_hardware_alarm:type_name -> huawei_devm.Devm.DisableHardwareAlarms.DisableHardwareAlarm
	0,   // 68: huawei_devm.Devm.PhysicalEntitys.PhysicalEntity.class:type_name -> huawei_devm.Devm.PhysicalEntitys.PhysicalEntity.Class
	1,   // 69: huawei_devm.Devm.PhysicalEntitys.PhysicalEntity.admin_state:type_name -> huawei_devm.Devm.PhysicalEntitys.PhysicalEntity.AdminState
	2,   // 70: huawei_devm.Devm.PhysicalEntitys.PhysicalEntity.running_state:type_name -> huawei_devm.Devm.PhysicalEntitys.PhysicalEntity.RunningState
	3,   // 71: huawei_devm.Devm.PhysicalEntitys.PhysicalEntity.standby_state:type_name -> huawei_devm.Devm.PhysicalEntitys.PhysicalEntity.StandbyState
	4,   // 72: huawei_devm.Devm.LogicEntitys.LogicEntity.class:type_name -> huawei_devm.Devm.LogicEntitys.LogicEntity.Class
	5,   // 73: huawei_devm.Devm.LogicEntitys.LogicEntity.oper_state:type_name -> huawei_devm.Devm.LogicEntitys.LogicEntity.OperState
	6,   // 74: huawei_devm.Devm.Chassiss.Chassis.current_run_mode:type_name -> huawei_devm.Devm.Chassiss.Chassis.CurrentRunMode
	7,   // 75: huawei_devm.Devm.Chassiss.Chassis.next_run_mode:type_name -> huawei_devm.Devm.Chassiss.Chassis.NextRunMode
	377, // 76: huawei_devm.Devm.Chassiss.Chassis.monitor_board_changes:type_name -> huawei_devm.Devm.Chassiss.Chassis.MonitorBoardChanges
	378, // 77: huawei_devm.Devm.Chassiss.Chassis.fan_attribute:type_name -> huawei_devm.Devm.Chassiss.Chassis.FanAttribute
	379, // 78: huawei_devm.Devm.Chassiss.Chassis.power_supply_attribute:type_name -> huawei_devm.Devm.Chassiss.Chassis.PowerSupplyAttribute
	380, // 79: huawei_devm.Devm.Chassiss.Chassis.dustproof_attribute:type_name -> huawei_devm.Devm.Chassiss.Chassis.DustproofAttribute
	381, // 80: huawei_devm.Devm.Chassiss.Chassis.chassis_id:type_name -> huawei_devm.Devm.Chassiss.Chassis.ChassisId
	382, // 81: huawei_devm.Devm.Chassiss.Chassis.chassis_run_mode:type_name -> huawei_devm.Devm.Chassiss.Chassis.ChassisRunMode
	383, // 82: huawei_devm.Devm.Chassiss.Chassis.pm_input_attribute:type_name -> huawei_devm.Devm.Chassiss.Chassis.PmInputAttribute
	384, // 83: huawei_devm.Devm.Chassiss.Chassis.chassis_sfu_mode:type_name -> huawei_devm.Devm.Chassiss.Chassis.ChassisSfuMode
	385, // 84: huawei_devm.Devm.Chassiss.Chassis.MonitorBoardChanges.monitor_board_change:type_name -> huawei_devm.Devm.Chassiss.Chassis.MonitorBoardChanges.MonitorBoardChange
	8,   // 85: huawei_devm.Devm.Chassiss.Chassis.FanAttribute.workmode:type_name -> huawei_devm.Devm.Chassiss.Chassis.FanAttribute.Workmode
	9,   // 86: huawei_devm.Devm.Chassiss.Chassis.PowerSupplyAttribute.pm_input_voltage_110:type_name -> huawei_devm.Devm.Chassiss.Chassis.PowerSupplyAttribute.PmInputVoltage110
	10,  // 87: huawei_devm.Devm.Chassiss.Chassis.PowerSupplyAttribute.power_supply_mode:type_name -> huawei_devm.Devm.Chassiss.Chassis.PowerSupplyAttribute.PowerSupplyMode
	11,  // 88: huawei_devm.Devm.Chassiss.Chassis.PowerSupplyAttribute.power_supply_temp:type_name -> huawei_devm.Devm.Chassiss.Chassis.PowerSupplyAttribute.PowerSupplyTemp
	12,  // 89: huawei_devm.Devm.Chassiss.Chassis.DustproofAttribute.dustproofcheck:type_name -> huawei_devm.Devm.Chassiss.Chassis.DustproofAttribute.Dustproofcheck
	13,  // 90: huawei_devm.Devm.Chassiss.Chassis.ChassisRunMode.current_run_mode:type_name -> huawei_devm.Devm.Chassiss.Chassis.ChassisRunMode.CurrentRunMode
	14,  // 91: huawei_devm.Devm.Chassiss.Chassis.ChassisRunMode.next_run_mode:type_name -> huawei_devm.Devm.Chassiss.Chassis.ChassisRunMode.NextRunMode
	15,  // 92: huawei_devm.Devm.Chassiss.Chassis.PmInputAttribute.pm_input_mode:type_name -> huawei_devm.Devm.Chassiss.Chassis.PmInputAttribute.PmInputMode
	16,  // 93: huawei_devm.Devm.Chassiss.Chassis.ChassisSfuMode.current_sfu_mode:type_name -> huawei_devm.Devm.Chassiss.Chassis.ChassisSfuMode.CurrentSfuMode
	17,  // 94: huawei_devm.Devm.Chassiss.Chassis.ChassisSfuMode.next_sfu_mode:type_name -> huawei_devm.Devm.Chassiss.Chassis.ChassisSfuMode.NextSfuMode
	18,  // 95: huawei_devm.Devm.LogicContainers.LogicContainer.container_type:type_name -> huawei_devm.Devm.LogicContainers.LogicContainer.ContainerType
	19,  // 96: huawei_devm.Devm.LogicContainers.LogicContainer.equiped_entity_type:type_name -> huawei_devm.Devm.LogicContainers.LogicContainer.EquipedEntityType
	387, // 97: huawei_devm.Devm.LogicContainers.LogicContainer.supported_entity_types:type_name -> huawei_devm.Devm.LogicContainers.LogicContainer.SupportedEntityTypes
	388, // 98: huawei_devm.Devm.LogicContainers.LogicContainer.SupportedEntityTypes.supported_entity_type:type_name -> huawei_devm.Devm.LogicContainers.LogicContainer.SupportedEntityTypes.SupportedEntityType
	20,  // 99: huawei_devm.Devm.LogicContainers.LogicContainer.SupportedEntityTypes.SupportedEntityType.entity_type:type_name -> huawei_devm.Devm.LogicContainers.LogicContainer.SupportedEntityTypes.SupportedEntityType.EntityType
	390, // 100: huawei_devm.Devm.Containers.Container.supported_entity_types:type_name -> huawei_devm.Devm.Containers.Container.SupportedEntityTypes
	21,  // 101: huawei_devm.Devm.Containers.Container.present:type_name -> huawei_devm.Devm.Containers.Container.Present
	391, // 102: huawei_devm.Devm.Containers.Container.SupportedEntityTypes.supported_entity_type:type_name -> huawei_devm.Devm.Containers.Container.SupportedEntityTypes.SupportedEntityType
	22,  // 103: huawei_devm.Devm.MpuBoards.MpuBoard.ls_role:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.LsRole
	393, // 104: huawei_devm.Devm.MpuBoards.MpuBoard.bras:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Bras
	394, // 105: huawei_devm.Devm.MpuBoards.MpuBoard.l2tp:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.L2Tp
	395, // 106: huawei_devm.Devm.MpuBoards.MpuBoard.bras_pppox:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.BrasPppox
	396, // 107: huawei_devm.Devm.MpuBoards.MpuBoard.cpudefend:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Cpudefend
	397, // 108: huawei_devm.Devm.MpuBoards.MpuBoard.cpudefend_devm:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.CpudefendDevm
	398, // 109: huawei_devm.Devm.MpuBoards.MpuBoard.cmac_padding:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.CmacPadding
	399, // 110: huawei_devm.Devm.MpuBoards.MpuBoard.fim:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Fim
	400, // 111: huawei_devm.Devm.MpuBoards.MpuBoard.macmtu_discard_statistics:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.MacmtuDiscardStatistics
	401, // 112: huawei_devm.Devm.MpuBoards.MpuBoard.ve_mac_address:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.VeMacAddress
	402, // 113: huawei_devm.Devm.MpuBoards.MpuBoard.management_plane_defend_slot:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.ManagementPlaneDefendSlot
	403, // 114: huawei_devm.Devm.MpuBoards.MpuBoard.link_protocol_transport:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.LinkProtocolTransport
	404, // 115: huawei_devm.Devm.MpuBoards.MpuBoard.loadbalance:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Loadbalance
	405, // 116: huawei_devm.Devm.MpuBoards.MpuBoard.mirror:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Mirror
	406, // 117: huawei_devm.Devm.MpuBoards.MpuBoard.mpls_forward:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.MplsForward
	407, // 118: huawei_devm.Devm.MpuBoards.MpuBoard.netstream:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Netstream
	408, // 119: huawei_devm.Devm.MpuBoards.MpuBoard.pbr:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Pbr
	409, // 120: huawei_devm.Devm.MpuBoards.MpuBoard.qos:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Qos
	410, // 121: huawei_devm.Devm.MpuBoards.MpuBoard.soc:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Soc
	411, // 122: huawei_devm.Devm.MpuBoards.MpuBoard.unicast_forward:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.UnicastForward
	412, // 123: huawei_devm.Devm.MpuBoards.MpuBoard.cfm_mac_level_enable_mpu:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.CfmMacLevelEnableMpu
	413, // 124: huawei_devm.Devm.MpuBoards.MpuBoard.dhcpv6_access:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Dhcpv6Access
	414, // 125: huawei_devm.Devm.MpuBoards.MpuBoard.https_redirect:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.HttpsRedirect
	415, // 126: huawei_devm.Devm.MpuBoards.MpuBoard.frame_padding_fix:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.FramePaddingFix
	416, // 127: huawei_devm.Devm.MpuBoards.MpuBoard.ppp_net:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.PppNet
	417, // 128: huawei_devm.Devm.MpuBoards.MpuBoard.sflow:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Sflow
	418, // 129: huawei_devm.Devm.MpuBoards.MpuBoard.dcb:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Dcb
	419, // 130: huawei_devm.Devm.MpuBoards.MpuBoard.Bras.flow_statistic_frequency:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Bras.FlowStatisticFrequency
	420, // 131: huawei_devm.Devm.MpuBoards.MpuBoard.Bras.vas:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Bras.Vas
	421, // 132: huawei_devm.Devm.MpuBoards.MpuBoard.Bras.multicast:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Bras.Multicast
	424, // 133: huawei_devm.Devm.MpuBoards.MpuBoard.L2Tp.icrq_limit:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.L2Tp.IcrqLimit
	425, // 134: huawei_devm.Devm.MpuBoards.MpuBoard.L2Tp.forward_mode:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.L2Tp.ForwardMode
	426, // 135: huawei_devm.Devm.MpuBoards.MpuBoard.BrasPppox.slot_access_limit:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.BrasPppox.SlotAccessLimit
	427, // 136: huawei_devm.Devm.MpuBoards.MpuBoard.BrasPppox.access_ip:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.BrasPppox.AccessIp
	428, // 137: huawei_devm.Devm.MpuBoards.MpuBoard.BrasPppox.access_ip_limit:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.BrasPppox.AccessIpLimit
	429, // 138: huawei_devm.Devm.MpuBoards.MpuBoard.BrasPppox.load_balance_identify_pppoe:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.BrasPppox.LoadBalanceIdentifyPppoe
	430, // 139: huawei_devm.Devm.MpuBoards.MpuBoard.BrasPppox.max_sessions:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.BrasPppox.MaxSessions
	431, // 140: huawei_devm.Devm.MpuBoards.MpuBoard.BrasPppox.pppoe_slot_statistic:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.BrasPppox.PppoeSlotStatistic
	432, // 141: huawei_devm.Devm.MpuBoards.MpuBoard.BrasPppox.ppp_slot_statistic:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.BrasPppox.PppSlotStatistic
	433, // 142: huawei_devm.Devm.MpuBoards.MpuBoard.BrasPppox.urpf_discard_statistics:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.BrasPppox.UrpfDiscardStatistics
	434, // 143: huawei_devm.Devm.MpuBoards.MpuBoard.BrasPppox.ppp_echo_deploy_mode:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.BrasPppox.PppEchoDeployMode
	437, // 144: huawei_devm.Devm.MpuBoards.MpuBoard.CpudefendDevm.ignore_hostcar_acl:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.CpudefendDevm.IgnoreHostcarAcl
	438, // 145: huawei_devm.Devm.MpuBoards.MpuBoard.CpudefendDevm.bras_host_cars:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.CpudefendDevm.BrasHostCars
	439, // 146: huawei_devm.Devm.MpuBoards.MpuBoard.CpudefendDevm.spu_cars:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.CpudefendDevm.SpuCars
	440, // 147: huawei_devm.Devm.MpuBoards.MpuBoard.CpudefendDevm.arp_vlan_car:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.CpudefendDevm.ArpVlanCar
	441, // 148: huawei_devm.Devm.MpuBoards.MpuBoard.CpudefendDevm.nd_vlan_car:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.CpudefendDevm.NdVlanCar
	29,  // 149: huawei_devm.Devm.MpuBoards.MpuBoard.CmacPadding.padding:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.CmacPadding.Padding
	30,  // 150: huawei_devm.Devm.MpuBoards.MpuBoard.Fim.forward_mode:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Fim.ForwardMode
	31,  // 151: huawei_devm.Devm.MpuBoards.MpuBoard.Fim.vlan_miss_enable:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Fim.VlanMissEnable
	32,  // 152: huawei_devm.Devm.MpuBoards.MpuBoard.LinkProtocolTransport.lldp:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.LinkProtocolTransport.Lldp
	33,  // 153: huawei_devm.Devm.MpuBoards.MpuBoard.LinkProtocolTransport.lacp:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.LinkProtocolTransport.Lacp
	34,  // 154: huawei_devm.Devm.MpuBoards.MpuBoard.LinkProtocolTransport.oam:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.LinkProtocolTransport.Oam
	35,  // 155: huawei_devm.Devm.MpuBoards.MpuBoard.LinkProtocolTransport.esmc:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.LinkProtocolTransport.Esmc
	454, // 156: huawei_devm.Devm.MpuBoards.MpuBoard.Loadbalance.dynamic_adjust:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Loadbalance.DynamicAdjust
	455, // 157: huawei_devm.Devm.MpuBoards.MpuBoard.Loadbalance.hash_arithmetic:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Loadbalance.HashArithmetic
	456, // 158: huawei_devm.Devm.MpuBoards.MpuBoard.Loadbalance.hash_fields:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Loadbalance.HashFields
	457, // 159: huawei_devm.Devm.MpuBoards.MpuBoard.Loadbalance.hash_seed:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Loadbalance.HashSeed
	458, // 160: huawei_devm.Devm.MpuBoards.MpuBoard.Loadbalance.hash_multipe:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Loadbalance.HashMultipe
	460, // 161: huawei_devm.Devm.MpuBoards.MpuBoard.Mirror.slot_observe:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Mirror.SlotObserve
	461, // 162: huawei_devm.Devm.MpuBoards.MpuBoard.Mirror.observe_filters:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Mirror.ObserveFilters
	465, // 163: huawei_devm.Devm.MpuBoards.MpuBoard.MplsForward.mpls_hash_mode:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.MplsForward.MplsHashMode
	466, // 164: huawei_devm.Devm.MpuBoards.MpuBoard.MplsForward.mplsfrags:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.MplsForward.Mplsfrags
	467, // 165: huawei_devm.Devm.MpuBoards.MpuBoard.MplsForward.mpls_load_ctrwords:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.MplsForward.MplsLoadCtrwords
	468, // 166: huawei_devm.Devm.MpuBoards.MpuBoard.Netstream.sampler_modes:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Netstream.SamplerModes
	469, // 167: huawei_devm.Devm.MpuBoards.MpuBoard.Netstream.sequence_mode:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Netstream.SequenceMode
	470, // 168: huawei_devm.Devm.MpuBoards.MpuBoard.Netstream.export_hosts:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Netstream.ExportHosts
	473, // 169: huawei_devm.Devm.MpuBoards.MpuBoard.Pbr.routing_filters:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Pbr.RoutingFilters
	475, // 170: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.traffic_policy_matchs:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Qos.TrafficPolicyMatchs
	476, // 171: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.pq_schedule_prioritys:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Qos.PqSchedulePrioritys
	477, // 172: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.pq_schedule_priority_on_cards:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Qos.PqSchedulePriorityOnCards
	478, // 173: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.multicast_port_queues:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Qos.MulticastPortQueues
	479, // 174: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.multicast_port_shaping:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Qos.MulticastPortShaping
	480, // 175: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.user_queue_pir_precision:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Qos.UserQueuePirPrecision
	481, // 176: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.exp_phb_disable:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Qos.ExpPhbDisable
	482, // 177: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.packet_block_thresholds:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Qos.PacketBlockThresholds
	483, // 178: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.packet_block_threshold_all:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Qos.PacketBlockThresholdAll
	484, // 179: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.channel_alarms:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Qos.ChannelAlarms
	485, // 180: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.channel_profile_precision:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Qos.ChannelProfilePrecision
	486, // 181: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.channel_profile_apply:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Qos.ChannelProfileApply
	487, // 182: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.multicast_shaping:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Qos.MulticastShaping
	488, // 183: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.port_queue_alarms:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Qos.PortQueueAlarms
	489, // 184: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.user_queue_recovery_disable:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Qos.UserQueueRecoveryDisable
	490, // 185: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.access_user_board_schedule_enable:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Qos.AccessUserBoardScheduleEnable
	491, // 186: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.convergent_precedence_highs:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Qos.ConvergentPrecedenceHighs
	492, // 187: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.queue_discard_alarms:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Qos.QueueDiscardAlarms
	493, // 188: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.user_queue_burst:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Qos.UserQueueBurst
	494, // 189: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.burst_sizes:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Qos.BurstSizes
	495, // 190: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.global_buffer_share_thresholds:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Qos.GlobalBufferShareThresholds
	496, // 191: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.global_buffer_share_queues:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Qos.GlobalBufferShareQueues
	497, // 192: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.flow_queue_backpressure_off:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Qos.FlowQueueBackpressureOff
	498, // 193: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.traffic_policy_match_type:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Qos.TrafficPolicyMatchType
	499, // 194: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.user_queue_resource_4cos:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Qos.UserQueueResource4Cos
	500, // 195: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.user_queue_resource_8cos_enhances:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Qos.UserQueueResource8CosEnhances
	523, // 196: huawei_devm.Devm.MpuBoards.MpuBoard.Soc.l2_loop_detect:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Soc.L2LoopDetect
	530, // 197: huawei_devm.Devm.MpuBoards.MpuBoard.UnicastForward.ipv4_uc:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.UnicastForward.Ipv4Uc
	531, // 198: huawei_devm.Devm.MpuBoards.MpuBoard.UnicastForward.arp_fast_reply:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.UnicastForward.ArpFastReply
	532, // 199: huawei_devm.Devm.MpuBoards.MpuBoard.UnicastForward.gre_ttl_mode:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.UnicastForward.GreTtlMode
	533, // 200: huawei_devm.Devm.MpuBoards.MpuBoard.UnicastForward.nd_fast_reply:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.UnicastForward.NdFastReply
	534, // 201: huawei_devm.Devm.MpuBoards.MpuBoard.HttpsRedirect.chasten_flow:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.HttpsRedirect.ChastenFlow
	535, // 202: huawei_devm.Devm.MpuBoards.MpuBoard.HttpsRedirect.chasten_redirect:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.HttpsRedirect.ChastenRedirect
	536, // 203: huawei_devm.Devm.MpuBoards.MpuBoard.PppNet.load_balance_identify_pppoe:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.PppNet.LoadBalanceIdentifyPppoe
	537, // 204: huawei_devm.Devm.MpuBoards.MpuBoard.Sflow.slot_sampling:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Sflow.SlotSampling
	538, // 205: huawei_devm.Devm.MpuBoards.MpuBoard.Dcb.headroom_pool:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Dcb.HeadroomPool
	539, // 206: huawei_devm.Devm.MpuBoards.MpuBoard.Dcb.deadlock_recovery_behavior:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Dcb.DeadlockRecoveryBehavior
	540, // 207: huawei_devm.Devm.MpuBoards.MpuBoard.Dcb.pfc_mapping_type:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Dcb.PfcMappingType
	23,  // 208: huawei_devm.Devm.MpuBoards.MpuBoard.Bras.FlowStatisticFrequency.type:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Bras.FlowStatisticFrequency.Type
	422, // 209: huawei_devm.Devm.MpuBoards.MpuBoard.Bras.Vas.statistic_frequency:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Bras.Vas.StatisticFrequency
	423, // 210: huawei_devm.Devm.MpuBoards.MpuBoard.Bras.Multicast.bas_policy_cac:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Bras.Multicast.BasPolicyCac
	24,  // 211: huawei_devm.Devm.MpuBoards.MpuBoard.L2Tp.ForwardMode.mode_value:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.L2Tp.ForwardMode.ModeValue
	435, // 212: huawei_devm.Devm.MpuBoards.MpuBoard.BrasPppox.UrpfDiscardStatistics.urpf_ipv4_discard_statistic:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.BrasPppox.UrpfDiscardStatistics.UrpfIpv4DiscardStatistic
	436, // 213: huawei_devm.Devm.MpuBoards.MpuBoard.BrasPppox.UrpfDiscardStatistics.urpf_ipv6_discard_statistic:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.BrasPppox.UrpfDiscardStatistics.UrpfIpv6DiscardStatistic
	442, // 214: huawei_devm.Devm.MpuBoards.MpuBoard.CpudefendDevm.IgnoreHostcarAcl.ipv4_acl_type_by_identity:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.CpudefendDevm.IgnoreHostcarAcl.Ipv4AclType_ByIdentity
	443, // 215: huawei_devm.Devm.MpuBoards.MpuBoard.CpudefendDevm.IgnoreHostcarAcl.ipv4_acl_type_by_number:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.CpudefendDevm.IgnoreHostcarAcl.Ipv4AclType_ByNumber
	444, // 216: huawei_devm.Devm.MpuBoards.MpuBoard.CpudefendDevm.BrasHostCars.bras_host_car:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.CpudefendDevm.BrasHostCars.BrasHostCar
	448, // 217: huawei_devm.Devm.MpuBoards.MpuBoard.CpudefendDevm.SpuCars.spu_car:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.CpudefendDevm.SpuCars.SpuCar
	449, // 218: huawei_devm.Devm.MpuBoards.MpuBoard.CpudefendDevm.ArpVlanCar.level_2_car:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.CpudefendDevm.ArpVlanCar.Level2Car
	450, // 219: huawei_devm.Devm.MpuBoards.MpuBoard.CpudefendDevm.NdVlanCar.nd_attack_alarms:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.CpudefendDevm.NdVlanCar.NdAttackAlarms
	451, // 220: huawei_devm.Devm.MpuBoards.MpuBoard.CpudefendDevm.NdVlanCar.level_2_cars:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.CpudefendDevm.NdVlanCar.Level2Cars
	25,  // 221: huawei_devm.Devm.MpuBoards.MpuBoard.CpudefendDevm.BrasHostCars.BrasHostCar.type:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.CpudefendDevm.BrasHostCars.BrasHostCar.Type
	445, // 222: huawei_devm.Devm.MpuBoards.MpuBoard.CpudefendDevm.BrasHostCars.BrasHostCar.rate_limit:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.CpudefendDevm.BrasHostCars.BrasHostCar.RateLimit
	446, // 223: huawei_devm.Devm.MpuBoards.MpuBoard.CpudefendDevm.BrasHostCars.BrasHostCar.logging:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.CpudefendDevm.BrasHostCars.BrasHostCar.Logging
	447, // 224: huawei_devm.Devm.MpuBoards.MpuBoard.CpudefendDevm.BrasHostCars.BrasHostCar.attack_detect:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.CpudefendDevm.BrasHostCars.BrasHostCar.AttackDetect
	26,  // 225: huawei_devm.Devm.MpuBoards.MpuBoard.CpudefendDevm.SpuCars.SpuCar.car_type:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.CpudefendDevm.SpuCars.SpuCar.CarType
	452, // 226: huawei_devm.Devm.MpuBoards.MpuBoard.CpudefendDevm.NdVlanCar.NdAttackAlarms.nd_attack_alarm:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.CpudefendDevm.NdVlanCar.NdAttackAlarms.NdAttackAlarm
	453, // 227: huawei_devm.Devm.MpuBoards.MpuBoard.CpudefendDevm.NdVlanCar.Level2Cars.level_2_car:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.CpudefendDevm.NdVlanCar.Level2Cars.Level2Car
	27,  // 228: huawei_devm.Devm.MpuBoards.MpuBoard.CpudefendDevm.NdVlanCar.NdAttackAlarms.NdAttackAlarm.type:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.CpudefendDevm.NdVlanCar.NdAttackAlarms.NdAttackAlarm.Type
	28,  // 229: huawei_devm.Devm.MpuBoards.MpuBoard.CpudefendDevm.NdVlanCar.Level2Cars.Level2Car.type:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.CpudefendDevm.NdVlanCar.Level2Cars.Level2Car.Type
	36,  // 230: huawei_devm.Devm.MpuBoards.MpuBoard.Loadbalance.HashArithmetic.arithmetic:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Loadbalance.HashArithmetic.Arithmetic
	459, // 231: huawei_devm.Devm.MpuBoards.MpuBoard.Loadbalance.HashFields.hash_field:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Loadbalance.HashFields.HashField
	39,  // 232: huawei_devm.Devm.MpuBoards.MpuBoard.Loadbalance.HashMultipe.multipe_flag:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Loadbalance.HashMultipe.MultipeFlag
	37,  // 233: huawei_devm.Devm.MpuBoards.MpuBoard.Loadbalance.HashFields.HashField.trunk_ecmp:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Loadbalance.HashFields.HashField.TrunkEcmp
	38,  // 234: huawei_devm.Devm.MpuBoards.MpuBoard.Loadbalance.HashFields.HashField.material:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Loadbalance.HashFields.HashField.Material
	462, // 235: huawei_devm.Devm.MpuBoards.MpuBoard.Mirror.ObserveFilters.observe_filter:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Mirror.ObserveFilters.ObserveFilter
	463, // 236: huawei_devm.Devm.MpuBoards.MpuBoard.Mirror.ObserveFilters.ObserveFilter.protocol_type_ppp:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Mirror.ObserveFilters.ObserveFilter.ProtocolType_Ppp
	464, // 237: huawei_devm.Devm.MpuBoards.MpuBoard.Mirror.ObserveFilters.ObserveFilter.protocol_type_ip:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Mirror.ObserveFilters.ObserveFilter.ProtocolType_Ip
	40,  // 238: huawei_devm.Devm.MpuBoards.MpuBoard.MplsForward.MplsHashMode.hashcfg:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.MplsForward.MplsHashMode.Hashcfg
	41,  // 239: huawei_devm.Devm.MpuBoards.MpuBoard.MplsForward.Mplsfrags.mplsfrag_enable:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.MplsForward.Mplsfrags.MplsfragEnable
	42,  // 240: huawei_devm.Devm.MpuBoards.MpuBoard.MplsForward.MplsLoadCtrwords.mplsload_ctrword_disable:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.MplsForward.MplsLoadCtrwords.MplsloadCtrwordDisable
	471, // 241: huawei_devm.Devm.MpuBoards.MpuBoard.Netstream.SamplerModes.sampler_mode:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Netstream.SamplerModes.SamplerMode
	45,  // 242: huawei_devm.Devm.MpuBoards.MpuBoard.Netstream.SequenceMode.mode:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Netstream.SequenceMode.Mode
	472, // 243: huawei_devm.Devm.MpuBoards.MpuBoard.Netstream.ExportHosts.export_host:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Netstream.ExportHosts.ExportHost
	43,  // 244: huawei_devm.Devm.MpuBoards.MpuBoard.Netstream.SamplerModes.SamplerMode.flow_type:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Netstream.SamplerModes.SamplerMode.FlowType
	44,  // 245: huawei_devm.Devm.MpuBoards.MpuBoard.Netstream.SamplerModes.SamplerMode.sampler_mode:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Netstream.SamplerModes.SamplerMode.SamplerMode7
	46,  // 246: huawei_devm.Devm.MpuBoards.MpuBoard.Netstream.ExportHosts.ExportHost.flow_type:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Netstream.ExportHosts.ExportHost.FlowType
	47,  // 247: huawei_devm.Devm.MpuBoards.MpuBoard.Netstream.ExportHosts.ExportHost.address_type:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Netstream.ExportHosts.ExportHost.AddressType
	474, // 248: huawei_devm.Devm.MpuBoards.MpuBoard.Pbr.RoutingFilters.routing_filter:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Pbr.RoutingFilters.RoutingFilter
	48,  // 249: huawei_devm.Devm.MpuBoards.MpuBoard.Pbr.RoutingFilters.RoutingFilter.type:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Pbr.RoutingFilters.RoutingFilter.Type
	49,  // 250: huawei_devm.Devm.MpuBoards.MpuBoard.Pbr.RoutingFilters.RoutingFilter.routing_type:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Pbr.RoutingFilters.RoutingFilter.RoutingType
	501, // 251: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.TrafficPolicyMatchs.traffic_policy_match:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Qos.TrafficPolicyMatchs.TrafficPolicyMatch
	502, // 252: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.PqSchedulePrioritys.pq_schedule_priority:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Qos.PqSchedulePrioritys.PqSchedulePriority
	503, // 253: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.PqSchedulePriorityOnCards.pq_schedule_priority_on_card:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Qos.PqSchedulePriorityOnCards.PqSchedulePriorityOnCard
	504, // 254: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.MulticastPortQueues.multicast_port_queue:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Qos.MulticastPortQueues.MulticastPortQueue
	507, // 255: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.MulticastPortShaping.shaping_parameters_shaping_type_mode:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Qos.MulticastPortShaping.ShapingParameters_ShapingTypeMode
	508, // 256: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.MulticastPortShaping.shaping_parameters_shaping_value_mode:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Qos.MulticastPortShaping.ShapingParameters_ShapingValueMode
	57,  // 257: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.ExpPhbDisable.forward_type:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Qos.ExpPhbDisable.ForwardType
	509, // 258: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.PacketBlockThresholds.packet_block_threshold:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Qos.PacketBlockThresholds.PacketBlockThreshold
	510, // 259: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.ChannelAlarms.channel_alarm:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Qos.ChannelAlarms.ChannelAlarm
	61,  // 260: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.ChannelProfilePrecision.type:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Qos.ChannelProfilePrecision.Type
	511, // 261: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.PortQueueAlarms.port_queue_alarm:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Qos.PortQueueAlarms.PortQueueAlarm
	512, // 262: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.ConvergentPrecedenceHighs.convergent_precedence_high:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Qos.ConvergentPrecedenceHighs.ConvergentPrecedenceHigh
	513, // 263: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.QueueDiscardAlarms.queue_discard_alarm:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Qos.QueueDiscardAlarms.QueueDiscardAlarm
	517, // 264: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.BurstSizes.burst_size:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Qos.BurstSizes.BurstSize
	518, // 265: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.GlobalBufferShareThresholds.global_buffer_share_threshold:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Qos.GlobalBufferShareThresholds.GlobalBufferShareThreshold
	519, // 266: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.GlobalBufferShareQueues.global_buffer_share_queue:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Qos.GlobalBufferShareQueues.GlobalBufferShareQueue
	520, // 267: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.TrafficPolicyMatchType.destination_user:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Qos.TrafficPolicyMatchType.DestinationUser
	521, // 268: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.TrafficPolicyMatchType.interface_acl:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Qos.TrafficPolicyMatchType.InterfaceAcl
	522, // 269: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.UserQueueResource8CosEnhances.user_queue_resource_8cos_enhance:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Qos.UserQueueResource8CosEnhances.UserQueueResource8CosEnhance
	50,  // 270: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.TrafficPolicyMatchs.TrafficPolicyMatch.type:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Qos.TrafficPolicyMatchs.TrafficPolicyMatch.Type
	51,  // 271: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.PqSchedulePrioritys.PqSchedulePriority.direction:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Qos.PqSchedulePrioritys.PqSchedulePriority.Direction
	52,  // 272: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.PqSchedulePrioritys.PqSchedulePriority.mode:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Qos.PqSchedulePrioritys.PqSchedulePriority.Mode
	53,  // 273: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.PqSchedulePriorityOnCards.PqSchedulePriorityOnCard.mode:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Qos.PqSchedulePriorityOnCards.PqSchedulePriorityOnCard.Mode
	54,  // 274: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.MulticastPortQueues.MulticastPortQueue.service_class:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Qos.MulticastPortQueues.MulticastPortQueue.ServiceClass
	55,  // 275: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.MulticastPortQueues.MulticastPortQueue.queue_schedule_mode:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Qos.MulticastPortQueues.MulticastPortQueue.QueueScheduleMode
	505, // 276: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.MulticastPortQueues.MulticastPortQueue.shaping_parameters_shaping:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Qos.MulticastPortQueues.MulticastPortQueue.ShapingParameters_Shaping
	506, // 277: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.MulticastPortQueues.MulticastPortQueue.shaping_parameters_shaping_percent:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Qos.MulticastPortQueues.MulticastPortQueue.ShapingParameters_ShapingPercent
	56,  // 278: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.MulticastPortShaping.ShapingParameters_ShapingTypeMode.shaping_type:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Qos.MulticastPortShaping.ShapingParameters_ShapingTypeMode.ShapingType
	58,  // 279: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.PacketBlockThresholds.PacketBlockThreshold.service_class:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Qos.PacketBlockThresholds.PacketBlockThreshold.ServiceClass
	59,  // 280: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.ChannelAlarms.ChannelAlarm.alarm_type:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Qos.ChannelAlarms.ChannelAlarm.AlarmType
	60,  // 281: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.ChannelAlarms.ChannelAlarm.pool:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Qos.ChannelAlarms.ChannelAlarm.Pool
	62,  // 282: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.PortQueueAlarms.PortQueueAlarm.service_class:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Qos.PortQueueAlarms.PortQueueAlarm.ServiceClass
	63,  // 283: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.QueueDiscardAlarms.QueueDiscardAlarm.service_class:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Qos.QueueDiscardAlarms.QueueDiscardAlarm.ServiceClass
	514, // 284: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.QueueDiscardAlarms.QueueDiscardAlarm.discard_type_bytes:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Qos.QueueDiscardAlarms.QueueDiscardAlarm.DiscardType_Bytes
	515, // 285: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.QueueDiscardAlarms.QueueDiscardAlarm.discard_type_packets:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Qos.QueueDiscardAlarms.QueueDiscardAlarm.DiscardType_Packets
	516, // 286: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.QueueDiscardAlarms.QueueDiscardAlarm.discard_type_packet_ratio:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Qos.QueueDiscardAlarms.QueueDiscardAlarm.DiscardType_PacketRatio
	64,  // 287: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.BurstSizes.BurstSize.service_class:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Qos.BurstSizes.BurstSize.ServiceClass
	65,  // 288: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.GlobalBufferShareThresholds.GlobalBufferShareThreshold.direction:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Qos.GlobalBufferShareThresholds.GlobalBufferShareThreshold.Direction
	66,  // 289: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.GlobalBufferShareQueues.GlobalBufferShareQueue.service_class:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Qos.GlobalBufferShareQueues.GlobalBufferShareQueue.ServiceClass
	67,  // 290: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.GlobalBufferShareQueues.GlobalBufferShareQueue.direction:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Qos.GlobalBufferShareQueues.GlobalBufferShareQueue.Direction
	68,  // 291: huawei_devm.Devm.MpuBoards.MpuBoard.Qos.UserQueueResource8CosEnhances.UserQueueResource8CosEnhance.direction:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Qos.UserQueueResource8CosEnhances.UserQueueResource8CosEnhance.Direction
	524, // 292: huawei_devm.Devm.MpuBoards.MpuBoard.Soc.L2LoopDetect.slot_l2loopdet:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Soc.L2LoopDetect.SlotL2Loopdet
	525, // 293: huawei_devm.Devm.MpuBoards.MpuBoard.Soc.L2LoopDetect.action:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Soc.L2LoopDetect.Action
	526, // 294: huawei_devm.Devm.MpuBoards.MpuBoard.Soc.L2LoopDetect.loop_level_thresholds:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Soc.L2LoopDetect.LoopLevelThresholds
	527, // 295: huawei_devm.Devm.MpuBoards.MpuBoard.Soc.L2LoopDetect.Action.shutdown:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Soc.L2LoopDetect.Action.Shutdown
	528, // 296: huawei_devm.Devm.MpuBoards.MpuBoard.Soc.L2LoopDetect.Action.trap:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Soc.L2LoopDetect.Action.Trap
	529, // 297: huawei_devm.Devm.MpuBoards.MpuBoard.Soc.L2LoopDetect.LoopLevelThresholds.loop_level_threshold:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Soc.L2LoopDetect.LoopLevelThresholds.LoopLevelThreshold
	69,  // 298: huawei_devm.Devm.MpuBoards.MpuBoard.Soc.L2LoopDetect.LoopLevelThresholds.LoopLevelThreshold.interface_type:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Soc.L2LoopDetect.LoopLevelThresholds.LoopLevelThreshold.InterfaceType
	70,  // 299: huawei_devm.Devm.MpuBoards.MpuBoard.UnicastForward.GreTtlMode.ttl_mode:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.UnicastForward.GreTtlMode.TtlMode
	71,  // 300: huawei_devm.Devm.MpuBoards.MpuBoard.Dcb.DeadlockRecoveryBehavior.behavior:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Dcb.DeadlockRecoveryBehavior.Behavior
	72,  // 301: huawei_devm.Devm.MpuBoards.MpuBoard.Dcb.PfcMappingType.type:type_name -> huawei_devm.Devm.MpuBoards.MpuBoard.Dcb.PfcMappingType.Type
	73,  // 302: huawei_devm.Devm.LpuBoards.LpuBoard.service_type:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.ServiceType
	74,  // 303: huawei_devm.Devm.LpuBoards.LpuBoard.next_service_type:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.NextServiceType
	542, // 304: huawei_devm.Devm.LpuBoards.LpuBoard.bras:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Bras
	543, // 305: huawei_devm.Devm.LpuBoards.LpuBoard.https_redirect:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.HttpsRedirect
	544, // 306: huawei_devm.Devm.LpuBoards.LpuBoard.l2tp:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.L2Tp
	545, // 307: huawei_devm.Devm.LpuBoards.LpuBoard.bras_pppox:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.BrasPppox
	546, // 308: huawei_devm.Devm.LpuBoards.LpuBoard.cpudefend:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Cpudefend
	547, // 309: huawei_devm.Devm.LpuBoards.LpuBoard.cpudefend_devm:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.CpudefendDevm
	548, // 310: huawei_devm.Devm.LpuBoards.LpuBoard.driver:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Driver
	549, // 311: huawei_devm.Devm.LpuBoards.LpuBoard.cmac_padding:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.CmacPadding
	550, // 312: huawei_devm.Devm.LpuBoards.LpuBoard.fim:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Fim
	551, // 313: huawei_devm.Devm.LpuBoards.LpuBoard.macmtu_discard_statistics:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.MacmtuDiscardStatistics
	552, // 314: huawei_devm.Devm.LpuBoards.LpuBoard.ve_mac_address:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.VeMacAddress
	553, // 315: huawei_devm.Devm.LpuBoards.LpuBoard.flowspec_forward:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.FlowspecForward
	554, // 316: huawei_devm.Devm.LpuBoards.LpuBoard.management_plane_defend_slot:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.ManagementPlaneDefendSlot
	555, // 317: huawei_devm.Devm.LpuBoards.LpuBoard.link_protocol_transport:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.LinkProtocolTransport
	556, // 318: huawei_devm.Devm.LpuBoards.LpuBoard.loadbalance:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Loadbalance
	557, // 319: huawei_devm.Devm.LpuBoards.LpuBoard.mac_sync:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.MacSync
	558, // 320: huawei_devm.Devm.LpuBoards.LpuBoard.mirror:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Mirror
	559, // 321: huawei_devm.Devm.LpuBoards.LpuBoard.mpls_forward:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.MplsForward
	560, // 322: huawei_devm.Devm.LpuBoards.LpuBoard.netstream:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Netstream
	561, // 323: huawei_devm.Devm.LpuBoards.LpuBoard.pbr:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Pbr
	562, // 324: huawei_devm.Devm.LpuBoards.LpuBoard.qos:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos
	563, // 325: huawei_devm.Devm.LpuBoards.LpuBoard.soc:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Soc
	564, // 326: huawei_devm.Devm.LpuBoards.LpuBoard.unicast_forward:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.UnicastForward
	565, // 327: huawei_devm.Devm.LpuBoards.LpuBoard.cfm_mac_level_enable_lpu:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.CfmMacLevelEnableLpu
	566, // 328: huawei_devm.Devm.LpuBoards.LpuBoard.dhcpv6_access:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Dhcpv6Access
	567, // 329: huawei_devm.Devm.LpuBoards.LpuBoard.frame_padding_fix:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.FramePaddingFix
	568, // 330: huawei_devm.Devm.LpuBoards.LpuBoard.ppp_net:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.PppNet
	569, // 331: huawei_devm.Devm.LpuBoards.LpuBoard.sflow:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Sflow
	570, // 332: huawei_devm.Devm.LpuBoards.LpuBoard.dcb:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Dcb
	571, // 333: huawei_devm.Devm.LpuBoards.LpuBoard.multicast_leaf_cfc_checks:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.MulticastLeafCfcChecks
	572, // 334: huawei_devm.Devm.LpuBoards.LpuBoard.Bras.flow_statistic_frequency:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Bras.FlowStatisticFrequency
	573, // 335: huawei_devm.Devm.LpuBoards.LpuBoard.Bras.vas:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Bras.Vas
	574, // 336: huawei_devm.Devm.LpuBoards.LpuBoard.Bras.multicast:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Bras.Multicast
	575, // 337: huawei_devm.Devm.LpuBoards.LpuBoard.Bras.ip_unr_host_route:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Bras.IpUnrHostRoute
	576, // 338: huawei_devm.Devm.LpuBoards.LpuBoard.Bras.block:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Bras.Block
	579, // 339: huawei_devm.Devm.LpuBoards.LpuBoard.HttpsRedirect.chasten_flow:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.HttpsRedirect.ChastenFlow
	580, // 340: huawei_devm.Devm.LpuBoards.LpuBoard.HttpsRedirect.chasten_redirect:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.HttpsRedirect.ChastenRedirect
	581, // 341: huawei_devm.Devm.LpuBoards.LpuBoard.L2Tp.icrq_limit:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.L2Tp.IcrqLimit
	582, // 342: huawei_devm.Devm.LpuBoards.LpuBoard.L2Tp.forward_mode:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.L2Tp.ForwardMode
	583, // 343: huawei_devm.Devm.LpuBoards.LpuBoard.BrasPppox.slot_access_limit:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.BrasPppox.SlotAccessLimit
	584, // 344: huawei_devm.Devm.LpuBoards.LpuBoard.BrasPppox.access_ip:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.BrasPppox.AccessIp
	585, // 345: huawei_devm.Devm.LpuBoards.LpuBoard.BrasPppox.access_ip_limit:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.BrasPppox.AccessIpLimit
	586, // 346: huawei_devm.Devm.LpuBoards.LpuBoard.BrasPppox.load_balance_identify_pppoe:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.BrasPppox.LoadBalanceIdentifyPppoe
	587, // 347: huawei_devm.Devm.LpuBoards.LpuBoard.BrasPppox.max_sessions:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.BrasPppox.MaxSessions
	588, // 348: huawei_devm.Devm.LpuBoards.LpuBoard.BrasPppox.pppoe_slot_statistic:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.BrasPppox.PppoeSlotStatistic
	589, // 349: huawei_devm.Devm.LpuBoards.LpuBoard.BrasPppox.ppp_slot_statistic:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.BrasPppox.PppSlotStatistic
	590, // 350: huawei_devm.Devm.LpuBoards.LpuBoard.BrasPppox.urpf_discard_statistics:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.BrasPppox.UrpfDiscardStatistics
	591, // 351: huawei_devm.Devm.LpuBoards.LpuBoard.BrasPppox.ppp_echo_deploy_mode:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.BrasPppox.PppEchoDeployMode
	594, // 352: huawei_devm.Devm.LpuBoards.LpuBoard.CpudefendDevm.ignore_hostcar_acl:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.CpudefendDevm.IgnoreHostcarAcl
	595, // 353: huawei_devm.Devm.LpuBoards.LpuBoard.CpudefendDevm.bras_host_cars:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.CpudefendDevm.BrasHostCars
	596, // 354: huawei_devm.Devm.LpuBoards.LpuBoard.CpudefendDevm.spu_cars:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.CpudefendDevm.SpuCars
	597, // 355: huawei_devm.Devm.LpuBoards.LpuBoard.CpudefendDevm.arp_vlan_car:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.CpudefendDevm.ArpVlanCar
	598, // 356: huawei_devm.Devm.LpuBoards.LpuBoard.CpudefendDevm.nd_vlan_car:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.CpudefendDevm.NdVlanCar
	611, // 357: huawei_devm.Devm.LpuBoards.LpuBoard.Driver.l3_clocks:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Driver.L3Clocks
	82,  // 358: huawei_devm.Devm.LpuBoards.LpuBoard.CmacPadding.padding:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.CmacPadding.Padding
	83,  // 359: huawei_devm.Devm.LpuBoards.LpuBoard.Fim.forward_mode:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Fim.ForwardMode
	84,  // 360: huawei_devm.Devm.LpuBoards.LpuBoard.Fim.vlan_miss_enable:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Fim.VlanMissEnable
	613, // 361: huawei_devm.Devm.LpuBoards.LpuBoard.FlowspecForward.ipv6_flowspec_enable:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.FlowspecForward.Ipv6FlowspecEnable
	85,  // 362: huawei_devm.Devm.LpuBoards.LpuBoard.LinkProtocolTransport.lldp:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.LinkProtocolTransport.Lldp
	86,  // 363: huawei_devm.Devm.LpuBoards.LpuBoard.LinkProtocolTransport.lacp:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.LinkProtocolTransport.Lacp
	87,  // 364: huawei_devm.Devm.LpuBoards.LpuBoard.LinkProtocolTransport.oam:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.LinkProtocolTransport.Oam
	88,  // 365: huawei_devm.Devm.LpuBoards.LpuBoard.LinkProtocolTransport.esmc:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.LinkProtocolTransport.Esmc
	614, // 366: huawei_devm.Devm.LpuBoards.LpuBoard.Loadbalance.dynamic_adjust:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Loadbalance.DynamicAdjust
	615, // 367: huawei_devm.Devm.LpuBoards.LpuBoard.Loadbalance.hash_arithmetic:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Loadbalance.HashArithmetic
	616, // 368: huawei_devm.Devm.LpuBoards.LpuBoard.Loadbalance.hash_fields:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Loadbalance.HashFields
	617, // 369: huawei_devm.Devm.LpuBoards.LpuBoard.Loadbalance.hash_seed:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Loadbalance.HashSeed
	618, // 370: huawei_devm.Devm.LpuBoards.LpuBoard.Loadbalance.hash_multipe:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Loadbalance.HashMultipe
	619, // 371: huawei_devm.Devm.LpuBoards.LpuBoard.Loadbalance.hashs:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Loadbalance.Hashs
	622, // 372: huawei_devm.Devm.LpuBoards.LpuBoard.Mirror.slot_observe:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Mirror.SlotObserve
	623, // 373: huawei_devm.Devm.LpuBoards.LpuBoard.Mirror.rate_limit_percent:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Mirror.RateLimitPercent
	624, // 374: huawei_devm.Devm.LpuBoards.LpuBoard.Mirror.observe_filters:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Mirror.ObserveFilters
	628, // 375: huawei_devm.Devm.LpuBoards.LpuBoard.MplsForward.mpls_hash_mode:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.MplsForward.MplsHashMode
	629, // 376: huawei_devm.Devm.LpuBoards.LpuBoard.MplsForward.mplsfrags:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.MplsForward.Mplsfrags
	630, // 377: huawei_devm.Devm.LpuBoards.LpuBoard.MplsForward.mpls_load_ctrwords:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.MplsForward.MplsLoadCtrwords
	631, // 378: huawei_devm.Devm.LpuBoards.LpuBoard.Netstream.sampler_modes:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Netstream.SamplerModes
	632, // 379: huawei_devm.Devm.LpuBoards.LpuBoard.Netstream.sequence_mode:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Netstream.SequenceMode
	633, // 380: huawei_devm.Devm.LpuBoards.LpuBoard.Netstream.export_hosts:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Netstream.ExportHosts
	636, // 381: huawei_devm.Devm.LpuBoards.LpuBoard.Pbr.routing_filters:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Pbr.RoutingFilters
	638, // 382: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.traffic_policy_matchs:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.TrafficPolicyMatchs
	639, // 383: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.pq_schedule_prioritys:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.PqSchedulePrioritys
	640, // 384: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.pq_schedule_priority_on_cards:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.PqSchedulePriorityOnCards
	641, // 385: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.multicast_port_queues:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.MulticastPortQueues
	642, // 386: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.multicast_port_shaping:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.MulticastPortShaping
	643, // 387: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.user_queue_pir_precision:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.UserQueuePirPrecision
	644, // 388: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.exp_phb_disable:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.ExpPhbDisable
	645, // 389: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.packet_block_thresholds:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.PacketBlockThresholds
	646, // 390: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.packet_block_threshold_all:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.PacketBlockThresholdAll
	647, // 391: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.channel_alarms:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.ChannelAlarms
	648, // 392: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.channel_profile_precision:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.ChannelProfilePrecision
	649, // 393: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.channel_profile_apply:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.ChannelProfileApply
	650, // 394: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.fabric_queue_statistic_enable:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.FabricQueueStatisticEnable
	651, // 395: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.over_ride_adjust_number:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.OverRideAdjustNumber
	652, // 396: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.over_ride_degrade_cycle:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.OverRideDegradeCycle
	653, // 397: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.over_ride_upgrade_cycle:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.OverRideUpgradeCycle
	654, // 398: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.over_ride_switch:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.OverRideSwitch
	655, // 399: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.over_ride_inbound_threshold_adjust:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.OverRideInboundThresholdAdjust
	656, // 400: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.over_ride_outbound_threshold_adjust:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.OverRideOutboundThresholdAdjust
	657, // 401: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.over_ride_monitor_number:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.OverRideMonitorNumber
	658, // 402: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.over_ride_enable_switch:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.OverRideEnableSwitch
	659, // 403: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.multicast_shaping:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.MulticastShaping
	660, // 404: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.multicast_shaping_service_template:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.MulticastShapingServiceTemplate
	661, // 405: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.port_queue_alarms:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.PortQueueAlarms
	662, // 406: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.user_queue_recovery_disable:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.UserQueueRecoveryDisable
	663, // 407: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.multicast_shapers:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.MulticastShapers
	664, // 408: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.access_user_board_schedule_enable:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.AccessUserBoardScheduleEnable
	665, // 409: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.convergent_precedence_highs:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.ConvergentPrecedenceHighs
	666, // 410: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.queue_discard_alarms:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.QueueDiscardAlarms
	667, // 411: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.user_queue_burst:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.UserQueueBurst
	668, // 412: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.burst_sizes:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.BurstSizes
	669, // 413: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.global_buffer_share_thresholds:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.GlobalBufferShareThresholds
	670, // 414: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.global_buffer_share_queues:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.GlobalBufferShareQueues
	671, // 415: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.flow_queue_backpressure_off:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.FlowQueueBackpressureOff
	672, // 416: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.traffic_policy_match_type:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.TrafficPolicyMatchType
	673, // 417: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.user_queue_resource_4cos:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.UserQueueResource4Cos
	674, // 418: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.user_queue_resource_8cos_enhances:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.UserQueueResource8CosEnhances
	675, // 419: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.channel_auto_adjust_switch:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.ChannelAutoAdjustSwitch
	676, // 420: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.over_ride_enable_inbound_switch:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.OverRideEnableInboundSwitch
	677, // 421: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.over_ride_initial_grade:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.OverRideInitialGrade
	704, // 422: huawei_devm.Devm.LpuBoards.LpuBoard.Soc.l2_loop_detect:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Soc.L2LoopDetect
	711, // 423: huawei_devm.Devm.LpuBoards.LpuBoard.UnicastForward.ipv4_uc:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.UnicastForward.Ipv4Uc
	712, // 424: huawei_devm.Devm.LpuBoards.LpuBoard.UnicastForward.arp_fast_reply:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.UnicastForward.ArpFastReply
	713, // 425: huawei_devm.Devm.LpuBoards.LpuBoard.UnicastForward.gre_ttl_mode:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.UnicastForward.GreTtlMode
	714, // 426: huawei_devm.Devm.LpuBoards.LpuBoard.UnicastForward.l3_lcs_capacitys:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.UnicastForward.L3LcsCapacitys
	715, // 427: huawei_devm.Devm.LpuBoards.LpuBoard.UnicastForward.nd_fast_reply:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.UnicastForward.NdFastReply
	716, // 428: huawei_devm.Devm.LpuBoards.LpuBoard.UnicastForward.vxlan_rdr_trunks:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.UnicastForward.VxlanRdrTrunks
	719, // 429: huawei_devm.Devm.LpuBoards.LpuBoard.PppNet.ppp_min_packet_length:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.PppNet.PppMinPacketLength
	720, // 430: huawei_devm.Devm.LpuBoards.LpuBoard.PppNet.load_balance_identify_pppoe:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.PppNet.LoadBalanceIdentifyPppoe
	721, // 431: huawei_devm.Devm.LpuBoards.LpuBoard.Sflow.slot_sampling:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Sflow.SlotSampling
	722, // 432: huawei_devm.Devm.LpuBoards.LpuBoard.Dcb.headroom_pool:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Dcb.HeadroomPool
	723, // 433: huawei_devm.Devm.LpuBoards.LpuBoard.Dcb.deadlock_recovery_behavior:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Dcb.DeadlockRecoveryBehavior
	724, // 434: huawei_devm.Devm.LpuBoards.LpuBoard.Dcb.pfc_mapping_type:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Dcb.PfcMappingType
	725, // 435: huawei_devm.Devm.LpuBoards.LpuBoard.MulticastLeafCfcChecks.multicast_leaf_cfc_check:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.MulticastLeafCfcChecks.MulticastLeafCfcCheck
	75,  // 436: huawei_devm.Devm.LpuBoards.LpuBoard.Bras.FlowStatisticFrequency.type:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Bras.FlowStatisticFrequency.Type
	577, // 437: huawei_devm.Devm.LpuBoards.LpuBoard.Bras.Vas.statistic_frequency:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Bras.Vas.StatisticFrequency
	578, // 438: huawei_devm.Devm.LpuBoards.LpuBoard.Bras.Multicast.bas_policy_cac:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Bras.Multicast.BasPolicyCac
	76,  // 439: huawei_devm.Devm.LpuBoards.LpuBoard.L2Tp.ForwardMode.mode_value:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.L2Tp.ForwardMode.ModeValue
	592, // 440: huawei_devm.Devm.LpuBoards.LpuBoard.BrasPppox.UrpfDiscardStatistics.urpf_ipv4_discard_statistic:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.BrasPppox.UrpfDiscardStatistics.UrpfIpv4DiscardStatistic
	593, // 441: huawei_devm.Devm.LpuBoards.LpuBoard.BrasPppox.UrpfDiscardStatistics.urpf_ipv6_discard_statistic:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.BrasPppox.UrpfDiscardStatistics.UrpfIpv6DiscardStatistic
	599, // 442: huawei_devm.Devm.LpuBoards.LpuBoard.CpudefendDevm.IgnoreHostcarAcl.ipv4_acl_type_by_identity:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.CpudefendDevm.IgnoreHostcarAcl.Ipv4AclType_ByIdentity
	600, // 443: huawei_devm.Devm.LpuBoards.LpuBoard.CpudefendDevm.IgnoreHostcarAcl.ipv4_acl_type_by_number:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.CpudefendDevm.IgnoreHostcarAcl.Ipv4AclType_ByNumber
	601, // 444: huawei_devm.Devm.LpuBoards.LpuBoard.CpudefendDevm.BrasHostCars.bras_host_car:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.CpudefendDevm.BrasHostCars.BrasHostCar
	605, // 445: huawei_devm.Devm.LpuBoards.LpuBoard.CpudefendDevm.SpuCars.spu_car:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.CpudefendDevm.SpuCars.SpuCar
	606, // 446: huawei_devm.Devm.LpuBoards.LpuBoard.CpudefendDevm.ArpVlanCar.level_2_car:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.CpudefendDevm.ArpVlanCar.Level2Car
	607, // 447: huawei_devm.Devm.LpuBoards.LpuBoard.CpudefendDevm.NdVlanCar.nd_attack_alarms:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.CpudefendDevm.NdVlanCar.NdAttackAlarms
	608, // 448: huawei_devm.Devm.LpuBoards.LpuBoard.CpudefendDevm.NdVlanCar.level_2_cars:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.CpudefendDevm.NdVlanCar.Level2Cars
	77,  // 449: huawei_devm.Devm.LpuBoards.LpuBoard.CpudefendDevm.BrasHostCars.BrasHostCar.type:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.CpudefendDevm.BrasHostCars.BrasHostCar.Type
	602, // 450: huawei_devm.Devm.LpuBoards.LpuBoard.CpudefendDevm.BrasHostCars.BrasHostCar.rate_limit:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.CpudefendDevm.BrasHostCars.BrasHostCar.RateLimit
	603, // 451: huawei_devm.Devm.LpuBoards.LpuBoard.CpudefendDevm.BrasHostCars.BrasHostCar.logging:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.CpudefendDevm.BrasHostCars.BrasHostCar.Logging
	604, // 452: huawei_devm.Devm.LpuBoards.LpuBoard.CpudefendDevm.BrasHostCars.BrasHostCar.attack_detect:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.CpudefendDevm.BrasHostCars.BrasHostCar.AttackDetect
	78,  // 453: huawei_devm.Devm.LpuBoards.LpuBoard.CpudefendDevm.SpuCars.SpuCar.car_type:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.CpudefendDevm.SpuCars.SpuCar.CarType
	609, // 454: huawei_devm.Devm.LpuBoards.LpuBoard.CpudefendDevm.NdVlanCar.NdAttackAlarms.nd_attack_alarm:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.CpudefendDevm.NdVlanCar.NdAttackAlarms.NdAttackAlarm
	610, // 455: huawei_devm.Devm.LpuBoards.LpuBoard.CpudefendDevm.NdVlanCar.Level2Cars.level_2_car:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.CpudefendDevm.NdVlanCar.Level2Cars.Level2Car
	79,  // 456: huawei_devm.Devm.LpuBoards.LpuBoard.CpudefendDevm.NdVlanCar.NdAttackAlarms.NdAttackAlarm.type:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.CpudefendDevm.NdVlanCar.NdAttackAlarms.NdAttackAlarm.Type
	80,  // 457: huawei_devm.Devm.LpuBoards.LpuBoard.CpudefendDevm.NdVlanCar.Level2Cars.Level2Car.type:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.CpudefendDevm.NdVlanCar.Level2Cars.Level2Car.Type
	612, // 458: huawei_devm.Devm.LpuBoards.LpuBoard.Driver.L3Clocks.l3_clock:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Driver.L3Clocks.L3Clock
	81,  // 459: huawei_devm.Devm.LpuBoards.LpuBoard.Driver.L3Clocks.L3Clock.l3_clock_state:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Driver.L3Clocks.L3Clock.L3ClockState
	89,  // 460: huawei_devm.Devm.LpuBoards.LpuBoard.Loadbalance.HashArithmetic.arithmetic:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Loadbalance.HashArithmetic.Arithmetic
	620, // 461: huawei_devm.Devm.LpuBoards.LpuBoard.Loadbalance.HashFields.hash_field:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Loadbalance.HashFields.HashField
	92,  // 462: huawei_devm.Devm.LpuBoards.LpuBoard.Loadbalance.HashMultipe.multipe_flag:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Loadbalance.HashMultipe.MultipeFlag
	621, // 463: huawei_devm.Devm.LpuBoards.LpuBoard.Loadbalance.Hashs.hash:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Loadbalance.Hashs.Hash
	90,  // 464: huawei_devm.Devm.LpuBoards.LpuBoard.Loadbalance.HashFields.HashField.trunk_ecmp:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Loadbalance.HashFields.HashField.TrunkEcmp
	91,  // 465: huawei_devm.Devm.LpuBoards.LpuBoard.Loadbalance.HashFields.HashField.material:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Loadbalance.HashFields.HashField.Material
	93,  // 466: huawei_devm.Devm.LpuBoards.LpuBoard.Loadbalance.Hashs.Hash.type:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Loadbalance.Hashs.Hash.Type
	94,  // 467: huawei_devm.Devm.LpuBoards.LpuBoard.Loadbalance.Hashs.Hash.trunk_ecmp:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Loadbalance.Hashs.Hash.TrunkEcmp
	95,  // 468: huawei_devm.Devm.LpuBoards.LpuBoard.Loadbalance.Hashs.Hash.arithmetic:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Loadbalance.Hashs.Hash.Arithmetic
	96,  // 469: huawei_devm.Devm.LpuBoards.LpuBoard.Loadbalance.Hashs.Hash.material:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Loadbalance.Hashs.Hash.Material
	625, // 470: huawei_devm.Devm.LpuBoards.LpuBoard.Mirror.ObserveFilters.observe_filter:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Mirror.ObserveFilters.ObserveFilter
	626, // 471: huawei_devm.Devm.LpuBoards.LpuBoard.Mirror.ObserveFilters.ObserveFilter.protocol_type_ppp:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Mirror.ObserveFilters.ObserveFilter.ProtocolType_Ppp
	627, // 472: huawei_devm.Devm.LpuBoards.LpuBoard.Mirror.ObserveFilters.ObserveFilter.protocol_type_ip:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Mirror.ObserveFilters.ObserveFilter.ProtocolType_Ip
	97,  // 473: huawei_devm.Devm.LpuBoards.LpuBoard.MplsForward.MplsHashMode.hashcfg:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.MplsForward.MplsHashMode.Hashcfg
	98,  // 474: huawei_devm.Devm.LpuBoards.LpuBoard.MplsForward.Mplsfrags.mplsfrag_enable:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.MplsForward.Mplsfrags.MplsfragEnable
	99,  // 475: huawei_devm.Devm.LpuBoards.LpuBoard.MplsForward.MplsLoadCtrwords.mplsload_ctrword_disable:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.MplsForward.MplsLoadCtrwords.MplsloadCtrwordDisable
	634, // 476: huawei_devm.Devm.LpuBoards.LpuBoard.Netstream.SamplerModes.sampler_mode:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Netstream.SamplerModes.SamplerMode
	102, // 477: huawei_devm.Devm.LpuBoards.LpuBoard.Netstream.SequenceMode.mode:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Netstream.SequenceMode.Mode
	635, // 478: huawei_devm.Devm.LpuBoards.LpuBoard.Netstream.ExportHosts.export_host:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Netstream.ExportHosts.ExportHost
	100, // 479: huawei_devm.Devm.LpuBoards.LpuBoard.Netstream.SamplerModes.SamplerMode.flow_type:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Netstream.SamplerModes.SamplerMode.FlowType
	101, // 480: huawei_devm.Devm.LpuBoards.LpuBoard.Netstream.SamplerModes.SamplerMode.sampler_mode:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Netstream.SamplerModes.SamplerMode.SamplerMode7
	103, // 481: huawei_devm.Devm.LpuBoards.LpuBoard.Netstream.ExportHosts.ExportHost.flow_type:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Netstream.ExportHosts.ExportHost.FlowType
	104, // 482: huawei_devm.Devm.LpuBoards.LpuBoard.Netstream.ExportHosts.ExportHost.address_type:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Netstream.ExportHosts.ExportHost.AddressType
	637, // 483: huawei_devm.Devm.LpuBoards.LpuBoard.Pbr.RoutingFilters.routing_filter:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Pbr.RoutingFilters.RoutingFilter
	105, // 484: huawei_devm.Devm.LpuBoards.LpuBoard.Pbr.RoutingFilters.RoutingFilter.type:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Pbr.RoutingFilters.RoutingFilter.Type
	106, // 485: huawei_devm.Devm.LpuBoards.LpuBoard.Pbr.RoutingFilters.RoutingFilter.routing_type:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Pbr.RoutingFilters.RoutingFilter.RoutingType
	678, // 486: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.TrafficPolicyMatchs.traffic_policy_match:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.TrafficPolicyMatchs.TrafficPolicyMatch
	679, // 487: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.PqSchedulePrioritys.pq_schedule_priority:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.PqSchedulePrioritys.PqSchedulePriority
	680, // 488: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.PqSchedulePriorityOnCards.pq_schedule_priority_on_card:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.PqSchedulePriorityOnCards.PqSchedulePriorityOnCard
	681, // 489: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.MulticastPortQueues.multicast_port_queue:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.MulticastPortQueues.MulticastPortQueue
	684, // 490: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.MulticastPortShaping.shaping_parameters_shaping_type_mode:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.MulticastPortShaping.ShapingParameters_ShapingTypeMode
	685, // 491: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.MulticastPortShaping.shaping_parameters_shaping_value_mode:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.MulticastPortShaping.ShapingParameters_ShapingValueMode
	114, // 492: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.ExpPhbDisable.forward_type:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.ExpPhbDisable.ForwardType
	686, // 493: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.PacketBlockThresholds.packet_block_threshold:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.PacketBlockThresholds.PacketBlockThreshold
	687, // 494: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.ChannelAlarms.channel_alarm:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.ChannelAlarms.ChannelAlarm
	118, // 495: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.ChannelProfilePrecision.type:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.ChannelProfilePrecision.Type
	688, // 496: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.MulticastShapingServiceTemplate.all_service_class:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.MulticastShapingServiceTemplate.AllServiceClass
	689, // 497: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.MulticastShapingServiceTemplate.specific_service_classs:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.MulticastShapingServiceTemplate.SpecificServiceClasss
	691, // 498: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.PortQueueAlarms.port_queue_alarm:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.PortQueueAlarms.PortQueueAlarm
	692, // 499: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.MulticastShapers.multicast_shaper:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.MulticastShapers.MulticastShaper
	693, // 500: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.ConvergentPrecedenceHighs.convergent_precedence_high:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.ConvergentPrecedenceHighs.ConvergentPrecedenceHigh
	694, // 501: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.QueueDiscardAlarms.queue_discard_alarm:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.QueueDiscardAlarms.QueueDiscardAlarm
	698, // 502: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.BurstSizes.burst_size:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.BurstSizes.BurstSize
	699, // 503: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.GlobalBufferShareThresholds.global_buffer_share_threshold:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.GlobalBufferShareThresholds.GlobalBufferShareThreshold
	700, // 504: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.GlobalBufferShareQueues.global_buffer_share_queue:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.GlobalBufferShareQueues.GlobalBufferShareQueue
	701, // 505: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.TrafficPolicyMatchType.destination_user:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.TrafficPolicyMatchType.DestinationUser
	702, // 506: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.TrafficPolicyMatchType.interface_acl:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.TrafficPolicyMatchType.InterfaceAcl
	703, // 507: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.UserQueueResource8CosEnhances.user_queue_resource_8cos_enhance:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.UserQueueResource8CosEnhances.UserQueueResource8CosEnhance
	128, // 508: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.ChannelAutoAdjustSwitch.auto_adjust_quantity:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.ChannelAutoAdjustSwitch.AutoAdjustQuantity
	107, // 509: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.TrafficPolicyMatchs.TrafficPolicyMatch.type:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.TrafficPolicyMatchs.TrafficPolicyMatch.Type
	108, // 510: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.PqSchedulePrioritys.PqSchedulePriority.direction:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.PqSchedulePrioritys.PqSchedulePriority.Direction
	109, // 511: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.PqSchedulePrioritys.PqSchedulePriority.mode:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.PqSchedulePrioritys.PqSchedulePriority.Mode
	110, // 512: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.PqSchedulePriorityOnCards.PqSchedulePriorityOnCard.mode:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.PqSchedulePriorityOnCards.PqSchedulePriorityOnCard.Mode
	111, // 513: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.MulticastPortQueues.MulticastPortQueue.service_class:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.MulticastPortQueues.MulticastPortQueue.ServiceClass
	112, // 514: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.MulticastPortQueues.MulticastPortQueue.queue_schedule_mode:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.MulticastPortQueues.MulticastPortQueue.QueueScheduleMode
	682, // 515: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.MulticastPortQueues.MulticastPortQueue.shaping_parameters_shaping:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.MulticastPortQueues.MulticastPortQueue.ShapingParameters_Shaping
	683, // 516: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.MulticastPortQueues.MulticastPortQueue.shaping_parameters_shaping_percent:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.MulticastPortQueues.MulticastPortQueue.ShapingParameters_ShapingPercent
	113, // 517: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.MulticastPortShaping.ShapingParameters_ShapingTypeMode.shaping_type:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.MulticastPortShaping.ShapingParameters_ShapingTypeMode.ShapingType
	115, // 518: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.PacketBlockThresholds.PacketBlockThreshold.service_class:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.PacketBlockThresholds.PacketBlockThreshold.ServiceClass
	116, // 519: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.ChannelAlarms.ChannelAlarm.alarm_type:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.ChannelAlarms.ChannelAlarm.AlarmType
	117, // 520: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.ChannelAlarms.ChannelAlarm.pool:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.ChannelAlarms.ChannelAlarm.Pool
	690, // 521: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.MulticastShapingServiceTemplate.SpecificServiceClasss.specific_service_class:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.MulticastShapingServiceTemplate.SpecificServiceClasss.SpecificServiceClass
	119, // 522: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.MulticastShapingServiceTemplate.SpecificServiceClasss.SpecificServiceClass.service_class:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.MulticastShapingServiceTemplate.SpecificServiceClasss.SpecificServiceClass.ServiceClass
	120, // 523: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.PortQueueAlarms.PortQueueAlarm.service_class:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.PortQueueAlarms.PortQueueAlarm.ServiceClass
	121, // 524: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.MulticastShapers.MulticastShaper.priority:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.MulticastShapers.MulticastShaper.Priority
	122, // 525: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.QueueDiscardAlarms.QueueDiscardAlarm.service_class:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.QueueDiscardAlarms.QueueDiscardAlarm.ServiceClass
	695, // 526: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.QueueDiscardAlarms.QueueDiscardAlarm.discard_type_bytes:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.QueueDiscardAlarms.QueueDiscardAlarm.DiscardType_Bytes
	696, // 527: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.QueueDiscardAlarms.QueueDiscardAlarm.discard_type_packets:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.QueueDiscardAlarms.QueueDiscardAlarm.DiscardType_Packets
	697, // 528: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.QueueDiscardAlarms.QueueDiscardAlarm.discard_type_packet_ratio:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.QueueDiscardAlarms.QueueDiscardAlarm.DiscardType_PacketRatio
	123, // 529: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.BurstSizes.BurstSize.service_class:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.BurstSizes.BurstSize.ServiceClass
	124, // 530: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.GlobalBufferShareThresholds.GlobalBufferShareThreshold.direction:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.GlobalBufferShareThresholds.GlobalBufferShareThreshold.Direction
	125, // 531: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.GlobalBufferShareQueues.GlobalBufferShareQueue.service_class:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.GlobalBufferShareQueues.GlobalBufferShareQueue.ServiceClass
	126, // 532: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.GlobalBufferShareQueues.GlobalBufferShareQueue.direction:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.GlobalBufferShareQueues.GlobalBufferShareQueue.Direction
	127, // 533: huawei_devm.Devm.LpuBoards.LpuBoard.Qos.UserQueueResource8CosEnhances.UserQueueResource8CosEnhance.direction:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Qos.UserQueueResource8CosEnhances.UserQueueResource8CosEnhance.Direction
	705, // 534: huawei_devm.Devm.LpuBoards.LpuBoard.Soc.L2LoopDetect.slot_l2loopdet:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Soc.L2LoopDetect.SlotL2Loopdet
	706, // 535: huawei_devm.Devm.LpuBoards.LpuBoard.Soc.L2LoopDetect.action:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Soc.L2LoopDetect.Action
	707, // 536: huawei_devm.Devm.LpuBoards.LpuBoard.Soc.L2LoopDetect.loop_level_thresholds:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Soc.L2LoopDetect.LoopLevelThresholds
	708, // 537: huawei_devm.Devm.LpuBoards.LpuBoard.Soc.L2LoopDetect.Action.shutdown:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Soc.L2LoopDetect.Action.Shutdown
	709, // 538: huawei_devm.Devm.LpuBoards.LpuBoard.Soc.L2LoopDetect.Action.trap:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Soc.L2LoopDetect.Action.Trap
	710, // 539: huawei_devm.Devm.LpuBoards.LpuBoard.Soc.L2LoopDetect.LoopLevelThresholds.loop_level_threshold:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Soc.L2LoopDetect.LoopLevelThresholds.LoopLevelThreshold
	129, // 540: huawei_devm.Devm.LpuBoards.LpuBoard.Soc.L2LoopDetect.LoopLevelThresholds.LoopLevelThreshold.interface_type:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Soc.L2LoopDetect.LoopLevelThresholds.LoopLevelThreshold.InterfaceType
	130, // 541: huawei_devm.Devm.LpuBoards.LpuBoard.UnicastForward.GreTtlMode.ttl_mode:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.UnicastForward.GreTtlMode.TtlMode
	717, // 542: huawei_devm.Devm.LpuBoards.LpuBoard.UnicastForward.L3LcsCapacitys.slot_l3_lcs_capacity:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.UnicastForward.L3LcsCapacitys.SlotL3LcsCapacity
	718, // 543: huawei_devm.Devm.LpuBoards.LpuBoard.UnicastForward.VxlanRdrTrunks.vxlan_rdr_trunk:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.UnicastForward.VxlanRdrTrunks.VxlanRdrTrunk
	131, // 544: huawei_devm.Devm.LpuBoards.LpuBoard.UnicastForward.L3LcsCapacitys.SlotL3LcsCapacity.service_type:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.UnicastForward.L3LcsCapacitys.SlotL3LcsCapacity.ServiceType
	132, // 545: huawei_devm.Devm.LpuBoards.LpuBoard.UnicastForward.VxlanRdrTrunks.VxlanRdrTrunk.redirect_type:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.UnicastForward.VxlanRdrTrunks.VxlanRdrTrunk.RedirectType
	133, // 546: huawei_devm.Devm.LpuBoards.LpuBoard.Dcb.DeadlockRecoveryBehavior.behavior:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Dcb.DeadlockRecoveryBehavior.Behavior
	134, // 547: huawei_devm.Devm.LpuBoards.LpuBoard.Dcb.PfcMappingType.type:type_name -> huawei_devm.Devm.LpuBoards.LpuBoard.Dcb.PfcMappingType.Type
	135, // 548: huawei_devm.Devm.Cards.Card.init_status:type_name -> huawei_devm.Devm.Cards.Card.InitStatus
	136, // 549: huawei_devm.Devm.Cards.Card.register_status:type_name -> huawei_devm.Devm.Cards.Card.RegisterStatus
	728, // 550: huawei_devm.Devm.Cards.Card.pic:type_name -> huawei_devm.Devm.Cards.Card.Pic
	729, // 551: huawei_devm.Devm.Cards.Card.card_tdm_param:type_name -> huawei_devm.Devm.Cards.Card.CardTdmParam
	730, // 552: huawei_devm.Devm.Cards.Card.service_mode:type_name -> huawei_devm.Devm.Cards.Card.ServiceMode
	731, // 553: huawei_devm.Devm.Cards.Card.port_group_modes:type_name -> huawei_devm.Devm.Cards.Card.PortGroupModes
	732, // 554: huawei_devm.Devm.Cards.Card.queue_priority:type_name -> huawei_devm.Devm.Cards.Card.QueuePriority
	733, // 555: huawei_devm.Devm.Cards.Card.frame_format:type_name -> huawei_devm.Devm.Cards.Card.FrameFormat
	734, // 556: huawei_devm.Devm.Cards.Card.process_mode:type_name -> huawei_devm.Devm.Cards.Card.ProcessMode
	735, // 557: huawei_devm.Devm.Cards.Card.em_set:type_name -> huawei_devm.Devm.Cards.Card.EmSet
	736, // 558: huawei_devm.Devm.Cards.Card.service_switch:type_name -> huawei_devm.Devm.Cards.Card.ServiceSwitch
	737, // 559: huawei_devm.Devm.Cards.Card.panel_slots:type_name -> huawei_devm.Devm.Cards.Card.PanelSlots
	738, // 560: huawei_devm.Devm.Cards.Card.invalid_ports:type_name -> huawei_devm.Devm.Cards.Card.InvalidPorts
	137, // 561: huawei_devm.Devm.Cards.Card.Pic.logic_status:type_name -> huawei_devm.Devm.Cards.Card.Pic.LogicStatus
	138, // 562: huawei_devm.Devm.Cards.Card.CardTdmParam.impedance:type_name -> huawei_devm.Devm.Cards.Card.CardTdmParam.Impedance
	139, // 563: huawei_devm.Devm.Cards.Card.ServiceMode.portrate:type_name -> huawei_devm.Devm.Cards.Card.ServiceMode.Portrate
	140, // 564: huawei_devm.Devm.Cards.Card.ServiceMode.bandwidth_mode:type_name -> huawei_devm.Devm.Cards.Card.ServiceMode.BandwidthMode
	739, // 565: huawei_devm.Devm.Cards.Card.PortGroupModes.port_group_mode:type_name -> huawei_devm.Devm.Cards.Card.PortGroupModes.PortGroupMode
	142, // 566: huawei_devm.Devm.Cards.Card.QueuePriority.queue_pri_enable:type_name -> huawei_devm.Devm.Cards.Card.QueuePriority.QueuePriEnable
	143, // 567: huawei_devm.Devm.Cards.Card.FrameFormat.frame_format:type_name -> huawei_devm.Devm.Cards.Card.FrameFormat.FrameFormat5
	144, // 568: huawei_devm.Devm.Cards.Card.ProcessMode.shield_mode:type_name -> huawei_devm.Devm.Cards.Card.ProcessMode.ShieldMode
	145, // 569: huawei_devm.Devm.Cards.Card.ProcessMode.fault_process_mode_status:type_name -> huawei_devm.Devm.Cards.Card.ProcessMode.FaultProcessModeStatus
	146, // 570: huawei_devm.Devm.Cards.Card.ProcessMode.process_mode:type_name -> huawei_devm.Devm.Cards.Card.ProcessMode.ProcessMode5
	147, // 571: huawei_devm.Devm.Cards.Card.EmSet.single_mode:type_name -> huawei_devm.Devm.Cards.Card.EmSet.SingleMode
	148, // 572: huawei_devm.Devm.Cards.Card.EmSet.userline_mode:type_name -> huawei_devm.Devm.Cards.Card.EmSet.UserlineMode
	149, // 573: huawei_devm.Devm.Cards.Card.ServiceSwitch.service_switch_mode:type_name -> huawei_devm.Devm.Cards.Card.ServiceSwitch.ServiceSwitchMode
	740, // 574: huawei_devm.Devm.Cards.Card.InvalidPorts.port:type_name -> huawei_devm.Devm.Cards.Card.InvalidPorts.Port
	141, // 575: huawei_devm.Devm.Cards.Card.PortGroupModes.PortGroupMode.mode_type:type_name -> huawei_devm.Devm.Cards.Card.PortGroupModes.PortGroupMode.ModeType
	150, // 576: huawei_devm.Devm.Ports.Port.admin_state:type_name -> huawei_devm.Devm.Ports.Port.AdminState
	151, // 577: huawei_devm.Devm.Ports.Port.type:type_name -> huawei_devm.Devm.Ports.Port.Type
	152, // 578: huawei_devm.Devm.Ports.Port.hard_type:type_name -> huawei_devm.Devm.Ports.Port.HardType
	153, // 579: huawei_devm.Devm.Ports.Port.loopback_mode:type_name -> huawei_devm.Devm.Ports.Port.LoopbackMode
	154, // 580: huawei_devm.Devm.Ports.Port.medium_type:type_name -> huawei_devm.Devm.Ports.Port.MediumType
	743, // 581: huawei_devm.Devm.Ports.Port.ethernet:type_name -> huawei_devm.Devm.Ports.Port.Ethernet
	744, // 582: huawei_devm.Devm.Ports.Port.laser:type_name -> huawei_devm.Devm.Ports.Port.Laser
	745, // 583: huawei_devm.Devm.Ports.Port.optical_module:type_name -> huawei_devm.Devm.Ports.Port.OpticalModule
	746, // 584: huawei_devm.Devm.Ports.Port.transmission_alarm:type_name -> huawei_devm.Devm.Ports.Port.TransmissionAlarm
	747, // 585: huawei_devm.Devm.Ports.Port.pos:type_name -> huawei_devm.Devm.Ports.Port.Pos
	748, // 586: huawei_devm.Devm.Ports.Port.atm:type_name -> huawei_devm.Devm.Ports.Port.Atm
	749, // 587: huawei_devm.Devm.Ports.Port.cpos:type_name -> huawei_devm.Devm.Ports.Port.Cpos
	750, // 588: huawei_devm.Devm.Ports.Port.port_alarm:type_name -> huawei_devm.Devm.Ports.Port.PortAlarm
	751, // 589: huawei_devm.Devm.Ports.Port.adm_port:type_name -> huawei_devm.Devm.Ports.Port.AdmPort
	752, // 590: huawei_devm.Devm.Ports.Port.phy_serial:type_name -> huawei_devm.Devm.Ports.Port.PhySerial
	753, // 591: huawei_devm.Devm.Ports.Port.phy_voice:type_name -> huawei_devm.Devm.Ports.Port.PhyVoice
	754, // 592: huawei_devm.Devm.Ports.Port.e1t1:type_name -> huawei_devm.Devm.Ports.Port.E1T1
	755, // 593: huawei_devm.Devm.Ports.Port.e3t3:type_name -> huawei_devm.Devm.Ports.Port.E3T3
	155, // 594: huawei_devm.Devm.Ports.Port.Ethernet.speed:type_name -> huawei_devm.Devm.Ports.Port.Ethernet.Speed
	156, // 595: huawei_devm.Devm.Ports.Port.Ethernet.duplex:type_name -> huawei_devm.Devm.Ports.Port.Ethernet.Duplex
	157, // 596: huawei_devm.Devm.Ports.Port.Ethernet.negotiation:type_name -> huawei_devm.Devm.Ports.Port.Ethernet.Negotiation
	158, // 597: huawei_devm.Devm.Ports.Port.Ethernet.negotiation_mode:type_name -> huawei_devm.Devm.Ports.Port.Ethernet.NegotiationMode
	159, // 598: huawei_devm.Devm.Ports.Port.Ethernet.trans_mode:type_name -> huawei_devm.Devm.Ports.Port.Ethernet.TransMode
	160, // 599: huawei_devm.Devm.Ports.Port.Ethernet.speed_switch_mode:type_name -> huawei_devm.Devm.Ports.Port.Ethernet.SpeedSwitchMode
	161, // 600: huawei_devm.Devm.Ports.Port.Ethernet.bit_error:type_name -> huawei_devm.Devm.Ports.Port.Ethernet.BitError
	162, // 601: huawei_devm.Devm.Ports.Port.Ethernet.trigger_time_type:type_name -> huawei_devm.Devm.Ports.Port.Ethernet.TriggerTimeType
	163, // 602: huawei_devm.Devm.Ports.Port.Ethernet.tx_power_cfg_type:type_name -> huawei_devm.Devm.Ports.Port.Ethernet.TxPowerCfgType
	164, // 603: huawei_devm.Devm.Ports.Port.Ethernet.fec_mode:type_name -> huawei_devm.Devm.Ports.Port.Ethernet.FecMode
	165, // 604: huawei_devm.Devm.Ports.Port.Ethernet.eth_fec_mode:type_name -> huawei_devm.Devm.Ports.Port.Ethernet.EthFecMode
	166, // 605: huawei_devm.Devm.Ports.Port.Ethernet.flowctl:type_name -> huawei_devm.Devm.Ports.Port.Ethernet.Flowctl
	167, // 606: huawei_devm.Devm.Ports.Port.Ethernet.gf_media_type:type_name -> huawei_devm.Devm.Ports.Port.Ethernet.GfMediaType
	168, // 607: huawei_devm.Devm.Ports.Port.Ethernet.hold_up:type_name -> huawei_devm.Devm.Ports.Port.Ethernet.HoldUp
	169, // 608: huawei_devm.Devm.Ports.Port.Ethernet.txipg:type_name -> huawei_devm.Devm.Ports.Port.Ethernet.Txipg
	170, // 609: huawei_devm.Devm.Ports.Port.Ethernet.switch_speed:type_name -> huawei_devm.Devm.Ports.Port.Ethernet.SwitchSpeed
	171, // 610: huawei_devm.Devm.Ports.Port.Ethernet.promiscuous_mode:type_name -> huawei_devm.Devm.Ports.Port.Ethernet.PromiscuousMode
	172, // 611: huawei_devm.Devm.Ports.Port.Ethernet.flexphy_speed:type_name -> huawei_devm.Devm.Ports.Port.Ethernet.FlexphySpeed
	173, // 612: huawei_devm.Devm.Ports.Port.Ethernet.mac_itf_mode:type_name -> huawei_devm.Devm.Ports.Port.Ethernet.MacItfMode
	174, // 613: huawei_devm.Devm.Ports.Port.Ethernet.remote_fault:type_name -> huawei_devm.Devm.Ports.Port.Ethernet.RemoteFault
	175, // 614: huawei_devm.Devm.Ports.Port.Ethernet.los_trap_down_hold:type_name -> huawei_devm.Devm.Ports.Port.Ethernet.LosTrapDownHold
	176, // 615: huawei_devm.Devm.Ports.Port.Ethernet.down_filter:type_name -> huawei_devm.Devm.Ports.Port.Ethernet.DownFilter
	177, // 616: huawei_devm.Devm.Ports.Port.Ethernet.local_fault_status:type_name -> huawei_devm.Devm.Ports.Port.Ethernet.LocalFaultStatus
	178, // 617: huawei_devm.Devm.Ports.Port.Ethernet.romote_fault_status:type_name -> huawei_devm.Devm.Ports.Port.Ethernet.RomoteFaultStatus
	756, // 618: huawei_devm.Devm.Ports.Port.Ethernet.eth_wan_attr:type_name -> huawei_devm.Devm.Ports.Port.Ethernet.EthWanAttr
	757, // 619: huawei_devm.Devm.Ports.Port.Ethernet.fec_error_statistics:type_name -> huawei_devm.Devm.Ports.Port.Ethernet.FecErrorStatistics
	179, // 620: huawei_devm.Devm.Ports.Port.Ethernet.duplex_auto:type_name -> huawei_devm.Devm.Ports.Port.Ethernet.DuplexAuto
	758, // 621: huawei_devm.Devm.Ports.Port.Ethernet.negotiation_compatible_mode:type_name -> huawei_devm.Devm.Ports.Port.Ethernet.NegotiationCompatibleMode
	180, // 622: huawei_devm.Devm.Ports.Port.Ethernet.combo_mode:type_name -> huawei_devm.Devm.Ports.Port.Ethernet.ComboMode
	181, // 623: huawei_devm.Devm.Ports.Port.Ethernet.fault_detect:type_name -> huawei_devm.Devm.Ports.Port.Ethernet.FaultDetect
	182, // 624: huawei_devm.Devm.Ports.Port.Ethernet.statistics_include_interframe:type_name -> huawei_devm.Devm.Ports.Port.Ethernet.StatisticsIncludeInterframe
	183, // 625: huawei_devm.Devm.Ports.Port.Ethernet.link_flap_protection:type_name -> huawei_devm.Devm.Ports.Port.Ethernet.LinkFlapProtection
	184, // 626: huawei_devm.Devm.Ports.Port.Ethernet.speed_autos:type_name -> huawei_devm.Devm.Ports.Port.Ethernet.SpeedAutos
	759, // 627: huawei_devm.Devm.Ports.Port.Ethernet.local_loopback_result:type_name -> huawei_devm.Devm.Ports.Port.Ethernet.LocalLoopbackResult
	185, // 628: huawei_devm.Devm.Ports.Port.Ethernet.combo:type_name -> huawei_devm.Devm.Ports.Port.Ethernet.Combo
	186, // 629: huawei_devm.Devm.Ports.Port.Ethernet.eee:type_name -> huawei_devm.Devm.Ports.Port.Ethernet.Eee
	197, // 630: huawei_devm.Devm.Ports.Port.Laser.auto_shut_enable:type_name -> huawei_devm.Devm.Ports.Port.Laser.AutoShutEnable
	198, // 631: huawei_devm.Devm.Ports.Port.Laser.status:type_name -> huawei_devm.Devm.Ports.Port.Laser.Status
	199, // 632: huawei_devm.Devm.Ports.Port.OpticalModule.trans_mode:type_name -> huawei_devm.Devm.Ports.Port.OpticalModule.TransMode
	200, // 633: huawei_devm.Devm.Ports.Port.OpticalModule.type:type_name -> huawei_devm.Devm.Ports.Port.OpticalModule.Type
	201, // 634: huawei_devm.Devm.Ports.Port.OpticalModule.fiber_type:type_name -> huawei_devm.Devm.Ports.Port.OpticalModule.FiberType
	202, // 635: huawei_devm.Devm.Ports.Port.OpticalModule.tunable:type_name -> huawei_devm.Devm.Ports.Port.OpticalModule.Tunable
	203, // 636: huawei_devm.Devm.Ports.Port.OpticalModule.direction_type:type_name -> huawei_devm.Devm.Ports.Port.OpticalModule.DirectionType
	760, // 637: huawei_devm.Devm.Ports.Port.OpticalModule.channels:type_name -> huawei_devm.Devm.Ports.Port.OpticalModule.Channels
	204, // 638: huawei_devm.Devm.Ports.Port.OpticalModule.wave_modulation_mode:type_name -> huawei_devm.Devm.Ports.Port.OpticalModule.WaveModulationMode
	205, // 639: huawei_devm.Devm.Ports.Port.OpticalModule.wavelength_channel_number:type_name -> huawei_devm.Devm.Ports.Port.OpticalModule.WavelengthChannelNumber
	761, // 640: huawei_devm.Devm.Ports.Port.OpticalModule.wave_mapping:type_name -> huawei_devm.Devm.Ports.Port.OpticalModule.WaveMapping
	206, // 641: huawei_devm.Devm.Ports.Port.OpticalModule.wavelength_channel_number_status:type_name -> huawei_devm.Devm.Ports.Port.OpticalModule.WavelengthChannelNumberStatus
	207, // 642: huawei_devm.Devm.Ports.Port.OpticalModule.power_low_protection:type_name -> huawei_devm.Devm.Ports.Port.OpticalModule.PowerLowProtection
	208, // 643: huawei_devm.Devm.Ports.Port.OpticalModule.single_fiber:type_name -> huawei_devm.Devm.Ports.Port.OpticalModule.SingleFiber
	209, // 644: huawei_devm.Devm.Ports.Port.OpticalModule.single_fiber_rx:type_name -> huawei_devm.Devm.Ports.Port.OpticalModule.SingleFiberRx
	210, // 645: huawei_devm.Devm.Ports.Port.OpticalModule.transceiver_medium_type:type_name -> huawei_devm.Devm.Ports.Port.OpticalModule.TransceiverMediumType
	211, // 646: huawei_devm.Devm.Ports.Port.OpticalModule.gain_mode:type_name -> huawei_devm.Devm.Ports.Port.OpticalModule.GainMode
	212, // 647: huawei_devm.Devm.Ports.Port.OpticalModule.optical_mode:type_name -> huawei_devm.Devm.Ports.Port.OpticalModule.OpticalMode
	213, // 648: huawei_devm.Devm.Ports.Port.OpticalModule.gain_mode_sts:type_name -> huawei_devm.Devm.Ports.Port.OpticalModule.GainModeSts
	214, // 649: huawei_devm.Devm.Ports.Port.OpticalModule.optical_mode_status:type_name -> huawei_devm.Devm.Ports.Port.OpticalModule.OpticalModeStatus
	215, // 650: huawei_devm.Devm.Ports.Port.OpticalModule.certified_state:type_name -> huawei_devm.Devm.Ports.Port.OpticalModule.CertifiedState
	216, // 651: huawei_devm.Devm.Ports.Port.OpticalModule.is_support_ddm:type_name -> huawei_devm.Devm.Ports.Port.OpticalModule.IsSupportDdm
	762, // 652: huawei_devm.Devm.Ports.Port.OpticalModule.gain_power_gain:type_name -> huawei_devm.Devm.Ports.Port.OpticalModule.GainPower_Gain
	763, // 653: huawei_devm.Devm.Ports.Port.OpticalModule.gain_power_power:type_name -> huawei_devm.Devm.Ports.Port.OpticalModule.GainPower_Power
	766, // 654: huawei_devm.Devm.Ports.Port.TransmissionAlarm.trans_alarm_ifdowns:type_name -> huawei_devm.Devm.Ports.Port.TransmissionAlarm.TransAlarmIfdowns
	218, // 655: huawei_devm.Devm.Ports.Port.Pos.frame_format:type_name -> huawei_devm.Devm.Ports.Port.Pos.FrameFormat
	219, // 656: huawei_devm.Devm.Ports.Port.Pos.crc:type_name -> huawei_devm.Devm.Ports.Port.Pos.Crc
	220, // 657: huawei_devm.Devm.Ports.Port.Pos.hold_up:type_name -> huawei_devm.Devm.Ports.Port.Pos.HoldUp
	221, // 658: huawei_devm.Devm.Ports.Port.Pos.speed:type_name -> huawei_devm.Devm.Ports.Port.Pos.Speed
	222, // 659: huawei_devm.Devm.Ports.Port.Pos.j0_mode:type_name -> huawei_devm.Devm.Ports.Port.Pos.J0Mode
	223, // 660: huawei_devm.Devm.Ports.Port.Pos.j1_mode:type_name -> huawei_devm.Devm.Ports.Port.Pos.J1Mode
	224, // 661: huawei_devm.Devm.Ports.Port.Pos.clock:type_name -> huawei_devm.Devm.Ports.Port.Pos.Clock
	225, // 662: huawei_devm.Devm.Ports.Port.Pos.scramble:type_name -> huawei_devm.Devm.Ports.Port.Pos.Scramble
	226, // 663: huawei_devm.Devm.Ports.Port.Pos.rx_j0_mode:type_name -> huawei_devm.Devm.Ports.Port.Pos.RxJ0Mode
	227, // 664: huawei_devm.Devm.Ports.Port.Pos.rx_j1_mode:type_name -> huawei_devm.Devm.Ports.Port.Pos.RxJ1Mode
	228, // 665: huawei_devm.Devm.Ports.Port.Atm.hold_up:type_name -> huawei_devm.Devm.Ports.Port.Atm.HoldUp
	229, // 666: huawei_devm.Devm.Ports.Port.Atm.j0_mode:type_name -> huawei_devm.Devm.Ports.Port.Atm.J0Mode
	230, // 667: huawei_devm.Devm.Ports.Port.Atm.j1_mode:type_name -> huawei_devm.Devm.Ports.Port.Atm.J1Mode
	231, // 668: huawei_devm.Devm.Ports.Port.Atm.clock:type_name -> huawei_devm.Devm.Ports.Port.Atm.Clock
	232, // 669: huawei_devm.Devm.Ports.Port.Atm.scramble:type_name -> huawei_devm.Devm.Ports.Port.Atm.Scramble
	233, // 670: huawei_devm.Devm.Ports.Port.Atm.flag_space_padding:type_name -> huawei_devm.Devm.Ports.Port.Atm.FlagSpacePadding
	234, // 671: huawei_devm.Devm.Ports.Port.Atm.rx_j0_mode:type_name -> huawei_devm.Devm.Ports.Port.Atm.RxJ0Mode
	235, // 672: huawei_devm.Devm.Ports.Port.Atm.rx_j1_mode:type_name -> huawei_devm.Devm.Ports.Port.Atm.RxJ1Mode
	236, // 673: huawei_devm.Devm.Ports.Port.Cpos.mapping_mode:type_name -> huawei_devm.Devm.Ports.Port.Cpos.MappingMode
	237, // 674: huawei_devm.Devm.Ports.Port.Cpos.frame_format:type_name -> huawei_devm.Devm.Ports.Port.Cpos.FrameFormat
	238, // 675: huawei_devm.Devm.Ports.Port.Cpos.multiplex:type_name -> huawei_devm.Devm.Ports.Port.Cpos.Multiplex
	239, // 676: huawei_devm.Devm.Ports.Port.Cpos.hold_up:type_name -> huawei_devm.Devm.Ports.Port.Cpos.HoldUp
	240, // 677: huawei_devm.Devm.Ports.Port.Cpos.hp_mapping_mode:type_name -> huawei_devm.Devm.Ports.Port.Cpos.HpMappingMode
	241, // 678: huawei_devm.Devm.Ports.Port.Cpos.ais_flag:type_name -> huawei_devm.Devm.Ports.Port.Cpos.AisFlag
	242, // 679: huawei_devm.Devm.Ports.Port.Cpos.tuais_flag:type_name -> huawei_devm.Devm.Ports.Port.Cpos.TuaisFlag
	243, // 680: huawei_devm.Devm.Ports.Port.Cpos.j0_mode:type_name -> huawei_devm.Devm.Ports.Port.Cpos.J0Mode
	244, // 681: huawei_devm.Devm.Ports.Port.Cpos.j1_mode:type_name -> huawei_devm.Devm.Ports.Port.Cpos.J1Mode
	245, // 682: huawei_devm.Devm.Ports.Port.Cpos.clock:type_name -> huawei_devm.Devm.Ports.Port.Cpos.Clock
	246, // 683: huawei_devm.Devm.Ports.Port.Cpos.flag_space_padding:type_name -> huawei_devm.Devm.Ports.Port.Cpos.FlagSpacePadding
	768, // 684: huawei_devm.Devm.Ports.Port.Cpos.e1t1s:type_name -> huawei_devm.Devm.Ports.Port.Cpos.E1T1S
	772, // 685: huawei_devm.Devm.Ports.Port.PortAlarm.eth_port_alarm:type_name -> huawei_devm.Devm.Ports.Port.PortAlarm.EthPortAlarm
	773, // 686: huawei_devm.Devm.Ports.Port.PortAlarm.sdh_port_alarm:type_name -> huawei_devm.Devm.Ports.Port.PortAlarm.SdhPortAlarm
	774, // 687: huawei_devm.Devm.Ports.Port.PortAlarm.pdh_port_alarm:type_name -> huawei_devm.Devm.Ports.Port.PortAlarm.PdhPortAlarm
	775, // 688: huawei_devm.Devm.Ports.Port.PortAlarm.crc_mfe_alarm:type_name -> huawei_devm.Devm.Ports.Port.PortAlarm.CrcMfeAlarm
	776, // 689: huawei_devm.Devm.Ports.Port.PortAlarm.crc_sample:type_name -> huawei_devm.Devm.Ports.Port.PortAlarm.CrcSample
	777, // 690: huawei_devm.Devm.Ports.Port.PortAlarm.alarm_type_crc_error_threshold:type_name -> huawei_devm.Devm.Ports.Port.PortAlarm.AlarmType_CrcErrorThreshold
	778, // 691: huawei_devm.Devm.Ports.Port.PortAlarm.alarm_type_link_crc:type_name -> huawei_devm.Devm.Ports.Port.PortAlarm.AlarmType_LinkCrc
	779, // 692: huawei_devm.Devm.Ports.Port.PortAlarm.alarm_type_crc_mfs_alarm:type_name -> huawei_devm.Devm.Ports.Port.PortAlarm.AlarmType_CrcMfsAlarm
	251, // 693: huawei_devm.Devm.Ports.Port.PhySerial.baudrate:type_name -> huawei_devm.Devm.Ports.Port.PhySerial.Baudrate
	252, // 694: huawei_devm.Devm.Ports.Port.PhySerial.clock_source_mode:type_name -> huawei_devm.Devm.Ports.Port.PhySerial.ClockSourceMode
	253, // 695: huawei_devm.Devm.Ports.Port.PhySerial.mux_protocol:type_name -> huawei_devm.Devm.Ports.Port.PhySerial.MuxProtocol
	254, // 696: huawei_devm.Devm.Ports.Port.PhySerial.parity:type_name -> huawei_devm.Devm.Ports.Port.PhySerial.Parity
	255, // 697: huawei_devm.Devm.Ports.Port.PhySerial.phase_clock_send:type_name -> huawei_devm.Devm.Ports.Port.PhySerial.PhaseClockSend
	256, // 698: huawei_devm.Devm.Ports.Port.PhySerial.phase_clock_rec:type_name -> huawei_devm.Devm.Ports.Port.PhySerial.PhaseClockRec
	257, // 699: huawei_devm.Devm.Ports.Port.PhySerial.physical_mode:type_name -> huawei_devm.Devm.Ports.Port.PhySerial.PhysicalMode
	258, // 700: huawei_devm.Devm.Ports.Port.PhySerial.port_mode:type_name -> huawei_devm.Devm.Ports.Port.PhySerial.PortMode
	259, // 701: huawei_devm.Devm.Ports.Port.PhySerial.work_mode:type_name -> huawei_devm.Devm.Ports.Port.PhySerial.WorkMode
	260, // 702: huawei_devm.Devm.Ports.Port.PhySerial.phase_mode:type_name -> huawei_devm.Devm.Ports.Port.PhySerial.PhaseMode
	261, // 703: huawei_devm.Devm.Ports.Port.PhySerial.detect_dsr_signal:type_name -> huawei_devm.Devm.Ports.Port.PhySerial.DetectDsrSignal
	262, // 704: huawei_devm.Devm.Ports.Port.PhySerial.detect_dtr_signal:type_name -> huawei_devm.Devm.Ports.Port.PhySerial.DetectDtrSignal
	263, // 705: huawei_devm.Devm.Ports.Port.PhySerial.detect_dcd_signal:type_name -> huawei_devm.Devm.Ports.Port.PhySerial.DetectDcdSignal
	264, // 706: huawei_devm.Devm.Ports.Port.PhySerial.detect_cts_signal:type_name -> huawei_devm.Devm.Ports.Port.PhySerial.DetectCtsSignal
	265, // 707: huawei_devm.Devm.Ports.Port.PhySerial.detect_rts_signal:type_name -> huawei_devm.Devm.Ports.Port.PhySerial.DetectRtsSignal
	785, // 708: huawei_devm.Devm.Ports.Port.PhySerial.ser_attrs:type_name -> huawei_devm.Devm.Ports.Port.PhySerial.SerAttrs
	266, // 709: huawei_devm.Devm.Ports.Port.PhyVoice.pcm_law_vaule:type_name -> huawei_devm.Devm.Ports.Port.PhyVoice.PcmLawVaule
	787, // 710: huawei_devm.Devm.Ports.Port.PhyVoice.fxo:type_name -> huawei_devm.Devm.Ports.Port.PhyVoice.Fxo
	788, // 711: huawei_devm.Devm.Ports.Port.PhyVoice.fxs:type_name -> huawei_devm.Devm.Ports.Port.PhyVoice.Fxs
	789, // 712: huawei_devm.Devm.Ports.Port.PhyVoice.em:type_name -> huawei_devm.Devm.Ports.Port.PhyVoice.Em
	267, // 713: huawei_devm.Devm.Ports.Port.PhyVoice.channel_associated_signalling_enable:type_name -> huawei_devm.Devm.Ports.Port.PhyVoice.ChannelAssociatedSignallingEnable
	279, // 714: huawei_devm.Devm.Ports.Port.E1T1.work_mode:type_name -> huawei_devm.Devm.Ports.Port.E1T1.WorkMode
	280, // 715: huawei_devm.Devm.Ports.Port.E1T1.frame_format:type_name -> huawei_devm.Devm.Ports.Port.E1T1.FrameFormat
	281, // 716: huawei_devm.Devm.Ports.Port.E1T1.clock:type_name -> huawei_devm.Devm.Ports.Port.E1T1.Clock
	282, // 717: huawei_devm.Devm.Ports.Port.E1T1.code:type_name -> huawei_devm.Devm.Ports.Port.E1T1.Code
	790, // 718: huawei_devm.Devm.Ports.Port.E1T1.channel_sets:type_name -> huawei_devm.Devm.Ports.Port.E1T1.ChannelSets
	283, // 719: huawei_devm.Devm.Ports.Port.E3T3.work_mode:type_name -> huawei_devm.Devm.Ports.Port.E3T3.WorkMode
	284, // 720: huawei_devm.Devm.Ports.Port.E3T3.clock:type_name -> huawei_devm.Devm.Ports.Port.E3T3.Clock
	285, // 721: huawei_devm.Devm.Ports.Port.E3T3.frame_format:type_name -> huawei_devm.Devm.Ports.Port.E3T3.FrameFormat
	286, // 722: huawei_devm.Devm.Ports.Port.E3T3.e3t3_flag:type_name -> huawei_devm.Devm.Ports.Port.E3T3.E3T3Flag
	187, // 723: huawei_devm.Devm.Ports.Port.Ethernet.EthWanAttr.frame_format:type_name -> huawei_devm.Devm.Ports.Port.Ethernet.EthWanAttr.FrameFormat
	188, // 724: huawei_devm.Devm.Ports.Port.Ethernet.EthWanAttr.j0_mode:type_name -> huawei_devm.Devm.Ports.Port.Ethernet.EthWanAttr.J0Mode
	189, // 725: huawei_devm.Devm.Ports.Port.Ethernet.EthWanAttr.j1_mode:type_name -> huawei_devm.Devm.Ports.Port.Ethernet.EthWanAttr.J1Mode
	190, // 726: huawei_devm.Devm.Ports.Port.Ethernet.EthWanAttr.clock:type_name -> huawei_devm.Devm.Ports.Port.Ethernet.EthWanAttr.Clock
	191, // 727: huawei_devm.Devm.Ports.Port.Ethernet.EthWanAttr.scramble:type_name -> huawei_devm.Devm.Ports.Port.Ethernet.EthWanAttr.Scramble
	192, // 728: huawei_devm.Devm.Ports.Port.Ethernet.EthWanAttr.rx_j0_mode:type_name -> huawei_devm.Devm.Ports.Port.Ethernet.EthWanAttr.RxJ0Mode
	193, // 729: huawei_devm.Devm.Ports.Port.Ethernet.EthWanAttr.rx_j1_mode:type_name -> huawei_devm.Devm.Ports.Port.Ethernet.EthWanAttr.RxJ1Mode
	194, // 730: huawei_devm.Devm.Ports.Port.Ethernet.NegotiationCompatibleMode.negotiation_compatible_mode:type_name -> huawei_devm.Devm.Ports.Port.Ethernet.NegotiationCompatibleMode.NegotiationCompatibleMode6
	195, // 731: huawei_devm.Devm.Ports.Port.Ethernet.LocalLoopbackResult.result:type_name -> huawei_devm.Devm.Ports.Port.Ethernet.LocalLoopbackResult.Result
	196, // 732: huawei_devm.Devm.Ports.Port.Ethernet.LocalLoopbackResult.link_status:type_name -> huawei_devm.Devm.Ports.Port.Ethernet.LocalLoopbackResult.LinkStatus
	764, // 733: huawei_devm.Devm.Ports.Port.OpticalModule.Channels.channel:type_name -> huawei_devm.Devm.Ports.Port.OpticalModule.Channels.Channel
	765, // 734: huawei_devm.Devm.Ports.Port.OpticalModule.WaveMapping.wave_map:type_name -> huawei_devm.Devm.Ports.Port.OpticalModule.WaveMapping.WaveMap
	767, // 735: huawei_devm.Devm.Ports.Port.TransmissionAlarm.TransAlarmIfdowns.trans_alarm_ifdown:type_name -> huawei_devm.Devm.Ports.Port.TransmissionAlarm.TransAlarmIfdowns.TransAlarmIfdown
	217, // 736: huawei_devm.Devm.Ports.Port.TransmissionAlarm.TransAlarmIfdowns.TransAlarmIfdown.alarm_type:type_name -> huawei_devm.Devm.Ports.Port.TransmissionAlarm.TransAlarmIfdowns.TransAlarmIfdown.AlarmType
	769, // 737: huawei_devm.Devm.Ports.Port.Cpos.E1T1S.e1t1:type_name -> huawei_devm.Devm.Ports.Port.Cpos.E1T1S.E1T1
	247, // 738: huawei_devm.Devm.Ports.Port.Cpos.E1T1S.E1T1.work_mode:type_name -> huawei_devm.Devm.Ports.Port.Cpos.E1T1S.E1T1.WorkMode
	248, // 739: huawei_devm.Devm.Ports.Port.Cpos.E1T1S.E1T1.clock:type_name -> huawei_devm.Devm.Ports.Port.Cpos.E1T1S.E1T1.Clock
	249, // 740: huawei_devm.Devm.Ports.Port.Cpos.E1T1S.E1T1.frame_format:type_name -> huawei_devm.Devm.Ports.Port.Cpos.E1T1S.E1T1.FrameFormat
	250, // 741: huawei_devm.Devm.Ports.Port.Cpos.E1T1S.E1T1.loopback:type_name -> huawei_devm.Devm.Ports.Port.Cpos.E1T1S.E1T1.Loopback
	770, // 742: huawei_devm.Devm.Ports.Port.Cpos.E1T1S.E1T1.channel_sets:type_name -> huawei_devm.Devm.Ports.Port.Cpos.E1T1S.E1T1.ChannelSets
	771, // 743: huawei_devm.Devm.Ports.Port.Cpos.E1T1S.E1T1.ChannelSets.channel_set:type_name -> huawei_devm.Devm.Ports.Port.Cpos.E1T1S.E1T1.ChannelSets.ChannelSet
	780, // 744: huawei_devm.Devm.Ports.Port.PortAlarm.AlarmType_CrcErrorThreshold.crc_error_threshold:type_name -> huawei_devm.Devm.Ports.Port.PortAlarm.AlarmType_CrcErrorThreshold.CrcErrorThreshold6
	781, // 745: huawei_devm.Devm.Ports.Port.PortAlarm.AlarmType_LinkCrc.link_quality:type_name -> huawei_devm.Devm.Ports.Port.PortAlarm.AlarmType_LinkCrc.LinkQuality
	782, // 746: huawei_devm.Devm.Ports.Port.PortAlarm.AlarmType_LinkCrc.crc_per_alarm:type_name -> huawei_devm.Devm.Ports.Port.PortAlarm.AlarmType_LinkCrc.CrcPerAlarm
	783, // 747: huawei_devm.Devm.Ports.Port.PortAlarm.AlarmType_LinkCrc.crc_per_warn:type_name -> huawei_devm.Devm.Ports.Port.PortAlarm.AlarmType_LinkCrc.CrcPerWarn
	784, // 748: huawei_devm.Devm.Ports.Port.PortAlarm.AlarmType_CrcMfsAlarm.crc_mfs_alarm:type_name -> huawei_devm.Devm.Ports.Port.PortAlarm.AlarmType_CrcMfsAlarm.CrcMfsAlarm6
	786, // 749: huawei_devm.Devm.Ports.Port.PhySerial.SerAttrs.ser_attr:type_name -> huawei_devm.Devm.Ports.Port.PhySerial.SerAttrs.SerAttr
	268, // 750: huawei_devm.Devm.Ports.Port.PhyVoice.Fxo.dc_imped:type_name -> huawei_devm.Devm.Ports.Port.PhyVoice.Fxo.DcImped
	269, // 751: huawei_devm.Devm.Ports.Port.PhyVoice.Fxo.ac_imped:type_name -> huawei_devm.Devm.Ports.Port.PhyVoice.Fxo.AcImped
	270, // 752: huawei_devm.Devm.Ports.Port.PhyVoice.Fxo.ring_min_dur:type_name -> huawei_devm.Devm.Ports.Port.PhyVoice.Fxo.RingMinDur
	271, // 753: huawei_devm.Devm.Ports.Port.PhyVoice.Fxo.ring_max_inter:type_name -> huawei_devm.Devm.Ports.Port.PhyVoice.Fxo.RingMaxInter
	272, // 754: huawei_devm.Devm.Ports.Port.PhyVoice.Fxo.ring_frequence:type_name -> huawei_devm.Devm.Ports.Port.PhyVoice.Fxo.RingFrequence
	273, // 755: huawei_devm.Devm.Ports.Port.PhyVoice.Fxo.ring_ac_ampli:type_name -> huawei_devm.Devm.Ports.Port.PhyVoice.Fxo.RingAcAmpli
	274, // 756: huawei_devm.Devm.Ports.Port.PhyVoice.Fxs.fxs_current:type_name -> huawei_devm.Devm.Ports.Port.PhyVoice.Fxs.FxsCurrent
	275, // 757: huawei_devm.Devm.Ports.Port.PhyVoice.Fxs.fxs_hotline_en:type_name -> huawei_devm.Devm.Ports.Port.PhyVoice.Fxs.FxsHotlineEn
	276, // 758: huawei_devm.Devm.Ports.Port.PhyVoice.Fxs.fxs_dc_imped:type_name -> huawei_devm.Devm.Ports.Port.PhyVoice.Fxs.FxsDcImped
	277, // 759: huawei_devm.Devm.Ports.Port.PhyVoice.Em.emuserline_mode:type_name -> huawei_devm.Devm.Ports.Port.PhyVoice.Em.EmuserlineMode
	278, // 760: huawei_devm.Devm.Ports.Port.PhyVoice.Em.emuserline_stat:type_name -> huawei_devm.Devm.Ports.Port.PhyVoice.Em.EmuserlineStat
	791, // 761: huawei_devm.Devm.Ports.Port.E1T1.ChannelSets.channel_set:type_name -> huawei_devm.Devm.Ports.Port.E1T1.ChannelSets.ChannelSet
	287, // 762: huawei_devm.Devm.LogicPorts.LogicPort.port_type:type_name -> huawei_devm.Devm.LogicPorts.LogicPort.PortType
	288, // 763: huawei_devm.Devm.LogicPorts.LogicPort.admin_state:type_name -> huawei_devm.Devm.LogicPorts.LogicPort.AdminState
	289, // 764: huawei_devm.Devm.LogicPorts.LogicPort.hard_type:type_name -> huawei_devm.Devm.LogicPorts.LogicPort.HardType
	290, // 765: huawei_devm.Devm.LogicPorts.LogicPort.level:type_name -> huawei_devm.Devm.LogicPorts.LogicPort.Level
	291, // 766: huawei_devm.Devm.EntityClasses.EntityClass.class_name:type_name -> huawei_devm.Devm.EntityClasses.EntityClass.ClassName
	292, // 767: huawei_devm.Devm.InconsistentEntitys.InconsistentEntity.class:type_name -> huawei_devm.Devm.InconsistentEntitys.InconsistentEntity.Class
	293, // 768: huawei_devm.Devm.InconsistentEntitys.InconsistentEntity.logical_type:type_name -> huawei_devm.Devm.InconsistentEntitys.InconsistentEntity.LogicalType
	294, // 769: huawei_devm.Devm.InconsistentEntitys.InconsistentEntity.physical_type:type_name -> huawei_devm.Devm.InconsistentEntitys.InconsistentEntity.PhysicalType
	295, // 770: huawei_devm.Devm.InconsistentEntitys.InconsistentEntity.oper_state:type_name -> huawei_devm.Devm.InconsistentEntitys.InconsistentEntity.OperState
	296, // 771: huawei_devm.Devm.OfflineCfgs.Offline.class:type_name -> huawei_devm.Devm.OfflineCfgs.Offline.Class
	297, // 772: huawei_devm.Devm.Offlines.Offline.class:type_name -> huawei_devm.Devm.Offlines.Offline.Class
	298, // 773: huawei_devm.Devm.Clockboards.Clockboard.board_type:type_name -> huawei_devm.Devm.Clockboards.Clockboard.BoardType
	299, // 774: huawei_devm.Devm.Clockboards.Clockboard.sram_state:type_name -> huawei_devm.Devm.Clockboards.Clockboard.SramState
	812, // 775: huawei_devm.Devm.Driver.Cmus.cmu:type_name -> huawei_devm.Devm.Driver.Cmus.Cmu
	828, // 776: huawei_devm.Devm.Driver.Pms.pm:type_name -> huawei_devm.Devm.Driver.Pms.Pm
	829, // 777: huawei_devm.Devm.Driver.Ccus.ccu:type_name -> huawei_devm.Devm.Driver.Ccus.Ccu
	830, // 778: huawei_devm.Devm.Driver.Dacss.dacs:type_name -> huawei_devm.Devm.Driver.Dacss.Dacs
	831, // 779: huawei_devm.Devm.Driver.Fans.fan:type_name -> huawei_devm.Devm.Driver.Fans.Fan
	832, // 780: huawei_devm.Devm.Driver.Icus.icu:type_name -> huawei_devm.Devm.Driver.Icus.Icu
	833, // 781: huawei_devm.Devm.Driver.Pmus.pmu:type_name -> huawei_devm.Devm.Driver.Pmus.Pmu
	834, // 782: huawei_devm.Devm.Driver.PowerSupplys.power_supply:type_name -> huawei_devm.Devm.Driver.PowerSupplys.PowerSupply
	837, // 783: huawei_devm.Devm.Driver.Dmus.dmu:type_name -> huawei_devm.Devm.Driver.Dmus.Dmu
	838, // 784: huawei_devm.Devm.Driver.Pdus.pdu:type_name -> huawei_devm.Devm.Driver.Pdus.Pdu
	839, // 785: huawei_devm.Devm.Driver.Vsus.vsu:type_name -> huawei_devm.Devm.Driver.Vsus.Vsu
	840, // 786: huawei_devm.Devm.Driver.Ecus.ecu:type_name -> huawei_devm.Devm.Driver.Ecus.Ecu
	841, // 787: huawei_devm.Devm.Driver.Lcds.lcd:type_name -> huawei_devm.Devm.Driver.Lcds.Lcd
	842, // 788: huawei_devm.Devm.Driver.Disks.disk:type_name -> huawei_devm.Devm.Driver.Disks.Disk
	300, // 789: huawei_devm.Devm.Driver.Cmus.Cmu.role:type_name -> huawei_devm.Devm.Driver.Cmus.Cmu.Role
	813, // 790: huawei_devm.Devm.Driver.Cmus.Cmu.cmu_switchs:type_name -> huawei_devm.Devm.Driver.Cmus.Cmu.CmuSwitchs
	814, // 791: huawei_devm.Devm.Driver.Cmus.Cmu.cmu_relays:type_name -> huawei_devm.Devm.Driver.Cmus.Cmu.CmuRelays
	815, // 792: huawei_devm.Devm.Driver.Cmus.Cmu.cmu_analogs:type_name -> huawei_devm.Devm.Driver.Cmus.Cmu.CmuAnalogs
	816, // 793: huawei_devm.Devm.Driver.Cmus.Cmu.cmu_alarms:type_name -> huawei_devm.Devm.Driver.Cmus.Cmu.CmuAlarms
	817, // 794: huawei_devm.Devm.Driver.Cmus.Cmu.switchs:type_name -> huawei_devm.Devm.Driver.Cmus.Cmu.Switchs
	818, // 795: huawei_devm.Devm.Driver.Cmus.Cmu.relays:type_name -> huawei_devm.Devm.Driver.Cmus.Cmu.Relays
	819, // 796: huawei_devm.Devm.Driver.Cmus.Cmu.analogs:type_name -> huawei_devm.Devm.Driver.Cmus.Cmu.Analogs
	820, // 797: huawei_devm.Devm.Driver.Cmus.Cmu.alarm_output:type_name -> huawei_devm.Devm.Driver.Cmus.Cmu.AlarmOutput
	821, // 798: huawei_devm.Devm.Driver.Cmus.Cmu.CmuSwitchs.cmu_switch:type_name -> huawei_devm.Devm.Driver.Cmus.Cmu.CmuSwitchs.CmuSwitch
	822, // 799: huawei_devm.Devm.Driver.Cmus.Cmu.CmuRelays.cmu_relay:type_name -> huawei_devm.Devm.Driver.Cmus.Cmu.CmuRelays.CmuRelay
	823, // 800: huawei_devm.Devm.Driver.Cmus.Cmu.CmuAnalogs.cmu_analog:type_name -> huawei_devm.Devm.Driver.Cmus.Cmu.CmuAnalogs.CmuAnalog
	824, // 801: huawei_devm.Devm.Driver.Cmus.Cmu.CmuAlarms.cmu_alarm:type_name -> huawei_devm.Devm.Driver.Cmus.Cmu.CmuAlarms.CmuAlarm
	825, // 802: huawei_devm.Devm.Driver.Cmus.Cmu.Switchs.switch:type_name -> huawei_devm.Devm.Driver.Cmus.Cmu.Switchs.Switch
	826, // 803: huawei_devm.Devm.Driver.Cmus.Cmu.Relays.relay:type_name -> huawei_devm.Devm.Driver.Cmus.Cmu.Relays.Relay
	827, // 804: huawei_devm.Devm.Driver.Cmus.Cmu.Analogs.analog:type_name -> huawei_devm.Devm.Driver.Cmus.Cmu.Analogs.Analog
	301, // 805: huawei_devm.Devm.Driver.Cmus.Cmu.CmuSwitchs.CmuSwitch.alarm_mode:type_name -> huawei_devm.Devm.Driver.Cmus.Cmu.CmuSwitchs.CmuSwitch.AlarmMode
	302, // 806: huawei_devm.Devm.Driver.Cmus.Cmu.CmuSwitchs.CmuSwitch.switch_fog:type_name -> huawei_devm.Devm.Driver.Cmus.Cmu.CmuSwitchs.CmuSwitch.SwitchFog
	303, // 807: huawei_devm.Devm.Driver.Cmus.Cmu.CmuRelays.CmuRelay.relay_alarm_mode:type_name -> huawei_devm.Devm.Driver.Cmus.Cmu.CmuRelays.CmuRelay.RelayAlarmMode
	304, // 808: huawei_devm.Devm.Driver.Cmus.Cmu.CmuAnalogs.CmuAnalog.analog_type:type_name -> huawei_devm.Devm.Driver.Cmus.Cmu.CmuAnalogs.CmuAnalog.AnalogType
	305, // 809: huawei_devm.Devm.Driver.Cmus.Cmu.CmuAnalogs.CmuAnalog.analog_object:type_name -> huawei_devm.Devm.Driver.Cmus.Cmu.CmuAnalogs.CmuAnalog.AnalogObject
	306, // 810: huawei_devm.Devm.Driver.Cmus.Cmu.CmuAlarms.CmuAlarm.alarm_level:type_name -> huawei_devm.Devm.Driver.Cmus.Cmu.CmuAlarms.CmuAlarm.AlarmLevel
	307, // 811: huawei_devm.Devm.Driver.Cmus.Cmu.Switchs.Switch.alarm_triggering_mode:type_name -> huawei_devm.Devm.Driver.Cmus.Cmu.Switchs.Switch.AlarmTriggeringMode
	308, // 812: huawei_devm.Devm.Driver.Cmus.Cmu.Switchs.Switch.sensor_name:type_name -> huawei_devm.Devm.Driver.Cmus.Cmu.Switchs.Switch.SensorName
	309, // 813: huawei_devm.Devm.Driver.Cmus.Cmu.Relays.Relay.relay_mode:type_name -> huawei_devm.Devm.Driver.Cmus.Cmu.Relays.Relay.RelayMode
	310, // 814: huawei_devm.Devm.Driver.Cmus.Cmu.Analogs.Analog.analog_object:type_name -> huawei_devm.Devm.Driver.Cmus.Cmu.Analogs.Analog.AnalogObject
	311, // 815: huawei_devm.Devm.Driver.Cmus.Cmu.Analogs.Analog.analog_sensor_type:type_name -> huawei_devm.Devm.Driver.Cmus.Cmu.Analogs.Analog.AnalogSensorType
	312, // 816: huawei_devm.Devm.Driver.Pms.Pm.single_input:type_name -> huawei_devm.Devm.Driver.Pms.Pm.SingleInput
	313, // 817: huawei_devm.Devm.Driver.Pms.Pm.monitor_cable_state:type_name -> huawei_devm.Devm.Driver.Pms.Pm.MonitorCableState
	314, // 818: huawei_devm.Devm.Driver.Pms.Pm.pm_status:type_name -> huawei_devm.Devm.Driver.Pms.Pm.PmStatus
	315, // 819: huawei_devm.Devm.Driver.Dacss.Dacs.status:type_name -> huawei_devm.Devm.Driver.Dacss.Dacs.Status
	316, // 820: huawei_devm.Devm.Driver.Fans.Fan.work_mode:type_name -> huawei_devm.Devm.Driver.Fans.Fan.WorkMode
	317, // 821: huawei_devm.Devm.Driver.Fans.Fan.monitor_cable_state:type_name -> huawei_devm.Devm.Driver.Fans.Fan.MonitorCableState
	318, // 822: huawei_devm.Devm.Driver.Fans.Fan.register:type_name -> huawei_devm.Devm.Driver.Fans.Fan.Register
	319, // 823: huawei_devm.Devm.Driver.Fans.Fan.present:type_name -> huawei_devm.Devm.Driver.Fans.Fan.Present
	320, // 824: huawei_devm.Devm.Driver.PowerSupplys.PowerSupply.work_mode:type_name -> huawei_devm.Devm.Driver.PowerSupplys.PowerSupply.WorkMode
	321, // 825: huawei_devm.Devm.Driver.PowerSupplys.PowerSupply.monitor_cable_state:type_name -> huawei_devm.Devm.Driver.PowerSupplys.PowerSupply.MonitorCableState
	835, // 826: huawei_devm.Devm.Driver.PowerSupplys.PowerSupply.power_environments:type_name -> huawei_devm.Devm.Driver.PowerSupplys.PowerSupply.PowerEnvironments
	836, // 827: huawei_devm.Devm.Driver.PowerSupplys.PowerSupply.PowerEnvironments.power_environment:type_name -> huawei_devm.Devm.Driver.PowerSupplys.PowerSupply.PowerEnvironments.PowerEnvironment
	322, // 828: huawei_devm.Devm.Driver.Pdus.Pdu.work_mode:type_name -> huawei_devm.Devm.Driver.Pdus.Pdu.WorkMode
	323, // 829: huawei_devm.Devm.Driver.Vsus.Vsu.service_type:type_name -> huawei_devm.Devm.Driver.Vsus.Vsu.ServiceType
	324, // 830: huawei_devm.Devm.Driver.Disks.Disk.type:type_name -> huawei_devm.Devm.Driver.Disks.Disk.Type
	325, // 831: huawei_devm.Devm.RemotePorts.RemotePort.loopback_mode:type_name -> huawei_devm.Devm.RemotePorts.RemotePort.LoopbackMode
	850, // 832: huawei_devm.Devm.RemotePorts.RemotePort.ethernet:type_name -> huawei_devm.Devm.RemotePorts.RemotePort.Ethernet
	851, // 833: huawei_devm.Devm.RemotePorts.RemotePort.laser:type_name -> huawei_devm.Devm.RemotePorts.RemotePort.Laser
	852, // 834: huawei_devm.Devm.RemotePorts.RemotePort.optical_module:type_name -> huawei_devm.Devm.RemotePorts.RemotePort.OpticalModule
	853, // 835: huawei_devm.Devm.RemotePorts.RemotePort.transmission_alarm:type_name -> huawei_devm.Devm.RemotePorts.RemotePort.TransmissionAlarm
	854, // 836: huawei_devm.Devm.RemotePorts.RemotePort.port_alarm:type_name -> huawei_devm.Devm.RemotePorts.RemotePort.PortAlarm
	326, // 837: huawei_devm.Devm.RemotePorts.RemotePort.Ethernet.flow_control:type_name -> huawei_devm.Devm.RemotePorts.RemotePort.Ethernet.FlowControl
	327, // 838: huawei_devm.Devm.RemotePorts.RemotePort.Ethernet.trans_mode:type_name -> huawei_devm.Devm.RemotePorts.RemotePort.Ethernet.TransMode
	328, // 839: huawei_devm.Devm.RemotePorts.RemotePort.Ethernet.hold_up:type_name -> huawei_devm.Devm.RemotePorts.RemotePort.Ethernet.HoldUp
	329, // 840: huawei_devm.Devm.RemotePorts.RemotePort.Ethernet.inter_packet_gap:type_name -> huawei_devm.Devm.RemotePorts.RemotePort.Ethernet.InterPacketGap
	855, // 841: huawei_devm.Devm.RemotePorts.RemotePort.Ethernet.eth_wan_attr:type_name -> huawei_devm.Devm.RemotePorts.RemotePort.Ethernet.EthWanAttr
	330, // 842: huawei_devm.Devm.RemotePorts.RemotePort.Ethernet.speed:type_name -> huawei_devm.Devm.RemotePorts.RemotePort.Ethernet.Speed
	331, // 843: huawei_devm.Devm.RemotePorts.RemotePort.Ethernet.duplex:type_name -> huawei_devm.Devm.RemotePorts.RemotePort.Ethernet.Duplex
	332, // 844: huawei_devm.Devm.RemotePorts.RemotePort.Ethernet.negotiation:type_name -> huawei_devm.Devm.RemotePorts.RemotePort.Ethernet.Negotiation
	333, // 845: huawei_devm.Devm.RemotePorts.RemotePort.Ethernet.negotiation_mode:type_name -> huawei_devm.Devm.RemotePorts.RemotePort.Ethernet.NegotiationMode
	334, // 846: huawei_devm.Devm.RemotePorts.RemotePort.Ethernet.gf_media_type:type_name -> huawei_devm.Devm.RemotePorts.RemotePort.Ethernet.GfMediaType
	335, // 847: huawei_devm.Devm.RemotePorts.RemotePort.Ethernet.flow_control_state:type_name -> huawei_devm.Devm.RemotePorts.RemotePort.Ethernet.FlowControlState
	341, // 848: huawei_devm.Devm.RemotePorts.RemotePort.Laser.auto_shut_enable:type_name -> huawei_devm.Devm.RemotePorts.RemotePort.Laser.AutoShutEnable
	342, // 849: huawei_devm.Devm.RemotePorts.RemotePort.OpticalModule.wavelength_channel_number:type_name -> huawei_devm.Devm.RemotePorts.RemotePort.OpticalModule.WavelengthChannelNumber
	856, // 850: huawei_devm.Devm.RemotePorts.RemotePort.TransmissionAlarm.trans_alarm_if_downs:type_name -> huawei_devm.Devm.RemotePorts.RemotePort.TransmissionAlarm.TransAlarmIfDowns
	858, // 851: huawei_devm.Devm.RemotePorts.RemotePort.PortAlarm.eth_port_alarm:type_name -> huawei_devm.Devm.RemotePorts.RemotePort.PortAlarm.EthPortAlarm
	859, // 852: huawei_devm.Devm.RemotePorts.RemotePort.PortAlarm.sdh_port_alarm:type_name -> huawei_devm.Devm.RemotePorts.RemotePort.PortAlarm.SdhPortAlarm
	860, // 853: huawei_devm.Devm.RemotePorts.RemotePort.PortAlarm.alarm_type_crc_error_threshold:type_name -> huawei_devm.Devm.RemotePorts.RemotePort.PortAlarm.AlarmType_CrcErrorThreshold
	861, // 854: huawei_devm.Devm.RemotePorts.RemotePort.PortAlarm.alarm_type_link_crc:type_name -> huawei_devm.Devm.RemotePorts.RemotePort.PortAlarm.AlarmType_LinkCrc
	336, // 855: huawei_devm.Devm.RemotePorts.RemotePort.Ethernet.EthWanAttr.frame_format:type_name -> huawei_devm.Devm.RemotePorts.RemotePort.Ethernet.EthWanAttr.FrameFormat
	337, // 856: huawei_devm.Devm.RemotePorts.RemotePort.Ethernet.EthWanAttr.j0_mode:type_name -> huawei_devm.Devm.RemotePorts.RemotePort.Ethernet.EthWanAttr.J0Mode
	338, // 857: huawei_devm.Devm.RemotePorts.RemotePort.Ethernet.EthWanAttr.j1_mode:type_name -> huawei_devm.Devm.RemotePorts.RemotePort.Ethernet.EthWanAttr.J1Mode
	339, // 858: huawei_devm.Devm.RemotePorts.RemotePort.Ethernet.EthWanAttr.clock:type_name -> huawei_devm.Devm.RemotePorts.RemotePort.Ethernet.EthWanAttr.Clock
	340, // 859: huawei_devm.Devm.RemotePorts.RemotePort.Ethernet.EthWanAttr.scramble:type_name -> huawei_devm.Devm.RemotePorts.RemotePort.Ethernet.EthWanAttr.Scramble
	857, // 860: huawei_devm.Devm.RemotePorts.RemotePort.TransmissionAlarm.TransAlarmIfDowns.trans_alarm_if_down:type_name -> huawei_devm.Devm.RemotePorts.RemotePort.TransmissionAlarm.TransAlarmIfDowns.TransAlarmIfDown
	343, // 861: huawei_devm.Devm.RemotePorts.RemotePort.TransmissionAlarm.TransAlarmIfDowns.TransAlarmIfDown.alarm_type:type_name -> huawei_devm.Devm.RemotePorts.RemotePort.TransmissionAlarm.TransAlarmIfDowns.TransAlarmIfDown.AlarmType
	862, // 862: huawei_devm.Devm.RemotePorts.RemotePort.PortAlarm.AlarmType_CrcErrorThreshold.crc_error_threshold:type_name -> huawei_devm.Devm.RemotePorts.RemotePort.PortAlarm.AlarmType_CrcErrorThreshold.CrcErrorThreshold6
	863, // 863: huawei_devm.Devm.RemotePorts.RemotePort.PortAlarm.AlarmType_LinkCrc.link_quality:type_name -> huawei_devm.Devm.RemotePorts.RemotePort.PortAlarm.AlarmType_LinkCrc.LinkQuality
	864, // 864: huawei_devm.Devm.RemotePorts.RemotePort.PortAlarm.AlarmType_LinkCrc.crc_per_alarm:type_name -> huawei_devm.Devm.RemotePorts.RemotePort.PortAlarm.AlarmType_LinkCrc.CrcPerAlarm
	865, // 865: huawei_devm.Devm.RemotePorts.RemotePort.PortAlarm.AlarmType_LinkCrc.CrcPerAlarm.crc_sample:type_name -> huawei_devm.Devm.RemotePorts.RemotePort.PortAlarm.AlarmType_LinkCrc.CrcPerAlarm.CrcSample
	866, // [866:866] is the sub-list for method output_type
	866, // [866:866] is the sub-list for method input_type
	866, // [866:866] is the sub-list for extension type_name
	866, // [866:866] is the sub-list for extension extendee
	0,   // [0:866] is the sub-list for field type_name
}

func init() { file_huawei_devm_proto_init() }
func file_huawei_devm_proto_init() {
	if File_huawei_devm_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_huawei_devm_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_PhysicalEntitys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LogicEntitys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Chassiss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LogicContainers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Containers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_SfuBoards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Cards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_CfCards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Ports); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LogicPorts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_EntityClasses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_InconsistentEntitys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_OfflineCfgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_ScheduleReboot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Offlines); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Clockboards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Driver); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_FwdPerformanceAlarms); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_FwdServicesAlarms); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_FwdReassemblyAlarms); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_FwdBoardFlowAlarms); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_ForwardCpuAlarm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_ForwardVcpuAlarm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_ActiveHardwareAlarmInfos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_HistoryHardwareAlarmInfos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_RemotePorts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_DisableHardwareAlarms); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_PhysicalEntitys_PhysicalEntity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LogicEntitys_LogicEntity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Chassiss_Chassis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Chassiss_Chassis_MonitorBoardChanges); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Chassiss_Chassis_FanAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Chassiss_Chassis_PowerSupplyAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Chassiss_Chassis_DustproofAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Chassiss_Chassis_ChassisId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Chassiss_Chassis_ChassisRunMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Chassiss_Chassis_PmInputAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Chassiss_Chassis_ChassisSfuMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Chassiss_Chassis_MonitorBoardChanges_MonitorBoardChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LogicContainers_LogicContainer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LogicContainers_LogicContainer_SupportedEntityTypes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LogicContainers_LogicContainer_SupportedEntityTypes_SupportedEntityType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Containers_Container); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Containers_Container_SupportedEntityTypes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Containers_Container_SupportedEntityTypes_SupportedEntityType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Bras); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_L2Tp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_BrasPppox); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Cpudefend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_CpudefendDevm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_CmacPadding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Fim); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_MacmtuDiscardStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_VeMacAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_ManagementPlaneDefendSlot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_LinkProtocolTransport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Loadbalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Mirror); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_MplsForward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Netstream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Pbr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Qos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Soc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_UnicastForward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_CfmMacLevelEnableMpu); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Dhcpv6Access); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_HttpsRedirect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_FramePaddingFix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_PppNet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Sflow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Dcb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Bras_FlowStatisticFrequency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Bras_Vas); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Bras_Multicast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Bras_Vas_StatisticFrequency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Bras_Multicast_BasPolicyCac); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_L2Tp_IcrqLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_L2Tp_ForwardMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_BrasPppox_SlotAccessLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_BrasPppox_AccessIp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_BrasPppox_AccessIpLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_BrasPppox_LoadBalanceIdentifyPppoe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_BrasPppox_MaxSessions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_BrasPppox_PppoeSlotStatistic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_BrasPppox_PppSlotStatistic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_BrasPppox_UrpfDiscardStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_BrasPppox_PppEchoDeployMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_BrasPppox_UrpfDiscardStatistics_UrpfIpv4DiscardStatistic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_BrasPppox_UrpfDiscardStatistics_UrpfIpv6DiscardStatistic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_CpudefendDevm_IgnoreHostcarAcl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_CpudefendDevm_ArpVlanCar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclType_ByIdentity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclType_ByNumber); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_RateLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_Logging); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_AttackDetect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_CpudefendDevm_SpuCars_SpuCar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_CpudefendDevm_ArpVlanCar_Level2Car); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_Level2Cars); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms_NdAttackAlarm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_CpudefendDevm_NdVlanCar_Level2Cars_Level2Car); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Loadbalance_DynamicAdjust); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Loadbalance_HashArithmetic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Loadbalance_HashFields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Loadbalance_HashSeed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Loadbalance_HashMultipe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Loadbalance_HashFields_HashField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Mirror_SlotObserve); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Mirror_ObserveFilters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Mirror_ObserveFilters_ObserveFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolType_Ppp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolType_Ip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_MplsForward_MplsHashMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_MplsForward_Mplsfrags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_MplsForward_MplsLoadCtrwords); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Netstream_SamplerModes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Netstream_SequenceMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Netstream_ExportHosts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Netstream_SamplerModes_SamplerMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Netstream_ExportHosts_ExportHost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Pbr_RoutingFilters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Pbr_RoutingFilters_RoutingFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Qos_PqSchedulePrioritys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Qos_PqSchedulePriorityOnCards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Qos_MulticastPortShaping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Qos_UserQueuePirPrecision); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Qos_ExpPhbDisable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Qos_PacketBlockThresholds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Qos_PacketBlockThresholdAll); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Qos_ChannelAlarms); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Qos_ChannelProfilePrecision); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Qos_ChannelProfileApply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Qos_MulticastShaping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Qos_PortQueueAlarms); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Qos_UserQueueRecoveryDisable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Qos_AccessUserBoardScheduleEnable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Qos_ConvergentPrecedenceHighs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Qos_UserQueueBurst); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Qos_BurstSizes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareThresholds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Qos_FlowQueueBackpressureOff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Qos_UserQueueResource4Cos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Qos_UserQueueResource8CosEnhances); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Qos_PqSchedulePriorityOnCards_PqSchedulePriorityOnCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParameters_Shaping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParameters_ShapingPercent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingTypeMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingValueMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Qos_ChannelAlarms_ChannelAlarm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Qos_PortQueueAlarms_PortQueueAlarm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Qos_ConvergentPrecedenceHighs_ConvergentPrecedenceHigh); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType_Bytes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType_Packets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType_PacketRatio); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Qos_BurstSizes_BurstSize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareThresholds_GlobalBufferShareThreshold); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchType_DestinationUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Qos_TrafficPolicyMatchType_InterfaceAcl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Qos_UserQueueResource8CosEnhances_UserQueueResource8CosEnhance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_SlotL2Loopdet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_Action); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_LoopLevelThresholds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_Action_Shutdown); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_Action_Trap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Soc_L2LoopDetect_LoopLevelThresholds_LoopLevelThreshold); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_UnicastForward_Ipv4Uc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_UnicastForward_ArpFastReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_UnicastForward_GreTtlMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[189].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_UnicastForward_NdFastReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[190].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_HttpsRedirect_ChastenFlow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[191].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_HttpsRedirect_ChastenRedirect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[192].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_PppNet_LoadBalanceIdentifyPppoe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[193].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Sflow_SlotSampling); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[194].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Dcb_HeadroomPool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[195].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Dcb_DeadlockRecoveryBehavior); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[196].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_MpuBoards_MpuBoard_Dcb_PfcMappingType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[197].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[198].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Bras); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[199].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_HttpsRedirect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[200].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_L2Tp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[201].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_BrasPppox); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[202].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Cpudefend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[203].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_CpudefendDevm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[204].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Driver); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[205].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_CmacPadding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[206].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Fim); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[207].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_MacmtuDiscardStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[208].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_VeMacAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[209].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_FlowspecForward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[210].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_ManagementPlaneDefendSlot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[211].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_LinkProtocolTransport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[212].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Loadbalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[213].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_MacSync); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[214].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Mirror); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[215].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_MplsForward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[216].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Netstream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[217].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Pbr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[218].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Qos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[219].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Soc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[220].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_UnicastForward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[221].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_CfmMacLevelEnableLpu); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[222].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Dhcpv6Access); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[223].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_FramePaddingFix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[224].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_PppNet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[225].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Sflow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[226].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Dcb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[227].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_MulticastLeafCfcChecks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[228].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Bras_FlowStatisticFrequency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[229].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Bras_Vas); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[230].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Bras_Multicast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[231].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Bras_IpUnrHostRoute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[232].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Bras_Block); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[233].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Bras_Vas_StatisticFrequency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[234].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Bras_Multicast_BasPolicyCac); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[235].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_HttpsRedirect_ChastenFlow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[236].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_HttpsRedirect_ChastenRedirect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[237].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_L2Tp_IcrqLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[238].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_L2Tp_ForwardMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[239].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_BrasPppox_SlotAccessLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[240].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_BrasPppox_AccessIp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[241].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_BrasPppox_AccessIpLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[242].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_BrasPppox_LoadBalanceIdentifyPppoe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[243].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_BrasPppox_MaxSessions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[244].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_BrasPppox_PppoeSlotStatistic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[245].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_BrasPppox_PppSlotStatistic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[246].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_BrasPppox_UrpfDiscardStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[247].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_BrasPppox_PppEchoDeployMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[248].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_BrasPppox_UrpfDiscardStatistics_UrpfIpv4DiscardStatistic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[249].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_BrasPppox_UrpfDiscardStatistics_UrpfIpv6DiscardStatistic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[250].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_CpudefendDevm_IgnoreHostcarAcl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[251].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[252].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[253].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_CpudefendDevm_ArpVlanCar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[254].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[255].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclType_ByIdentity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[256].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclType_ByNumber); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[257].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[258].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_RateLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[259].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_Logging); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[260].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_CpudefendDevm_BrasHostCars_BrasHostCar_AttackDetect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[261].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_CpudefendDevm_SpuCars_SpuCar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[262].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_CpudefendDevm_ArpVlanCar_Level2Car); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[263].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[264].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_Level2Cars); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[265].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_NdAttackAlarms_NdAttackAlarm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[266].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_CpudefendDevm_NdVlanCar_Level2Cars_Level2Car); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[267].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Driver_L3Clocks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[268].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Driver_L3Clocks_L3Clock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[269].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_FlowspecForward_Ipv6FlowspecEnable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[270].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Loadbalance_DynamicAdjust); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[271].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Loadbalance_HashArithmetic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[272].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Loadbalance_HashFields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[273].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Loadbalance_HashSeed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[274].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Loadbalance_HashMultipe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[275].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Loadbalance_Hashs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[276].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Loadbalance_HashFields_HashField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[277].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Loadbalance_Hashs_Hash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[278].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Mirror_SlotObserve); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[279].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Mirror_RateLimitPercent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[280].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Mirror_ObserveFilters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[281].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Mirror_ObserveFilters_ObserveFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[282].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolType_Ppp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[283].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolType_Ip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[284].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_MplsForward_MplsHashMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[285].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_MplsForward_Mplsfrags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[286].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_MplsForward_MplsLoadCtrwords); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[287].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Netstream_SamplerModes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[288].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Netstream_SequenceMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[289].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Netstream_ExportHosts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[290].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Netstream_SamplerModes_SamplerMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[291].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Netstream_ExportHosts_ExportHost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[292].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Pbr_RoutingFilters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[293].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Pbr_RoutingFilters_RoutingFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[294].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[295].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Qos_PqSchedulePrioritys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[296].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Qos_PqSchedulePriorityOnCards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[297].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[298].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Qos_MulticastPortShaping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[299].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Qos_UserQueuePirPrecision); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[300].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Qos_ExpPhbDisable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[301].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Qos_PacketBlockThresholds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[302].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Qos_PacketBlockThresholdAll); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[303].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Qos_ChannelAlarms); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[304].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Qos_ChannelProfilePrecision); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[305].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Qos_ChannelProfileApply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[306].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Qos_FabricQueueStatisticEnable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[307].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Qos_OverRideAdjustNumber); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[308].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Qos_OverRideDegradeCycle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[309].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Qos_OverRideUpgradeCycle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[310].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Qos_OverRideSwitch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[311].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Qos_OverRideInboundThresholdAdjust); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[312].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Qos_OverRideOutboundThresholdAdjust); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[313].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Qos_OverRideMonitorNumber); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[314].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Qos_OverRideEnableSwitch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[315].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Qos_MulticastShaping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[316].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[317].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Qos_PortQueueAlarms); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[318].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Qos_UserQueueRecoveryDisable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[319].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Qos_MulticastShapers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[320].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Qos_AccessUserBoardScheduleEnable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[321].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Qos_ConvergentPrecedenceHighs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[322].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[323].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Qos_UserQueueBurst); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[324].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Qos_BurstSizes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[325].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareThresholds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[326].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[327].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Qos_FlowQueueBackpressureOff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[328].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[329].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Qos_UserQueueResource4Cos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[330].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Qos_UserQueueResource8CosEnhances); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[331].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Qos_ChannelAutoAdjustSwitch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[332].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Qos_OverRideEnableInboundSwitch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[333].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Qos_OverRideInitialGrade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[334].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchs_TrafficPolicyMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[335].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Qos_PqSchedulePrioritys_PqSchedulePriority); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[336].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Qos_PqSchedulePriorityOnCards_PqSchedulePriorityOnCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[337].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[338].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParameters_Shaping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[339].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParameters_ShapingPercent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[340].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingTypeMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[341].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Qos_MulticastPortShaping_ShapingParameters_ShapingValueMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[342].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Qos_PacketBlockThresholds_PacketBlockThreshold); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[343].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Qos_ChannelAlarms_ChannelAlarm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[344].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate_AllServiceClass); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[345].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate_SpecificServiceClasss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[346].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Qos_MulticastShapingServiceTemplate_SpecificServiceClasss_SpecificServiceClass); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[347].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Qos_PortQueueAlarms_PortQueueAlarm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[348].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Qos_MulticastShapers_MulticastShaper); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[349].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Qos_ConvergentPrecedenceHighs_ConvergentPrecedenceHigh); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[350].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[351].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType_Bytes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[352].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType_Packets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[353].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardType_PacketRatio); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[354].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Qos_BurstSizes_BurstSize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[355].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareThresholds_GlobalBufferShareThreshold); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[356].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Qos_GlobalBufferShareQueues_GlobalBufferShareQueue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[357].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchType_DestinationUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[358].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Qos_TrafficPolicyMatchType_InterfaceAcl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[359].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Qos_UserQueueResource8CosEnhances_UserQueueResource8CosEnhance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[360].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[361].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_SlotL2Loopdet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[362].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_Action); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[363].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_LoopLevelThresholds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[364].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_Action_Shutdown); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[365].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_Action_Trap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[366].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Soc_L2LoopDetect_LoopLevelThresholds_LoopLevelThreshold); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[367].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_UnicastForward_Ipv4Uc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[368].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_UnicastForward_ArpFastReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[369].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_UnicastForward_GreTtlMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[370].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_UnicastForward_L3LcsCapacitys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[371].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_UnicastForward_NdFastReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[372].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_UnicastForward_VxlanRdrTrunks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[373].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_UnicastForward_L3LcsCapacitys_SlotL3LcsCapacity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[374].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_UnicastForward_VxlanRdrTrunks_VxlanRdrTrunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[375].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_PppNet_PppMinPacketLength); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[376].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_PppNet_LoadBalanceIdentifyPppoe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[377].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Sflow_SlotSampling); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[378].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Dcb_HeadroomPool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[379].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Dcb_DeadlockRecoveryBehavior); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[380].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_Dcb_PfcMappingType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[381].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LpuBoards_LpuBoard_MulticastLeafCfcChecks_MulticastLeafCfcCheck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[382].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_SfuBoards_SfuBoard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[383].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Cards_Card); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[384].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Cards_Card_Pic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[385].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Cards_Card_CardTdmParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[386].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Cards_Card_ServiceMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[387].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Cards_Card_PortGroupModes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[388].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Cards_Card_QueuePriority); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[389].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Cards_Card_FrameFormat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[390].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Cards_Card_ProcessMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[391].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Cards_Card_EmSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[392].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Cards_Card_ServiceSwitch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[393].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Cards_Card_PanelSlots); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[394].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Cards_Card_InvalidPorts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[395].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Cards_Card_PortGroupModes_PortGroupMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[396].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Cards_Card_InvalidPorts_Port); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[397].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_CfCards_CfCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[398].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Ports_Port); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[399].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Ports_Port_Ethernet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[400].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Ports_Port_Laser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[401].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Ports_Port_OpticalModule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[402].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Ports_Port_TransmissionAlarm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[403].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Ports_Port_Pos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[404].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Ports_Port_Atm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[405].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Ports_Port_Cpos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[406].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Ports_Port_PortAlarm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[407].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Ports_Port_AdmPort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[408].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Ports_Port_PhySerial); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[409].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Ports_Port_PhyVoice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[410].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Ports_Port_E1T1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[411].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Ports_Port_E3T3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[412].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Ports_Port_Ethernet_EthWanAttr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[413].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Ports_Port_Ethernet_FecErrorStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[414].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Ports_Port_Ethernet_NegotiationCompatibleMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[415].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Ports_Port_Ethernet_LocalLoopbackResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[416].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Ports_Port_OpticalModule_Channels); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[417].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Ports_Port_OpticalModule_WaveMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[418].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Ports_Port_OpticalModule_GainPower_Gain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[419].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Ports_Port_OpticalModule_GainPower_Power); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[420].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Ports_Port_OpticalModule_Channels_Channel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[421].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Ports_Port_OpticalModule_WaveMapping_WaveMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[422].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[423].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Ports_Port_TransmissionAlarm_TransAlarmIfdowns_TransAlarmIfdown); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[424].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Ports_Port_Cpos_E1T1S); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[425].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Ports_Port_Cpos_E1T1S_E1T1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[426].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Ports_Port_Cpos_E1T1S_E1T1_ChannelSets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[427].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Ports_Port_Cpos_E1T1S_E1T1_ChannelSets_ChannelSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[428].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Ports_Port_PortAlarm_EthPortAlarm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[429].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Ports_Port_PortAlarm_SdhPortAlarm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[430].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Ports_Port_PortAlarm_PdhPortAlarm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[431].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Ports_Port_PortAlarm_CrcMfeAlarm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[432].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Ports_Port_PortAlarm_CrcSample); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[433].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Ports_Port_PortAlarm_AlarmType_CrcErrorThreshold); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[434].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Ports_Port_PortAlarm_AlarmType_LinkCrc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[435].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Ports_Port_PortAlarm_AlarmType_CrcMfsAlarm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[436].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Ports_Port_PortAlarm_AlarmType_CrcErrorThreshold_CrcErrorThreshold6); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[437].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Ports_Port_PortAlarm_AlarmType_LinkCrc_LinkQuality); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[438].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Ports_Port_PortAlarm_AlarmType_LinkCrc_CrcPerAlarm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[439].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Ports_Port_PortAlarm_AlarmType_LinkCrc_CrcPerWarn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[440].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Ports_Port_PortAlarm_AlarmType_CrcMfsAlarm_CrcMfsAlarm6); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[441].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Ports_Port_PhySerial_SerAttrs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[442].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Ports_Port_PhySerial_SerAttrs_SerAttr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[443].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Ports_Port_PhyVoice_Fxo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[444].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Ports_Port_PhyVoice_Fxs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[445].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Ports_Port_PhyVoice_Em); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[446].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Ports_Port_E1T1_ChannelSets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[447].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Ports_Port_E1T1_ChannelSets_ChannelSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[448].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_LogicPorts_LogicPort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[449].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_EntityClasses_EntityClass); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[450].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_InconsistentEntitys_InconsistentEntity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[451].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_OfflineCfgs_Offline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[452].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Offlines_Offline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[453].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Clockboards_Clockboard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[454].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Driver_Cmus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[455].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Driver_Pms); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[456].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Driver_Ccus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[457].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Driver_Dacss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[458].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Driver_Fans); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[459].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Driver_Icus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[460].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Driver_Pmus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[461].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Driver_PowerSupplys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[462].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Driver_Dmus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[463].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Driver_Pdus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[464].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Driver_Vsus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[465].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Driver_Ecus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[466].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Driver_Lcds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[467].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Driver_Disks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[468].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Driver_Cmus_Cmu); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[469].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Driver_Cmus_Cmu_CmuSwitchs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[470].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Driver_Cmus_Cmu_CmuRelays); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[471].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Driver_Cmus_Cmu_CmuAnalogs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[472].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Driver_Cmus_Cmu_CmuAlarms); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[473].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Driver_Cmus_Cmu_Switchs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[474].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Driver_Cmus_Cmu_Relays); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[475].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Driver_Cmus_Cmu_Analogs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[476].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Driver_Cmus_Cmu_AlarmOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[477].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Driver_Cmus_Cmu_CmuSwitchs_CmuSwitch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[478].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Driver_Cmus_Cmu_CmuRelays_CmuRelay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[479].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Driver_Cmus_Cmu_CmuAnalogs_CmuAnalog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[480].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Driver_Cmus_Cmu_CmuAlarms_CmuAlarm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[481].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Driver_Cmus_Cmu_Switchs_Switch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[482].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Driver_Cmus_Cmu_Relays_Relay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[483].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Driver_Cmus_Cmu_Analogs_Analog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[484].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Driver_Pms_Pm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[485].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Driver_Ccus_Ccu); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[486].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Driver_Dacss_Dacs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[487].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Driver_Fans_Fan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[488].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Driver_Icus_Icu); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[489].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Driver_Pmus_Pmu); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[490].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Driver_PowerSupplys_PowerSupply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[491].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Driver_PowerSupplys_PowerSupply_PowerEnvironments); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[492].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Driver_PowerSupplys_PowerSupply_PowerEnvironments_PowerEnvironment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[493].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Driver_Dmus_Dmu); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[494].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Driver_Pdus_Pdu); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[495].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Driver_Vsus_Vsu); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[496].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Driver_Ecus_Ecu); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[497].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Driver_Lcds_Lcd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[498].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_Driver_Disks_Disk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[499].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_FwdPerformanceAlarms_FwdPerformanceAlarm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[500].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_FwdServicesAlarms_FwdServicesAlarm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[501].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_FwdReassemblyAlarms_FwdReassemblyAlarm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[502].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_FwdBoardFlowAlarms_FwdBoardFlowAlarm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[503].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_ActiveHardwareAlarmInfos_ActiveHardwareAlarmInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[504].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_HistoryHardwareAlarmInfos_HistoryHardwareAlarmInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[505].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_RemotePorts_RemotePort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[506].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_RemotePorts_RemotePort_Ethernet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[507].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_RemotePorts_RemotePort_Laser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[508].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_RemotePorts_RemotePort_OpticalModule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[509].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_RemotePorts_RemotePort_TransmissionAlarm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[510].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_RemotePorts_RemotePort_PortAlarm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[511].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_RemotePorts_RemotePort_Ethernet_EthWanAttr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[512].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[513].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_RemotePorts_RemotePort_TransmissionAlarm_TransAlarmIfDowns_TransAlarmIfDown); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[514].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_RemotePorts_RemotePort_PortAlarm_EthPortAlarm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[515].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_RemotePorts_RemotePort_PortAlarm_SdhPortAlarm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[516].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_CrcErrorThreshold); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[517].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_LinkCrc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[518].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_CrcErrorThreshold_CrcErrorThreshold6); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[519].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_LinkCrc_LinkQuality); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[520].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_LinkCrc_CrcPerAlarm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[521].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_RemotePorts_RemotePort_PortAlarm_AlarmType_LinkCrc_CrcPerAlarm_CrcSample); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_devm_proto_msgTypes[522].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devm_DisableHardwareAlarms_DisableHardwareAlarm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_huawei_devm_proto_msgTypes[93].OneofWrappers = []interface{}{
		(*Devm_MpuBoards_MpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclTypeByIdentity)(nil),
		(*Devm_MpuBoards_MpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclTypeByNumber)(nil),
	}
	file_huawei_devm_proto_msgTypes[118].OneofWrappers = []interface{}{
		(*Devm_MpuBoards_MpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolTypePpp)(nil),
		(*Devm_MpuBoards_MpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolTypeIp)(nil),
	}
	file_huawei_devm_proto_msgTypes[135].OneofWrappers = []interface{}{
		(*Devm_MpuBoards_MpuBoard_Qos_MulticastPortShaping_ShapingParametersShapingTypeMode)(nil),
		(*Devm_MpuBoards_MpuBoard_Qos_MulticastPortShaping_ShapingParametersShapingValueMode)(nil),
	}
	file_huawei_devm_proto_msgTypes[160].OneofWrappers = []interface{}{
		(*Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParametersShaping)(nil),
		(*Devm_MpuBoards_MpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParametersShapingPercent)(nil),
	}
	file_huawei_devm_proto_msgTypes[169].OneofWrappers = []interface{}{
		(*Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardTypeBytes)(nil),
		(*Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardTypePackets)(nil),
		(*Devm_MpuBoards_MpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardTypePacketRatio)(nil),
	}
	file_huawei_devm_proto_msgTypes[250].OneofWrappers = []interface{}{
		(*Devm_LpuBoards_LpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclTypeByIdentity)(nil),
		(*Devm_LpuBoards_LpuBoard_CpudefendDevm_IgnoreHostcarAcl_Ipv4AclTypeByNumber)(nil),
	}
	file_huawei_devm_proto_msgTypes[281].OneofWrappers = []interface{}{
		(*Devm_LpuBoards_LpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolTypePpp)(nil),
		(*Devm_LpuBoards_LpuBoard_Mirror_ObserveFilters_ObserveFilter_ProtocolTypeIp)(nil),
	}
	file_huawei_devm_proto_msgTypes[298].OneofWrappers = []interface{}{
		(*Devm_LpuBoards_LpuBoard_Qos_MulticastPortShaping_ShapingParametersShapingTypeMode)(nil),
		(*Devm_LpuBoards_LpuBoard_Qos_MulticastPortShaping_ShapingParametersShapingValueMode)(nil),
	}
	file_huawei_devm_proto_msgTypes[337].OneofWrappers = []interface{}{
		(*Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParametersShaping)(nil),
		(*Devm_LpuBoards_LpuBoard_Qos_MulticastPortQueues_MulticastPortQueue_ShapingParametersShapingPercent)(nil),
	}
	file_huawei_devm_proto_msgTypes[350].OneofWrappers = []interface{}{
		(*Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardTypeBytes)(nil),
		(*Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardTypePackets)(nil),
		(*Devm_LpuBoards_LpuBoard_Qos_QueueDiscardAlarms_QueueDiscardAlarm_DiscardTypePacketRatio)(nil),
	}
	file_huawei_devm_proto_msgTypes[401].OneofWrappers = []interface{}{
		(*Devm_Ports_Port_OpticalModule_GainPowerGain)(nil),
		(*Devm_Ports_Port_OpticalModule_GainPowerPower)(nil),
	}
	file_huawei_devm_proto_msgTypes[406].OneofWrappers = []interface{}{
		(*Devm_Ports_Port_PortAlarm_AlarmTypeCrcErrorThreshold)(nil),
		(*Devm_Ports_Port_PortAlarm_AlarmTypeLinkCrc)(nil),
		(*Devm_Ports_Port_PortAlarm_AlarmTypeCrcMfsAlarm)(nil),
	}
	file_huawei_devm_proto_msgTypes[510].OneofWrappers = []interface{}{
		(*Devm_RemotePorts_RemotePort_PortAlarm_AlarmTypeCrcErrorThreshold)(nil),
		(*Devm_RemotePorts_RemotePort_PortAlarm_AlarmTypeLinkCrc)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_huawei_devm_proto_rawDesc,
			NumEnums:      344,
			NumMessages:   523,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_huawei_devm_proto_goTypes,
		DependencyIndexes: file_huawei_devm_proto_depIdxs,
		EnumInfos:         file_huawei_devm_proto_enumTypes,
		MessageInfos:      file_huawei_devm_proto_msgTypes,
	}.Build()
	File_huawei_devm_proto = out.File
	file_huawei_devm_proto_rawDesc = nil
	file_huawei_devm_proto_goTypes = nil
	file_huawei_devm_proto_depIdxs = nil
}
